{
  "address": "0x31943943f23d357379d166E3d475F8A00D14FF0e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ARB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ARB_WETH_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAMELOT_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GMX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GMX_WETH_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GNS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GNS_WETH_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JOE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JOEV21_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LDO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LDO_WETH_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNIV3_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_USDC_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_USDT_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WOM",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WOM_USDT_FEE",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getUniV3Path",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "routerTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "setRouterType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3851677ecd959f49f797c03f177633773010d2ece1fd2619660740559d49447",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0x31943943f23d357379d166E3d475F8A00D14FF0e",
    "transactionIndex": 1,
    "gasUsed": "7522587",
    "logsBloom": "0x
    "blockHash": "0x69e769cc83aac02fe4f5b14a8ffa14e060718f2135ac5d471d1a79d1a868ad6f",
    "transactionHash": "0xc3851677ecd959f49f797c03f177633773010d2ece1fd2619660740559d49447",
    "logs": [],
    "blockNumber": 103004480,
    "cumulativeGasUsed": "7522587",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "4cb2e6af1d192fab52634a0252889f9a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ARB_WETH_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAMELOT_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GMX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GMX_WETH_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNS_WETH_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JOE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JOEV21_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LDO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LDO_WETH_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIV3_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_USDC_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_USDT_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WOM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WOM_USDT_FEE\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUniV3Path\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"setRouterType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/swapHelper/SwapHelper.sol\":\"SwapHelper\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363837323433363737323135\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/swapHelper/ICamelotRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface ICamelotRouter {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        address referrer,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbc88d9150e6124605830ea0ef9ca51f0dace715f89551d6bf52f84fde8164cd8\",\"license\":\"MIT\"},\"src/swapHelper/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILBRouter {\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getSwapIn(\\n        address LBPair,\\n        uint128 amountOut,\\n        bool swapForY\\n    )\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(\\n        address LBPair,\\n        uint128 amountIn,\\n        bool swapForY\\n    )\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x66cfe35580e5c58cad3d0fa5f596c667952dde4702ae65f2825411e2412b5609\",\"license\":\"MIT\"},\"src/swapHelper/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xdc51736c32ed45042b442718e47553fcf6fb6d9a288c73b17f57c2c135e599a5\",\"license\":\"MIT\"},\"src/swapHelper/SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\nimport \\\"../util/OwnableWithoutContextUpgradeable.sol\\\";\\n\\nimport \\\"./ISwapRouter.sol\\\";\\nimport \\\"./ILBRouter.sol\\\";\\nimport \\\"./ICamelotRouter.sol\\\";\\n\\npragma solidity ^0.8.13;\\n\\ncontract SwapHelper is OwnableWithoutContextUpgradeable {\\n    // Swap USDC to get protocol native tokens\\n    address public constant USDC = 0xaf88d065e77c8cC2239327C5EDb3A432268e5831;\\n    address public constant USDT = 0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9;\\n    address public constant WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\n\\n    // Uniswap V3\\n    address public constant GMX = 0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a;\\n    address public constant GNS = 0x18c11FD286C5EC11c3b683Caa813B77f5163A122;\\n    address public constant WOM = 0x7B5EB3940021Ec0e8e463D5dBB4B7B09a89DDF96;\\n    address public constant LDO = 0x13Ad51ed4F1B7e9Dc168d8a00cB3f4dDD85EfA60;\\n    address public constant ARB = 0x912CE59144191C1204E64559FE8253a0e49E6548;\\n\\n    // TraderJoe Liquidity Book V2_1\\n    address public constant JOE = 0x371c7ec6D8039ff7933a2AA28EB827Ffe1F52f07;\\n\\n    address public constant UNIV3_ROUTER =\\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n    address public constant JOEV21_ROUTER =\\n        0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30;\\n    address public constant CAMELOT_ROUTER =\\n        0xc873fEcbd354f5A56E00E710B90EF4201db2448d;\\n\\n    // Fee rate in Uniswap V3\\n    uint24 public constant WETH_USDC_FEE = 500; // 0.05%\\n    uint24 public constant WETH_USDT_FEE = 500; // 0.05%\\n\\n    uint24 public constant WOM_USDT_FEE = 3000;\\n\\n    uint24 public constant GMX_WETH_FEE = 3000;\\n    uint24 public constant GNS_WETH_FEE = 3000;\\n    uint24 public constant LDO_WETH_FEE = 3000;\\n    uint24 public constant ARB_WETH_FEE = 500;\\n\\n    // Router types:\\n    // 1: Uniswap V3\\n    // 2: Trader Joe V2.1\\n    mapping(address => uint256) public routerTypes;\\n\\n    // Pool fees for those tokens that uses Uniswap V3\\n    // The pair may be token-USDC or token-USDT or token-WETH\\n    mapping(address => uint256) public poolFees;\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n\\n        routerTypes[GMX] = 1;\\n        routerTypes[GNS] = 1;\\n\\n        routerTypes[LDO] = 1;\\n        routerTypes[ARB] = 1;\\n\\n        routerTypes[JOE] = 2;\\n\\n        routerTypes[WOM] = 3;\\n    }\\n\\n    function setRouterType(address _token, uint256 _type) external onlyOwner {\\n        routerTypes[_token] = _type;\\n    }\\n\\n    function swap(address _token, uint256 _amount) external returns (uint256) {\\n        uint256 routerType = routerTypes[_token];\\n\\n        if (routerType == 1) {\\n            return _univ3_swapExactTokensForTokens(_token, _amount);\\n        } else if (routerType == 2) {\\n            return _joev21_swapExactTokensForTokens(_token, _amount);\\n        } else if (routerType == 3) {\\n            return _camelot_swapExactTokensForTokens(_token, _amount);\\n        } else revert(\\\"Wrong token\\\");\\n    }\\n\\n    function _camelot_swapExactTokensForTokens(address _token, uint256 _amount)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (\\n            IERC20(_token).allowance(address(this), CAMELOT_ROUTER) < 1000000e18\\n        ) {\\n            IERC20(_token).approve(CAMELOT_ROUTER, type(uint256).max);\\n        }\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _token;\\n        path[1] = USDT;\\n\\n        uint256 balanceBefore = IERC20(USDT).balanceOf(msg.sender);\\n\\n        ICamelotRouter(CAMELOT_ROUTER)\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                _amount,\\n                0,\\n                path,\\n                msg.sender,\\n                address(0),\\n                block.timestamp\\n            );\\n\\n        uint256 balanceAfter = IERC20(USDT).balanceOf(msg.sender);\\n\\n        amountOut = balanceAfter - balanceBefore;\\n    }\\n\\n    function _univ3_swapExactTokensForTokens(address _token, uint256 _amount)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (\\n            IERC20(_token).allowance(address(this), UNIV3_ROUTER) < 1000000e18\\n        ) {\\n            IERC20(_token).approve(UNIV3_ROUTER, type(uint256).max);\\n        }\\n\\n        bytes memory path = getUniV3Path(_token);\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter\\n            .ExactInputParams({\\n                path: path,\\n                recipient: msg.sender,\\n                deadline: block.timestamp,\\n                amountIn: _amount,\\n                amountOutMinimum: 0\\n            });\\n\\n        amountOut = ISwapRouter(UNIV3_ROUTER).exactInput(params);\\n    }\\n\\n    function _getPairBinSteps(address _token)\\n        internal\\n        pure\\n        returns (uint256[] memory pairBinSteps)\\n    {\\n        pairBinSteps = new uint256[](2);\\n\\n        if (_token == JOE) {\\n            pairBinSteps[0] = 20; // JOE-ETH pair: 0x4b9bfeD1dD4E6780454b2B02213788f31FfBA74a 20bps V2_1\\n            pairBinSteps[1] = 50; // ETH-USDC pair: 0xb83783c9cb35f1b1A6338937F9BE3EBb36b46bfe 40bps V2_1\\n        } else revert(\\\"Wrong token\\\");\\n    }\\n\\n    function _getVersions(address _token)\\n        internal\\n        pure\\n        returns (ILBRouter.Version[] memory versions)\\n    {\\n        versions = new ILBRouter.Version[](2);\\n\\n        if (_token == JOE) {\\n            versions[0] = ILBRouter.Version.V2_1;\\n            versions[1] = ILBRouter.Version.V2_1;\\n        }\\n    }\\n\\n    function _joev21_swapExactTokensForTokens(address _token, uint256 _amount)\\n        internal\\n        returns (uint256 amountOut)\\n    {\\n        if (\\n            IERC20(_token).allowance(address(this), JOEV21_ROUTER) < 1000000e18\\n        ) {\\n            IERC20(_token).approve(JOEV21_ROUTER, type(uint256).max);\\n        }\\n\\n        uint256[] memory pairBinSteps = _getPairBinSteps(_token);\\n\\n        ILBRouter.Version[] memory versions = _getVersions(_token);\\n\\n        IERC20[] memory tokenPath = new IERC20[](3);\\n        tokenPath[0] = IERC20(_token);\\n        tokenPath[1] = IERC20(WETH);\\n        tokenPath[2] = IERC20(USDC);\\n\\n        ILBRouter.Path memory path = ILBRouter.Path({\\n            pairBinSteps: pairBinSteps,\\n            versions: versions,\\n            tokenPath: tokenPath\\n        });\\n\\n        amountOut = ILBRouter(JOEV21_ROUTER).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            msg.sender,\\n            block.timestamp + 1\\n        );\\n    }\\n\\n    function getUniV3Path(address _token)\\n        public\\n        pure\\n        returns (bytes memory path)\\n    {\\n        if (_token == WOM) {\\n            path = abi.encodePacked(\\n                WOM,\\n                WOM_USDT_FEE,\\n                USDT,\\n                WETH_USDT_FEE,\\n                WETH\\n            );\\n        } else if (_token == GMX) {\\n            path = abi.encodePacked(\\n                GMX,\\n                GMX_WETH_FEE,\\n                WETH,\\n                WETH_USDC_FEE,\\n                USDC\\n            );\\n        } else if (_token == GNS) {\\n            path = abi.encodePacked(\\n                GNS,\\n                GNS_WETH_FEE,\\n                WETH,\\n                WETH_USDC_FEE,\\n                USDC\\n            );\\n        } else if (_token == LDO) {\\n            path = abi.encodePacked(\\n                LDO,\\n                LDO_WETH_FEE,\\n                WETH,\\n                WETH_USDC_FEE,\\n                USDC\\n            );\\n        } else if (_token == ARB) {\\n            path = abi.encodePacked(\\n                ARB,\\n                ARB_WETH_FEE,\\n                WETH,\\n                WETH_USDC_FEE,\\n                USDC\\n            );\\n        } else revert(\\\"Wrong token\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x158700c644db6fbb21d89b1310394439595dbbbff05450a4266918ca6f0b7b94\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OwnableWithoutContextUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb7c1bac54d6b38b0ff582113689643e43bdbc9eaf4dcd906373c3f44f7b2eab5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576116c4908161001c8239f35b600080fdfe608060408181526004361015610015575b600080fd5b600091823560e01c908163114ab6fd1461079157508063136a80471461039c57806313b44de0146102cf5780631a9bef411461039c57806325bc368e1461075a5780633b58e0381461072c578063438dbd32146106fe578063571715b7146106d057806364a285fd146106a25780636c57400a14610674578063715018a61461060f5780638129fc1c1461042e57806383828cd11461040057806389a30271146103d25780638da5cb5b146103a757806397dac3b61461039c578063ad5c46481461036e578063be6e916114610337578063c54e44eb14610309578063d004f0f7146102da578063d1e501f4146102cf578063d20e32e6146102cf578063d48e47b8146102cf578063d88bba11146102a1578063f1ec47611461025d578063f2fde38b146101c5578063f488581e146101885763ffebad301461015757600080fd5b346101845781600319360112610184576020905173371c7ec6d8039ff7933a2aa28eb827ffe1f52f078152f35b5080fd5b5034610184576020366003190112610184576101c1906101ae6101a96107fb565b6112b8565b9051918291602083526020830190610811565b0390f35b5034610184576020366003190112610184576101df6107fb565b60018060a01b036101f781855460101c163314610862565b81161561020a576102079061162e565b51f35b815162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101845780600319360112610184576102766107fb565b60018060a01b039061028f82855460101c163314610862565b16825260326020526024358183205551f35b5034610184578160031936011261018457602090517313ad51ed4f1b7e9dc168d8a00cb3f4ddd85efa608152f35b5050506100106107dd565b50346101845780600319360112610184576020906103026102f96107fb565b602435906108c1565b9051908152f35b50346101845781600319360112610184576020905173fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb98152f35b50346101845760203660031901126101845760209181906001600160a01b0361035e6107fb565b1681526033845220549051908152f35b5034610184578160031936011261018457602090517382af49447d8a07e3bd95bd0d56f35241523fbab18152f35b5050506100106107bf565b50346101845781600319360112610184579054905160109190911c6001600160a01b03168152602090f35b50346101845781600319360112610184576020905173af88d065e77c8cc2239327c5edb3a432268e58318152f35b503461018457816003193601126101845760209051737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf968152f35b5034610184578160031936011261018457815460ff8160081c1615808091610602575b80156105eb575b1561059057600191818360ff19831617865561057f575b5061048960ff855460081c16610484816115ce565b6115ce565b6104923361162e565b73fc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a8452603260205281838520557318c11fd286c5ec11c3b683caa813b77f5163a122845281838520557313ad51ed4f1b7e9dc168d8a00cb3f4ddd85efa608452818385205573912ce59144191c1204e64559fe8253a0e49e65488452818385205573371c7ec6d8039ff7933a2aa28eb827ffe1f52f078452600283852055737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf968452600383852055610549575051f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001985541685558351908152a151f35b61ffff19166101011784553861046f565b825162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156104585750600160ff831614610458565b50600160ff831610610451565b50346101845781600319360112610184578154601081901c6001600160a01b031691839061063e338514610862565b51927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b0319168255f35b5034610184578160031936011261018457602090517318c11fd286c5ec11c3b683caa813b77f5163a1228152f35b50346101845781600319360112610184576020905173912ce59144191c1204e64559fe8253a0e49e65488152f35b50346101845781600319360112610184576020905173e592427a0aece92de3edee1f18e0157c058615648152f35b50346101845781600319360112610184576020905173fc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a8152f35b50346101845781600319360112610184576020905173c873fecbd354f5a56e00e710b90ef4201db2448d8152f35b50346101845760203660031901126101845760209181906001600160a01b036107816107fb565b1681526032845220549051908152f35b8390346101845781600319360112610184578073b4315e873dbcf96ffd0acd8ea43f689d8c20fb3060209252f35b50346100105760003660031901126100105760206040516101f48152f35b5034610010576000366003190112610010576020604051610bb88152f35b600435906001600160a01b038216820361001057565b91908251928382526000905b84821061084a57509280602093941161083d575b601f01601f1916010190565b6000838284010152610831565b9060209081808285010151908286010152019061081d565b1561086957565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b60609060208152600b60208201526a2bb937b733903a37b5b2b760a91b60408201520190565b9060008060018060a01b039081851691828452602092603284526040968786205460018114600014610b0b57508751636eb1769f60e11b815230600482015273e592427a0aece92de3edee1f18e0157c058615646024820181905292908681604481855afa908115610b015791879187938491610abf575b5069d3c21bcecceda100000011610a4a575b505050610957906112b8565b87519060a0820182811067ffffffffffffffff821117610a3657869493926109c69287928c5281528581013381528b82019a428c526060830190815260808301908482528d519c8d988997889663c04b8d5960e01b88528c60048901525160a0602489015260c4880190610811565b94511660448601525160648501525160848401525160a483015203925af1948515610a2c5750936109f8575b50505090565b9091809350813d8311610a25575b610a10818361124b565b81010312610a225750513880806109f2565b80fd5b503d610a06565b51903d90823e3d90fd5b634e487b7160e01b88526041600452602488fd5b60448b518094819363095ea7b360e01b835288600484015260001960248401525af18015610ab557906109579291610a88575b85919287915061094b565b610aa790873d8911610aae575b610a9f818361124b565b81019061126d565b5038610a7d565b503d610a95565b89513d87823e3d90fd5b92809294508391503d8311610afa575b610ad9818361124b565b81010312610af657518591879169d3c21bcecceda1000000610939565b8780fd5b503d610acf565b8a513d88823e3d90fd5b60029793929150878103610ef15750875191636eb1769f60e11b83526004308185015273b4315e873dbcf96ffd0acd8ea43f689d8c20fb309460249486868201528881604481885afa8015610eac578890610eb6575b69d3c21bcecceda1000000915010610e5c575b8a5191610b80836111fd565b8a83528b368a85013773371c7ec6d8039ff7933a2aa28eb827ffe1f52f0785148015610e41576014610bb185611285565b526032610bbd856112a8565b528c5190610bca826111fd565b8c82528d368c840137610e26575b8c5193608085019c67ffffffffffffffff9d8e87821090821117610e14578f526003808752976060368e890137610c0e87611285565b527382af49447d8a07e3bd95bd0d56f35241523fbab1610c2d876112a8565b5285511115610e025773af88d065e77c8cc2239327c5edb3a432268e583160608601528d51809d6060820191821090821117610df0578e528c52898c019081528b8d019384526001194211610dde579a92889492968a9896948e519d8e996315221fd760e11b8b52858b015287838b015260a060448b01526101048a01915191606060a48c015282518091528b6101248c01930190895b818110610db257505050519360a31996878b84030160c48c01528b808751948581520196019389925b848410610d6a5750505050505051928682030160e487015286808451928381520193019184905b828210610d4957505050509083809233606483015260014201608483015203925af1948515610a2c5750936109f85750505090565b8351811685528a988d98508a96509485019490930192600190910190610d14565b9397995093999b509396995093885184811015610da0578d8281926001945201990194018e9996938d9b9995938d999793610ced565b634e487b7160e01b8d5260218352838dfd5b938d92600194979a9c9e92969d5080999b505181520196019101928b9795918f9a938e9c9a9895610cc4565b634e487b7160e01b8952601182528689fd5b634e487b7160e01b8d5260418452888dfd5b634e487b7160e01b8c5260328352878cfd5b634e487b7160e01b8e5260418552898efd5b8b610e3082611285565b528b610e3b826112a8565b52610bd8565b8c5162461bcd60e51b815280610e5881850161089b565b0390fd5b8a5163095ea7b360e01b81528281018790526000198682015288816044818b895af18015610eac57610e8f575b50610b74565b610ea590893d8b11610aae57610a9f818361124b565b5038610e89565b8c513d8a823e3d90fd5b508881813d8311610eea575b610ecc818361124b565b81010312610ee65769d3c21bcecceda10000009051610b61565b8980fd5b503d610ec2565b60039098979495919398969296146000146111e557865195636eb1769f60e11b8752600494308689015273c873fecbd354f5a56e00e710b90ef4201db2448d602498818a82015284816044818a5afa80156111a05786906111aa575b69d3c21bcecceda1000000915010611150575b895191610f6c836111fd565b8252838201958a368837610f7f83611285565b5273fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb99586610fa0846112a8565b528a516370a0823160e01b808252338a830152909c9094868e8d818c5afa9d8e1561114657889e611117575b50833b15610af6578c5163561c49dd60e11b8152808b0192909252818c0188905260c06044830152935160c48201819052909387938593909260e485019286905b8a8383106110f7575050505050838380923360648301528260848301524260a483015203925af180156110ed576110be575b50819087895180968193825233898301525afa9687156110b557508496611082575b505050848410611072575050500390565b634e487b7160e01b825260119052fd5b909180939650813d83116110ae575b61109b818361124b565b81010312610a2257505192388080611061565b503d611091565b513d86823e3d90fd5b90955067ffffffffffffffff81116110db5787528082959061103f565b634e487b7160e01b8352604185528683fd5b89513d86823e3d90fd5b8451821686528c985089975094850194939093019260019091019061100d565b909d508681813d831161113f575b61112f818361124b565b81010312610af657519c38610fcc565b503d611125565b8d513d8a823e3d90fd5b895163095ea7b360e01b81528781018290526000198a8201528481604481898b5af180156111a057611183575b50610f60565b61119990853d8711610aae57610a9f818361124b565b503861117d565b8b513d88823e3d90fd5b508481813d83116111de575b6111c0818361124b565b810103126111da5769d3c21bcecceda10000009051610f4d565b8580fd5b503d6111b6565b865162461bcd60e51b815280610e586004820161089b565b6060810190811067ffffffffffffffff82111761121957604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761121957604052565b90601f8019910116810190811067ffffffffffffffff82111761121957604052565b90816020910312610010575180151581036100105790565b8051156112925760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156112925760400190565b6001600160a01b0316737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf96810361135c5750604051733daf59ca0010f60747231eaedda5bd84d44eefcb60611b602082015261017760eb1b603482015273fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb960601b6037820152607d60ea1b604b8201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b604e820152604281526113598161122f565b90565b73fc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a81036113f45750604051737e2d0d37583b5163d68376916486bf38871ad68560611b602082015261017760eb1b60348201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037820152607d60ea1b604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b7318c11fd286c5ec11c3b683caa813b77f5163a122810361148c5750604051730c608fe94362f608e1db41e55409dbbfa8b1d09160611b602082015261017760eb1b60348201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037820152607d60ea1b604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b7313ad51ed4f1b7e9dc168d8a00cb3f4ddd85efa6081036115235750604051729d6a8f6a78dbf4ee0b46c500659fa6eec2f7d360651b602082015261017760eb1b60348201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037820152607d60ea1b604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b73912ce59144191c1204e64559fe8253a0e49e6548036115b5576040517312259cb228832382409cc8ab3fd04a741c93cca960631b6020820152607d60ea1b603482018190527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037830152604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b60405162461bcd60e51b815280610e586004820161089b565b156115d557565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea2646970667358221220f57c3c2acdd349b144277151a6a9bdb17e2663cfd10dcc580dce7bd0a814ab0c64736f6c634300080f0033",
  "deployedBytecode": "0x608060408181526004361015610015575b600080fd5b600091823560e01c908163114ab6fd1461079157508063136a80471461039c57806313b44de0146102cf5780631a9bef411461039c57806325bc368e1461075a5780633b58e0381461072c578063438dbd32146106fe578063571715b7146106d057806364a285fd146106a25780636c57400a14610674578063715018a61461060f5780638129fc1c1461042e57806383828cd11461040057806389a30271146103d25780638da5cb5b146103a757806397dac3b61461039c578063ad5c46481461036e578063be6e916114610337578063c54e44eb14610309578063d004f0f7146102da578063d1e501f4146102cf578063d20e32e6146102cf578063d48e47b8146102cf578063d88bba11146102a1578063f1ec47611461025d578063f2fde38b146101c5578063f488581e146101885763ffebad301461015757600080fd5b346101845781600319360112610184576020905173371c7ec6d8039ff7933a2aa28eb827ffe1f52f078152f35b5080fd5b5034610184576020366003190112610184576101c1906101ae6101a96107fb565b6112b8565b9051918291602083526020830190610811565b0390f35b5034610184576020366003190112610184576101df6107fb565b60018060a01b036101f781855460101c163314610862565b81161561020a576102079061162e565b51f35b815162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101845780600319360112610184576102766107fb565b60018060a01b039061028f82855460101c163314610862565b16825260326020526024358183205551f35b5034610184578160031936011261018457602090517313ad51ed4f1b7e9dc168d8a00cb3f4ddd85efa608152f35b5050506100106107dd565b50346101845780600319360112610184576020906103026102f96107fb565b602435906108c1565b9051908152f35b50346101845781600319360112610184576020905173fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb98152f35b50346101845760203660031901126101845760209181906001600160a01b0361035e6107fb565b1681526033845220549051908152f35b5034610184578160031936011261018457602090517382af49447d8a07e3bd95bd0d56f35241523fbab18152f35b5050506100106107bf565b50346101845781600319360112610184579054905160109190911c6001600160a01b03168152602090f35b50346101845781600319360112610184576020905173af88d065e77c8cc2239327c5edb3a432268e58318152f35b503461018457816003193601126101845760209051737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf968152f35b5034610184578160031936011261018457815460ff8160081c1615808091610602575b80156105eb575b1561059057600191818360ff19831617865561057f575b5061048960ff855460081c16610484816115ce565b6115ce565b6104923361162e565b73fc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a8452603260205281838520557318c11fd286c5ec11c3b683caa813b77f5163a122845281838520557313ad51ed4f1b7e9dc168d8a00cb3f4ddd85efa608452818385205573912ce59144191c1204e64559fe8253a0e49e65488452818385205573371c7ec6d8039ff7933a2aa28eb827ffe1f52f078452600283852055737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf968452600383852055610549575051f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001985541685558351908152a151f35b61ffff19166101011784553861046f565b825162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156104585750600160ff831614610458565b50600160ff831610610451565b50346101845781600319360112610184578154601081901c6001600160a01b031691839061063e338514610862565b51927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b0319168255f35b5034610184578160031936011261018457602090517318c11fd286c5ec11c3b683caa813b77f5163a1228152f35b50346101845781600319360112610184576020905173912ce59144191c1204e64559fe8253a0e49e65488152f35b50346101845781600319360112610184576020905173e592427a0aece92de3edee1f18e0157c058615648152f35b50346101845781600319360112610184576020905173fc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a8152f35b50346101845781600319360112610184576020905173c873fecbd354f5a56e00e710b90ef4201db2448d8152f35b50346101845760203660031901126101845760209181906001600160a01b036107816107fb565b1681526032845220549051908152f35b8390346101845781600319360112610184578073b4315e873dbcf96ffd0acd8ea43f689d8c20fb3060209252f35b50346100105760003660031901126100105760206040516101f48152f35b5034610010576000366003190112610010576020604051610bb88152f35b600435906001600160a01b038216820361001057565b91908251928382526000905b84821061084a57509280602093941161083d575b601f01601f1916010190565b6000838284010152610831565b9060209081808285010151908286010152019061081d565b1561086957565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b60609060208152600b60208201526a2bb937b733903a37b5b2b760a91b60408201520190565b9060008060018060a01b039081851691828452602092603284526040968786205460018114600014610b0b57508751636eb1769f60e11b815230600482015273e592427a0aece92de3edee1f18e0157c058615646024820181905292908681604481855afa908115610b015791879187938491610abf575b5069d3c21bcecceda100000011610a4a575b505050610957906112b8565b87519060a0820182811067ffffffffffffffff821117610a3657869493926109c69287928c5281528581013381528b82019a428c526060830190815260808301908482528d519c8d988997889663c04b8d5960e01b88528c60048901525160a0602489015260c4880190610811565b94511660448601525160648501525160848401525160a483015203925af1948515610a2c5750936109f8575b50505090565b9091809350813d8311610a25575b610a10818361124b565b81010312610a225750513880806109f2565b80fd5b503d610a06565b51903d90823e3d90fd5b634e487b7160e01b88526041600452602488fd5b60448b518094819363095ea7b360e01b835288600484015260001960248401525af18015610ab557906109579291610a88575b85919287915061094b565b610aa790873d8911610aae575b610a9f818361124b565b81019061126d565b5038610a7d565b503d610a95565b89513d87823e3d90fd5b92809294508391503d8311610afa575b610ad9818361124b565b81010312610af657518591879169d3c21bcecceda1000000610939565b8780fd5b503d610acf565b8a513d88823e3d90fd5b60029793929150878103610ef15750875191636eb1769f60e11b83526004308185015273b4315e873dbcf96ffd0acd8ea43f689d8c20fb309460249486868201528881604481885afa8015610eac578890610eb6575b69d3c21bcecceda1000000915010610e5c575b8a5191610b80836111fd565b8a83528b368a85013773371c7ec6d8039ff7933a2aa28eb827ffe1f52f0785148015610e41576014610bb185611285565b526032610bbd856112a8565b528c5190610bca826111fd565b8c82528d368c840137610e26575b8c5193608085019c67ffffffffffffffff9d8e87821090821117610e14578f526003808752976060368e890137610c0e87611285565b527382af49447d8a07e3bd95bd0d56f35241523fbab1610c2d876112a8565b5285511115610e025773af88d065e77c8cc2239327c5edb3a432268e583160608601528d51809d6060820191821090821117610df0578e528c52898c019081528b8d019384526001194211610dde579a92889492968a9896948e519d8e996315221fd760e11b8b52858b015287838b015260a060448b01526101048a01915191606060a48c015282518091528b6101248c01930190895b818110610db257505050519360a31996878b84030160c48c01528b808751948581520196019389925b848410610d6a5750505050505051928682030160e487015286808451928381520193019184905b828210610d4957505050509083809233606483015260014201608483015203925af1948515610a2c5750936109f85750505090565b8351811685528a988d98508a96509485019490930192600190910190610d14565b9397995093999b509396995093885184811015610da0578d8281926001945201990194018e9996938d9b9995938d999793610ced565b634e487b7160e01b8d5260218352838dfd5b938d92600194979a9c9e92969d5080999b505181520196019101928b9795918f9a938e9c9a9895610cc4565b634e487b7160e01b8952601182528689fd5b634e487b7160e01b8d5260418452888dfd5b634e487b7160e01b8c5260328352878cfd5b634e487b7160e01b8e5260418552898efd5b8b610e3082611285565b528b610e3b826112a8565b52610bd8565b8c5162461bcd60e51b815280610e5881850161089b565b0390fd5b8a5163095ea7b360e01b81528281018790526000198682015288816044818b895af18015610eac57610e8f575b50610b74565b610ea590893d8b11610aae57610a9f818361124b565b5038610e89565b8c513d8a823e3d90fd5b508881813d8311610eea575b610ecc818361124b565b81010312610ee65769d3c21bcecceda10000009051610b61565b8980fd5b503d610ec2565b60039098979495919398969296146000146111e557865195636eb1769f60e11b8752600494308689015273c873fecbd354f5a56e00e710b90ef4201db2448d602498818a82015284816044818a5afa80156111a05786906111aa575b69d3c21bcecceda1000000915010611150575b895191610f6c836111fd565b8252838201958a368837610f7f83611285565b5273fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb99586610fa0846112a8565b528a516370a0823160e01b808252338a830152909c9094868e8d818c5afa9d8e1561114657889e611117575b50833b15610af6578c5163561c49dd60e11b8152808b0192909252818c0188905260c06044830152935160c48201819052909387938593909260e485019286905b8a8383106110f7575050505050838380923360648301528260848301524260a483015203925af180156110ed576110be575b50819087895180968193825233898301525afa9687156110b557508496611082575b505050848410611072575050500390565b634e487b7160e01b825260119052fd5b909180939650813d83116110ae575b61109b818361124b565b81010312610a2257505192388080611061565b503d611091565b513d86823e3d90fd5b90955067ffffffffffffffff81116110db5787528082959061103f565b634e487b7160e01b8352604185528683fd5b89513d86823e3d90fd5b8451821686528c985089975094850194939093019260019091019061100d565b909d508681813d831161113f575b61112f818361124b565b81010312610af657519c38610fcc565b503d611125565b8d513d8a823e3d90fd5b895163095ea7b360e01b81528781018290526000198a8201528481604481898b5af180156111a057611183575b50610f60565b61119990853d8711610aae57610a9f818361124b565b503861117d565b8b513d88823e3d90fd5b508481813d83116111de575b6111c0818361124b565b810103126111da5769d3c21bcecceda10000009051610f4d565b8580fd5b503d6111b6565b865162461bcd60e51b815280610e586004820161089b565b6060810190811067ffffffffffffffff82111761121957604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761121957604052565b90601f8019910116810190811067ffffffffffffffff82111761121957604052565b90816020910312610010575180151581036100105790565b8051156112925760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156112925760400190565b6001600160a01b0316737b5eb3940021ec0e8e463d5dbb4b7b09a89ddf96810361135c5750604051733daf59ca0010f60747231eaedda5bd84d44eefcb60611b602082015261017760eb1b603482015273fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb960601b6037820152607d60ea1b604b8201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b604e820152604281526113598161122f565b90565b73fc5a1a6eb076a2c7ad06ed22c90d7e710e35ad0a81036113f45750604051737e2d0d37583b5163d68376916486bf38871ad68560611b602082015261017760eb1b60348201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037820152607d60ea1b604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b7318c11fd286c5ec11c3b683caa813b77f5163a122810361148c5750604051730c608fe94362f608e1db41e55409dbbfa8b1d09160611b602082015261017760eb1b60348201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037820152607d60ea1b604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b7313ad51ed4f1b7e9dc168d8a00cb3f4ddd85efa6081036115235750604051729d6a8f6a78dbf4ee0b46c500659fa6eec2f7d360651b602082015261017760eb1b60348201527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037820152607d60ea1b604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b73912ce59144191c1204e64559fe8253a0e49e6548036115b5576040517312259cb228832382409cc8ab3fd04a741c93cca960631b6020820152607d60ea1b603482018190527382af49447d8a07e3bd95bd0d56f35241523fbab160601b6037830152604b82015273af88d065e77c8cc2239327c5edb3a432268e583160601b604e820152604281526113598161122f565b60405162461bcd60e51b815280610e586004820161089b565b156115d557565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea2646970667358221220f57c3c2acdd349b144277151a6a9bdb17e2663cfd10dcc580dce7bd0a814ab0c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "src/swapHelper/SwapHelper.sol:SwapHelper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "src/swapHelper/SwapHelper.sol:SwapHelper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 27870,
        "contract": "src/swapHelper/SwapHelper.sol:SwapHelper",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 27977,
        "contract": "src/swapHelper/SwapHelper.sol:SwapHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 26978,
        "contract": "src/swapHelper/SwapHelper.sol:SwapHelper",
        "label": "routerTypes",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26982,
        "contract": "src/swapHelper/SwapHelper.sol:SwapHelper",
        "label": "poolFees",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}