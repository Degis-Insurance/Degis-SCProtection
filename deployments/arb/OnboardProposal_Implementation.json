{
  "address": "0x2EEA4F8E1163472b34a22FD92fa14a669b4e3426",
  "abi": [
    {
      "inputs": [],
      "name": "OnboardProposal__AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__AlreadyProposed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__AlreadyProtected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__ChooseBothSides",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__NotEnoughVeDEG",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__NotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__NotWrongChoice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__ProposeNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongChoice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongPremium",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceRatio",
          "type": "uint256"
        }
      ],
      "name": "NewProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProposalClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "ProposalSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProposalVotingStart",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_CAPACITY_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROPOSAL_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROPOSE_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "closeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "protocolToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "proposeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numFor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numAgainst",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePremiumRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "status",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            }
          ],
          "internalType": "struct OnboardProposal.Proposal[]",
          "name": "allProposals",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "protocolToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "proposeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numFor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numAgainst",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePremiumRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "status",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            }
          ],
          "internalType": "struct OnboardProposal.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getUserProposalVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "choice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct OnboardProposal.UserVote",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "contract IPriorityPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "protocolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposeTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basePremiumRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basePremiumRatio",
          "type": "uint256"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quorumRatio",
          "type": "uint256"
        }
      ],
      "name": "setQuorumRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "startVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_isFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7bafd4267121edb37a127fb64ffc5cdd057ce03fa81244b097ca52d259d979b9",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0x2EEA4F8E1163472b34a22FD92fa14a669b4e3426",
    "transactionIndex": 11,
    "gasUsed": "8099971",
    "logsBloom": "0x
    "blockHash": "0x5ded3668aabb7c5163fec92e9913c58d68dcbef07d63763971304ece185e332f",
    "transactionHash": "0x7bafd4267121edb37a127fb64ffc5cdd057ce03fa81244b097ca52d259d979b9",
    "logs": [],
    "blockNumber": 100388204,
    "cumulativeGasUsed": "14511700",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b3c40608955343ea93f956d2e3826bb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnboardProposal__AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__AlreadyProposed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__AlreadyProtected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__ChooseBothSides\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__NotEnoughVeDEG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__NotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__NotWrongChoice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__ProposeNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongChoice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongPremium\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceRatio\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ProposalSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalVotingStart\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_CAPACITY_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSAL_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROPOSE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"internalType\":\"struct OnboardProposal.Proposal[]\",\"name\":\"allProposals\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"internalType\":\"struct OnboardProposal.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getUserProposalVote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct OnboardProposal.UserVote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"contract IPriorityPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePremiumRatio\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorumRatio\",\"type\":\"uint256\"}],\"name\":\"setQuorumRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_isFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256)\":{\"params\":{\"_id\":\"Proposal id\"}},\"closeProposal(uint256)\":{\"params\":{\"_id\":\"Proposal id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"propose(string,address,uint256,uint256)\":{\"params\":{\"_basePremiumRatio\":\"Base annual ratio of the premium\",\"_maxCapacity\":\"Max capacity ratio for the project pool\",\"_name\":\"New project name\",\"_token\":\"Native token address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"settle(uint256)\":{\"params\":{\"_id\":\"Proposal id\"}},\"startVoting(uint256)\":{\"params\":{\"_id\":\"Proposal id to start voting\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of veDEG to vote\",\"_id\":\"Proposal id\",\"_isFor\":\"Voting choice\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256)\":{\"notice\":\"Claim back veDEG after voting result settled\"},\"closeProposal(uint256)\":{\"notice\":\"Close a pending proposal         Need the approval of dev team (onlyOwner)\"},\"propose(string,address,uint256,uint256)\":{\"notice\":\"Start a new proposal\"},\"settle(uint256)\":{\"notice\":\"Settle the proposal result\"},\"startVoting(uint256)\":{\"notice\":\"Start the voting process         Need the approval of dev team (onlyOwner)\"},\"vote(uint256,uint256,uint256)\":{\"notice\":\"Vote for a proposal         Voting power is decided by the (unlocked) balance of veDEG         Once voted, those veDEG will be locked\"}},\"notice\":\"Onboard Proposal\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/voting/onboardProposal/OnboardProposal.sol\":\"OnboardProposal\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363836353730343739393836\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG\\n *         They are set as immutable\\n */\\nabstract contract ExternalTokenDependencies is\\n    CommonDependencies,\\n    Initializable\\n{\\n    IDegisToken internal deg;\\n    IVeDEG internal veDeg;\\n\\n    function __ExternalToken__Init(address _deg, address _veDeg)\\n        internal\\n        onlyInitializing\\n    {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n    }\\n}\\n\",\"keccak256\":\"0x59a44780f820a90040fe4d2e59f22b094881df2b5c578db1b21e72d7de93a909\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x926ec7ef1eb5d6178e8cc0e29f12d1853f6ed27ec6b1864697e7a845e4a6294d\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerUSDC\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerUSDC\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n\\n   \\n}\\n\",\"keccak256\":\"0xcbc2bb32ce42fdcb8ba88a4437f9c0ab073b80538f89c14fac7654e6088c2079\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x8e86f7b957f4a1d3e5e34a57f051b90c5008f431c00ce2e0a1d47c6c8ad5911d\",\"license\":\"MIT\"},\"src/util/OwnableWithoutContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OwnableWithoutContextUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb7c1bac54d6b38b0ff582113689643e43bdbc9eaf4dcd906373c3f44f7b2eab5\",\"license\":\"MIT\"},\"src/util/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287cc23d2f983675929f9892ce173553da2d997cc62c61c13943a54c05f09f87\",\"license\":\"MIT\"},\"src/voting/interfaces/VotingParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract VotingParameters {\\n    // Status parameters for a voting\\n    uint256 internal constant INIT_STATUS = 0;\\n    uint256 internal constant PENDING_STATUS = 1;\\n    uint256 internal constant VOTING_STATUS = 2;\\n    uint256 internal constant SETTLED_STATUS = 3;\\n    uint256 internal constant CLOSE_STATUS = 404;\\n\\n    // Result parameters for a voting\\n    uint256 internal constant INIT_RESULT = 0;\\n    uint256 internal constant PASS_RESULT = 1;\\n    uint256 internal constant REJECT_RESULT = 2;\\n    uint256 internal constant TIED_RESULT = 3;\\n    uint256 internal constant FAILED_RESULT = 4;\\n\\n    // Voting choices\\n    uint256 internal constant VOTE_FOR = 1;\\n    uint256 internal constant VOTE_AGAINST = 2;\\n}\\n\",\"keccak256\":\"0x207f4c911a33fe3927c4fc15d9f63806e4241b345f4a30e35d50842f6524938a\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../util/OwnableWithoutContextUpgradeable.sol\\\";\\n\\nimport \\\"./OnboardProposalParameters.sol\\\";\\nimport \\\"./OnboardProposalDependencies.sol\\\";\\nimport \\\"./OnboardProposalEventError.sol\\\";\\n\\nimport \\\"../../interfaces/ExternalTokenDependencies.sol\\\";\\n\\n/**\\n * @notice Onboard Proposal\\n */\\ncontract OnboardProposal is\\n    OnboardProposalParameters,\\n    OnboardProposalEventError,\\n    OwnableWithoutContextUpgradeable,\\n    ExternalTokenDependencies,\\n    OnboardProposalDependencies\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Total number of reports\\n    uint256 public proposalCounter;\\n\\n    // Proposal quorum ratio\\n    uint256 public quorumRatio;\\n\\n    struct Proposal {\\n        string name; // Pool name (\\\"JOE\\\", \\\"GMX\\\")\\n        address protocolToken; // Protocol native token address\\n        address proposer; // Proposer address\\n        uint256 proposeTimestamp; // Timestamp when proposing\\n        uint256 voteTimestamp; // Timestamp when start voting\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 maxCapacity; // Max capacity ratio\\n        uint256 basePremiumRatio; // Base annual premium ratio\\n        uint256 poolId; // Priority pool id\\n        uint256 status; // Current status (PENDING, VOTING, SETTLED, CLOSED)\\n        uint256 result; // Final result (PASSED, REJECTED, TIED)\\n    }\\n    // Proposal ID => Proposal\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    // Protocol token => Whether proposed\\n    // A protocol can only have one pool\\n    mapping(address => bool) public proposed;\\n\\n    struct UserVote {\\n        uint256 choice; // 1: vote for, 2: vote against\\n        uint256 amount; // veDEG amount for voting\\n        bool claimed; // Voting reward already claimed\\n    }\\n    // User address => report id => user's voting info\\n    mapping(address => mapping(uint256 => UserVote)) public votes;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(\\n        address _deg,\\n        address _veDeg\\n    ) public initializer {\\n        __Ownable_init();\\n        __ExternalToken__Init(_deg, _veDeg);\\n\\n        // Initial quorum 30%\\n        quorumRatio = 30;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function getProposal(uint256 _proposalId)\\n        external\\n        view\\n        returns (Proposal memory)\\n    {\\n        return proposals[_proposalId];\\n    }\\n\\n    function getUserProposalVote(address _user, uint256 _proposalId)\\n        external\\n        view\\n        returns (UserVote memory)\\n    {\\n        return votes[_user][_proposalId];\\n    }\\n\\n    function getAllProposals()\\n        external\\n        view\\n        returns (Proposal[] memory allProposals)\\n    {\\n        uint256 totalProposal = proposalCounter;\\n\\n        allProposals = new Proposal[](totalProposal);\\n\\n        for (uint256 i; i < totalProposal; ) {\\n            allProposals[i] = proposals[i + 1];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        priorityPoolFactory = IPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    function setQuorumRatio(uint256 _quorumRatio) external onlyOwner {\\n        quorumRatio = _quorumRatio;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new proposal\\n     *\\n     * @param _name             New project name\\n     * @param _token            Native token address\\n     * @param _maxCapacity      Max capacity ratio for the project pool\\n     * @param _basePremiumRatio Base annual ratio of the premium\\n     */\\n    function propose(\\n        string calldata _name,\\n        address _token,\\n        uint256 _maxCapacity,\\n        uint256 _basePremiumRatio // 10000 == 100% premium annual cost\\n    ) external onlyOwner {\\n        _propose(_name, _token, _maxCapacity, _basePremiumRatio, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Start the voting process\\n     *         Need the approval of dev team (onlyOwner)\\n     *\\n     * @param _id Proposal id to start voting\\n     */\\n    function startVoting(uint256 _id) external onlyOwner {\\n        Proposal storage proposal = proposals[_id];\\n\\n        if (proposal.status != PENDING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        proposal.status = VOTING_STATUS;\\n        proposal.voteTimestamp = block.timestamp;\\n\\n        emit ProposalVotingStart(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Close a pending proposal\\n     *         Need the approval of dev team (onlyOwner)\\n     *\\n     * @param _id Proposal id\\n     */\\n    function closeProposal(uint256 _id) external onlyOwner {\\n        Proposal storage proposal = proposals[_id];\\n\\n        // require current proposal to be settled\\n        if (proposal.status != PENDING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        proposal.status = CLOSE_STATUS;\\n\\n        proposed[proposal.protocolToken] = false;\\n\\n        emit ProposalClosed(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Vote for a proposal\\n     *\\n     *         Voting power is decided by the (unlocked) balance of veDEG\\n     *         Once voted, those veDEG will be locked\\n     *\\n     * @param _id     Proposal id\\n     * @param _isFor  Voting choice\\n     * @param _amount Amount of veDEG to vote\\n     */\\n    function vote(\\n        uint256 _id,\\n        uint256 _isFor,\\n        uint256 _amount\\n    ) external {\\n        _vote(_id, _isFor, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Settle the proposal result\\n     *\\n     * @param _id Proposal id\\n     */\\n    function settle(uint256 _id) external {\\n        Proposal storage proposal = proposals[_id];\\n\\n        if (proposal.status != VOTING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        if (!_passedVotingPeriod(proposal.voteTimestamp))\\n            revert OnboardProposal__WrongPeriod();\\n\\n        // If reached quorum, settle the result\\n        if (_checkQuorum(proposal.numFor + proposal.numAgainst)) {\\n            uint256 res = _getVotingResult(\\n                proposal.numFor,\\n                proposal.numAgainst\\n            );\\n\\n            // If this proposal not passed, allow new proposals for the same project\\n            // If it passed, not allow the same proposals\\n            if (res != PASS_RESULT) {\\n                // Allow for new proposals to be proposed for this protocol\\n                proposed[proposal.protocolToken] = false;\\n            }\\n\\n            proposal.result = res;\\n            proposal.status = SETTLED_STATUS;\\n\\n            emit ProposalSettled(_id, res);\\n        }\\n        // Else, set the result as \\\"FAILED\\\"\\n        else {\\n            proposal.result = FAILED_RESULT;\\n            proposal.status = SETTLED_STATUS;\\n\\n            // Allow for new proposals to be proposed for this protocol\\n            proposed[proposal.protocolToken] = false;\\n\\n            emit ProposalFailed(_id);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim back veDEG after voting result settled\\n     *\\n     * @param _id Proposal id\\n     */\\n    function claim(uint256 _id) external {\\n        _claim(_id, msg.sender);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new proposal\\n     *\\n     * @param _name             New project name\\n     * @param _token            Native token address\\n     * @param _maxCapacity      Max capacity ratio for the project pool\\n     * @param _basePremiumRatio Base annual ratio of the premium\\n     */\\n    function _propose(\\n        string calldata _name,\\n        address _token,\\n        uint256 _maxCapacity,\\n        uint256 _basePremiumRatio, // 10000 == 100% premium annual cost\\n        address _user\\n    ) internal {\\n        if (priorityPoolFactory.tokenRegistered(_token))\\n            revert OnboardProposal__AlreadyProtected();\\n\\n        if (_maxCapacity == 0 || _maxCapacity > MAX_CAPACITY_RATIO)\\n            revert OnboardProposal__WrongCapacity();\\n\\n        if (_basePremiumRatio >= 10000 || _basePremiumRatio == 0)\\n            revert OnboardProposal__WrongPremium();\\n\\n        if (proposed[_token]) revert OnboardProposal__AlreadyProposed();\\n\\n        // Burn degis tokens to start a proposal\\n        // deg.burnDegis(_user, PROPOSE_THRESHOLD);\\n\\n        proposed[_token] = true;\\n\\n        uint256 currentCounter = ++proposalCounter;\\n        // Record the proposal info\\n        Proposal storage proposal = proposals[currentCounter];\\n        proposal.name = _name;\\n        proposal.protocolToken = _token;\\n        proposal.proposer = _user;\\n        proposal.proposeTimestamp = block.timestamp;\\n        proposal.status = PENDING_STATUS;\\n        proposal.maxCapacity = _maxCapacity;\\n        proposal.basePremiumRatio = _basePremiumRatio;\\n\\n        emit NewProposal(_name, _token, _user, _maxCapacity, _basePremiumRatio);\\n    }\\n\\n    /**\\n     * @notice Vote for a proposal\\n     *\\n     * @param _id     Proposal id\\n     * @param _isFor  Voting choice\\n     * @param _amount Amount of veDEG to vote\\n     */\\n    function _vote(\\n        uint256 _id,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        Proposal storage proposal = proposals[_id];\\n\\n        // Should be manually switched on the voting process\\n        if (proposal.status != VOTING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n        if (_isFor != 1 && _isFor != 2) revert OnboardProposal__WrongChoice();\\n        if (_passedVotingPeriod(proposal.voteTimestamp))\\n            revert OnboardProposal__WrongPeriod();\\n        if (_amount == 0) revert OnboardProposal__ZeroAmount();\\n\\n        _enoughVeDEG(_user, _amount);\\n\\n        // Lock vedeg until this report is settled\\n        veDeg.lockVeDEG(_user, _amount);\\n\\n        // Record the user's choice\\n        UserVote storage userVote = votes[_user][_id];\\n        if (userVote.amount > 0) {\\n            if (userVote.choice != _isFor)\\n                revert OnboardProposal__ChooseBothSides();\\n        } else {\\n            userVote.choice = _isFor;\\n        }\\n        userVote.amount += _amount;\\n\\n        // Record the vote for this report\\n        if (_isFor == 1) {\\n            proposal.numFor += _amount;\\n        } else {\\n            proposal.numAgainst += _amount;\\n        }\\n\\n        emit ProposalVoted(_id, _user, _isFor, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim back veDEG after voting result settled\\n     *\\n     * @param _id Proposal id\\n     */\\n    function _claim(uint256 _id, address _user) internal {\\n        Proposal storage proposal = proposals[_id];\\n\\n        if (proposal.status != SETTLED_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        UserVote storage userVote = votes[_user][_id];\\n\\n        // @audit Add claimed check\\n        if (userVote.claimed) revert OnboardProposal__AlreadyClaimed();\\n\\n        // Unlock the veDEG used for voting\\n        // No reward / punishment\\n        veDeg.unlockVeDEG(_user, userVote.amount);\\n\\n        userVote.claimed = true;\\n\\n        emit Claimed(_id, _user, userVote.amount);\\n    }\\n\\n    /**\\n     * @notice Get the final voting result\\n     *\\n     * @param _numFor     Votes for\\n     * @param _numAgainst Votes against\\n     *\\n     * @return result Pass, reject or tied\\n     */\\n    function _getVotingResult(uint256 _numFor, uint256 _numAgainst)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (_numFor > _numAgainst) result = PASS_RESULT;\\n        else if (_numFor < _numAgainst) result = REJECT_RESULT;\\n        else result = TIED_RESULT;\\n    }\\n\\n    /**\\n     * @notice Check whether has passed the voting time period\\n     *\\n     * @param _voteTimestamp Start timestamp of the voting\\n     *\\n     * @return hasPassed True for passing\\n     */\\n    function _passedVotingPeriod(uint256 _voteTimestamp)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 endTime = _voteTimestamp + PROPOSAL_VOTING_PERIOD;\\n        return block.timestamp > endTime;\\n    }\\n\\n    /**\\n     * @notice Check quorum requirement\\n     *         30% of totalSupply is the minimum requirement for participation\\n     *\\n     * @param _totalVotes Total vote numbers\\n     */\\n    function _checkQuorum(uint256 _totalVotes) internal view returns (bool) {\\n        return _totalVotes >= (veDeg.totalSupply() * quorumRatio) / 100;\\n    }\\n\\n    /**\\n     * @notice Check veDEG to be enough\\n     *         Only unlocked veDEG will be counted\\n     *\\n     * @param _user   User address\\n     * @param _amount Amount to fulfill\\n     */\\n    function _enoughVeDEG(address _user, uint256 _amount) internal view {\\n        uint256 unlockedBalance = veDeg.balanceOf(_user) - veDeg.locked(_user);\\n        if (unlockedBalance < _amount) revert OnboardProposal__NotEnoughVeDEG();\\n    }\\n}\\n\",\"keccak256\":\"0x61ea4cfa94436df67a0f8b2f2a16994be5dbc52857ca6560c9517a2b6c3664c4\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposalDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\n\\nabstract contract OnboardProposalDependencies {\\n    IPriorityPoolFactory public priorityPoolFactory;\\n}\\n\",\"keccak256\":\"0xf11d27ebedd5c9b4326735cdb16b660afd7a4c92fb7d4c772c79b9dc4def9090\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposalEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface OnboardProposalEventError {\\n    event NewProposal(\\n        string name,\\n        address token,\\n        address proposer,\\n        uint256 maxCapacity,\\n        uint256 priceRatio\\n    );\\n\\n    event ProposalVotingStart(uint256 proposalId, uint256 timestamp);\\n\\n    event ProposalClosed(uint256 proposalId, uint256 timestamp);\\n\\n    event ProposalVoted(\\n        uint256 proposalId,\\n        address indexed user,\\n        uint256 voteFor,\\n        uint256 amount\\n    );\\n\\n    event ProposalSettled(uint256 proposalId, uint256 result);\\n\\n    event ProposalFailed(uint256 proposalId);\\n\\n    event Claimed(uint256 proposalId, address user, uint256 amount);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error OnboardProposal__WrongStatus();\\n    error OnboardProposal__WrongPeriod();\\n    error OnboardProposal__WrongChoice();\\n    error OnboardProposal__ChooseBothSides();\\n    error OnboardProposal__NotEnoughVeDEG();\\n    error OnboardProposal__NotSettled();\\n    error OnboardProposal__NotWrongChoice();\\n    error OnboardProposal__AlreadyClaimed();\\n    error OnboardProposal__ProposeNotExist();\\n    error OnboardProposal__AlreadyProposed();\\n    error OnboardProposal__AlreadyProtected();\\n    error OnboardProposal__WrongCapacity();\\n    error OnboardProposal__WrongPremium();\\n    error OnboardProposal__ZeroAmount();\\n}\\n\",\"keccak256\":\"0x9d513d73d7021b3a3c77ae914afd396c45c6480f164c9dbb988aeef99853d0ae\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/VotingParameters.sol\\\";\\n\\nabstract contract OnboardProposalParameters is VotingParameters {\\n    // TODO: Parameters for test\\n    //       2 hours for fujiInternal, 18 hours for fuji\\n    uint256 public constant PROPOSAL_VOTING_PERIOD = 3 days;\\n\\n    // DEG threshold for starting a report\\n    // TODO: Different threshold for test and mainnet\\n    uint256 public constant PROPOSE_THRESHOLD = 0;\\n\\n    // 10000 = 100%\\n    uint256 public constant MAX_CAPACITY_RATIO = 10000;\\n}\\n\",\"keccak256\":\"0xcf904d82d766089cb3ced16f1e8c15a289d3a0e46fb3add6da82493905196807\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576118c7908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b60009160e08335811c908163013cf08b146113825781630386a016146112da5781630c0512e9146112ba5781630def040214611226578163164bfde514610ea95781631ff799d214610e8d578163379607f514610d475781633d2f5bda14610cb657816344ff823714610c98578163485cc95514610b135781636f8a6e4314610ae9578163715018a614610a795781638a6655d6146107d05781638da5cb5b146107a35781638df828001461059a5781639418ce17146105695781639f2524ee14610509578163ad35e1dc146104c0578163b4643d29146104a0578163b5e18ce414610461578163b8b8ed6e1461043e578163c7f758a814610367578163cceb68f5146101c8575063f2fde38b1461012c57600080fd5b346101c45760203660031901126101c457610145611605565b9060018060a01b0361015e81865460101c1633146116c4565b821615610172575061016f906116fd565b51f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b90508391346101c457826003193601126101c4576035546101e881611818565b926101f5865194856114ec565b818452601f1961020483611818565b01855b818110610350575050845b8281106102785750505050825191602080840190808552835180925280868601968360051b870101940192955b82871061024c5785850386f35b909192938280610268600193603f198a82030186528851611631565b960192019601959291909261023f565b600119811161033d5761033760019182810192838952600b602091603783528b8b20908c51936102a7856114cf565b6102b08361150e565b855260018060a01b03809284015416908501526002820154168c84015260038101546060840152888101546080840152600581015460a0840152600681015460c084015260078101548784015260088101546101008401526009810154610120840152600a81015461014084015201546101608201526103308289611852565b5286611852565b50610212565b634e487b7160e01b865260118452602486fd5b60209061035b6117bd565b82828901015201610207565b849391503461043a57602036600319011261043a57600b90826104369561038c6117bd565b5085358152603760205220908351946103a4866114cf565b6103ad8361150e565b865260018060a01b0380600185015416602088015260028401541685870152600383015460608701528201546080860152600582015460a0860152600682015460c086015260078201549085015260088101546101008501526009810154610120850152600a810154610140850152015461016083015251918291602083526020830190611631565b0390f35b8380fd5b5050503461045d578160031936011261045d57602090516203f4808152f35b5080fd5b5050503461045d57602036600319011261045d5760209160ff9082906001600160a01b0361048d611605565b1681526038855220541690519015158152f35b5050503461045d578160031936011261045d576020906036549051908152f35b5050503461045d57602036600319011261045d576104dc611605565b60018060a01b03906104f582855460101c1633146116c4565b1660018060a01b0319603454161760345551f35b5050503461045d578060031936011261045d5760609181906001600160a01b03610531611605565b16815260396020528181206024358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b5050346101c45760203660031901126101c45761059360018060a01b03845460101c1633146116c4565b3560365551f35b8285853461045d576020806003193601126101c457833580845260378252828420600a8101926002845403610793576105d58783015461187c565b1561078357600582019384546105f16006850191825490611830565b60335488516318160ddd60e01b81526001600160a01b03989291869082908e9082908d165afa908115610779578b91610747575b50603654908060001904821181151516610734578a9b9c92916064919b9a9b020411156000146106e2575096600392917fc3e9e56c21ecd9fd3bcbaf6dd404f67ff375a520220a8edc72194dc096ef1c5098549054908181116000146106c5575050600b60019586925b600184036106a8575b500155558351928352820152a151f35b6001820154168c5260388652888c20805460ff191690558c610698565b10156106d757600b600295869261068f565b600b8395869261068f565b60019497506003925085939150600b7fa9257f9d0c375c52bac8f7010bf9ee592a943ac8f8fbad61dea6a8487e283108999601555501541685526038825283852060ff1981541690558351908152a151f35b634e487b7160e01b8c5260118d5260248cfd5b90508581813d8311610772575b61075e81836114ec565b8101031261076d57518c610625565b600080fd5b503d610754565b8a513d8d823e3d90fd5b84516319c4ee9f60e31b81528790fd5b845163200e272960e11b81528790fd5b5050503461045d578160031936011261045d579054905160109190911c6001600160a01b03168152602090f35b5050346101c45760603660031901126101c4578035906024356044359183865260209060378252858720906002600a83015403610a6b576001841490811580610a60575b610a52576108248184015461187c565b610a44578515610a365760335488516370a0823160e01b815233838201526001600160a01b03909116908581602481855afa908115610779578b91610a09575b50895163cbf9fe5f60e01b81523384820152908682602481865afa9182156109ff578c926109d0575b508181106109bd570387116109ae57808a913b1561045d578951633c56aa6160e11b815233848201908152602081018a90529091839183919082908490829060400103925af180156109a45761098c575b505033895260398452878920878a52845287892060018101805490929187911561098557540361097757505b610915868254611830565b9055156109625760050161092a848254611830565b90555b8451938452830152828201527ff3709dc32cf1356da6b8a12a5be1401aeb00989556be7b16ae566e65fef7a9df60603392a251f35b600601610970848254611830565b905561092d565b885163fe5e801760e01b8152fd5b555061090a565b610995906114bb565b6109a05788386108de565b8880fd5b8a513d84823e3d90fd5b508751630840c31d60e11b8152fd5b634e487b7160e01b8c526011845260248cfd5b9091508681813d83116109f8575b6109e881836114ec565b8101031261076d5751903861088d565b503d6109de565b8b513d8e823e3d90fd5b90508581813d8311610a2f575b610a2081836114ec565b8101031261076d575138610864565b503d610a16565b87516323f2f57960e11b8152fd5b87516319c4ee9f60e31b8152fd5b8751631cc147e360e31b8152fd5b506002851415610814565b865163200e272960e11b8152fd5b5050503461045d578160031936011261045d5781546001600160a01b039190610aa89060101c831633146116c4565b600080549151928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b5050503461045d578160031936011261045d5760345490516001600160a01b039091168152602090f35b5050346101c457816003193601126101c457610b2d611605565b90610b3661161b565b91845460ff8160081c161592838094610c8b575b8015610c74575b15610c1a575060ff198116600117865582610c09575b50610b8160ff865460081c16610b7c8161175d565b61175d565b610b8a336116fd565b845492610b9c60ff8560081c1661175d565b603280546001600160a01b039384166001600160a01b03199182161790915560338054929093169116179055601e603655610bd5575051f35b61ff00191682557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986020825160018152a151f35b61ffff191661010117855538610b67565b608490602087519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b158015610b515750600160ff831614610b51565b50600160ff831610610b4a565b5050503461045d578160031936011261045d57602090516127108152f35b5050346101c45760203660031901126101c457803590610ce360018060a01b03855460101c1633146116c4565b818452603760205282842090600a82016001815403610d3857917f7612de03d869f469b9967d2920682d83541e890e1a05daa3de481bf10ff25b7a93916002869455429101558151908152426020820152a151f35b50835163200e272960e11b8152fd5b5050346101c45760203660031901126101c45780359081845260376020526003600a848620015403610e7f57338452603960205282842082855260205282842090600282019060ff825416610e7157856001808060a01b0360335416940193845490803b156101c4578751634bdc2db560e11b8152339481019485526020850192909252909283919082908490829060400103925af18015610e6757610e2d575b50805460ff19166001179055548251918252336020830152818301527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed02690606090a151f35b917f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed026939195610e5d6060946114bb565b9591935091610de8565b85513d88823e3d90fd5b845163a584468160e01b8152fd5b825163200e272960e11b8152fd5b5050503461045d578160031936011261045d5751908152602090f35b5050346101c45760803660031901126101c457803567ffffffffffffffff80821161122257366023830112156112225781830135908111611222576024923684838501011161121e57610efa61161b565b604435906064359260018060a01b0390610f1b828b5460101c1633146116c4565b8160345416928951928391635170e73160e11b835216938483830152818a60209586935afa908115610779578b916111e4575b506111d657831580156111cb575b6111bd5761271085108015906111b5575b6111a757828a526038825260ff898b20541661119957828a5260388252888a20805460ff191660019081179091556035546000199283821461118757508101806035558b5260378352898b2091610fc4835461144f565b601f811161113f575b508b8c601f8a116001146110ac5793899795938997959360c09b8e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c96956008969261109f575b50508a831b918b60031b1c19161782555b81810180546001600160a01b0319908116881790915560028301805490911633179055426003830155600a820155600781018690550155895160a080825281018690529788968691018888013785850187018b9052850152338885015260608401526080830152601f01601f19168101030190a151f35b8d01013590508d38611017565b91601f198a16858452868420935b81811061112857509389979591936008938e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c968e60c09f9d9b991061110e575b505050508089811b018255611028565b60f88d60031b161c19918d01013516905538808d816110fe565b8c84018e01358555938501939287019287016110ba565b838d52848d20601f8a0160051c810191868b1061117d575b601f0160051c019083908e5b83821061117257505050610fcd565b81550183908e611163565b9091508190611157565b634e487b7160e01b8d5260119052898cfd5b88516365bd930960e11b8152fd5b88516331b2314b60e01b8152fd5b508415610f6d565b8851637c2006d960e11b8152fd5b506127108411610f5c565b8851634a9caa2b60e01b8152fd5b90508281813d8311611217575b6111fb81836114ec565b81010312611213575180151581036112135738610f4e565b8a80fd5b503d6111f1565b8580fd5b8480fd5b5050503461045d578060031936011261045d5780606092611245611605565b8183805161125281611489565b828152826020820152015260018060a01b03168152603960205281812060243582526020522090805161128481611489565b8254928382528260ff60026001840154936020860194855201541692019115158252825193845251602084015251151590820152f35b5050503461045d578160031936011261045d576020906035549051908152f35b5050346101c45760203660031901126101c45780359060018060a01b039061130982865460101c1633146116c4565b828552603760205283852090600a820190600182540361137457509160017fbc54f85bee74832b80104d1b6d31c68eb8065057063a1d23f8ed7ce44a47f30294926101948795550154168552603860205281852060ff1981541690558151908152426020820152a151f35b855163200e272960e11b8152fd5b9050833461144c57602036600319011261144c57839083358152603760205220906113ac8261150e565b91600160a01b6001900393846001830154169460028301541692600383015491830154906005840154906006850154600786015492600887015494600988015496600a89015498600b0154998d519d8e9d8e9d8e6101809081815201611411916115b4565b9d602001528d015260608c015260808b015260a08a015260c08901528701526101008601526101208501526101408401526101608301520390f35b80fd5b90600182811c9216801561147f575b602083101461146957565b634e487b7160e01b600052602260045260246000fd5b91607f169161145e565b6060810190811067ffffffffffffffff8211176114a557604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116114a557604052565b610180810190811067ffffffffffffffff8211176114a557604052565b90601f8019910116810190811067ffffffffffffffff8211176114a557604052565b90604051918260008254926115228461144f565b908184526001948581169081600014611591575060011461154e575b505061154c925003836114ec565b565b9093915060005260209081600020936000915b81831061157957505061154c9350820101388061153e565b85548884018501529485019487945091830191611561565b91505061154c94506020925060ff191682840152151560051b820101388061153e565b91908251928382526000905b8482106115ed5750928060209394116115e0575b601f01601f1916010190565b60008382840101526115d4565b906020908180828501015190828601015201906115c0565b600435906001600160a01b038216820361076d57565b602435906001600160a01b038216820361076d57565b9061164582516101808084528301906115b4565b9160018060a01b038060208301511660208401526040820151166040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151908301526101608091015191015290565b156116cb57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b031617600055565b1561176457565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b604051906117ca826114cf565b81606081526101606000918260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201520152565b67ffffffffffffffff81116114a55760051b60200190565b8119811161183c570190565b634e487b7160e01b600052601160045260246000fd5b80518210156118665760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6203f48019811161183c576203f4800142119056fea2646970667358221220325737450703665e3b4a4257e4a15367d233140fc8707193d57c259e9a6f2a5964736f6c634300080f0033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b60009160e08335811c908163013cf08b146113825781630386a016146112da5781630c0512e9146112ba5781630def040214611226578163164bfde514610ea95781631ff799d214610e8d578163379607f514610d475781633d2f5bda14610cb657816344ff823714610c98578163485cc95514610b135781636f8a6e4314610ae9578163715018a614610a795781638a6655d6146107d05781638da5cb5b146107a35781638df828001461059a5781639418ce17146105695781639f2524ee14610509578163ad35e1dc146104c0578163b4643d29146104a0578163b5e18ce414610461578163b8b8ed6e1461043e578163c7f758a814610367578163cceb68f5146101c8575063f2fde38b1461012c57600080fd5b346101c45760203660031901126101c457610145611605565b9060018060a01b0361015e81865460101c1633146116c4565b821615610172575061016f906116fd565b51f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b90508391346101c457826003193601126101c4576035546101e881611818565b926101f5865194856114ec565b818452601f1961020483611818565b01855b818110610350575050845b8281106102785750505050825191602080840190808552835180925280868601968360051b870101940192955b82871061024c5785850386f35b909192938280610268600193603f198a82030186528851611631565b960192019601959291909261023f565b600119811161033d5761033760019182810192838952600b602091603783528b8b20908c51936102a7856114cf565b6102b08361150e565b855260018060a01b03809284015416908501526002820154168c84015260038101546060840152888101546080840152600581015460a0840152600681015460c084015260078101548784015260088101546101008401526009810154610120840152600a81015461014084015201546101608201526103308289611852565b5286611852565b50610212565b634e487b7160e01b865260118452602486fd5b60209061035b6117bd565b82828901015201610207565b849391503461043a57602036600319011261043a57600b90826104369561038c6117bd565b5085358152603760205220908351946103a4866114cf565b6103ad8361150e565b865260018060a01b0380600185015416602088015260028401541685870152600383015460608701528201546080860152600582015460a0860152600682015460c086015260078201549085015260088101546101008501526009810154610120850152600a810154610140850152015461016083015251918291602083526020830190611631565b0390f35b8380fd5b5050503461045d578160031936011261045d57602090516203f4808152f35b5080fd5b5050503461045d57602036600319011261045d5760209160ff9082906001600160a01b0361048d611605565b1681526038855220541690519015158152f35b5050503461045d578160031936011261045d576020906036549051908152f35b5050503461045d57602036600319011261045d576104dc611605565b60018060a01b03906104f582855460101c1633146116c4565b1660018060a01b0319603454161760345551f35b5050503461045d578060031936011261045d5760609181906001600160a01b03610531611605565b16815260396020528181206024358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b5050346101c45760203660031901126101c45761059360018060a01b03845460101c1633146116c4565b3560365551f35b8285853461045d576020806003193601126101c457833580845260378252828420600a8101926002845403610793576105d58783015461187c565b1561078357600582019384546105f16006850191825490611830565b60335488516318160ddd60e01b81526001600160a01b03989291869082908e9082908d165afa908115610779578b91610747575b50603654908060001904821181151516610734578a9b9c92916064919b9a9b020411156000146106e2575096600392917fc3e9e56c21ecd9fd3bcbaf6dd404f67ff375a520220a8edc72194dc096ef1c5098549054908181116000146106c5575050600b60019586925b600184036106a8575b500155558351928352820152a151f35b6001820154168c5260388652888c20805460ff191690558c610698565b10156106d757600b600295869261068f565b600b8395869261068f565b60019497506003925085939150600b7fa9257f9d0c375c52bac8f7010bf9ee592a943ac8f8fbad61dea6a8487e283108999601555501541685526038825283852060ff1981541690558351908152a151f35b634e487b7160e01b8c5260118d5260248cfd5b90508581813d8311610772575b61075e81836114ec565b8101031261076d57518c610625565b600080fd5b503d610754565b8a513d8d823e3d90fd5b84516319c4ee9f60e31b81528790fd5b845163200e272960e11b81528790fd5b5050503461045d578160031936011261045d579054905160109190911c6001600160a01b03168152602090f35b5050346101c45760603660031901126101c4578035906024356044359183865260209060378252858720906002600a83015403610a6b576001841490811580610a60575b610a52576108248184015461187c565b610a44578515610a365760335488516370a0823160e01b815233838201526001600160a01b03909116908581602481855afa908115610779578b91610a09575b50895163cbf9fe5f60e01b81523384820152908682602481865afa9182156109ff578c926109d0575b508181106109bd570387116109ae57808a913b1561045d578951633c56aa6160e11b815233848201908152602081018a90529091839183919082908490829060400103925af180156109a45761098c575b505033895260398452878920878a52845287892060018101805490929187911561098557540361097757505b610915868254611830565b9055156109625760050161092a848254611830565b90555b8451938452830152828201527ff3709dc32cf1356da6b8a12a5be1401aeb00989556be7b16ae566e65fef7a9df60603392a251f35b600601610970848254611830565b905561092d565b885163fe5e801760e01b8152fd5b555061090a565b610995906114bb565b6109a05788386108de565b8880fd5b8a513d84823e3d90fd5b508751630840c31d60e11b8152fd5b634e487b7160e01b8c526011845260248cfd5b9091508681813d83116109f8575b6109e881836114ec565b8101031261076d5751903861088d565b503d6109de565b8b513d8e823e3d90fd5b90508581813d8311610a2f575b610a2081836114ec565b8101031261076d575138610864565b503d610a16565b87516323f2f57960e11b8152fd5b87516319c4ee9f60e31b8152fd5b8751631cc147e360e31b8152fd5b506002851415610814565b865163200e272960e11b8152fd5b5050503461045d578160031936011261045d5781546001600160a01b039190610aa89060101c831633146116c4565b600080549151928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b5050503461045d578160031936011261045d5760345490516001600160a01b039091168152602090f35b5050346101c457816003193601126101c457610b2d611605565b90610b3661161b565b91845460ff8160081c161592838094610c8b575b8015610c74575b15610c1a575060ff198116600117865582610c09575b50610b8160ff865460081c16610b7c8161175d565b61175d565b610b8a336116fd565b845492610b9c60ff8560081c1661175d565b603280546001600160a01b039384166001600160a01b03199182161790915560338054929093169116179055601e603655610bd5575051f35b61ff00191682557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986020825160018152a151f35b61ffff191661010117855538610b67565b608490602087519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b158015610b515750600160ff831614610b51565b50600160ff831610610b4a565b5050503461045d578160031936011261045d57602090516127108152f35b5050346101c45760203660031901126101c457803590610ce360018060a01b03855460101c1633146116c4565b818452603760205282842090600a82016001815403610d3857917f7612de03d869f469b9967d2920682d83541e890e1a05daa3de481bf10ff25b7a93916002869455429101558151908152426020820152a151f35b50835163200e272960e11b8152fd5b5050346101c45760203660031901126101c45780359081845260376020526003600a848620015403610e7f57338452603960205282842082855260205282842090600282019060ff825416610e7157856001808060a01b0360335416940193845490803b156101c4578751634bdc2db560e11b8152339481019485526020850192909252909283919082908490829060400103925af18015610e6757610e2d575b50805460ff19166001179055548251918252336020830152818301527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed02690606090a151f35b917f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed026939195610e5d6060946114bb565b9591935091610de8565b85513d88823e3d90fd5b845163a584468160e01b8152fd5b825163200e272960e11b8152fd5b5050503461045d578160031936011261045d5751908152602090f35b5050346101c45760803660031901126101c457803567ffffffffffffffff80821161122257366023830112156112225781830135908111611222576024923684838501011161121e57610efa61161b565b604435906064359260018060a01b0390610f1b828b5460101c1633146116c4565b8160345416928951928391635170e73160e11b835216938483830152818a60209586935afa908115610779578b916111e4575b506111d657831580156111cb575b6111bd5761271085108015906111b5575b6111a757828a526038825260ff898b20541661119957828a5260388252888a20805460ff191660019081179091556035546000199283821461118757508101806035558b5260378352898b2091610fc4835461144f565b601f811161113f575b508b8c601f8a116001146110ac5793899795938997959360c09b8e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c96956008969261109f575b50508a831b918b60031b1c19161782555b81810180546001600160a01b0319908116881790915560028301805490911633179055426003830155600a820155600781018690550155895160a080825281018690529788968691018888013785850187018b9052850152338885015260608401526080830152601f01601f19168101030190a151f35b8d01013590508d38611017565b91601f198a16858452868420935b81811061112857509389979591936008938e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c968e60c09f9d9b991061110e575b505050508089811b018255611028565b60f88d60031b161c19918d01013516905538808d816110fe565b8c84018e01358555938501939287019287016110ba565b838d52848d20601f8a0160051c810191868b1061117d575b601f0160051c019083908e5b83821061117257505050610fcd565b81550183908e611163565b9091508190611157565b634e487b7160e01b8d5260119052898cfd5b88516365bd930960e11b8152fd5b88516331b2314b60e01b8152fd5b508415610f6d565b8851637c2006d960e11b8152fd5b506127108411610f5c565b8851634a9caa2b60e01b8152fd5b90508281813d8311611217575b6111fb81836114ec565b81010312611213575180151581036112135738610f4e565b8a80fd5b503d6111f1565b8580fd5b8480fd5b5050503461045d578060031936011261045d5780606092611245611605565b8183805161125281611489565b828152826020820152015260018060a01b03168152603960205281812060243582526020522090805161128481611489565b8254928382528260ff60026001840154936020860194855201541692019115158252825193845251602084015251151590820152f35b5050503461045d578160031936011261045d576020906035549051908152f35b5050346101c45760203660031901126101c45780359060018060a01b039061130982865460101c1633146116c4565b828552603760205283852090600a820190600182540361137457509160017fbc54f85bee74832b80104d1b6d31c68eb8065057063a1d23f8ed7ce44a47f30294926101948795550154168552603860205281852060ff1981541690558151908152426020820152a151f35b855163200e272960e11b8152fd5b9050833461144c57602036600319011261144c57839083358152603760205220906113ac8261150e565b91600160a01b6001900393846001830154169460028301541692600383015491830154906005840154906006850154600786015492600887015494600988015496600a89015498600b0154998d519d8e9d8e9d8e6101809081815201611411916115b4565b9d602001528d015260608c015260808b015260a08a015260c08901528701526101008601526101208501526101408401526101608301520390f35b80fd5b90600182811c9216801561147f575b602083101461146957565b634e487b7160e01b600052602260045260246000fd5b91607f169161145e565b6060810190811067ffffffffffffffff8211176114a557604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116114a557604052565b610180810190811067ffffffffffffffff8211176114a557604052565b90601f8019910116810190811067ffffffffffffffff8211176114a557604052565b90604051918260008254926115228461144f565b908184526001948581169081600014611591575060011461154e575b505061154c925003836114ec565b565b9093915060005260209081600020936000915b81831061157957505061154c9350820101388061153e565b85548884018501529485019487945091830191611561565b91505061154c94506020925060ff191682840152151560051b820101388061153e565b91908251928382526000905b8482106115ed5750928060209394116115e0575b601f01601f1916010190565b60008382840101526115d4565b906020908180828501015190828601015201906115c0565b600435906001600160a01b038216820361076d57565b602435906001600160a01b038216820361076d57565b9061164582516101808084528301906115b4565b9160018060a01b038060208301511660208401526040820151166040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151908301526101608091015191015290565b156116cb57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b031617600055565b1561176457565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b604051906117ca826114cf565b81606081526101606000918260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201520152565b67ffffffffffffffff81116114a55760051b60200190565b8119811161183c570190565b634e487b7160e01b600052601160045260246000fd5b80518210156118665760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6203f48019811161183c576203f4800142119056fea2646970667358221220325737450703665e3b4a4257e4a15367d233140fc8707193d57c259e9a6f2a5964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256)": {
        "params": {
          "_id": "Proposal id"
        }
      },
      "closeProposal(uint256)": {
        "params": {
          "_id": "Proposal id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "propose(string,address,uint256,uint256)": {
        "params": {
          "_basePremiumRatio": "Base annual ratio of the premium",
          "_maxCapacity": "Max capacity ratio for the project pool",
          "_name": "New project name",
          "_token": "Native token address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "settle(uint256)": {
        "params": {
          "_id": "Proposal id"
        }
      },
      "startVoting(uint256)": {
        "params": {
          "_id": "Proposal id to start voting"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vote(uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount of veDEG to vote",
          "_id": "Proposal id",
          "_isFor": "Voting choice"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256)": {
        "notice": "Claim back veDEG after voting result settled"
      },
      "closeProposal(uint256)": {
        "notice": "Close a pending proposal         Need the approval of dev team (onlyOwner)"
      },
      "propose(string,address,uint256,uint256)": {
        "notice": "Start a new proposal"
      },
      "settle(uint256)": {
        "notice": "Settle the proposal result"
      },
      "startVoting(uint256)": {
        "notice": "Start the voting process         Need the approval of dev team (onlyOwner)"
      },
      "vote(uint256,uint256,uint256)": {
        "notice": "Vote for a proposal         Voting power is decided by the (unlocked) balance of veDEG         Once voted, those veDEG will be locked"
      }
    },
    "notice": "Onboard Proposal",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17723,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17830,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6175,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "deg",
        "offset": 0,
        "slot": "50",
        "type": "t_contract(IDegisToken)6291"
      },
      {
        "astId": 6178,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "veDeg",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IVeDEG)7455"
      },
      {
        "astId": 20750,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPriorityPoolFactory)7349"
      },
      {
        "astId": 19921,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "proposalCounter",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 19923,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "quorumRatio",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 19953,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "proposals",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_uint256,t_struct(Proposal)19948_storage)"
      },
      {
        "astId": 19957,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "proposed",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19971,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "votes",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)19964_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)6291": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPriorityPoolFactory)7349": {
        "encoding": "inplace",
        "label": "contract IPriorityPoolFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IVeDEG)7455": {
        "encoding": "inplace",
        "label": "contract IVeDEG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)19964_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct OnboardProposal.UserVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserVote)19964_storage)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)19948_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OnboardProposal.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)19948_storage"
      },
      "t_mapping(t_uint256,t_struct(UserVote)19964_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OnboardProposal.UserVote)",
        "numberOfBytes": "32",
        "value": "t_struct(UserVote)19964_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)19948_storage": {
        "encoding": "inplace",
        "label": "struct OnboardProposal.Proposal",
        "members": [
          {
            "astId": 19925,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 19927,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "protocolToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19929,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "proposer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19931,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "proposeTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19933,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "voteTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19935,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "numFor",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19937,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "numAgainst",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 19939,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "maxCapacity",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 19941,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "basePremiumRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 19943,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "poolId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 19945,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "status",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 19947,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "result",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(UserVote)19964_storage": {
        "encoding": "inplace",
        "label": "struct OnboardProposal.UserVote",
        "members": [
          {
            "astId": 19959,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "choice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19961,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19963,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}