{
  "address": "0x353F24A05BD7BDE6bFb7e7F38EDE920581EE635D",
  "abi": [
    {
      "inputs": [],
      "name": "PolicyCenter__AlreadyClaimedPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__BadLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__InsufficientCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__InvalidPremiumSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoExchange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NonExistentPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__OnlyPriorityPoolFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__OnlyTreasury",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__PoolPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__PremiumTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__WrongPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__WrongPriorityPoolID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__ZeroPremium",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coverDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coverAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumInUSDC",
          "type": "uint256"
        }
      ],
      "name": "CoverBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityStakedWithoutFarming",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priorityLP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priorityLP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityUnstakedWithoutFarming",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayoutClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toPriority",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toProtection",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTreasury",
          "type": "uint256"
        }
      ],
      "name": "PremiumSplitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "PremiumSwapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "approvePoolToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayment",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "buyCover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_crToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "claimPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coverRightTokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "currentLPAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dexPriceGetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "exchangeByToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oracleType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceGetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priorityPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coverRightTokenFactory",
          "type": "address"
        }
      ],
      "name": "setCoverRightTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dexPriceGetter",
          "type": "address"
        }
      ],
      "name": "setDexPriceGetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "setExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "setExchangeByToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_type",
          "type": "uint256"
        }
      ],
      "name": "setOracleType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutPool",
          "type": "address"
        }
      ],
      "name": "setPayoutPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceGetter",
          "type": "address"
        }
      ],
      "name": "setPriceGetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "name": "setProtectionPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weightedFarmingPool",
          "type": "address"
        }
      ],
      "name": "setWeightedFarmingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLiquidityWithoutFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "storePoolInformation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenByPoolId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priorityLP",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priorityLP",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeLiquidityWithoutFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedFarmingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x99c77faf9666631f884b6ba0619f3434bb9b9f4b6430a1c84fa620410e357dd3",
  "receipt": {
    "to": null,
    "from": "0x32eB34d060c12aD0491d260c436d30e5fB13a8Cd",
    "contractAddress": "0x353F24A05BD7BDE6bFb7e7F38EDE920581EE635D",
    "transactionIndex": 1,
    "gasUsed": "440806871",
    "logsBloom": "0x
    "blockHash": "0x1b013e7afd38ba4432e602efbceccfb232a374ce3d97116c69590cf6554fbaa2",
    "transactionHash": "0x99c77faf9666631f884b6ba0619f3434bb9b9f4b6430a1c84fa620410e357dd3",
    "logs": [],
    "blockNumber": 18800114,
    "cumulativeGasUsed": "440806871",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b57206096d9df9b6206c56f30245a8a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PolicyCenter__AlreadyClaimedPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__BadLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__InsufficientCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__InvalidPremiumSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoExchange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NonExistentPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__OnlyPriorityPoolFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__OnlyTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__PremiumTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__WrongPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__WrongPriorityPoolID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__ZeroPremium\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumInUSDC\",\"type\":\"uint256\"}],\"name\":\"CoverBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityStakedWithoutFarming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priorityLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priorityLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityUnstakedWithoutFarming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPriority\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toProtection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTreasury\",\"type\":\"uint256\"}],\"name\":\"PremiumSplitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"PremiumSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approvePoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayment\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"buyCover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_crToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverRightTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"currentLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPriceGetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priorityPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverRightTokenFactory\",\"type\":\"address\"}],\"name\":\"setCoverRightTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dexPriceGetter\",\"type\":\"address\"}],\"name\":\"setDexPriceGetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchangeByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"setOracleType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutPool\",\"type\":\"address\"}],\"name\":\"setPayoutPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceGetter\",\"type\":\"address\"}],\"name\":\"setPriceGetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"name\":\"setProtectionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weightedFarmingPool\",\"type\":\"address\"}],\"name\":\"setWeightedFarmingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLiquidityWithoutFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"storePoolInformation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenByPoolId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priorityLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priorityLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLiquidityWithoutFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedFarmingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"approvePoolToken(address)\":{\"params\":{\"_token\":\"Address of the approved token\"}},\"buyCover(uint256,uint256,uint256,uint256,address[])\":{\"params\":{\"_coverAmount\":\"Amount to cover\",\"_coverDuration\":\"Cover duration in month (1 ~ 3)\",\"_maxPayment\":\"Maximum payment user can accept\",\"_poolId\":\"Pool id\"},\"returns\":{\"_0\":\"crToken CR token address\"}},\"claimPayout(uint256,address,uint256)\":{\"params\":{\"_crToken\":\"Cover right token address\",\"_generation\":\"Generation of the priority pool\",\"_poolId\":\"Pool id\"}},\"currentLPAddress(uint256)\":{\"params\":{\"_poolId\":\"Priority Pool ID\"},\"returns\":{\"lpAddress\":\"Current generation LP token address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideLiquidity(uint256)\":{\"params\":{\"_amount\":\"Amount of liquidity (usdc) to provide\"}},\"removeLiquidity(uint256)\":{\"params\":{\"_amount\":\"Amount of liquidity to provide\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stakeLiquidity(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of PRO-LP tokens to stake\",\"_poolId\":\"Pool id\"}},\"stakeLiquidityWithoutFarming(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of PRO-LP amount\",\"_poolId\":\"Pool id\"}},\"storePoolInformation(address,address,uint256)\":{\"params\":{\"_pool\":\"Address of the priority pool\",\"_poolId\":\"Pool id\",\"_token\":\"Address of the priority pool's native token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeLiquidity(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Amount of LP(priority lp) tokens to withdraw\",\"_poolId\":\"Pool id\",\"_priorityLP\":\"Priority lp token address to withdraw\"}},\"unstakeLiquidityWithoutFarming(uint256,address,uint256)\":{\"params\":{\"_amount\":\"PRI-LP token amount to remove\",\"_poolId\":\"Pool id\",\"_priorityLP\":\"PRI-LP token address\"}}},\"title\":\"Policy Center\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvePoolToken(address)\":{\"notice\":\"Approve the exchange to swap tokens\"},\"buyCover(uint256,uint256,uint256,uint256,address[])\":{\"notice\":\"Buy new cover for a given pool         Select a pool with parameter \\\"poolId\\\"         Cover amount is in usdc and duration is in month         The premium ratio may be dynamic so \\\"maxPayment\\\" is similar to \\\"slippage\\\"\"},\"claimPayout(uint256,address,uint256)\":{\"notice\":\"Claim payout         Need to use a specific crToken address as parameter\"},\"currentLPAddress(uint256)\":{\"notice\":\"Returns the current LP address for a Pool ID         \\\"Current\\\" means the LP address that is currently being used         Because each priority pool may have several generations of LP tokens         Once reported and paid out, the LP generation will be updated\"},\"provideLiquidity(uint256)\":{\"notice\":\"Provide liquidity to Protection Pool\"},\"removeLiquidity(uint256)\":{\"notice\":\"Remove liquidity from protection pool\"},\"stakeLiquidity(uint256,uint256)\":{\"notice\":\"Stake Protection Pool LP (PRO-LP) into priority pools         And automatically stake the PRI-LP tokens into weighted farming pool         With this function, no need for approval of PRI-LP tokens         If you want to hold the PRI-LP tokens for other usage         Call \\\"stakeLiquidityWithoutFarming\\\"\"},\"stakeLiquidityWithoutFarming(uint256,uint256)\":{\"notice\":\"Stake liquidity to priority pool without depositing into farming\"},\"storePoolInformation(address,address,uint256)\":{\"notice\":\"Store new pool information\"},\"unstakeLiquidity(uint256,address,uint256)\":{\"notice\":\"Unstake Protection Pool LP from priority pools         There may be different generations of priority lp tokens         This function will first remove the PRI-LP token from farming pool         Ensure that your PRI-LP tokens are inside the farming pool         If the PRI-LP tokens are in your own wallet, use \\\"unstakeLiquidityWithoutFarming\\\"\"},\"unstakeLiquidityWithoutFarming(uint256,address,uint256)\":{\"notice\":\"Unstake liquidity without removing PRI-LP from farming\"}},\"notice\":\"This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/PolicyCenter.sol\":\"PolicyCenter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363833313931393630343835\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/core/PolicyCenter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ExternalTokenDependencies.sol\\\";\\nimport \\\"./interfaces/PolicyCenterEventError.sol\\\";\\nimport \\\"./interfaces/PolicyCenterDependencies.sol\\\";\\n\\nimport \\\"../util/OwnableWithoutContextUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPriceGetter.sol\\\";\\n\\nimport \\\"../libraries/DateTime.sol\\\";\\nimport \\\"../libraries/StringUtils.sol\\\";\\nimport \\\"../libraries/SimpleSafeERC20.sol\\\";\\n\\n/**\\n * @title Policy Center\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the policy center for degis Protocol Protection\\n *         Users can buy policies and get payoff here\\n *         Sellers can provide liquidity and choose the pools to cover\\n *\\n */\\ncontract PolicyCenter is\\n    PolicyCenterEventError,\\n    OwnableWithoutContextUpgradeable,\\n    ExternalTokenDependencies,\\n    PolicyCenterDependencies\\n{\\n    using SimpleSafeERC20 for SimpleIERC20;\\n    using StringUtils for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address public constant USDC = 0x23d0cddC1Ea9Fcc5CA9ec6b5fC77E304bCe8d4c3;\\n\\n    // Pool Id => Priority Pool Address\\n    // Updated once pools are deployed\\n    // Protection Pool is pool 0\\n    mapping(uint256 => address) public priorityPools;\\n\\n    // Pool Id => Pool Native Token Address\\n    mapping(uint256 => address) public tokenByPoolId;\\n\\n    // Protocol token => Oracle type\\n    // 0: Default as chainlink oracle\\n    // 1: Dex oracle by traderJoe\\n    mapping(address => uint256) public oracleType;\\n\\n    // Protocol token => Exchange router address\\n    // Some tokens use Joe-V1, some use Joe-LiquidityBook\\n    mapping(address => address) public exchangeByToken;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(\\n        address _deg,\\n        address _veDeg,\\n        address _protectionPool\\n    ) public initializer {\\n        __Ownable_init();\\n        __ExternalToken__Init(_deg, _veDeg);\\n\\n        // Peotection pool as pool 0 and with usdc token\\n        priorityPools[0] = _protectionPool;\\n        tokenByPoolId[0] = USDC;\\n\\n        protectionPool = _protectionPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Whether the pool exists\\n     */\\n    modifier poolExists(uint256 _poolId) {\\n        if (_poolId == 0 || priorityPools[_poolId] == address(0))\\n            revert PolicyCenter__NonExistentPool();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Returns the current LP address for a Pool ID\\n     *\\n     *         \\\"Current\\\" means the LP address that is currently being used\\n     *         Because each priority pool may have several generations of LP tokens\\n     *         Once reported and paid out, the LP generation will be updated\\n     *\\n     * @param _poolId Priority Pool ID\\n     *\\n     * @return lpAddress Current generation LP token address\\n     */\\n    function currentLPAddress(\\n        uint256 _poolId\\n    ) external view returns (address lpAddress) {\\n        lpAddress = IPriorityPool(priorityPools[_poolId]).currentLPAddress();\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setExchange(address _exchange) external onlyOwner {\\n        exchange = _exchange;\\n    }\\n\\n    function setPriceGetter(address _priceGetter) external onlyOwner {\\n        priceGetter = _priceGetter;\\n    }\\n\\n    function setProtectionPool(address _protectionPool) external onlyOwner {\\n        protectionPool = _protectionPool;\\n    }\\n\\n    function setWeightedFarmingPool(\\n        address _weightedFarmingPool\\n    ) external onlyOwner {\\n        weightedFarmingPool = _weightedFarmingPool;\\n    }\\n\\n    function setCoverRightTokenFactory(\\n        address _coverRightTokenFactory\\n    ) external onlyOwner {\\n        coverRightTokenFactory = _coverRightTokenFactory;\\n    }\\n\\n    function setPriorityPoolFactory(\\n        address _priorityPoolFactory\\n    ) external onlyOwner {\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    function setPayoutPool(address _payoutPool) external onlyOwner {\\n        payoutPool = _payoutPool;\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    function setDexPriceGetter(address _dexPriceGetter) external onlyOwner {\\n        dexPriceGetter = _dexPriceGetter;\\n    }\\n\\n    function setOracleType(address _token, uint256 _type) external onlyOwner {\\n        require(_type < 2, \\\"Wrong type\\\");\\n        oracleType[_token] = _type;\\n    }\\n\\n    function setExchangeByToken(\\n        address _token,\\n        address _exchange\\n    ) external onlyOwner {\\n        exchangeByToken[_token] = _exchange;\\n    }\\n\\n    /**\\n     * @notice Approve the exchange to swap tokens\\n     *\\n     * @param _token Address of the approved token\\n     */\\n    function approvePoolToken(address _token) external onlyOwner {\\n        _approvePoolToken(_token);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Buy new cover for a given pool\\n     *\\n     *         Select a pool with parameter \\\"poolId\\\"\\n     *         Cover amount is in usdc and duration is in month\\n     *         The premium ratio may be dynamic so \\\"maxPayment\\\" is similar to \\\"slippage\\\"\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverAmount   Amount to cover\\n     * @param _coverDuration Cover duration in month (1 ~ 3)\\n     * @param _maxPayment    Maximum payment user can accept\\n     *\\n     * @return crToken CR token address\\n     */\\n    function buyCover(\\n        uint256 _poolId,\\n        uint256 _coverAmount,\\n        uint256 _coverDuration,\\n        uint256 _maxPayment,\\n        address[] memory path\\n    ) external poolExists(_poolId) returns (address) {\\n        if (!_withinLength(_coverDuration)) revert PolicyCenter__BadLength();\\n\\n        _checkCapacity(_poolId, _coverAmount);\\n\\n        // Premium in USD and duration in second\\n        (uint256 premium, uint256 timestampDuration) = _getCoverPrice(\\n            _poolId,\\n            _coverAmount,\\n            _coverDuration\\n        );\\n        // Check if premium cost is within limits given by user\\n        if (premium > _maxPayment) revert PolicyCenter__PremiumTooHigh();\\n\\n        // Mint cover right tokens to buyer\\n        // CR token has different months and generations\\n        address crToken = _checkCRToken(_poolId, _coverDuration);\\n        ICoverRightToken(crToken).mint(_poolId, msg.sender, _coverAmount);\\n\\n        // Split the premium income and update the pool status\\n        (\\n            uint256 premiumToPriorityPool,\\n            ,\\n            uint256 premiumToTreasury\\n        ) = _splitPremium(_poolId, premium, path);\\n\\n        IProtectionPool(protectionPool).updateWhenBuy();\\n        IPriorityPool(priorityPools[_poolId]).updateWhenBuy(\\n            _coverAmount,\\n            premiumToPriorityPool,\\n            _coverDuration,\\n            timestampDuration\\n        );\\n        ITreasury(treasury).premiumIncome(_poolId, premiumToTreasury);\\n\\n        emit CoverBought(\\n            msg.sender,\\n            _poolId,\\n            _coverDuration,\\n            _coverAmount,\\n            premium\\n        );\\n\\n        return crToken;\\n    }\\n\\n    /**\\n     * @notice Provide liquidity to Protection Pool\\n     *\\n     * @param _amount Amount of liquidity (usdc) to provide\\n     */\\n    function provideLiquidity(uint256 _amount) external {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        // Mint PRO-LP tokens and transfer usdc\\n        IProtectionPool(protectionPool).providedLiquidity(_amount, msg.sender);\\n        SimpleIERC20(USDC).transferFrom(msg.sender, protectionPool, _amount);\\n\\n        emit LiquidityProvided(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake Protection Pool LP (PRO-LP) into priority pools\\n     *         And automatically stake the PRI-LP tokens into weighted farming pool\\n     *         With this function, no need for approval of PRI-LP tokens\\n     *\\n     *         If you want to hold the PRI-LP tokens for other usage\\n     *         Call \\\"stakeLiquidityWithoutFarming\\\"\\n     *\\n     * @param _poolId Pool id\\n     * @param _amount Amount of PRO-LP tokens to stake\\n     */\\n    function stakeLiquidity(\\n        uint256 _poolId,\\n        uint256 _amount\\n    ) public poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        address pool = priorityPools[_poolId];\\n\\n        // Update status and mint Prority Pool LP tokens\\n        // Directly mint pri-lp tokens to policy center\\n        // And send the PRI-LP tokens to weighted farming pool\\n        // No need for approval\\n        address lpToken = IPriorityPool(pool).stakedLiquidity(\\n            _amount,\\n            address(this)\\n        );\\n        SimpleIERC20(protectionPool).transferFrom(msg.sender, pool, _amount);\\n        IProtectionPool(protectionPool).updateStakedSupply(true, _amount);\\n\\n        IWeightedFarmingPool(weightedFarmingPool).depositFromPolicyCenter(\\n            _poolId,\\n            lpToken,\\n            _amount,\\n            msg.sender\\n        );\\n        SimpleIERC20(lpToken).transfer(weightedFarmingPool, _amount);\\n\\n        emit LiquidityStaked(msg.sender, _poolId, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake liquidity to priority pool without depositing into farming\\n     *\\n     * @param _poolId Pool id\\n     * @param _amount Amount of PRO-LP amount\\n     */\\n    function stakeLiquidityWithoutFarming(\\n        uint256 _poolId,\\n        uint256 _amount\\n    ) public poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        address pool = priorityPools[_poolId];\\n\\n        // Mint PRI-LP tokens to the user directly\\n        IPriorityPool(pool).stakedLiquidity(_amount, msg.sender);\\n        SimpleIERC20(protectionPool).transferFrom(msg.sender, pool, _amount);\\n\\n        IProtectionPool(protectionPool).updateStakedSupply(true, _amount);\\n\\n        emit LiquidityStakedWithoutFarming(msg.sender, _poolId, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake Protection Pool LP from priority pools\\n     *         There may be different generations of priority lp tokens\\n     *\\n     *         This function will first remove the PRI-LP token from farming pool\\n     *         Ensure that your PRI-LP tokens are inside the farming pool\\n     *         If the PRI-LP tokens are in your own wallet, use \\\"unstakeLiquidityWithoutFarming\\\"\\n     *\\n     * @param _poolId     Pool id\\n     * @param _priorityLP Priority lp token address to withdraw\\n     * @param _amount     Amount of LP(priority lp) tokens to withdraw\\n     */\\n    function unstakeLiquidity(\\n        uint256 _poolId,\\n        address _priorityLP,\\n        uint256 _amount\\n    ) public poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        // First remove the PRI-LP token from weighted farming pool\\n        IWeightedFarmingPool(weightedFarmingPool).withdrawFromPolicyCenter(\\n            _poolId,\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        // Burn PRI-LP tokens and give back PRO-LP tokens\\n        IPriorityPool(priorityPools[_poolId]).unstakedLiquidity(\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        IProtectionPool(protectionPool).updateStakedSupply(false, _amount);\\n\\n        emit LiquidityUnstaked(msg.sender, _poolId, _priorityLP, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake liquidity without removing PRI-LP from farming\\n     *\\n     * @param _poolId     Pool id\\n     * @param _priorityLP PRI-LP token address\\n     * @param _amount     PRI-LP token amount to remove\\n     */\\n    function unstakeLiquidityWithoutFarming(\\n        uint256 _poolId,\\n        address _priorityLP,\\n        uint256 _amount\\n    ) external poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        IPriorityPool(priorityPools[_poolId]).unstakedLiquidity(\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        IProtectionPool(protectionPool).updateStakedSupply(false, _amount);\\n\\n        emit LiquidityUnstakedWithoutFarming(\\n            msg.sender,\\n            _poolId,\\n            _priorityLP,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from protection pool\\n     *\\n     * @param _amount Amount of liquidity to provide\\n     */\\n    function removeLiquidity(uint256 _amount) external {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        IProtectionPool(protectionPool).removedLiquidity(_amount, msg.sender);\\n\\n        emit LiquidityRemoved(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim payout\\n     *         Need to use a specific crToken address as parameter\\n     *\\n     * @param _poolId     Pool id\\n     * @param _crToken    Cover right token address\\n     * @param _generation Generation of the priority pool\\n     */\\n    function claimPayout(\\n        uint256 _poolId,\\n        address _crToken,\\n        uint256 _generation\\n    ) public poolExists(_poolId) {\\n        (string memory poolName, , , , ) = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        ).pools(_poolId);\\n\\n        // Claim payout from payout pool\\n        // Get the actual claimed amount and new generation cr token to be minted\\n        (uint256 claimed, uint256 newGenerationCRAmount) = IPayoutPool(\\n            payoutPool\\n        ).claim(msg.sender, _crToken, _poolId, _generation);\\n\\n        emit PayoutClaimed(msg.sender, claimed);\\n\\n        // Check if the new generation crToken has been deployed\\n        // If so, get the address\\n        // If not, deploy the new generation cr token\\n        if (newGenerationCRAmount > 0) {\\n            uint256 expiry = ICoverRightToken(_crToken).expiry();\\n\\n            address newCRToken = _checkNewCRToken(\\n                _poolId,\\n                poolName,\\n                expiry,\\n                ++_generation\\n            );\\n\\n            ICoverRightToken(newCRToken).mint(\\n                _poolId,\\n                msg.sender,\\n                newGenerationCRAmount\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Store new pool information\\n     *\\n     * @param _pool   Address of the priority pool\\n     * @param _token  Address of the priority pool's native token\\n     * @param _poolId Pool id\\n     */\\n    function storePoolInformation(\\n        address _pool,\\n        address _token,\\n        uint256 _poolId\\n    ) external {\\n        if (msg.sender != priorityPoolFactory)\\n            revert PolicyCenter__OnlyPriorityPoolFactory();\\n\\n        // Should never change the protection pool information\\n        assert(_poolId > 0);\\n\\n        tokenByPoolId[_poolId] = _token;\\n        priorityPools[_poolId] = _pool;\\n\\n        _approvePoolToken(_token);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Swap tokens to USDC\\n     *\\n     * @param _fromToken Token address to swap from\\n     * @param _amount    Amount of token to swap from\\n     * @param _path      Swap path\\n     *\\n     * @return received Actual usdc amount received\\n     */\\n    function _swapTokens(\\n        address _fromToken,\\n        uint256 _amount,\\n        address[] memory _path\\n    ) internal returns (uint256 received) {\\n        uint256 length = _path.length;\\n\\n        if (_path[length - 1] != USDC) revert PolicyCenter__WrongPath();\\n        if (_path[0] != _fromToken) revert PolicyCenter__WrongPath();\\n\\n        // Swap for USDC and return the received amount\\n        uint256[] memory amountsOut = new uint256[](2);\\n\\n        // The swap router used by this token\\n        address router = exchangeByToken[_fromToken];\\n\\n        // @audit Calculating slippage\\n        uint256[] memory amountOutCal = IExchange(router).getAmountsOut(\\n            _amount,\\n            _path\\n        );\\n\\n        amountsOut = IExchange(exchange).swapExactTokensForTokens(\\n            _amount,\\n            ((amountOutCal[length - 1] * (10000 - SLIPPAGE)) / 10000),\\n            _path,\\n            address(this),\\n            block.timestamp + 1\\n        );\\n\\n        // Received amount is the second element of the return value\\n        received = amountsOut[length - 1];\\n\\n        emit PremiumSwapped(_fromToken, _amount, received);\\n    }\\n\\n    /**\\n     * @notice Check the cover length\\n     *\\n     * @param _length Length to check (in month)\\n     *\\n     * @return withinLength Whether the cover is within the length\\n     */\\n    function _withinLength(uint256 _length) internal pure returns (bool) {\\n        return _length > 0 && _length <= MAX_COVER_LENGTH;\\n    }\\n\\n    /**\\n     * @notice Check cover right tokens\\n     *         If the crToken does not exist, it will be deployed here\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverDuration Cover length in month\\n     *\\n     * @return crToken Cover right token address\\n     */\\n    function _checkCRToken(\\n        uint256 _poolId,\\n        uint256 _coverDuration\\n    ) internal returns (address crToken) {\\n        // Get the expiry timestamp\\n        (uint256 expiry, uint256 year, uint256 month) = DateTimeLibrary\\n            ._getExpiry(block.timestamp, _coverDuration);\\n\\n        (\\n            string memory poolName,\\n            address poolAddress,\\n            ,\\n            ,\\n\\n        ) = IPriorityPoolFactory(priorityPoolFactory).pools(_poolId);\\n\\n        uint256 generation = IPriorityPool(poolAddress).generation();\\n\\n        crToken = _getCRTokenAddress(_poolId, expiry, generation);\\n        if (crToken == address(0)) {\\n            // CR-JOE-2022-1-G1\\n            string memory tokenName = string.concat(\\n                \\\"CR-\\\",\\n                poolName,\\n                \\\"-\\\",\\n                year._toString(),\\n                \\\"-\\\",\\n                month._toString(),\\n                \\\"-G\\\",\\n                generation._toString()\\n            );\\n\\n            crToken = ICoverRightTokenFactory(coverRightTokenFactory)\\n                .deployCRToken(\\n                    poolName,\\n                    _poolId,\\n                    tokenName,\\n                    expiry,\\n                    generation\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Check whether need to deploy new cr token\\n     *\\n     * @param _poolId        Pool id\\n     * @param _poolName      Pool name\\n     * @param _expiry        Expiry timestamp of the cr token\\n     * @param _newGeneration New generation of the cr token\\n     *\\n     * @return newCRToken New cover right token address\\n     */\\n    function _checkNewCRToken(\\n        uint256 _poolId,\\n        string memory _poolName,\\n        uint256 _expiry,\\n        uint256 _newGeneration\\n    ) internal returns (address newCRToken) {\\n        (uint256 year, uint256 month, ) = DateTimeLibrary.timestampToDate(\\n            _expiry\\n        );\\n\\n        // Check the cr token exist\\n        newCRToken = _getCRTokenAddress(_poolId, _expiry, _newGeneration);\\n\\n        // If cr token not exists, deploy it\\n        if (newCRToken == address(0)) {\\n            // CR-JOE-2022-1-G1\\n            string memory tokenName = string.concat(\\n                \\\"CR-\\\",\\n                _poolName,\\n                \\\"-\\\",\\n                year._toString(),\\n                \\\"-\\\",\\n                month._toString(),\\n                \\\"-G\\\",\\n                _newGeneration._toString()\\n            );\\n\\n            newCRToken = ICoverRightTokenFactory(coverRightTokenFactory)\\n                .deployCRToken(\\n                    _poolName,\\n                    _poolId,\\n                    tokenName,\\n                    _expiry,\\n                    _newGeneration\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cover right token address\\n     *         The address is determined by poolId and expiry (last second of each month)\\n     *         If token not exist, it will return zero address\\n     *\\n     * @param _poolId     Pool id\\n     * @param _expiry     Expiry timestamp\\n     * @param _generation Generation of the priority pool\\n     *\\n     * @return crToken Cover right token address\\n     */\\n    function _getCRTokenAddress(\\n        uint256 _poolId,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) internal view returns (address) {\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_poolId, _expiry, _generation)\\n        );\\n\\n        return\\n            ICoverRightTokenFactory(coverRightTokenFactory).saltToAddress(salt);\\n    }\\n\\n    /**\\n     * @notice Get native token amount to pay\\n     *\\n     * @param _premium Premium in USD\\n     * @param _token   Native token address\\n     *\\n     * @return premiumInNativeToken Premium calculated in native token\\n     */\\n    function _getNativeTokenAmount(\\n        uint256 _premium,\\n        address _token\\n    ) internal returns (uint256 premiumInNativeToken) {\\n        // Price in 18 decimals\\n        uint256 price;\\n        if (oracleType[_token] == 0) {\\n            // By default use chainlink\\n            price = IPriceGetter(priceGetter).getLatestPrice(_token);\\n        } else if (oracleType[_token] == 1) {\\n            // If no chainlink oracle, use dex price getter\\n            price = IPriceGetter(dexPriceGetter).getLatestPrice(_token);\\n        } else revert(\\\"Wrong type\\\");\\n\\n        // @audit Fix decimal for native tokens\\n        // Check the real decimal diff\\n        uint256 decimalDiff = IERC20Decimals(_token).decimals() - 6;\\n        premiumInNativeToken = (_premium * 1e18 * (10 ** decimalDiff)) / price;\\n\\n        // Pay native tokens\\n        SimpleIERC20(_token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            premiumInNativeToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Split premium for a pool\\n     *         To priority pool is paid in native token\\n     *         To protection pool and treasury is paid in usdc\\n     *\\n     * @param _poolId       Pool id\\n     * @param _premiumInUSD Premium in USD\\n     * @param _path         Swap path\\n     *\\n     * @return toPriority   Premium to priority pool\\n     * @return toProtection Premium to protection pool\\n     * @return toTreasury   Premium to treasury\\n     */\\n    function _splitPremium(\\n        uint256 _poolId,\\n        uint256 _premiumInUSD,\\n        address[] memory _path\\n    )\\n        internal\\n        returns (uint256 toPriority, uint256 toProtection, uint256 toTreasury)\\n    {\\n        if (_premiumInUSD == 0) revert PolicyCenter__ZeroPremium();\\n\\n        address nativeToken = tokenByPoolId[_poolId];\\n\\n        // Premium in project native token (paid in internal function)\\n        uint256 premiumInNativeToken = _getNativeTokenAmount(\\n            _premiumInUSD,\\n            nativeToken\\n        );\\n\\n        // Native tokens to Priority pool\\n        toPriority = (premiumInNativeToken * PREMIUM_TO_PRIORITY) / 10000;\\n\\n        // Swap native tokens to usdc\\n        // Except for amount to priority pool, remaining is distributed in usdc\\n        uint256 amountToSwap = premiumInNativeToken - toPriority;\\n        // USDC amount received\\n        uint256 amountReceived = _swapTokens(nativeToken, amountToSwap, _path);\\n\\n        // USDC to Protection Pool\\n        toProtection =\\n            (amountReceived * PREMIUM_TO_PROTECTION) /\\n            (PREMIUM_TO_PROTECTION + PREMIUM_TO_TREASURY);\\n        // USDC to Treasury\\n        toTreasury = amountReceived - toProtection;\\n\\n        emit PremiumSplitted(toPriority, toProtection, toTreasury);\\n\\n        // @audit Add real transfer\\n        // Transfer tokens to different pools\\n        SimpleIERC20(nativeToken).transfer(weightedFarmingPool, toPriority);\\n        SimpleIERC20(USDC).transfer(protectionPool, toProtection);\\n        SimpleIERC20(USDC).transfer(treasury, toTreasury);\\n    }\\n\\n    /**\\n     * @notice Approve a pool token for the exchange\\n     *\\n     * @param _token Token address\\n     */\\n    function _approvePoolToken(address _token) internal {\\n        if (exchange == address(0)) revert PolicyCenter__NoExchange();\\n        // approve exchange to swap policy center tokens for deg\\n        SimpleIERC20(_token).approve(exchange, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Get cover price from insurance pool\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverAmount   Cover amount (usdc)\\n     * @param _coverDuration Cover length in months (1,2,3)\\n     */\\n    function _getCoverPrice(\\n        uint256 _poolId,\\n        uint256 _coverAmount,\\n        uint256 _coverDuration\\n    ) internal view returns (uint256 price, uint256 timestampDuration) {\\n        (price, timestampDuration) = IPriorityPool(priorityPools[_poolId])\\n            .coverPrice(_coverAmount, _coverDuration);\\n    }\\n\\n    /**\\n     * @notice Check priority pool capacity\\n     *\\n     * @param _poolId      Pool id\\n     * @param _coverAmount Amount (usdc) to cover\\n     */\\n    function _checkCapacity(\\n        uint256 _poolId,\\n        uint256 _coverAmount\\n    ) internal view {\\n        IPriorityPool pool = IPriorityPool(priorityPools[_poolId]);\\n        uint256 maxCapacityAmount = (SimpleIERC20(USDC).balanceOf(\\n            address(protectionPool)\\n        ) * pool.maxCapacity()) / 10000;\\n\\n        if (maxCapacityAmount < _coverAmount + pool.activeCovered())\\n            revert PolicyCenter__InsufficientCapacity();\\n    }\\n}\\n\",\"keccak256\":\"0x1cfa9031858a90869de7275adccf0e5053517e31e09f0be06f142a91beacccfe\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/PolicyCenterDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../../interfaces/IProtectionPool.sol\\\";\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\nimport \\\"../../interfaces/ICoverRightToken.sol\\\";\\nimport \\\"../../interfaces/ICoverRightTokenFactory.sol\\\";\\nimport \\\"../../interfaces/IPayoutPool.sol\\\";\\nimport \\\"../../interfaces/IWeightedFarmingPool.sol\\\";\\nimport \\\"../../interfaces/ITreasury.sol\\\";\\nimport \\\"../../interfaces/IExchange.sol\\\";\\nimport \\\"../../interfaces/IERC20Decimals.sol\\\";\\n\\nabstract contract PolicyCenterDependencies {\\n    // Max cover length\\n    // Different priority pools have different max lengths\\n    // This max length is the maximum of all pools\\n    // There will also be a check in each pool\\n    uint256 internal constant MAX_COVER_LENGTH = 3;\\n\\n    // 10000 = 100%\\n    // Priority pool 45%\\n    uint256 internal constant PREMIUM_TO_PRIORITY = 4500;\\n    // Protection pool 50%\\n    uint256 internal constant PREMIUM_TO_PROTECTION = 5000;\\n    // Treasury 5%\\n    uint256 internal constant PREMIUM_TO_TREASURY = 500;\\n\\n    // Swap slippage\\n    // TODO: Slippage tolerance parameter 10000 as 100%\\n    uint256 internal constant SLIPPAGE = 100;\\n\\n    address public protectionPool;\\n    address public priceGetter;\\n    address public priorityPoolFactory;\\n    address public coverRightTokenFactory;\\n    address public weightedFarmingPool;\\n    address public exchange;\\n    address public payoutPool;\\n    address public treasury;\\n\\n    address public dexPriceGetter;\\n}\\n\",\"keccak256\":\"0x98174db7438d9a267ffe99f0cb4ac28b75127138e27183ea6d38d873d98f08e3\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/PolicyCenterEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface PolicyCenterEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event CoverBought(\\n        address indexed buyer,\\n        uint256 indexed poolId,\\n        uint256 coverDuration,\\n        uint256 coverAmount,\\n        uint256 premiumInUSDC\\n    );\\n\\n    event LiquidityProvided(address indexed user, uint256 amount);\\n\\n    event LiquidityStaked(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount\\n    );\\n\\n    event LiquidityStakedWithoutFarming(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount\\n    );\\n\\n    event LiquidityUnstaked(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        address priorityLP,\\n        uint256 amount\\n    );\\n\\n    event LiquidityUnstakedWithoutFarming(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        address priorityLP,\\n        uint256 amount\\n    );\\n\\n    event LiquidityRemoved(address indexed user, uint256 amount);\\n\\n    event PayoutClaimed(address indexed user, uint256 amount);\\n\\n    event PremiumSplitted(\\n        uint256 toPriority,\\n        uint256 toProtection,\\n        uint256 toTreasury\\n    );\\n\\n    event PremiumSwapped(address fromToken, uint256 amount, uint256 received);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PolicyCenter__AlreadyClaimedPayout(); // a2ded9c1\\n    error PolicyCenter__WrongPriorityPoolID(); // 67f304bf\\n    error PolicyCenter__InsufficientCapacity(); // 7730dc0b\\n    error PolicyCenter__OnlyPriorityPoolFactory(); // aca500b4\\n    error PolicyCenter__ZeroPremium(); // 720794bf\\n    error PolicyCenter__NoLiquidity(); // d5c16599\\n    error PolicyCenter__NoExchange(); // 7bb995d0\\n    error PolicyCenter__ZeroAmount(); // 1613633b\\n    error PolicyCenter__NoPayout(); // 6e472dea\\n    error PolicyCenter__NonExistentPool(); // 5824d49b\\n    error PolicyCenter__BadLength(); //\\n    error PolicyCenter__PremiumTooHigh(); //\\n    error PolicyCenter__InvalidPremiumSplit(); //\\n    error PolicyCenter__PoolPaused(); //\\n    error PolicyCenter__OnlyTreasury(); //\\n    error PolicyCenter__WrongPath();\\n}\\n\",\"keccak256\":\"0xb9c298a79a76e4b33552c4bc2355c8611d470cc493794b62e2e8b5000e4a5723\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG\\n *         They are set as immutable\\n */\\nabstract contract ExternalTokenDependencies is\\n    CommonDependencies,\\n    Initializable\\n{\\n    IDegisToken internal deg;\\n    IVeDEG internal veDeg;\\n\\n    function __ExternalToken__Init(address _deg, address _veDeg)\\n        internal\\n        onlyInitializing\\n    {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n    }\\n}\\n\",\"keccak256\":\"0x59a44780f820a90040fe4d2e59f22b094881df2b5c578db1b21e72d7de93a909\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ICoverRightToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightToken {\\n    function expiry() external view returns (uint256);\\n\\n    function getClaimableOf(address _user) external view returns (uint256);\\n\\n    function mint(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function generation() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd06b45a4cefc10086b3ad76a27e23ff30c32e687856dc47d783698813848c25\",\"license\":\"MIT\"},\"src/interfaces/ICoverRightTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightTokenFactory {\\n    function deployCRToken(\\n        string calldata _poolName,\\n        uint256 _poolId,\\n        string calldata _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external returns (address newCRTokenAddress);\\n\\n    function deployed(bytes32 _salt) external view returns (bool);\\n\\n    function saltToAddress(bytes32 _salt) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf17c79edd1d32f1b61e8bdcdc74262f7935a899d03b9cfd677e4ff438f0814db\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x926ec7ef1eb5d6178e8cc0e29f12d1853f6ed27ec6b1864697e7a845e4a6294d\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x557bdcf137975d38a1b7104d1c13389324bd6b3ef8713a43b52b41200ce7700b\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IExchange {\\n    // TraderJoe Interfaces\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\\ninterface IJoeLiquidityBook {\\n    // TraderJoe Liquidity Book Interfaces\\n    function getSwapOut(\\n        address pair,\\n        uint256 amountIn,\\n        bool swapForY\\n    ) external view returns (uint256 amountOut, uint256 feesIn);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x359b471cfba2076f1075d50d5c8f4b5faafc68f33f1afea28485ef35807e1db5\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPayoutPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPayoutPool {\\n    function CLAIM_PERIOD() external view returns (uint256);\\n\\n    function SCALE() external view returns (uint256);\\n\\n    function claim(\\n        address _user,\\n        address _crToken,\\n        uint256 _poolId,\\n        uint256 _generation\\n    ) external returns (uint256 claimed, uint256 newGenerationCRAmount);\\n\\n    function crFactory() external view returns (address);\\n\\n    function newPayout(\\n        uint256 _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio,\\n        address _poolAddress\\n    ) external;\\n\\n    function payoutCounter() external view returns (uint256);\\n\\n    function payouts(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 remaining,\\n            uint256 endTiemstamp,\\n            uint256 ratio,\\n            address priorityPoolAddress\\n        );\\n\\n    function policyCenter() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe4ef590af5093c8652ebc53345c85010181b9e67e545af5c6a15200f43e99f8c\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\ninterface IPriceGetter {\\n    function getLatestPrice(string memory _tokenName)\\n        external\\n        returns (uint256 price);\\n\\n    function getLatestPrice(address _token) external returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xc5aafa39687526f14693cfc52febd22b659a7bb7da9a7c3957edb74d77185b2a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function lpTokenAddress(uint256 _generation)\\n        external\\n        view\\n        returns (address);\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function crTokenAddress(uint256 generation) external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external;\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n\\n    function updateWhenClaimed(uint256 expiry, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa43d1d0398e9cfaff0258c21e978549777688cc1b5d0d1c9b30c2e6998f14bc4\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerUSDC\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerUSDC\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n\\n   \\n}\\n\",\"keccak256\":\"0xcbc2bb32ce42fdcb8ba88a4437f9c0ab073b80538f89c14fac7654e6088c2079\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IProtectionPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IProtectionPool {\\n    function pauseProtectionPool(bool _paused) external;\\n\\n    function providedLiquidity(uint256 _amount, address _provider) external;\\n\\n    function removedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (uint256);\\n\\n    function getTotalCovered() external view returns (uint256);\\n\\n    function getTotalActiveCovered() external view returns (uint256);\\n\\n    function updateWhenBuy() external;\\n\\n    function removedLiquidityWhenClaimed(uint256 _amount, address _to) external;\\n\\n    function getLatestPrice() external returns (uint256);\\n\\n    function updateStakedSupply(bool isStake, uint256 amount) external;\\n\\n    function stakedSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a5a664f2e06ef97482cea7dbb76165ff2881c8e584eb181b903d32462bef02a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ITreasury {\\n    function rewardReporter(uint256 _poolId, address _reporter) external;\\n\\n    function premiumIncome(uint256 _poolId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2ef53813a74f1e7de1168f57dde2972cc51fc4a1cc4b4e885e5adc896045d4c7\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x8e86f7b957f4a1d3e5e34a57f051b90c5008f431c00ce2e0a1d47c6c8ad5911d\",\"license\":\"MIT\"},\"src/interfaces/IWeightedFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IWeightedFarmingPool {\\n    function addPool(address _token) external;\\n\\n    function addToken(\\n        uint256 _id,\\n        address _token,\\n        uint256 _weight\\n    ) external;\\n\\n    function updateRewardSpeed(\\n        uint256 _id,\\n        uint256 _newSpeed,\\n        uint256[] memory _years,\\n        uint256[] memory _months\\n    ) external;\\n\\n    function depositFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function withdrawFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateWeight(\\n        uint256 _id,\\n        address _token,\\n        uint256 _newWeight\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7e2c8dc066b4f474ba74068925b007da5871980b24ca9595b1ced1440c789352\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/libraries/SimpleSafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary SimpleSafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        SimpleIERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        SimpleIERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(SimpleIERC20 token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44e68d4f6a276bdab87fec8367d4c7d9102f5acddcdaf3cac17134832adffbec\",\"license\":\"MIT\"},\"src/libraries/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nlibrary StringUtils {\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x3b775a5710bb0d859cecdd99277a789e642853062ceef6dbaa187ca4a7a4164e\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OwnableWithoutContextUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb7c1bac54d6b38b0ff582113689643e43bdbc9eaf4dcd906373c3f44f7b2eab5\",\"license\":\"MIT\"},\"src/util/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287cc23d2f983675929f9892ce173553da2d997cc62c61c13943a54c05f09f87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761380e908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80625971b11461287d5780630121cff514612834578063056d7e58146128015780631b96666e146127c8578063298d4dd01461277f57806339827304146126db5780633f81ff26146126925780634ea4c6b31461242457806357ad8f0b146123c657806358bf0f2c1461237d57806361d027b3146123545780636273106a1461232b57806367b1f5df146122e257806367c0dd821461214257806367e03b54146121195780636c1b700f146120f05780636f8a6e43146120c7578063715018a61461205857806389a30271146120295780638da5cb5b14611ffe5780639549bd9a14611fd55780639c8f9f2314611f1e578063a4fd14b314611ee3578063a8bf604d14611eaa578063aa139d5b14611e61578063ab07211e14611cb6578063ad35e1dc14611c6d578063b0db637e14611c1b578063b567dc6a14611bf2578063b6cccdd014611b4f578063bee7fd9214610b02578063bef1e500146107da578063c0c53b8b14610606578063c2260f481461049f578063ceed1b9014610476578063d2f7265a1461044d578063eb521a4c146102ed578063f02bbc52146102ba578063f0f44260146102715763f2fde38b146101d457600080fd5b3461026e57602036600319011261026e576101ed6128c6565b60018060a01b0361020581845460101c1633146129ac565b81161561021a5761021590613778565b604051f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b503461026e57602036600319011261026e5761028b6128c6565b60018060a01b03906102a482845460101c1633146129ac565b1660018060a01b0319603b541617603b55604051f35b503461026e57602036600319011261026e576020906004358152603e8252604060018060a01b0391205416604051908152f35b503461026e57602036600319011261026e57600435801561043b576034546001600160a01b03908116803b15610437576040516344abf1a960e01b81526004810184905233602482015290849081908390604490829084905af191821561042a57849261040f575b50506034546040516323b872dd60e01b8152926020928492839261037f92911633600485016129fd565b0381867323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af18015610404576103d6575b506040519081527fccb2ae3a2936bf4c94fa4e12cdf0cdad6ed0e4888a044cef89afa60f2e4b92d360203392a2604051f35b6103f69060203d81116103fd575b6103ee8183612960565b8101906129e5565b50386103a4565b503d6103e4565b6040513d85823e3d90fd5b61041a919250612932565b61042657818338610355565b8280fd5b50604051903d90823e3d90fd5b8380fd5b604051631613633b60e01b8152600490fd5b503461026e578060031936011261026e576039546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e576035546040516001600160a01b039091168152602090f35b503461026e576104ae36612908565b821580156105e9575b6105d757801561043b57828452603d602052604084205484906001600160a01b03908116803b15610426576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af19081156104045783916105c3575b505060345416803b156105bf57818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156105b4576105a0575b50506105987fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab091604051918291339583612a1f565b0390a3604051f35b6105a990612932565b610437578338610563565b6040513d84823e3d90fd5b5080fd5b6105cc90612932565b6105bf578138610527565b604051635824d49b60e01b8152600490fd5b50828452603d60205260408420546001600160a01b0316156104b7565b503461026e57606036600319011261026e576106206128c6565b6106286128dc565b906044356001600160a01b0381811692918390036107d55784549360ff8560081c1615948580966107c8575b80156107b1575b156107555760ff198116600117875585610744575b5061068a60ff875460081c1661068581612e69565b612e69565b61069333613778565b6106a360ff875460081c16612e69565b8160018060a01b0319931683603254161760325516816033541617603355838052603d602052604084208282825416179055603e602052604084207323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c382825416179055603454161760345561070b57604051f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1604051f35b61ffff191661010117865538610670565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561065b5750600160ff82161461065b565b50600160ff821610610654565b600080fd5b503461026e576107e936612908565b909180158015610ae5575b6105d7576036546040516315895f4760e31b81526004810183905285946001600160a01b039286908390602490829087165afa8015610a2f5786928391610abf575b50604084608481603a54169483519687938492631357a41960e11b845233600485015216968760248401528a60448401528b60648401525af1958615610ab45787938897610a7d575b506040519384526020937fec68461f5d4cc45c89e914cb8826a966c73dd35e5f97815ece0a01ffa4a025a6853392a2866108ba575b87604051f35b83600493604051948580926370c264df60e11b82525afa928315610a72578893610a3a575b50906108ec889392612b27565b866108fb620151808504612f99565b5061090a848785999499612c32565b9689881615610983575b5050505050505090501691823b1561097e5760405163020da84160e61b8152600481019290925233602483015260448201529082908290606490829084905af180156105b45761096a575b8080808080806108b4565b61097390612932565b61026e57803861095f565b505050fd5b889697509061099d6109976109ad936136b5565b916136b5565b6109a6866136b5565b9187612b36565b936109d489603754169460405198899788968795636c1020a160e01b875260048701612bf8565b03925af1918215610a2f5786926109f5575b50508038808086898280610914565b90809250813d8311610a28575b610a0c8183612960565b81010312610a2457610a1d90612998565b38806109e6565b8480fd5b503d610a02565b6040513d88823e3d90fd5b8480929399508194503d8311610a6b575b610a558183612960565b810103126107d5579051879690916108ec6108df565b503d610a4b565b6040513d8a823e3d90fd5b909650610aa391935060403d604011610aad575b610a9b8183612960565b810190612b11565b929092953861087f565b503d610a91565b6040513d89823e3d90fd5b610adb91503d8085833e610ad38183612960565b810190612a8a565b5050505038610836565b50808452603d60205260408420546001600160a01b0316156107f4565b503461026e5760a036600319011261026e576084356001600160401b0381116105bf57366023820112156105bf57806004013590610b3f82612981565b90610b4d6040519283612960565b82825260208201906024829460051b8201019036821161154057602401915b818310611b2f57505050600435158015611b10575b6105d757604435151580611b03575b15611af157600480358452603d602090815260408086205460345491516370a0823160e01b81526001600160a01b0392831694810194909452169190816024817323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35afa908115611a80578591611abf575b506040516359b6a0c960e01b8152602081600481865afa908115610a2f578691611a8b575b50612710610c2c602092600494612cfe565b049260405192838092636835185f60e11b82525afa8015611a80578590611a4c575b610c5b9150602435612d1c565b11611a3a576044906004358452603d602052604060018060a01b038186205416815193848092638905faeb60e01b82526024356004830152823560248301525afa80156115095784928591611a15575b506064358311611a0357610cc3620151804204612f99565b9150506001604435106119ef576019600019604435019110156119cb575b610cfb610cf2620151804204612f99565b93849391612d1c565b6001811061174057610d17600c91600019019282840490612d1c565b910660011981116117405792610d5092610d4b926001610d5c960191610d3d83836135b4565b8091116119c3575b50613359565b612ce6565b62015180420690612d1c565b4281106115405762015180610d719104612f99565b50610d8b610d4b610d84838599956135b4565b8389613359565b906201437019821161159f57610dd4196201437083011161159f57603b196201514483011161159f576036546040516315895f4760e31b81526004803590820152908990829060249082906001600160a01b03165afa928315611794576004938a928b9161199f575b50604051630b90ca9160e11b81529460209186919082906001600160a01b03165afa938415611994578a9461195d575b506201517f0191610e388484600435612c32565b986001600160a01b038a16156118ae575b50505050506001600160a01b0385163b156115405760405163020da84160e61b815260048035908201523360248083019190915235604482015286908181606481836001600160a01b038c165af180156105b45761189a575b50508315611888576004358652603e60205260018060a01b0360408720541691828752603f6020526040872054156000146117d1576035546040516302c68be360e31b81526004810185905290602090829060249082908c906001600160a01b03165af1908115610a7257889161179f575b505b60405163313ce56760e01b8152602081600481885afa908115611794578991611754575b50600660ff821610611740578660001904670de0b6b3a76400001160011661159f57604d60ff82811660051901161161174057610f8e9060ff9081166005190116600a0a670de0b6b3a76400008802612cfe565b811561172a576040516323b872dd60e01b6020820152610fc781610fb98585043033602485016129fd565b03601f198101835282612960565b604051610fd381612945565b602081527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020820152863b156116e5578a8083602061104195519101828b5af13d156116dd573d9061102582612a3a565b916110336040519384612960565b82523d8d602084013e613675565b80519081611668575b50506111949382820460001904851183830415151661159f57611077612710868585040204848404612d11565b9680519160018310611654577323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c36001600160a01b036110ae600019860185612d28565b51160361162c5781511561163e57516001600160a01b031687900361162c576040518060608101106001600160401b036060830111176116165780606060409201825260028152602036910137868b52604060205260018060a01b0360408c205416908b604051809363d06ca61f60e01b82528b600483015260406024830152818061113d6044820187612db5565b03915afa91821561160b578c926115ee575b506039546001600160a01b03169161116c90600019850190612d28565b519081600019046126ac118215151661159f5760011942116115da576126ac612710938e93848d6111c98296604051998a97889687956338ed173960e01b875260048701520204602484015260a0604484015260a4830190612db5565b30606483015260014201608483015203925af1801561042a577f57f3d153693ba34ad2f1603ab743de3caf14b05ffa2fdfae8e9d0947a17c7ca3936060938361121e94936115b5575b50506000190190612d28565b5197604051908882526020820152886040820152a18560001904611388118615151661159f57856112e0602061125d61157c6113888e9b020484612d11565b604080516127108888048b0204815261157c61138887020460208201529081018290529098907fe59d21244ca3bff81515b705214dab78cc9f978c1939e610874429ffa47380b290606090a160385460405163a9059cbb60e01b81529384929183918d918391906127108c8c048f0204906001600160a01b031660048401612a1f565b03925af18015610a725761157c9260209261138892611582575b5060345460405163a9059cbb60e01b8152948593849361132d93910291909104906001600160a01b031660048401612a1f565b03818a7323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af18015610ab457611563575b50603b5460405163a9059cbb60e01b81529060209082908190611383908a906001600160a01b031660048401612a1f565b03818a7323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af18015610ab457611544575b506034546001600160a01b0316803b1561152857868091600460405180948193621e432b60e81b83525af1908115610ab457879161152c575b50506004358652603d60205260408620546001600160a01b031690813b15611528578660849281956127106040519889978896630aadb77760e01b885260243560048901520402046024850152604435604485015260648401525af1908115610404578391611514575b5050603b546001600160a01b0316803b1561042657604483926040519485938492635b97d36760e01b8452600435600485015260248401525af18015611509576114f5575b60208383604051907f308dab4150a765534b441eef3367b2732d18bfdcd4b5ffe2a7084e1b1699051560043592806114e03394602435604435846040919493926060820195825260208201520152565b0390a36040516001600160a01b039091168152f35b6114ff8491612932565b6104265782611490565b6040513d86823e3d90fd5b61151d90612932565b6105bf57813861144b565b8680fd5b61153590612932565b6115405785386113e1565b8580fd5b61155c9060203d6020116103fd576103ee8183612960565b50386113a8565b61157b9060203d6020116103fd576103ee8183612960565b5038611352565b61159890843d86116103fd576103ee8183612960565b50386112fa565b634e487b7160e01b600052601160045260246000fd5b6115d29293503d8091833e6115ca8183612960565b810190612d3c565b90388e611212565b634e487b7160e01b8d52601160045260248dfd5b6116049192508c3d8091833e6115ca8183612960565b903861114f565b6040513d8e823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b6040516310bc08dd60e01b8152600490fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b8c52601160045260248cfd5b6020806116799383010191016129e5565b1561168557388061104a565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b606090613675565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b89526011600452602489fd5b90506020813d60201161178c575b8161176f60209383612960565b81010312611788575160ff811681036117885738610f3a565b8880fd5b3d9150611762565b6040513d8b823e3d90fd5b90506020813d6020116117c9575b816117ba60209383612960565b810103126107d5575138610f14565b3d91506117ad565b604087205460010361185257603c546040516302c68be360e31b81526004810185905290602090829060249082908c906001600160a01b03165af1908115610a72578891611820575b50610f16565b90506020813d60201161184a575b8161183b60209383612960565b810103126107d557513861181a565b3d915061182e565b60405162461bcd60e51b815260206004820152600a60248201526957726f6e67207479706560b01b6044820152606490fd5b0390fd5b60405163720794bf60e01b8152600490fd5b6118a390612932565b611540578538610ea2565b602094959950906118c46109976118d4936136b5565b6118cd876136b5565b9184612b36565b8960018060a01b03603754169261190560405197889687958694636c1020a160e01b86526004359060048701612bf8565b03925af1908115610a2f578691611923575b50933880808080610e49565b90506020813d602011611955575b8161193e60209383612960565b810103126115405761194f90612998565b38611917565b3d9150611931565b9093506020813d60201161198c575b8161197960209383612960565b810103126107d55751926201517f610e24565b3d915061196c565b6040513d8c823e3d90fd5b602093506119b791503d808d833e610ad38183612960565b50505092909290610df4565b925038610d45565b600119106119db57604435610ce1565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b86526011600452602486fd5b60405163855e507b60e01b8152600490fd5b9050611a3191925060403d604011610aad57610a9b8183612960565b91909138610cab565b604051637730dc0b60e01b8152600490fd5b506020813d602011611a78575b81611a6660209383612960565b810103126107d557610c5b9051610c4e565b3d9150611a59565b6040513d87823e3d90fd5b90506020813d602011611ab7575b81611aa660209383612960565b810103126107d55751612710610c1a565b3d9150611a99565b90506020813d602011611ae9575b81611ada60209383612960565b810103126107d5575138610bf5565b3d9150611acd565b6040516307aaabcb60e21b8152600490fd5b5060036044351115610b90565b506004358352603d60205260408320546001600160a01b031615610b81565b82356001600160a01b03811681036107d557815260209283019201610b6c565b503461026e57606036600319011261026e57611b696128c6565b90611b726128dc565b60365460443593906001600160a01b039081163303611be0578415611bcc5783946102159452603e602052604085209060018060a01b03199181851683825416179055603d60205260408620921690825416179055612df2565b634e487b7160e01b84526001600452602484fd5b604051632b29402d60e21b8152600490fd5b503461026e578060031936011261026e576038546040516001600160a01b039091168152602090f35b503461026e57604036600319011261026e57611c356128c6565b6024359060018060a01b0390611c5282855460101c1633146129ac565b600283101561185257168252603f6020526040822055604051f35b503461026e57602036600319011261026e57611c876128c6565b60018060a01b0390611ca082845460101c1633146129ac565b1660018060a01b03196036541617603655604051f35b503461026e57611cc536612908565b82158015611e44575b6105d757801561043b5760385484906001600160a01b03908116803b15610426576040516316858d7960e21b8152600481018790526001600160a01b0386166024820152604481018590523360648201529083908290608490829084905af1908115610404578391611e30575b50859052603d60205280604083205416803b15610426576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af1908115610404578391611e1c575b505060345416803b156105bf57818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156105b457611e08575b50506105987f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f367519791604051918291339583612a1f565b611e1190612932565b610437578338611dd3565b611e2590612932565b6105bf578138611d97565b611e3990612932565b6105bf578138611d3b565b50828452603d60205260408420546001600160a01b031615611cce565b503461026e57602036600319011261026e57611e7b6128c6565b60018060a01b0390611e9482845460101c1633146129ac565b1660018060a01b03196037541617603755604051f35b503461026e57602036600319011261026e57610215611ec76128c6565b611ede60018060a01b03845460101c1633146129ac565b612df2565b503461026e57602036600319011261026e576020906001600160a01b039060409082611f0d6128c6565b168152818452205416604051908152f35b503461026e576020806003193601126105bf5760043590811561043b57603454604051636d40d7d760e11b8152600481018490523360248201529082908290604490829088906001600160a01b03165af1801561150957611fab575b507fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719906040519283523392a2604051f35b8190813d8311611fce575b611fc08183612960565b810103126107d55738611f7a565b503d611fb6565b503461026e578060031936011261026e57603c546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e575460405160109190911c6001600160a01b03168152602090f35b503461026e578060031936011261026e5760206040517323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c38152f35b503461026e578060031936011261026e5780546001600160a01b03906120849060101c821633146129ac565b6000546000604051928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b503461026e578060031936011261026e576036546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e576034546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e576037546040516001600160a01b039091168152602090f35b503461026e57612151366128f2565b811580156122c5575b6105d757801561043b57818352603d60209081526040808520549051630a43eeed60e11b81526004810184905233602482015285916001600160a01b0391908216848260448187855af18015611509578591879161228a575b6121dc9350846034541690866040518096819582946323b872dd60e01b845233600485016129fd565b03925af180156104045761226d575b5060345416803b156105bf57818091604460405180948193630dfa376d60e01b8352600160048401528960248401525af180156105b457612259575b50507f6ed71e479f5286ad6192bfdc2b224afa6073276d8f9a0e5028400f589fbb39cc906040519283523392a3604051f35b61226290612932565b610437578338612227565b61228390843d86116103fd576103ee8183612960565b50386121eb565b91905082813d83116122be575b6122a18183612960565b81010312610437578585916122b86121dc94612998565b506121b3565b503d612297565b50818352603d60205260408320546001600160a01b03161561215a565b503461026e57602036600319011261026e576122fc6128c6565b60018060a01b039061231582845460101c1633146129ac565b1660018060a01b03196039541617603955604051f35b503461026e578060031936011261026e57603a546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e57603b546040516001600160a01b039091168152602090f35b503461026e57602036600319011261026e576123976128c6565b60018060a01b03906123b082845460101c1633146129ac565b1660018060a01b03196038541617603855604051f35b503461026e57604036600319011261026e576123e06128c6565b6123e86128dc565b9060018060a01b03809161240382865460101c1633146129ac565b168352604060205260408320911660018060a01b0319825416179055604051f35b503461026e57612433366128f2565b81158015612675575b6105d757801561043b57818352603d60209081526040808520549051630a43eeed60e11b8152600481018490523060248201526001600160a01b03929183169082816044818a865af1908115610ab457858491899361263b575b506124c092938660345416908a6040518096819582946323b872dd60e01b845233600485016129fd565b03925af18015610ab45761261e575b50858360345416803b156105bf578190604460405180948193630dfa376d60e01b8352600160048401528a60248401525af18015610ab45761260b575b50826038541692833b1561152857604051635a12fc9360e11b8152600481018790526001600160a01b03831660248201526044810186905233606482015293879081908690608490829084905af194851561042a5786956125f2575b50918184936125939693603854169160405180988196829563a9059cbb60e01b845260048401612a1f565b0393165af1918215611a80577f1e54d7530dad81af38adb8ca9db02add3130668375f37be85396403616fc3d49926125d5575b506040519283523392a3604051f35b6125eb90823d84116103fd576103ee8183612960565b50386125c6565b6125fe91929550612932565b6115405783928638612568565b61261790969196612932565b943861250c565b61263490833d85116103fd576103ee8183612960565b50386124cf565b92505081813d831161266e575b6126528183612960565b810103126115285782856126686124c093612998565b92612496565b503d612648565b50818352603d60205260408320546001600160a01b03161561243c565b503461026e57602036600319011261026e576126ac6128c6565b60018060a01b03906126c582845460101c1633146129ac565b1660018060a01b0319603a541617603a55604051f35b503461026e576020908160031936011261026e57600480358252603d83526040808320549051634e75827160e01b81526001600160a01b0392909185918391829086165afa928315612773578093612739575b505060405191168152f35b909192508382813d831161276c575b6127528183612960565b8101031261026e575061276490612998565b90388061272e565b503d612748565b604051903d90823e3d90fd5b503461026e57602036600319011261026e576127996128c6565b60018060a01b03906127b282845460101c1633146129ac565b1660018060a01b03196035541617603555604051f35b503461026e57602036600319011261026e576020906040906001600160a01b036127f06128c6565b168152603f83522054604051908152f35b503461026e57602036600319011261026e576020906004358152603d8252604060018060a01b0391205416604051908152f35b503461026e57602036600319011261026e5761284e6128c6565b60018060a01b039061286782845460101c1633146129ac565b1660018060a01b03196034541617603455604051f35b503461026e57602036600319011261026e576128976128c6565b60018060a01b03906128b082845460101c1633146129ac565b1660018060a01b0319603c541617603c55604051f35b600435906001600160a01b03821682036107d557565b602435906001600160a01b03821682036107d557565b60409060031901126107d5576004359060243590565b60609060031901126107d557600435906024356001600160a01b03811681036107d5579060443590565b6001600160401b03811161161657604052565b604081019081106001600160401b0382111761161657604052565b90601f801991011681019081106001600160401b0382111761161657604052565b6001600160401b0381116116165760051b60200190565b51906001600160a01b03821682036107d557565b156129b357565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b908160209103126107d5575180151581036107d55790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b6001600160401b03811161161657601f01601f191660200190565b918091926000905b828210612a75575011612a6e575050565b6000910152565b91508060209183015181860152018291612a5d565b9060a0828203126107d55781516001600160401b0381116107d557820181601f820112156107d5578051612abd81612a3a565b92612acb6040519485612960565b818452602082840101116107d557612ae99160208085019101612a55565b91612af660208301612998565b91612b0360408201612998565b916080606083015192015190565b91908260409103126107d5576020825192015190565b600019811461159f5760010190565b6027919493612bd1936040519687936243522d60e81b6020860152612b65815180926020602389019101612a55565b840190602d60f81b91826023820152612b88825180936020602485019101612a55565b01906024820152612ba3825180936020602585019101612a55565b01612d4760f01b6025820152612bc28251809360208785019101612a55565b01036007810185520183612960565b565b90602091612bec81518092818552858086019101612a55565b601f01601f1916010190565b91608093612c15612c28939897969860a0865260a0860190612bd3565b9160208501528382036040850152612bd3565b9460608201520152565b916040519160208301938452604083015260608201526060815260808101918183106001600160401b038411176116165782602481602093816040528551902060018060a01b036037541690631620909560e01b835260848701525afa908115612cda57600091612ca4575b50905090565b602090813d8111612cd3575b612cba8186612960565b8101031261026e5750612ccc90612998565b8038612c9e565b503d612cb0565b6040513d6000823e3d90fd5b6201518090806000190482118115151661159f570290565b806000190482118115151661159f570290565b81811061159f570390565b8119811161159f570190565b805182101561163e5760209160051b010190565b60209081818403126107d5578051906001600160401b0382116107d557019180601f840112156107d5578251612d7181612981565b93612d7f6040519586612960565b818552838086019260051b8201019283116107d5578301905b828210612da6575050505090565b81518152908301908301612d98565b90815180825260208080930193019160005b828110612dd5575050505090565b83516001600160a01b031685529381019392810192600101612dc7565b6039546001600160a01b0391908216908115612e575760446020926000604051958694859363095ea7b360e01b8552600485015282196024850152165af18015612cda57612e3d5750565b612e549060203d81116103fd576103ee8183612960565b50565b6040516307bb995d60e41b8152600490fd5b15612e7057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000811280156001600160ff1b0383900384131661159f57600160ff1b82900383121661159f570190565b6105b560008083136001600160ff1b03849004831116600116612f445760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa884128285121616612f4457500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b01811260011661159f57600d190190565b600082128015600160ff1b840183121661159f576001600160ff1b03830182131661159f570390565b6000916001600160ff1b039162010bd99084811281850381158185131661334557600160ff1b9383850392838212166133315787908401129162010bd819908162253d8c93018313841516611740570113166119db57622649650193600193600491858783048411828913161661331e57808712600760fd1b881216861661331e5762023ab196878160021b0597878985048211848b1316166132f857877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b1216166132f857880282811281850360031381151661330b57818703600312166132f8579084600361309093010590612f70565b9281841284840388138115166132ac5784860388121661329957868401610fa088828604821185841316166132bf57887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c831285841216166132bf576131099162164b09910205948261310287612ef4565b0590612f70565b828112818503601f138115166132bf57818703601f12166132ac57601f019680888504605011848a1316166132ac57807ffe666666666666666666666666666666666666666666666666666666666666678912848a1216166132ac5761098f9788816050020590828287048b1186841316166132e55784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c16166132d257906050836131be93020590612f70565b98600b8205978287036002138215166132d257829003600212166132bf5781878604600c1185891316166132bf57817ff555555555555555555555555555555555555555555555555555555555555556881285891216166132bf5761322a90600288600c029101612f70565b986031600160ff1b01811282166132bf5781906030190180950460641184861316166132ac577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616613299575050613294929161328f91606402612ec9565b612ec9565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b9291926107b281106107d557600191617d4b600160ff1b018512831661159f576000918281128015926001600160ff1b03929182840391906112c0838113871661333157600160ff1b859003908181128316611740576133d698999a9b6133e7916133db60049b8c92600c6133cd8a612f58565b05908b01612ec9565b612ef4565b0590617d4a1901612ec9565b6002600160ff1b0184128b166135a157600c61340285612f58565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c8313161661358e578b7ff55555555555555555555555555555555555555555555555555555555555555682128c8312161661358e5761346e90600c026001198601612f70565b61016f8c828a0482118d8413161661357b578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d8412161661357b576134bd9291600c91020590612ec9565b966113249485131661356857831216613555578792606492600c6134e36134eb94612f58565b059101612ec9565b0580920460031185831316166132bf57847fd555555555555555555555555555555555555555555555555555555555555556821285831216166132bf579082613538926003020590612f70565b9262253d8c600160ff1b0184121661329957505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b9060018114801561366b575b8015613661575b8015613657575b801561364d575b8015613643575b8015613639575b156135ef575050601f90565b6002146135fc5750601e90565b6003811615908161362c575b811561361f575b501561361a57601d90565b601c90565b610190915006153861360f565b6064810615159150613608565b50600c81146135e3565b50600a81146135dc565b50600881146135d5565b50600781146135ce565b50600581146135c7565b50600381146135c0565b90919015613681575090565b8151156136915750805190602001fd5b60405162461bcd60e51b815260206004820152908190611884906024830190612bd3565b801561375a57600081805b61374657506136ce81612a3a565b906136dc6040519283612960565b808252601f196136eb82612a3a565b013660208401375b80831561373f576001811061159f576000190192600a9182820660308119811161159f57855187101561163e570160f81b6001600160f81b03191660001a908401601f015304916136f3565b5050905090565b90613752600a91612b27565b9104806136c0565b5060405161376781612945565b60018152600360fc1b602082015290565b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea264697066735822122021f3050d4f13adff951a2fb95f0866f1faa80943144b7fb62ceed7eeb480767664736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c80625971b11461287d5780630121cff514612834578063056d7e58146128015780631b96666e146127c8578063298d4dd01461277f57806339827304146126db5780633f81ff26146126925780634ea4c6b31461242457806357ad8f0b146123c657806358bf0f2c1461237d57806361d027b3146123545780636273106a1461232b57806367b1f5df146122e257806367c0dd821461214257806367e03b54146121195780636c1b700f146120f05780636f8a6e43146120c7578063715018a61461205857806389a30271146120295780638da5cb5b14611ffe5780639549bd9a14611fd55780639c8f9f2314611f1e578063a4fd14b314611ee3578063a8bf604d14611eaa578063aa139d5b14611e61578063ab07211e14611cb6578063ad35e1dc14611c6d578063b0db637e14611c1b578063b567dc6a14611bf2578063b6cccdd014611b4f578063bee7fd9214610b02578063bef1e500146107da578063c0c53b8b14610606578063c2260f481461049f578063ceed1b9014610476578063d2f7265a1461044d578063eb521a4c146102ed578063f02bbc52146102ba578063f0f44260146102715763f2fde38b146101d457600080fd5b3461026e57602036600319011261026e576101ed6128c6565b60018060a01b0361020581845460101c1633146129ac565b81161561021a5761021590613778565b604051f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b80fd5b503461026e57602036600319011261026e5761028b6128c6565b60018060a01b03906102a482845460101c1633146129ac565b1660018060a01b0319603b541617603b55604051f35b503461026e57602036600319011261026e576020906004358152603e8252604060018060a01b0391205416604051908152f35b503461026e57602036600319011261026e57600435801561043b576034546001600160a01b03908116803b15610437576040516344abf1a960e01b81526004810184905233602482015290849081908390604490829084905af191821561042a57849261040f575b50506034546040516323b872dd60e01b8152926020928492839261037f92911633600485016129fd565b0381867323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af18015610404576103d6575b506040519081527fccb2ae3a2936bf4c94fa4e12cdf0cdad6ed0e4888a044cef89afa60f2e4b92d360203392a2604051f35b6103f69060203d81116103fd575b6103ee8183612960565b8101906129e5565b50386103a4565b503d6103e4565b6040513d85823e3d90fd5b61041a919250612932565b61042657818338610355565b8280fd5b50604051903d90823e3d90fd5b8380fd5b604051631613633b60e01b8152600490fd5b503461026e578060031936011261026e576039546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e576035546040516001600160a01b039091168152602090f35b503461026e576104ae36612908565b821580156105e9575b6105d757801561043b57828452603d602052604084205484906001600160a01b03908116803b15610426576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af19081156104045783916105c3575b505060345416803b156105bf57818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156105b4576105a0575b50506105987fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab091604051918291339583612a1f565b0390a3604051f35b6105a990612932565b610437578338610563565b6040513d84823e3d90fd5b5080fd5b6105cc90612932565b6105bf578138610527565b604051635824d49b60e01b8152600490fd5b50828452603d60205260408420546001600160a01b0316156104b7565b503461026e57606036600319011261026e576106206128c6565b6106286128dc565b906044356001600160a01b0381811692918390036107d55784549360ff8560081c1615948580966107c8575b80156107b1575b156107555760ff198116600117875585610744575b5061068a60ff875460081c1661068581612e69565b612e69565b61069333613778565b6106a360ff875460081c16612e69565b8160018060a01b0319931683603254161760325516816033541617603355838052603d602052604084208282825416179055603e602052604084207323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c382825416179055603454161760345561070b57604051f35b61ff001981541681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1604051f35b61ffff191661010117865538610670565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b15801561065b5750600160ff82161461065b565b50600160ff821610610654565b600080fd5b503461026e576107e936612908565b909180158015610ae5575b6105d7576036546040516315895f4760e31b81526004810183905285946001600160a01b039286908390602490829087165afa8015610a2f5786928391610abf575b50604084608481603a54169483519687938492631357a41960e11b845233600485015216968760248401528a60448401528b60648401525af1958615610ab45787938897610a7d575b506040519384526020937fec68461f5d4cc45c89e914cb8826a966c73dd35e5f97815ece0a01ffa4a025a6853392a2866108ba575b87604051f35b83600493604051948580926370c264df60e11b82525afa928315610a72578893610a3a575b50906108ec889392612b27565b866108fb620151808504612f99565b5061090a848785999499612c32565b9689881615610983575b5050505050505090501691823b1561097e5760405163020da84160e61b8152600481019290925233602483015260448201529082908290606490829084905af180156105b45761096a575b8080808080806108b4565b61097390612932565b61026e57803861095f565b505050fd5b889697509061099d6109976109ad936136b5565b916136b5565b6109a6866136b5565b9187612b36565b936109d489603754169460405198899788968795636c1020a160e01b875260048701612bf8565b03925af1918215610a2f5786926109f5575b50508038808086898280610914565b90809250813d8311610a28575b610a0c8183612960565b81010312610a2457610a1d90612998565b38806109e6565b8480fd5b503d610a02565b6040513d88823e3d90fd5b8480929399508194503d8311610a6b575b610a558183612960565b810103126107d5579051879690916108ec6108df565b503d610a4b565b6040513d8a823e3d90fd5b909650610aa391935060403d604011610aad575b610a9b8183612960565b810190612b11565b929092953861087f565b503d610a91565b6040513d89823e3d90fd5b610adb91503d8085833e610ad38183612960565b810190612a8a565b5050505038610836565b50808452603d60205260408420546001600160a01b0316156107f4565b503461026e5760a036600319011261026e576084356001600160401b0381116105bf57366023820112156105bf57806004013590610b3f82612981565b90610b4d6040519283612960565b82825260208201906024829460051b8201019036821161154057602401915b818310611b2f57505050600435158015611b10575b6105d757604435151580611b03575b15611af157600480358452603d602090815260408086205460345491516370a0823160e01b81526001600160a01b0392831694810194909452169190816024817323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35afa908115611a80578591611abf575b506040516359b6a0c960e01b8152602081600481865afa908115610a2f578691611a8b575b50612710610c2c602092600494612cfe565b049260405192838092636835185f60e11b82525afa8015611a80578590611a4c575b610c5b9150602435612d1c565b11611a3a576044906004358452603d602052604060018060a01b038186205416815193848092638905faeb60e01b82526024356004830152823560248301525afa80156115095784928591611a15575b506064358311611a0357610cc3620151804204612f99565b9150506001604435106119ef576019600019604435019110156119cb575b610cfb610cf2620151804204612f99565b93849391612d1c565b6001811061174057610d17600c91600019019282840490612d1c565b910660011981116117405792610d5092610d4b926001610d5c960191610d3d83836135b4565b8091116119c3575b50613359565b612ce6565b62015180420690612d1c565b4281106115405762015180610d719104612f99565b50610d8b610d4b610d84838599956135b4565b8389613359565b906201437019821161159f57610dd4196201437083011161159f57603b196201514483011161159f576036546040516315895f4760e31b81526004803590820152908990829060249082906001600160a01b03165afa928315611794576004938a928b9161199f575b50604051630b90ca9160e11b81529460209186919082906001600160a01b03165afa938415611994578a9461195d575b506201517f0191610e388484600435612c32565b986001600160a01b038a16156118ae575b50505050506001600160a01b0385163b156115405760405163020da84160e61b815260048035908201523360248083019190915235604482015286908181606481836001600160a01b038c165af180156105b45761189a575b50508315611888576004358652603e60205260018060a01b0360408720541691828752603f6020526040872054156000146117d1576035546040516302c68be360e31b81526004810185905290602090829060249082908c906001600160a01b03165af1908115610a7257889161179f575b505b60405163313ce56760e01b8152602081600481885afa908115611794578991611754575b50600660ff821610611740578660001904670de0b6b3a76400001160011661159f57604d60ff82811660051901161161174057610f8e9060ff9081166005190116600a0a670de0b6b3a76400008802612cfe565b811561172a576040516323b872dd60e01b6020820152610fc781610fb98585043033602485016129fd565b03601f198101835282612960565b604051610fd381612945565b602081527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020820152863b156116e5578a8083602061104195519101828b5af13d156116dd573d9061102582612a3a565b916110336040519384612960565b82523d8d602084013e613675565b80519081611668575b50506111949382820460001904851183830415151661159f57611077612710868585040204848404612d11565b9680519160018310611654577323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c36001600160a01b036110ae600019860185612d28565b51160361162c5781511561163e57516001600160a01b031687900361162c576040518060608101106001600160401b036060830111176116165780606060409201825260028152602036910137868b52604060205260018060a01b0360408c205416908b604051809363d06ca61f60e01b82528b600483015260406024830152818061113d6044820187612db5565b03915afa91821561160b578c926115ee575b506039546001600160a01b03169161116c90600019850190612d28565b519081600019046126ac118215151661159f5760011942116115da576126ac612710938e93848d6111c98296604051998a97889687956338ed173960e01b875260048701520204602484015260a0604484015260a4830190612db5565b30606483015260014201608483015203925af1801561042a577f57f3d153693ba34ad2f1603ab743de3caf14b05ffa2fdfae8e9d0947a17c7ca3936060938361121e94936115b5575b50506000190190612d28565b5197604051908882526020820152886040820152a18560001904611388118615151661159f57856112e0602061125d61157c6113888e9b020484612d11565b604080516127108888048b0204815261157c61138887020460208201529081018290529098907fe59d21244ca3bff81515b705214dab78cc9f978c1939e610874429ffa47380b290606090a160385460405163a9059cbb60e01b81529384929183918d918391906127108c8c048f0204906001600160a01b031660048401612a1f565b03925af18015610a725761157c9260209261138892611582575b5060345460405163a9059cbb60e01b8152948593849361132d93910291909104906001600160a01b031660048401612a1f565b03818a7323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af18015610ab457611563575b50603b5460405163a9059cbb60e01b81529060209082908190611383908a906001600160a01b031660048401612a1f565b03818a7323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af18015610ab457611544575b506034546001600160a01b0316803b1561152857868091600460405180948193621e432b60e81b83525af1908115610ab457879161152c575b50506004358652603d60205260408620546001600160a01b031690813b15611528578660849281956127106040519889978896630aadb77760e01b885260243560048901520402046024850152604435604485015260648401525af1908115610404578391611514575b5050603b546001600160a01b0316803b1561042657604483926040519485938492635b97d36760e01b8452600435600485015260248401525af18015611509576114f5575b60208383604051907f308dab4150a765534b441eef3367b2732d18bfdcd4b5ffe2a7084e1b1699051560043592806114e03394602435604435846040919493926060820195825260208201520152565b0390a36040516001600160a01b039091168152f35b6114ff8491612932565b6104265782611490565b6040513d86823e3d90fd5b61151d90612932565b6105bf57813861144b565b8680fd5b61153590612932565b6115405785386113e1565b8580fd5b61155c9060203d6020116103fd576103ee8183612960565b50386113a8565b61157b9060203d6020116103fd576103ee8183612960565b5038611352565b61159890843d86116103fd576103ee8183612960565b50386112fa565b634e487b7160e01b600052601160045260246000fd5b6115d29293503d8091833e6115ca8183612960565b810190612d3c565b90388e611212565b634e487b7160e01b8d52601160045260248dfd5b6116049192508c3d8091833e6115ca8183612960565b903861114f565b6040513d8e823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b6040516310bc08dd60e01b8152600490fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b8c52601160045260248cfd5b6020806116799383010191016129e5565b1561168557388061104a565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b606090613675565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b89526011600452602489fd5b90506020813d60201161178c575b8161176f60209383612960565b81010312611788575160ff811681036117885738610f3a565b8880fd5b3d9150611762565b6040513d8b823e3d90fd5b90506020813d6020116117c9575b816117ba60209383612960565b810103126107d5575138610f14565b3d91506117ad565b604087205460010361185257603c546040516302c68be360e31b81526004810185905290602090829060249082908c906001600160a01b03165af1908115610a72578891611820575b50610f16565b90506020813d60201161184a575b8161183b60209383612960565b810103126107d557513861181a565b3d915061182e565b60405162461bcd60e51b815260206004820152600a60248201526957726f6e67207479706560b01b6044820152606490fd5b0390fd5b60405163720794bf60e01b8152600490fd5b6118a390612932565b611540578538610ea2565b602094959950906118c46109976118d4936136b5565b6118cd876136b5565b9184612b36565b8960018060a01b03603754169261190560405197889687958694636c1020a160e01b86526004359060048701612bf8565b03925af1908115610a2f578691611923575b50933880808080610e49565b90506020813d602011611955575b8161193e60209383612960565b810103126115405761194f90612998565b38611917565b3d9150611931565b9093506020813d60201161198c575b8161197960209383612960565b810103126107d55751926201517f610e24565b3d915061196c565b6040513d8c823e3d90fd5b602093506119b791503d808d833e610ad38183612960565b50505092909290610df4565b925038610d45565b600119106119db57604435610ce1565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b86526011600452602486fd5b60405163855e507b60e01b8152600490fd5b9050611a3191925060403d604011610aad57610a9b8183612960565b91909138610cab565b604051637730dc0b60e01b8152600490fd5b506020813d602011611a78575b81611a6660209383612960565b810103126107d557610c5b9051610c4e565b3d9150611a59565b6040513d87823e3d90fd5b90506020813d602011611ab7575b81611aa660209383612960565b810103126107d55751612710610c1a565b3d9150611a99565b90506020813d602011611ae9575b81611ada60209383612960565b810103126107d5575138610bf5565b3d9150611acd565b6040516307aaabcb60e21b8152600490fd5b5060036044351115610b90565b506004358352603d60205260408320546001600160a01b031615610b81565b82356001600160a01b03811681036107d557815260209283019201610b6c565b503461026e57606036600319011261026e57611b696128c6565b90611b726128dc565b60365460443593906001600160a01b039081163303611be0578415611bcc5783946102159452603e602052604085209060018060a01b03199181851683825416179055603d60205260408620921690825416179055612df2565b634e487b7160e01b84526001600452602484fd5b604051632b29402d60e21b8152600490fd5b503461026e578060031936011261026e576038546040516001600160a01b039091168152602090f35b503461026e57604036600319011261026e57611c356128c6565b6024359060018060a01b0390611c5282855460101c1633146129ac565b600283101561185257168252603f6020526040822055604051f35b503461026e57602036600319011261026e57611c876128c6565b60018060a01b0390611ca082845460101c1633146129ac565b1660018060a01b03196036541617603655604051f35b503461026e57611cc536612908565b82158015611e44575b6105d757801561043b5760385484906001600160a01b03908116803b15610426576040516316858d7960e21b8152600481018790526001600160a01b0386166024820152604481018590523360648201529083908290608490829084905af1908115610404578391611e30575b50859052603d60205280604083205416803b15610426576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af1908115610404578391611e1c575b505060345416803b156105bf57818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156105b457611e08575b50506105987f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f367519791604051918291339583612a1f565b611e1190612932565b610437578338611dd3565b611e2590612932565b6105bf578138611d97565b611e3990612932565b6105bf578138611d3b565b50828452603d60205260408420546001600160a01b031615611cce565b503461026e57602036600319011261026e57611e7b6128c6565b60018060a01b0390611e9482845460101c1633146129ac565b1660018060a01b03196037541617603755604051f35b503461026e57602036600319011261026e57610215611ec76128c6565b611ede60018060a01b03845460101c1633146129ac565b612df2565b503461026e57602036600319011261026e576020906001600160a01b039060409082611f0d6128c6565b168152818452205416604051908152f35b503461026e576020806003193601126105bf5760043590811561043b57603454604051636d40d7d760e11b8152600481018490523360248201529082908290604490829088906001600160a01b03165af1801561150957611fab575b507fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719906040519283523392a2604051f35b8190813d8311611fce575b611fc08183612960565b810103126107d55738611f7a565b503d611fb6565b503461026e578060031936011261026e57603c546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e575460405160109190911c6001600160a01b03168152602090f35b503461026e578060031936011261026e5760206040517323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c38152f35b503461026e578060031936011261026e5780546001600160a01b03906120849060101c821633146129ac565b6000546000604051928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b503461026e578060031936011261026e576036546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e576034546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e576037546040516001600160a01b039091168152602090f35b503461026e57612151366128f2565b811580156122c5575b6105d757801561043b57818352603d60209081526040808520549051630a43eeed60e11b81526004810184905233602482015285916001600160a01b0391908216848260448187855af18015611509578591879161228a575b6121dc9350846034541690866040518096819582946323b872dd60e01b845233600485016129fd565b03925af180156104045761226d575b5060345416803b156105bf57818091604460405180948193630dfa376d60e01b8352600160048401528960248401525af180156105b457612259575b50507f6ed71e479f5286ad6192bfdc2b224afa6073276d8f9a0e5028400f589fbb39cc906040519283523392a3604051f35b61226290612932565b610437578338612227565b61228390843d86116103fd576103ee8183612960565b50386121eb565b91905082813d83116122be575b6122a18183612960565b81010312610437578585916122b86121dc94612998565b506121b3565b503d612297565b50818352603d60205260408320546001600160a01b03161561215a565b503461026e57602036600319011261026e576122fc6128c6565b60018060a01b039061231582845460101c1633146129ac565b1660018060a01b03196039541617603955604051f35b503461026e578060031936011261026e57603a546040516001600160a01b039091168152602090f35b503461026e578060031936011261026e57603b546040516001600160a01b039091168152602090f35b503461026e57602036600319011261026e576123976128c6565b60018060a01b03906123b082845460101c1633146129ac565b1660018060a01b03196038541617603855604051f35b503461026e57604036600319011261026e576123e06128c6565b6123e86128dc565b9060018060a01b03809161240382865460101c1633146129ac565b168352604060205260408320911660018060a01b0319825416179055604051f35b503461026e57612433366128f2565b81158015612675575b6105d757801561043b57818352603d60209081526040808520549051630a43eeed60e11b8152600481018490523060248201526001600160a01b03929183169082816044818a865af1908115610ab457858491899361263b575b506124c092938660345416908a6040518096819582946323b872dd60e01b845233600485016129fd565b03925af18015610ab45761261e575b50858360345416803b156105bf578190604460405180948193630dfa376d60e01b8352600160048401528a60248401525af18015610ab45761260b575b50826038541692833b1561152857604051635a12fc9360e11b8152600481018790526001600160a01b03831660248201526044810186905233606482015293879081908690608490829084905af194851561042a5786956125f2575b50918184936125939693603854169160405180988196829563a9059cbb60e01b845260048401612a1f565b0393165af1918215611a80577f1e54d7530dad81af38adb8ca9db02add3130668375f37be85396403616fc3d49926125d5575b506040519283523392a3604051f35b6125eb90823d84116103fd576103ee8183612960565b50386125c6565b6125fe91929550612932565b6115405783928638612568565b61261790969196612932565b943861250c565b61263490833d85116103fd576103ee8183612960565b50386124cf565b92505081813d831161266e575b6126528183612960565b810103126115285782856126686124c093612998565b92612496565b503d612648565b50818352603d60205260408320546001600160a01b03161561243c565b503461026e57602036600319011261026e576126ac6128c6565b60018060a01b03906126c582845460101c1633146129ac565b1660018060a01b0319603a541617603a55604051f35b503461026e576020908160031936011261026e57600480358252603d83526040808320549051634e75827160e01b81526001600160a01b0392909185918391829086165afa928315612773578093612739575b505060405191168152f35b909192508382813d831161276c575b6127528183612960565b8101031261026e575061276490612998565b90388061272e565b503d612748565b604051903d90823e3d90fd5b503461026e57602036600319011261026e576127996128c6565b60018060a01b03906127b282845460101c1633146129ac565b1660018060a01b03196035541617603555604051f35b503461026e57602036600319011261026e576020906040906001600160a01b036127f06128c6565b168152603f83522054604051908152f35b503461026e57602036600319011261026e576020906004358152603d8252604060018060a01b0391205416604051908152f35b503461026e57602036600319011261026e5761284e6128c6565b60018060a01b039061286782845460101c1633146129ac565b1660018060a01b03196034541617603455604051f35b503461026e57602036600319011261026e576128976128c6565b60018060a01b03906128b082845460101c1633146129ac565b1660018060a01b0319603c541617603c55604051f35b600435906001600160a01b03821682036107d557565b602435906001600160a01b03821682036107d557565b60409060031901126107d5576004359060243590565b60609060031901126107d557600435906024356001600160a01b03811681036107d5579060443590565b6001600160401b03811161161657604052565b604081019081106001600160401b0382111761161657604052565b90601f801991011681019081106001600160401b0382111761161657604052565b6001600160401b0381116116165760051b60200190565b51906001600160a01b03821682036107d557565b156129b357565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b908160209103126107d5575180151581036107d55790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160a01b039091168152602081019190915260400190565b6001600160401b03811161161657601f01601f191660200190565b918091926000905b828210612a75575011612a6e575050565b6000910152565b91508060209183015181860152018291612a5d565b9060a0828203126107d55781516001600160401b0381116107d557820181601f820112156107d5578051612abd81612a3a565b92612acb6040519485612960565b818452602082840101116107d557612ae99160208085019101612a55565b91612af660208301612998565b91612b0360408201612998565b916080606083015192015190565b91908260409103126107d5576020825192015190565b600019811461159f5760010190565b6027919493612bd1936040519687936243522d60e81b6020860152612b65815180926020602389019101612a55565b840190602d60f81b91826023820152612b88825180936020602485019101612a55565b01906024820152612ba3825180936020602585019101612a55565b01612d4760f01b6025820152612bc28251809360208785019101612a55565b01036007810185520183612960565b565b90602091612bec81518092818552858086019101612a55565b601f01601f1916010190565b91608093612c15612c28939897969860a0865260a0860190612bd3565b9160208501528382036040850152612bd3565b9460608201520152565b916040519160208301938452604083015260608201526060815260808101918183106001600160401b038411176116165782602481602093816040528551902060018060a01b036037541690631620909560e01b835260848701525afa908115612cda57600091612ca4575b50905090565b602090813d8111612cd3575b612cba8186612960565b8101031261026e5750612ccc90612998565b8038612c9e565b503d612cb0565b6040513d6000823e3d90fd5b6201518090806000190482118115151661159f570290565b806000190482118115151661159f570290565b81811061159f570390565b8119811161159f570190565b805182101561163e5760209160051b010190565b60209081818403126107d5578051906001600160401b0382116107d557019180601f840112156107d5578251612d7181612981565b93612d7f6040519586612960565b818552838086019260051b8201019283116107d5578301905b828210612da6575050505090565b81518152908301908301612d98565b90815180825260208080930193019160005b828110612dd5575050505090565b83516001600160a01b031685529381019392810192600101612dc7565b6039546001600160a01b0391908216908115612e575760446020926000604051958694859363095ea7b360e01b8552600485015282196024850152165af18015612cda57612e3d5750565b612e549060203d81116103fd576103ee8183612960565b50565b6040516307bb995d60e41b8152600490fd5b15612e7057565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000811280156001600160ff1b0383900384131661159f57600160ff1b82900383121661159f570190565b6105b560008083136001600160ff1b03849004831116600116612f445760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa884128285121616612f4457500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b01811260011661159f57600d190190565b600082128015600160ff1b840183121661159f576001600160ff1b03830182131661159f570390565b6000916001600160ff1b039162010bd99084811281850381158185131661334557600160ff1b9383850392838212166133315787908401129162010bd819908162253d8c93018313841516611740570113166119db57622649650193600193600491858783048411828913161661331e57808712600760fd1b881216861661331e5762023ab196878160021b0597878985048211848b1316166132f857877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b1216166132f857880282811281850360031381151661330b57818703600312166132f8579084600361309093010590612f70565b9281841284840388138115166132ac5784860388121661329957868401610fa088828604821185841316166132bf57887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c831285841216166132bf576131099162164b09910205948261310287612ef4565b0590612f70565b828112818503601f138115166132bf57818703601f12166132ac57601f019680888504605011848a1316166132ac57807ffe666666666666666666666666666666666666666666666666666666666666678912848a1216166132ac5761098f9788816050020590828287048b1186841316166132e55784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c16166132d257906050836131be93020590612f70565b98600b8205978287036002138215166132d257829003600212166132bf5781878604600c1185891316166132bf57817ff555555555555555555555555555555555555555555555555555555555555556881285891216166132bf5761322a90600288600c029101612f70565b986031600160ff1b01811282166132bf5781906030190180950460641184861316166132ac577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616613299575050613294929161328f91606402612ec9565b612ec9565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b9291926107b281106107d557600191617d4b600160ff1b018512831661159f576000918281128015926001600160ff1b03929182840391906112c0838113871661333157600160ff1b859003908181128316611740576133d698999a9b6133e7916133db60049b8c92600c6133cd8a612f58565b05908b01612ec9565b612ef4565b0590617d4a1901612ec9565b6002600160ff1b0184128b166135a157600c61340285612f58565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c8313161661358e578b7ff55555555555555555555555555555555555555555555555555555555555555682128c8312161661358e5761346e90600c026001198601612f70565b61016f8c828a0482118d8413161661357b578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d8412161661357b576134bd9291600c91020590612ec9565b966113249485131661356857831216613555578792606492600c6134e36134eb94612f58565b059101612ec9565b0580920460031185831316166132bf57847fd555555555555555555555555555555555555555555555555555555555555556821285831216166132bf579082613538926003020590612f70565b9262253d8c600160ff1b0184121661329957505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b9060018114801561366b575b8015613661575b8015613657575b801561364d575b8015613643575b8015613639575b156135ef575050601f90565b6002146135fc5750601e90565b6003811615908161362c575b811561361f575b501561361a57601d90565b601c90565b610190915006153861360f565b6064810615159150613608565b50600c81146135e3565b50600a81146135dc565b50600881146135d5565b50600781146135ce565b50600581146135c7565b50600381146135c0565b90919015613681575090565b8151156136915750805190602001fd5b60405162461bcd60e51b815260206004820152908190611884906024830190612bd3565b801561375a57600081805b61374657506136ce81612a3a565b906136dc6040519283612960565b808252601f196136eb82612a3a565b013660208401375b80831561373f576001811061159f576000190192600a9182820660308119811161159f57855187101561163e570160f81b6001600160f81b03191660001a908401601f015304916136f3565b5050905090565b90613752600a91612b27565b9104806136c0565b5060405161376781612945565b60018152600360fc1b602082015290565b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea264697066735822122021f3050d4f13adff951a2fb95f0866f1faa80943144b7fb62ceed7eeb480767664736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "approvePoolToken(address)": {
        "params": {
          "_token": "Address of the approved token"
        }
      },
      "buyCover(uint256,uint256,uint256,uint256,address[])": {
        "params": {
          "_coverAmount": "Amount to cover",
          "_coverDuration": "Cover duration in month (1 ~ 3)",
          "_maxPayment": "Maximum payment user can accept",
          "_poolId": "Pool id"
        },
        "returns": {
          "_0": "crToken CR token address"
        }
      },
      "claimPayout(uint256,address,uint256)": {
        "params": {
          "_crToken": "Cover right token address",
          "_generation": "Generation of the priority pool",
          "_poolId": "Pool id"
        }
      },
      "currentLPAddress(uint256)": {
        "params": {
          "_poolId": "Priority Pool ID"
        },
        "returns": {
          "lpAddress": "Current generation LP token address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideLiquidity(uint256)": {
        "params": {
          "_amount": "Amount of liquidity (usdc) to provide"
        }
      },
      "removeLiquidity(uint256)": {
        "params": {
          "_amount": "Amount of liquidity to provide"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stakeLiquidity(uint256,uint256)": {
        "params": {
          "_amount": "Amount of PRO-LP tokens to stake",
          "_poolId": "Pool id"
        }
      },
      "stakeLiquidityWithoutFarming(uint256,uint256)": {
        "params": {
          "_amount": "Amount of PRO-LP amount",
          "_poolId": "Pool id"
        }
      },
      "storePoolInformation(address,address,uint256)": {
        "params": {
          "_pool": "Address of the priority pool",
          "_poolId": "Pool id",
          "_token": "Address of the priority pool's native token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeLiquidity(uint256,address,uint256)": {
        "params": {
          "_amount": "Amount of LP(priority lp) tokens to withdraw",
          "_poolId": "Pool id",
          "_priorityLP": "Priority lp token address to withdraw"
        }
      },
      "unstakeLiquidityWithoutFarming(uint256,address,uint256)": {
        "params": {
          "_amount": "PRI-LP token amount to remove",
          "_poolId": "Pool id",
          "_priorityLP": "PRI-LP token address"
        }
      }
    },
    "title": "Policy Center",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvePoolToken(address)": {
        "notice": "Approve the exchange to swap tokens"
      },
      "buyCover(uint256,uint256,uint256,uint256,address[])": {
        "notice": "Buy new cover for a given pool         Select a pool with parameter \"poolId\"         Cover amount is in usdc and duration is in month         The premium ratio may be dynamic so \"maxPayment\" is similar to \"slippage\""
      },
      "claimPayout(uint256,address,uint256)": {
        "notice": "Claim payout         Need to use a specific crToken address as parameter"
      },
      "currentLPAddress(uint256)": {
        "notice": "Returns the current LP address for a Pool ID         \"Current\" means the LP address that is currently being used         Because each priority pool may have several generations of LP tokens         Once reported and paid out, the LP generation will be updated"
      },
      "provideLiquidity(uint256)": {
        "notice": "Provide liquidity to Protection Pool"
      },
      "removeLiquidity(uint256)": {
        "notice": "Remove liquidity from protection pool"
      },
      "stakeLiquidity(uint256,uint256)": {
        "notice": "Stake Protection Pool LP (PRO-LP) into priority pools         And automatically stake the PRI-LP tokens into weighted farming pool         With this function, no need for approval of PRI-LP tokens         If you want to hold the PRI-LP tokens for other usage         Call \"stakeLiquidityWithoutFarming\""
      },
      "stakeLiquidityWithoutFarming(uint256,uint256)": {
        "notice": "Stake liquidity to priority pool without depositing into farming"
      },
      "storePoolInformation(address,address,uint256)": {
        "notice": "Store new pool information"
      },
      "unstakeLiquidity(uint256,address,uint256)": {
        "notice": "Unstake Protection Pool LP from priority pools         There may be different generations of priority lp tokens         This function will first remove the PRI-LP token from farming pool         Ensure that your PRI-LP tokens are inside the farming pool         If the PRI-LP tokens are in your own wallet, use \"unstakeLiquidityWithoutFarming\""
      },
      "unstakeLiquidityWithoutFarming(uint256,address,uint256)": {
        "notice": "Unstake liquidity without removing PRI-LP from farming"
      }
    },
    "notice": "This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17658,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17765,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6169,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "deg",
        "offset": 0,
        "slot": "50",
        "type": "t_contract(IDegisToken)6285"
      },
      {
        "astId": 6172,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "veDeg",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IVeDEG)7449"
      },
      {
        "astId": 5324,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "protectionPool",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 5326,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priceGetter",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 5328,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 5330,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "coverRightTokenFactory",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 5332,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "weightedFarmingPool",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 5334,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "exchange",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 5336,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "payoutPool",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      },
      {
        "astId": 5338,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "treasury",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 5340,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "dexPriceGetter",
        "offset": 0,
        "slot": "60",
        "type": "t_address"
      },
      {
        "astId": 3771,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priorityPools",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3775,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "tokenByPoolId",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3779,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "oracleType",
        "offset": 0,
        "slot": "63",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3783,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "exchangeByToken",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)6285": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IVeDEG)7449": {
        "encoding": "inplace",
        "label": "contract IVeDEG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}