{
  "address": "0xe9c44d0521B19189dc549F98E8f4696f3df09bE6",
  "abi": [
    {
      "inputs": [],
      "name": "PayoutPool__NoPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayoutPool__NotPolicyCenter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayoutPool__OnlyPriorityPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayoutPool__WrongCRToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "NewPayout",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newGenerationCRAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "newPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "payouts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTiemstamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coverIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priorityPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfdb55f576b93b1a59d001f2f1c798df62356365150f2c7cdd5d7c6eaae422afd",
  "receipt": {
    "to": null,
    "from": "0x32eB34d060c12aD0491d260c436d30e5fB13a8Cd",
    "contractAddress": "0xe9c44d0521B19189dc549F98E8f4696f3df09bE6",
    "transactionIndex": 1,
    "gasUsed": "114348971",
    "logsBloom": "0x
    "blockHash": "0xf2ae8e5652627ae263c8d9613c32ce5c8d48bac06ecd701478590f1020c48bb0",
    "transactionHash": "0xfdb55f576b93b1a59d001f2f1c798df62356365150f2c7cdd5d7c6eaae422afd",
    "logs": [],
    "blockNumber": 18800285,
    "cumulativeGasUsed": "114348971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "6b9a20a2312638400b48edb20ccbe878",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PayoutPool__NoPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutPool__NotPolicyCenter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutPool__OnlyPriorityPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutPool__WrongCRToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"NewPayout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newGenerationCRAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"newPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTiemstamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priorityPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,address,uint256,uint256)\":{\"params\":{\"_crToken\":\"Cover right token address\",\"_generation\":\"Generation of priority pool (started at 1)\",\"_poolId\":\"Pool Id\",\"_user\":\"User address\"},\"returns\":{\"claimed\":\"              The actual amount transferred to the user\",\"newGenerationCRAmount\":\"New generation crToken minted to the user\"}},\"newPayout(uint256,uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Total amount to be claimed\",\"_generation\":\"Generation of priority pool (start at 1)\",\"_poolAddress\":\"Address of priority pool\",\"_poolId\":\"Pool Id\",\"_ratio\":\"Payout ratio of this payout (users can only use part of their crTokens to claim)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,address,uint256,uint256)\":{\"notice\":\"Claim payout for a user         Only callable from policy center         Need provide certain crToken address and generation\"},\"newPayout(uint256,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"New payout comes in         Only callable from one of the priority pools         After the pool's report is passed and executed,         part of the assets will be moved to this pool.\"}},\"notice\":\"Payout Pool         Every time there is a report passed, some assets will be moved to this pool         It is stored as a Payout struct         - amount       Total amount of this payout         - remaining    Remaining amount         - endTimestamp After this timestamp, no more claims         - ratio        Max ratio of a user's crToken\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/payoutPool/PayoutPool.sol\":\"PayoutPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363833313932303631313538\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"src/interfaces/ICoverRightToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightToken {\\n    function expiry() external view returns (uint256);\\n\\n    function getClaimableOf(address _user) external view returns (uint256);\\n\\n    function mint(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function generation() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd06b45a4cefc10086b3ad76a27e23ff30c32e687856dc47d783698813848c25\",\"license\":\"MIT\"},\"src/interfaces/ICoverRightTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightTokenFactory {\\n    function deployCRToken(\\n        string calldata _poolName,\\n        uint256 _poolId,\\n        string calldata _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external returns (address newCRTokenAddress);\\n\\n    function deployed(bytes32 _salt) external view returns (bool);\\n\\n    function saltToAddress(bytes32 _salt) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf17c79edd1d32f1b61e8bdcdc74262f7935a899d03b9cfd677e4ff438f0814db\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function lpTokenAddress(uint256 _generation)\\n        external\\n        view\\n        returns (address);\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function crTokenAddress(uint256 generation) external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external;\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n\\n    function updateWhenClaimed(uint256 expiry, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa43d1d0398e9cfaff0258c21e978549777688cc1b5d0d1c9b30c2e6998f14bc4\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerUSDC\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerUSDC\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n\\n   \\n}\\n\",\"keccak256\":\"0xcbc2bb32ce42fdcb8ba88a4437f9c0ab073b80538f89c14fac7654e6088c2079\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/payoutPool/PayoutPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../../interfaces/ICoverRightTokenFactory.sol\\\";\\nimport \\\"../../interfaces/ICoverRightToken.sol\\\";\\nimport \\\"../../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\n\\nimport \\\"../../util/SimpleIERC20.sol\\\";\\n\\n/**\\n * @notice Payout Pool\\n *\\n *         Every time there is a report passed, some assets will be moved to this pool\\n *         It is stored as a Payout struct\\n *         - amount       Total amount of this payout\\n *         - remaining    Remaining amount\\n *         - endTimestamp After this timestamp, no more claims\\n *         - ratio        Max ratio of a user's crToken\\n */\\ncontract PayoutPool is Initializable {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    uint256 public constant SCALE = 1e12;\\n\\n    uint256 public constant CLAIM_PERIOD = 30 days;\\n\\n    address public constant USDC = 0x23d0cddC1Ea9Fcc5CA9ec6b5fC77E304bCe8d4c3;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Cover Right Token Factory\\n    address public crFactory;\\n\\n    // Policy Center\\n    address public policyCenter;\\n\\n    // Priority Pool Factory\\n    address public priorityPoolFactory;\\n\\n    // About \\\"ratio\\\" and \\\"coverIndex\\\"\\n    // E.g. You have 1000 available crTokens\\n    //      There is a payout with ratio 1e11 and coverIndex 1000\\n    //      That means:\\n    //        - 10% of your crTokens can be used for claim (100 crTokens)\\n    //        - 1 crToken can be used to claim 0.1 USDC (get 10 USDC back)\\n    struct Payout {\\n        uint256 amount; // Total amount of this payment\\n        uint256 remaining; // Remaining amount\\n        uint256 endTiemstamp; // Claim period end timestamp\\n        uint256 ratio; // Ratio of your crTokens that can be claimed (SCALE = 1e12 = 100%)\\n        uint256 coverIndex;  // Index of the cover (ratio of the crTokens to USDC) (10000 = 100%)\\n        address priorityPool; // Which priority pool this payout belongs to\\n    }\\n    // Pool id => Generation => Payout\\n    // One pool & one generation has only one payout\\n    mapping(uint256 => mapping(uint256 => Payout)) public payouts;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event NewPayout(\\n        uint256 indexed _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PayoutPool__OnlyPriorityPool();\\n    error PayoutPool__NotPolicyCenter();\\n    error PayoutPool__WrongCRToken();\\n    error PayoutPool__NoPayout();\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(\\n        address _policyCenter,\\n        address _crFactory,\\n        address _priorityPoolFactory\\n    ) public initializer {\\n        policyCenter = _policyCenter;\\n        crFactory = _crFactory;\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Only be called from one of the priority pools\\n    modifier onlyPriorityPool(uint256 _poolId) {\\n        (, address poolAddress, , , ) = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        ).pools(_poolId);\\n        if (poolAddress != msg.sender) revert PayoutPool__OnlyPriorityPool();\\n        _;\\n    }\\n\\n    // Only be called from policy center\\n    modifier onlyPolicyCenter() {\\n        if (msg.sender != policyCenter) revert PayoutPool__NotPolicyCenter();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice New payout comes in\\n     *\\n     *         Only callable from one of the priority pools\\n     *\\n     *         After the pool's report is passed and executed,\\n     *         part of the assets will be moved to this pool.\\n     *\\n     *\\n     * @param _poolId       Pool Id\\n     * @param _generation   Generation of priority pool (start at 1)\\n     * @param _amount       Total amount to be claimed\\n     * @param _ratio        Payout ratio of this payout (users can only use part of their crTokens to claim)\\n     * @param _poolAddress  Address of priority pool\\n     */\\n    function newPayout(\\n        uint256 _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio,\\n        uint256 _coverIndex,\\n        address _poolAddress\\n    ) external onlyPriorityPool(_poolId) {\\n        Payout storage payout = payouts[_poolId][_generation];\\n\\n        // Store the information\\n        payout.amount = _amount;\\n        payout.endTiemstamp = block.timestamp + CLAIM_PERIOD;\\n        payout.ratio = _ratio;\\n        payout.coverIndex = _coverIndex;\\n        payout.priorityPool = _poolAddress;\\n\\n        emit NewPayout(_poolId, _generation, _amount, _ratio);\\n    }\\n\\n    /**\\n     * @notice Claim payout for a user\\n     *\\n     *         Only callable from policy center\\n     *         Need provide certain crToken address and generation\\n     *\\n     * @param _user       User address\\n     * @param _crToken    Cover right token address\\n     * @param _poolId     Pool Id\\n     * @param _generation Generation of priority pool (started at 1)\\n     *\\n     * @return claimed               The actual amount transferred to the user\\n     * @return newGenerationCRAmount New generation crToken minted to the user\\n     */\\n    function claim(\\n        address _user,\\n        address _crToken,\\n        uint256 _poolId,\\n        uint256 _generation\\n    )\\n        external\\n        onlyPolicyCenter\\n        returns (uint256 claimed, uint256 newGenerationCRAmount)\\n    {\\n        Payout storage payout = payouts[_poolId][_generation];\\n\\n        uint256 expiry = ICoverRightToken(_crToken).expiry();\\n\\n        // Check the crToken address and generation matched\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_poolId, expiry, _generation)\\n        );\\n        if (ICoverRightTokenFactory(crFactory).saltToAddress(salt) != _crToken)\\n            revert PayoutPool__WrongCRToken();\\n\\n        // Get claimable amount of crToken\\n        uint256 claimableBalance = ICoverRightToken(_crToken).getClaimableOf(\\n            _user\\n        );\\n        // Only part of the crToken can be used for claim\\n        uint256 claimable = (claimableBalance * payout.ratio) / SCALE;\\n\\n        if (claimable == 0) revert PayoutPool__NoPayout();\\n\\n        // Actual amount given to the user\\n        claimed = (claimable * payout.coverIndex) / 10000;\\n\\n        // Reduce the active cover amount in priority pool\\n        (, address poolAddress, , , ) = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        ).pools(_poolId);\\n        IPriorityPool(poolAddress).updateWhenClaimed(expiry, claimed);\\n\\n        // Burn current crToken\\n        ICoverRightToken(_crToken).burn(\\n            _poolId,\\n            _user,\\n            // burns the users' crToken balance, not the payout amount,\\n            // since rest of the payout will be minted as a new generation token\\n            claimableBalance\\n        );\\n\\n        SimpleIERC20(USDC).transfer(_user, claimed);\\n\\n        // Amount of new generation cr token to be minted\\n        newGenerationCRAmount = claimableBalance - claimable;\\n    }\\n}\\n\",\"keccak256\":\"0xace647e2a13e1803bcd51d8aca03dab80e63eef0fa5ab9b2ad28b25aaca54bdf\",\"license\":\"GPL-3.0-or-later\"},\"src/util/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287cc23d2f983675929f9892ce173553da2d997cc62c61c13943a54c05f09f87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610a7a908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826321241dfe146108b35750816326af4832146104a5578163304de873146104345781636f8a6e431461040b57816389a30271146103dc5781639661994514610291578163c0c53b8b1461010857508063e8adbf2f146100e0578063eced5526146100c15763f4ecd0911461009357600080fd5b346100bd57816003193601126100bd579054905160109190911c6001600160a01b03168152602090f35b5080fd5b50346100bd57816003193601126100bd576020905164e8d4a510008152f35b50346100bd57816003193601126100bd5760015490516001600160a01b039091168152602090f35b90503461028d57606036600319011261028d576101236108d0565b9061012c6108e6565b906044356001600160a01b038181169182900361028857865460ff8160081c16159384809561027b575b8015610264575b1561020a575060ff1981166001178855836101f9575b5060018060a01b0319941684600154161760015585549262010000600160b01b039060101b16938462010000600160b01b0319851617875560025416176002556101bc57505051f35b610100600160b01b0319161782558051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a151f35b61ffff191661010117875538610173565b608490602089519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b15801561015d5750600160ff83161461015d565b50600160ff831610610156565b600080fd5b8280fd5b90503461028d5760c036600319011261028d5780359060243590606435906044359060a4356001600160a01b038181169291839003610288578089602492600254168a51938480926315895f4760e31b82528c888301525afa9182156103d2578a926103a9575b503391160361039b5785885260036020528688208589526020528688209083825562278d00194211610388574262278d00016002830155600382018590556084359082015560050180546001600160a01b031916909117905584519283526020830152818401527fd303ba41003252f101801d7b067a3b4ccab80e936da6462f7ead1a40c1eb941d90606090a251f35b634e487b7160e01b895260119052602488fd5b865163f6c16f2960e01b8152fd5b6103c69192503d808c833e6103be8183610926565b81019061095c565b505050905090386102f8565b89513d8c823e3d90fd5b5050346100bd57816003193601126100bd57602090517323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c38152f35b5050346100bd57816003193601126100bd5760025490516001600160a01b039091168152602090f35b9190503461028d578060031936011261028d578060c09383358152600360205281812060243582526020522080549260018201549260028301549060038401549284015493600560018060a01b039101541694815196875260208701528501526060840152608083015260a0820152f35b8284346108b05760803660031901126108b0576104c06108d0565b926104c96108e6565b93604435926064359060018060a01b0393846001541633036108a2578582526020956003875287832084845287528588842099168851916370c264df60e11b835288838581855afa928315610898578593610869575b50895189810196828852848c830152606082015260608152608081019681881067ffffffffffffffff891117610856578a888092818f52845190208c8a5460101c1690631620909560e01b8352608486015260249a8b915afa91821561084c57918a918c86948a93610811575b50505016036108015789516382b2ed1360e01b81529688168488018190529289888881865afa9788156107f75786986107b3575b5064e8d4a510006105d560038e01548a610a1b565b049889156107a35787876127108e9f8d8a6105f292015490610a1b565b049d83600254169051928380926315895f4760e31b8252888c8301525afa90811561079957889161077a575b501690813b15610776578b604488928f84905195869485936377f2c84b60e01b85528c8501528d8401525af1801561076c57610759575b50813b15610755578491606483928d519485938492634f752fb360e11b845289840152878b8401528b60448401525af1801561074b57908491610737575b505088519063a9059cbb60e01b82528282015287848201528681604481867323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af1801561072d576106fa575b508484106106ea5750505084519384520390820152f35b634e487b7160e01b825260119052fd5b8681813d8311610726575b61070f8183610926565b8101031261028d5751801515036100bd57886106d3565b503d610705565b89513d85823e3d90fd5b610740906108fc565b61028d57828a610693565b8a513d86823e3d90fd5b8480fd5b610765909591956108fc565b938b610655565b8c513d88823e3d90fd5b8680fd5b61078e91503d808a833e6103be8183610926565b50505090508e61061e565b8e513d8a823e3d90fd5b8b51636a2f23b760e01b81528690fd5b9b9a99809998508c813d83116107f0575b6107ce8183610926565b810103126107ec579a51999a9899979896979664e8d4a510006105c0565b8580fd5b503d6107c4565b8b513d88823e3d90fd5b89516374da7ab160e01b81528490fd5b925092509250813d8311610845575b61082a8185610926565b810103126107ec578861083d8492610948565b8e8c8161058c565b503d610820565b8c513d89823e3d90fd5b634e487b7160e01b875260418652602487fd5b9092508881813d8311610891575b6108818183610926565b810103126107555751918b61051f565b503d610877565b8a513d87823e3d90fd5b86516321d0c2eb60e11b8152fd5b80fd5b8490346100bd57816003193601126100bd578062278d0060209252f35b600435906001600160a01b038216820361028857565b602435906001600160a01b038216820361028857565b67ffffffffffffffff811161091057604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761091057604052565b51906001600160a01b038216820361028857565b909160a08284031261028857815167ffffffffffffffff908181116102885783019084601f8301121561028857815190811161091057604051916020956109ac87601f19601f8601160185610926565b828452868383010111610288579190856000935b828510610a065750816109dd94116109f8575b5050938301610948565b916109ea60408201610948565b916080606083015192015190565b6000918301015238856109d3565b848101820151848601830152938101936109c0565b8060001904821181151516610a2e570290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122027bb97f83cda053ce42c2069a3ef4ceef4a164b0892c6db62dd05fb1bf18eef364736f6c634300080f0033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826321241dfe146108b35750816326af4832146104a5578163304de873146104345781636f8a6e431461040b57816389a30271146103dc5781639661994514610291578163c0c53b8b1461010857508063e8adbf2f146100e0578063eced5526146100c15763f4ecd0911461009357600080fd5b346100bd57816003193601126100bd579054905160109190911c6001600160a01b03168152602090f35b5080fd5b50346100bd57816003193601126100bd576020905164e8d4a510008152f35b50346100bd57816003193601126100bd5760015490516001600160a01b039091168152602090f35b90503461028d57606036600319011261028d576101236108d0565b9061012c6108e6565b906044356001600160a01b038181169182900361028857865460ff8160081c16159384809561027b575b8015610264575b1561020a575060ff1981166001178855836101f9575b5060018060a01b0319941684600154161760015585549262010000600160b01b039060101b16938462010000600160b01b0319851617875560025416176002556101bc57505051f35b610100600160b01b0319161782558051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a151f35b61ffff191661010117875538610173565b608490602089519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b15801561015d5750600160ff83161461015d565b50600160ff831610610156565b600080fd5b8280fd5b90503461028d5760c036600319011261028d5780359060243590606435906044359060a4356001600160a01b038181169291839003610288578089602492600254168a51938480926315895f4760e31b82528c888301525afa9182156103d2578a926103a9575b503391160361039b5785885260036020528688208589526020528688209083825562278d00194211610388574262278d00016002830155600382018590556084359082015560050180546001600160a01b031916909117905584519283526020830152818401527fd303ba41003252f101801d7b067a3b4ccab80e936da6462f7ead1a40c1eb941d90606090a251f35b634e487b7160e01b895260119052602488fd5b865163f6c16f2960e01b8152fd5b6103c69192503d808c833e6103be8183610926565b81019061095c565b505050905090386102f8565b89513d8c823e3d90fd5b5050346100bd57816003193601126100bd57602090517323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c38152f35b5050346100bd57816003193601126100bd5760025490516001600160a01b039091168152602090f35b9190503461028d578060031936011261028d578060c09383358152600360205281812060243582526020522080549260018201549260028301549060038401549284015493600560018060a01b039101541694815196875260208701528501526060840152608083015260a0820152f35b8284346108b05760803660031901126108b0576104c06108d0565b926104c96108e6565b93604435926064359060018060a01b0393846001541633036108a2578582526020956003875287832084845287528588842099168851916370c264df60e11b835288838581855afa928315610898578593610869575b50895189810196828852848c830152606082015260608152608081019681881067ffffffffffffffff891117610856578a888092818f52845190208c8a5460101c1690631620909560e01b8352608486015260249a8b915afa91821561084c57918a918c86948a93610811575b50505016036108015789516382b2ed1360e01b81529688168488018190529289888881865afa9788156107f75786986107b3575b5064e8d4a510006105d560038e01548a610a1b565b049889156107a35787876127108e9f8d8a6105f292015490610a1b565b049d83600254169051928380926315895f4760e31b8252888c8301525afa90811561079957889161077a575b501690813b15610776578b604488928f84905195869485936377f2c84b60e01b85528c8501528d8401525af1801561076c57610759575b50813b15610755578491606483928d519485938492634f752fb360e11b845289840152878b8401528b60448401525af1801561074b57908491610737575b505088519063a9059cbb60e01b82528282015287848201528681604481867323d0cddc1ea9fcc5ca9ec6b5fc77e304bce8d4c35af1801561072d576106fa575b508484106106ea5750505084519384520390820152f35b634e487b7160e01b825260119052fd5b8681813d8311610726575b61070f8183610926565b8101031261028d5751801515036100bd57886106d3565b503d610705565b89513d85823e3d90fd5b610740906108fc565b61028d57828a610693565b8a513d86823e3d90fd5b8480fd5b610765909591956108fc565b938b610655565b8c513d88823e3d90fd5b8680fd5b61078e91503d808a833e6103be8183610926565b50505090508e61061e565b8e513d8a823e3d90fd5b8b51636a2f23b760e01b81528690fd5b9b9a99809998508c813d83116107f0575b6107ce8183610926565b810103126107ec579a51999a9899979896979664e8d4a510006105c0565b8580fd5b503d6107c4565b8b513d88823e3d90fd5b89516374da7ab160e01b81528490fd5b925092509250813d8311610845575b61082a8185610926565b810103126107ec578861083d8492610948565b8e8c8161058c565b503d610820565b8c513d89823e3d90fd5b634e487b7160e01b875260418652602487fd5b9092508881813d8311610891575b6108818183610926565b810103126107555751918b61051f565b503d610877565b8a513d87823e3d90fd5b86516321d0c2eb60e11b8152fd5b80fd5b8490346100bd57816003193601126100bd578062278d0060209252f35b600435906001600160a01b038216820361028857565b602435906001600160a01b038216820361028857565b67ffffffffffffffff811161091057604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761091057604052565b51906001600160a01b038216820361028857565b909160a08284031261028857815167ffffffffffffffff908181116102885783019084601f8301121561028857815190811161091057604051916020956109ac87601f19601f8601160185610926565b828452868383010111610288579190856000935b828510610a065750816109dd94116109f8575b5050938301610948565b916109ea60408201610948565b916080606083015192015190565b6000918301015238856109d3565b848101820151848601830152938101936109c0565b8060001904821181151516610a2e570290565b634e487b7160e01b600052601160045260246000fdfea264697066735822122027bb97f83cda053ce42c2069a3ef4ceef4a164b0892c6db62dd05fb1bf18eef364736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,address,uint256,uint256)": {
        "params": {
          "_crToken": "Cover right token address",
          "_generation": "Generation of priority pool (started at 1)",
          "_poolId": "Pool Id",
          "_user": "User address"
        },
        "returns": {
          "claimed": "              The actual amount transferred to the user",
          "newGenerationCRAmount": "New generation crToken minted to the user"
        }
      },
      "newPayout(uint256,uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_amount": "Total amount to be claimed",
          "_generation": "Generation of priority pool (start at 1)",
          "_poolAddress": "Address of priority pool",
          "_poolId": "Pool Id",
          "_ratio": "Payout ratio of this payout (users can only use part of their crTokens to claim)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,address,uint256,uint256)": {
        "notice": "Claim payout for a user         Only callable from policy center         Need provide certain crToken address and generation"
      },
      "newPayout(uint256,uint256,uint256,uint256,uint256,address)": {
        "notice": "New payout comes in         Only callable from one of the priority pools         After the pool's report is passed and executed,         part of the assets will be moved to this pool."
      }
    },
    "notice": "Payout Pool         Every time there is a report passed, some assets will be moved to this pool         It is stored as a Payout struct         - amount       Total amount of this payout         - remaining    Remaining amount         - endTimestamp After this timestamp, no more claims         - ratio        Max ratio of a user's crToken",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10675,
        "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
        "label": "crFactory",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10677,
        "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
        "label": "policyCenter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10679,
        "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 10699,
        "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
        "label": "payouts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Payout)10692_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Payout)10692_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct PayoutPool.Payout))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Payout)10692_storage)"
      },
      "t_mapping(t_uint256,t_struct(Payout)10692_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PayoutPool.Payout)",
        "numberOfBytes": "32",
        "value": "t_struct(Payout)10692_storage"
      },
      "t_struct(Payout)10692_storage": {
        "encoding": "inplace",
        "label": "struct PayoutPool.Payout",
        "members": [
          {
            "astId": 10681,
            "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10683,
            "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
            "label": "remaining",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10685,
            "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
            "label": "endTiemstamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10687,
            "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
            "label": "ratio",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 10689,
            "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
            "label": "coverIndex",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 10691,
            "contract": "src/pools/payoutPool/PayoutPool.sol:PayoutPool",
            "label": "priorityPool",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}