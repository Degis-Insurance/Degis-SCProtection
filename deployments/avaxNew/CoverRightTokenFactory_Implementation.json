{
  "address": "0x4ec41a3fe8d788d3082E19F0b51e6FabBd8b8d0d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "generation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "NewCRTokenDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_poolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "deployCRToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "newCRToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "deployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "generation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "getCRTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "crToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incidentReport",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "saltToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutPool",
          "type": "address"
        }
      ],
      "name": "setPayoutPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55d8e297366899ff167b204d520eeea756ede0218892d225605b0cd8f1c3f350",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0x4ec41a3fe8d788d3082E19F0b51e6FabBd8b8d0d",
    "transactionIndex": 17,
    "gasUsed": "2625180",
    "logsBloom": "0x
    "blockHash": "0xa4638056a558099ac752743ef213a4fcf8df462724187e7d75f70eca188f668a",
    "transactionHash": "0x55d8e297366899ff167b204d520eeea756ede0218892d225605b0cd8f1c3f350",
    "logs": [],
    "blockNumber": 25729304,
    "cumulativeGasUsed": "6271105",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fabc28fa05fbf04887182e53da9c3087",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"NewCRTokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"deployCRToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newCRToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"generation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"getCRTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"crToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incidentReport\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"saltToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutPool\",\"type\":\"address\"}],\"name\":\"setPayoutPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployCRToken(string,uint256,string,uint256,uint256)\":{\"params\":{\"_expiry\":\"Expiry date of cover right token\",\"_generation\":\"Generation of priority pool & crToken (1 if no liquidations occurred)\",\"_poolId\":\"Pool Id\",\"_poolName\":\"Name of Priority Pool\",\"_tokenName\":\"Name of insured token (e.g. DEG)\"},\"returns\":{\"newCRToken\":\"New deployed crToken address\"}},\"getCRTokenAddress(uint256,uint256,uint256)\":{\"params\":{\"_expiry\":\"Expiry timestamp\",\"_generation\":\"Generation of the crToken\",\"_poolId\":\"Pool id\"},\"returns\":{\"crToken\":\"CRToken address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployCRToken(string,uint256,string,uint256,uint256)\":{\"notice\":\"Deploy Cover Right Token for a given pool\"},\"getCRTokenAddress(uint256,uint256,uint256)\":{\"notice\":\"Get crToken address\"}},\"notice\":\"Factory for deploying crTokens         Salt as index for cover right tokens:             salt = keccak256(poolId, expiry, genration)         Factory will record whether a crToken has been deployed         Also record the generation of a specific crToken         And find the address of the crToken with its salt\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/crTokens/CoverRightTokenFactory.sol\":\"CoverRightTokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735333235393235333131\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/crTokens/CoverRightToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"../interfaces/IIncidentReport.sol\\\";\\n\\nimport \\\"../libraries/DateTime.sol\\\";\\n\\n/**\\n * @notice Cover Right Tokens\\n *\\n *         ERC20 tokens that represent the cover you bought\\n *         It is a special token:\\n *             1) Can not be transferred to other addresses\\n *             2) Has an expiry date\\n *\\n *         A new crToken will be deployed for each month's policies for a pool\\n *         Each crToken will ended at the end timestamp of each month\\n *\\n *         To calculate a user's balance, we use coverFrom to record it.\\n *         E.g.  CRToken CR-JOE-2022-8\\n *               You bought X amount at timestamp t1 (in 2022-6 ~ 2022-8)\\n *               coverStartFrom[yourAddress][t1] += X\\n *\\n *         When used for claiming, check your crTokens\\n *             1) Not expired\\n *             2) Not bought too close to the report timestamp\\n *\\n */\\ncontract CoverRightToken is ERC20, ReentrancyGuard {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Generation of crToken\\n    // Same as the generation of the priority pool (when this token was deployed)\\n    uint256 public immutable generation;\\n\\n    // Expiry date (always the last timestamp of a month)\\n    uint256 public immutable expiry;\\n\\n    // Pool id for this crToken\\n    uint256 public immutable poolId;\\n\\n    // Those covers bought within 2 days will be excluded\\n    // TODO: test will set it as 0\\n    uint256 public constant EXCLUDE_DAYS = 2;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Policy center address\\n    address public policyCenter;\\n\\n    // Incident report address\\n    address public incidentReport;\\n\\n    // Payout pool address\\n    address public payoutPool;\\n\\n    // Pool name for this crToken\\n    string public poolName;\\n\\n    // User address => start timestamp => cover amount\\n    mapping(address => mapping(uint256 => uint256)) public coverStartFrom;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        string memory _poolName,\\n        uint256 _poolId,\\n        string memory _name,\\n        uint256 _expiry,\\n        uint256 _generation,\\n        address _policyCenter,\\n        address _incidentReport,\\n        address _payoutPool\\n    ) ERC20(_name, \\\"crToken\\\") {\\n        expiry = _expiry;\\n\\n        poolName = _poolName;\\n        poolId = _poolId;\\n        generation = _generation;\\n\\n        policyCenter = _policyCenter;\\n        incidentReport = _incidentReport;\\n        payoutPool = _payoutPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Only called from permitted addresses\\n     *\\n     *         Permitted addresses:\\n     *            1) Policy center\\n     *            2) Payout pool\\n     *\\n     *         For policyCenter, when deploying new crTokens, the policyCenter address is still not initialized,\\n     *         so we only skip the test when policyCenter is address(0)\\n     */\\n    modifier onlyPermitted() {\\n        if (policyCenter != address(0)) {\\n            require(\\n                msg.sender == policyCenter || msg.sender == payoutPool,\\n                \\\"Not permitted\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Override the decimals funciton\\n     *\\n     *         Cover right token is minted with reference to the cover amount he bought\\n     *         So keep the decimals the same with USDC\\n     */\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint new crTokens when buying covers\\n     *\\n     * @param _poolId Pool id\\n     * @param _user   User address\\n     * @param _amount Amount to mint\\n     */\\n    function mint(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external onlyPermitted nonReentrant {\\n        require(_amount > 0, \\\"Zero Amount\\\");\\n        require(_poolId == poolId, \\\"Wrong pool id\\\");\\n\\n        // uint256 effectiveFrom = _getEOD(\\n        //     block.timestamp + EXCLUDE_DAYS * 1 days\\n        // );\\n\\n        // Start from today's last timestamp\\n        uint256 effectiveFrom = _getEOD(block.timestamp);\\n\\n        coverStartFrom[_user][effectiveFrom] += _amount;\\n\\n        _mint(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn crTokens to claim\\n     *         Only callable from policyCenter\\n     *\\n     * @param _poolId Pool id\\n     * @param _user   User address\\n     * @param _amount Amount to burn\\n     */\\n    function burn(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external onlyPermitted nonReentrant {\\n        require(_amount > 0, \\\"Zero Amount\\\");\\n        require(_poolId == poolId, \\\"Wrong pool id\\\");\\n\\n        _burn(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the claimable amount of a user\\n     *         Claimable means \\\"without those has passed the expiry date\\\"\\n     *\\n     * @param _user User address\\n     *\\n     * @return claimable Claimable balance\\n     */\\n    function getClaimableOf(address _user) external view returns (uint256) {\\n        uint256 exclusion = getExcludedCoverageOf(_user);\\n        uint256 balance = balanceOf(_user);\\n\\n        if (exclusion > balance) return 0;\\n        else return balance - exclusion;\\n    }\\n\\n    /**\\n     * @notice Get the excluded amount of a user\\n     *         Excluded means \\\"without those are bought within a short time before voteTimestamp\\\"\\n     *\\n     *         Only count the corresponding one report (voteTimestamp)\\n     *         Each crToken & priorityPool has a generation\\n     *         And should get the correct report with this \\\"Generation\\\"\\n     *             - poolReports(poolId, generation)\\n     *\\n     * @param _user User address\\n     *\\n     * @return exclusion Amount not able to claim because cover period has ended\\n     */\\n    function getExcludedCoverageOf(address _user)\\n        public\\n        view\\n        returns (uint256 exclusion)\\n    {\\n        IIncidentReport incident = IIncidentReport(incidentReport);\\n\\n        // Get the report amount for this pool\\n        // If report amount is 0, generation should be 1 and no excluded amount\\n        // If report amount > 0, the effective report should be amount - 1\\n        uint256 reportAmount = incident.getPoolReportsAmount(poolId);\\n\\n        if (reportAmount > 0 && generation <= reportAmount) {\\n            // Only count for the valid report\\n            // E.g. Current report amount is 3, then for generation 1 crToken,\\n            //      its corresponding report index (in the array) is 0\\n            uint256 validReportId = incident.poolReports(\\n                poolId,\\n                generation - 1\\n            );\\n\\n            (, , , uint256 voteTimestamp, , , , , uint256 result, , ) = incident\\n                .reports(validReportId);\\n\\n            // If the result is not PASS, the voteTimestamp should not be counted\\n            if (result == 1) {\\n                // Check those bought within 2 days\\n                for (uint256 i; i < EXCLUDE_DAYS; ) {\\n                    if (voteTimestamp > i * 1 days) {\\n                        // * For local test EXCLUDE_DAYS can be set as 0 to avoid underflow\\n                        // * For mainnet or testnet, will never underflow\\n                        uint256 date = _getEOD(voteTimestamp - (i * 1 days));\\n\\n                        exclusion += coverStartFrom[_user][date];\\n                    }\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the timestamp at the end of the day\\n     *\\n     * @param _timestamp Timestamp to be transformed\\n     *\\n     * @return endTimestamp End timestamp of that day\\n     */\\n    function _getEOD(uint256 _timestamp) private pure returns (uint256) {\\n        (uint256 year, uint256 month, uint256 day) = DateTimeLibrary\\n            .timestampToDate(_timestamp);\\n        return\\n            DateTimeLibrary.timestampFromDateTime(year, month, day, 23, 59, 59);\\n    }\\n\\n    /**\\n     * @notice Hooks before token transfer\\n     *         - Can burn expired crTokens (send to zero address)\\n     *         - Can be minted or used for claim\\n     *         Other transfers are banned\\n     *\\n     * @param from From address\\n     * @param to   To address\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal view override {\\n        if (block.timestamp > expiry) {\\n            require(to == address(0), \\\"Expired crToken\\\");\\n        }\\n\\n        // crTokens can only be used for claim\\n        if (from != address(0) && to != address(0)) {\\n            require(to == policyCenter, \\\"Only to policyCenter\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf260d888f5fa870450aafdbd2298ed8b02370f046ff9bc7dca5ae77565ddd622\",\"license\":\"GPL-3.0-or-later\"},\"src/crTokens/CoverRightTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./CoverRightToken.sol\\\";\\nimport \\\"../util/OwnableWithoutContextUpgradeable.sol\\\";\\n\\n/**\\n * @notice Factory for deploying crTokens\\n *\\n *         Salt as index for cover right tokens:\\n *             salt = keccak256(poolId, expiry, genration)\\n *\\n *         Factory will record whether a crToken has been deployed\\n *         Also record the generation of a specific crToken\\n *         And find the address of the crToken with its salt\\n *\\n */\\ncontract CoverRightTokenFactory is OwnableWithoutContextUpgradeable {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address public policyCenter;\\n\\n    address public incidentReport;\\n\\n    address public payoutPool;\\n\\n    // Salt => Already deployed\\n    mapping(bytes32 => bool) public deployed;\\n\\n    // Salt => CR token address\\n    mapping(bytes32 => address) public saltToAddress;\\n\\n    // Salt => Generation\\n    mapping(bytes32 => uint256) public generation;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event NewCRTokenDeployed(\\n        uint256 poolId,\\n        string tokenName,\\n        uint256 expiry,\\n        uint256 generation,\\n        address tokenAddress\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(address _policyCenter, address _incidentReport)\\n        public\\n        initializer\\n    {\\n        __Ownable_init();\\n\\n        policyCenter = _policyCenter;\\n        incidentReport = _incidentReport;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get crToken address\\n     *\\n     * @param _poolId     Pool id\\n     * @param _expiry     Expiry timestamp\\n     * @param _generation Generation of the crToken\\n     *\\n     * @return crToken CRToken address\\n     */\\n    function getCRTokenAddress(\\n        uint256 _poolId,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external view returns (address crToken) {\\n        crToken = saltToAddress[\\n            keccak256(abi.encodePacked(_poolId, _expiry, _generation))\\n        ];\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPayoutPool(address _payoutPool) external onlyOwner {\\n        require(_payoutPool != address(0), \\\"Zero Address\\\");\\n        payoutPool = _payoutPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy Cover Right Token for a given pool\\n     *\\n     * @param _poolName   Name of Priority Pool\\n     * @param _poolId     Pool Id\\n     * @param _tokenName  Name of insured token (e.g. DEG)\\n     * @param _expiry     Expiry date of cover right token\\n     * @param _generation Generation of priority pool & crToken (1 if no liquidations occurred)\\n     *\\n     * @return newCRToken New deployed crToken address\\n     */\\n    function deployCRToken(\\n        string calldata _poolName,\\n        uint256 _poolId,\\n        string calldata _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external returns (address newCRToken) {\\n        require(msg.sender == policyCenter, \\\"Only policy center\\\");\\n        require(_expiry > 0, \\\"Zero expiry date\\\");\\n\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_poolId, _expiry, _generation)\\n        );\\n\\n        require(!deployed[salt], \\\"Already deployed\\\");\\n        deployed[salt] = true;\\n\\n        bytes memory bytecode = _getCRTokenBytecode(\\n            _poolName,\\n            _poolId,\\n            _tokenName,\\n            _expiry,\\n            _generation\\n        );\\n\\n        newCRToken = _deploy(bytecode, salt);\\n        saltToAddress[salt] = newCRToken;\\n\\n        emit NewCRTokenDeployed(\\n            _poolId,\\n            _tokenName,\\n            _expiry,\\n            _generation,\\n            newCRToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Get cover right token deployment bytecode (with parameters)\\n     *\\n     * @param _poolName   Name of Priority Pool\\n     * @param _poolId     Pool Id\\n     * @param _tokenName  Name of insured token (e.g. DEG)\\n     * @param _expiry     Expiry date of cover right token\\n     * @param _generation Generation of priority pool (1 if no liquidations occurred)\\n     */\\n    function _getCRTokenBytecode(\\n        string memory _poolName,\\n        uint256 _poolId,\\n        string memory _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) internal view returns (bytes memory code) {\\n        bytes memory bytecode = type(CoverRightToken).creationCode;\\n\\n        require(policyCenter != address(0), \\\"Zero Address\\\");\\n        require(incidentReport != address(0), \\\"Zero Address\\\");\\n        require(payoutPool != address(0), \\\"Zero Address\\\");\\n\\n        code = abi.encodePacked(\\n            bytecode,\\n            abi.encode(\\n                _tokenName,\\n                _poolId,\\n                _poolName,\\n                _expiry,\\n                _generation,\\n                policyCenter,\\n                incidentReport,\\n                payoutPool\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Deploy function with create2\\n     *\\n     * @param code Byte code of the contract (creation code)\\n     * @param salt Salt for the deployment\\n     *\\n     * @return addr The deployed contract address\\n     */\\n    function _deploy(bytes memory code, bytes32 salt)\\n        internal\\n        returns (address addr)\\n    {\\n        assembly {\\n            addr := create2(0, add(code, 0x20), mload(code), salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa4c4745575b90c964966ccf118cb05525093ef97df4742d9e0590e5fb366cea7\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IIncidentReport.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IIncidentReport {\\n    struct Report {\\n        uint256 poolId; // Project pool id\\n        uint256 reportTimestamp; // Time of starting report\\n        address reporter; // Reporter address\\n        uint256 voteTimestamp; // Voting start timestamp\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 round; // 0: Initial round 3 days, 1: Extended round 1 day, 2: Double extended 1 day\\n        uint256 status; // 0: INIT, 1: PENDING, 2: VOTING, 3: SETTLED, 404: CLOSED\\n        uint256 result; // 1: Pass, 2: Reject, 3: Tied\\n        uint256 votingReward; // Voting reward per veDEG\\n        uint256 payout; // Payout amount of this report (partial payout)\\n    }\\n\\n    struct TempResult {\\n        uint256 a;\\n        uint256 b;\\n        bool c;\\n    }\\n    struct UserVote {\\n        uint256 choice;\\n        uint256 amount;\\n        bool claimed;\\n    }\\n\\n    /**\\n     * @notice Cool down period when you submit a wrong report\\n     *         Wrong Report: Closed by the Admin team\\n     *\\n     * @return COOLDOWN_WRONG_REPORT Cooldown time in second (before you can submit another report)\\n     */\\n    function COOLDOWN_WRONG_REPORT() external view returns (uint256);\\n\\n    /**\\n     * @notice Claim reward\\n     *         Users can claim reward when they vote correctly\\n     *\\n     * @param _reportId Report id\\n     */\\n    function claimReward(uint256 _reportId) external;\\n\\n    /**\\n     * @notice Close a report\\n     *         Only callable by the owner\\n     *\\n     * @param _reportId Report id\\n     */\\n    function closeReport(uint256 _reportId) external;\\n\\n    function deg() external view returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getReport(uint256 _id) external view returns (Report memory);\\n\\n    function getTempResult(uint256 _id)\\n        external\\n        view\\n        returns (TempResult memory);\\n\\n    function getUserVote(address _user, uint256 _id)\\n        external\\n        view\\n        returns (UserVote memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function payDebt(uint256 _reportId, address _user) external;\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolReported(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function report(\\n        uint256 _poolId,\\n        uint256 _payout,\\n        address _user\\n    ) external;\\n\\n    function reportCounter() external view returns (uint256);\\n\\n    function reportTempResults(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 result,\\n            uint256 sampleTimestamp,\\n            bool hasChanged\\n        );\\n\\n    function reports(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 poolId,\\n            uint256 reportTimestamp,\\n            address reporter,\\n            uint256 voteTimestamp,\\n            uint256 numFor,\\n            uint256 numAgainst,\\n            uint256 round,\\n            uint256 status,\\n            uint256 result,\\n            uint256 votingReward,\\n            uint256 payout\\n        );\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function settle(uint256 _reportId) external;\\n\\n    function startVoting(uint256 _reportId) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function unpausePools(uint256 _poolId) external;\\n\\n    function userCoolDownUntil(address) external view returns (uint256);\\n\\n    function votes(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint256 choice,\\n            uint256 amount,\\n            bool claimed\\n        );\\n\\n    function veDeg() external view returns (address);\\n\\n    function vote(\\n        uint256 _reportId,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function poolReports(uint256 _poolId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolReportsAmount(uint256 _poolId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function executed(uint256 _reportId) external;\\n}\\n\",\"keccak256\":\"0x7ce106d5baa9dd8ae325348228255d9333a67c0cf923d4cf8fef707ebc861522\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _owner = _initOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x78b93f32b25ad2184a4fbc44160870a5a81f567186c99923ecbc54329c57f88b\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OwnableWithoutContextUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb7c1bac54d6b38b0ff582113689643e43bdbc9eaf4dcd906373c3f44f7b2eab5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612ea1908161001c8239f35b600080fdfe6080604052600436101562000014575b600080fd5b60003560e01c80630f89b77d146200013d5780631158c64c14620001325780631620909514620001275780633f07b282146200011c5780633f81ff261462000111578063485cc95514620001065780636273106a14620000fb5780636a6cc25814620000f05780636c1020a114620000e5578063715018a614620000da5780638da5cb5b14620000cf578063e8adbf2f14620000c45763f2fde38b14620000ba57600080fd5b6200000f62000716565b506200000f620006ea565b506200000f620006ba565b506200000f6200064b565b506200000f6200046f565b506200000f6200040f565b506200000f620003e3565b506200000f620002da565b506200000f6200027c565b506200000f620001d8565b506200000f620001a6565b506200000f6200017c565b50346200000f5760003660031901126200000f576033546040516001600160a01b039091168152602090f35b60209060031901126200000f5760043590565b50346200000f576200018e3662000169565b60005260376020526020604060002054604051908152f35b50346200000f57620001b83662000169565b6000526036602052602060018060a01b0360406000205416604051908152f35b50346200000f5760603660031901126200000f5760405160208101906200022b816200021c6044356024356004358791606093918352602083015260408201520190565b03601f19810183528262000889565b5190206000526036602052602060018060a01b0360406000205416604051908152f35b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b50346200000f5760203660031901126200000f576200029a6200024e565b60018060a01b0390620002b68260005460101c163314620008bb565b16620002c4811515620008f5565b603480546001600160a01b031916919091179055005b50346200000f5760403660031901126200000f57620002f86200024e565b6200034e6200030662000265565b600054926200032f60ff8560081c161580958196620003d4575b8115620003b1575b50620007b6565b8362000343600160ff196000541617600055565b62000396576200081a565b62000356575b005b6200036761ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b620003ab61010061ff00196000541617600055565b6200081a565b303b15915081620003c5575b503862000328565b6001915060ff161438620003bd565b600160ff821610915062000320565b50346200000f5760003660031901126200000f576034546040516001600160a01b039091168152602090f35b50346200000f57620004213662000169565b6000526035602052602060ff604060002054166040519015158152f35b9181601f840112156200000f5782359167ffffffffffffffff83116200000f57602083818601950101116200000f57565b50346200000f5760a03660031901126200000f5767ffffffffffffffff6004358181116200000f57620004a79036906004016200043e565b9190602435926044359283116200000f5762000647936200062a7f30aea988271444d9893c99d63b763479d038c4b2756b3ede0182f293d5beda9193620004f7620005fe9636906004016200043e565b60325491956084359260643592916200061d91620005ea919062000526906001600160a01b0316331462000931565b6200053385151562000973565b620005e486868c8c620005dd620005d360405160208101906200056d816200021c8a8a898791606093918352602083015260408201520190565b5190209d8e98620005a56200059f6200059b620005948d6000526035602052604060002090565b5460ff1690565b1590565b620009b3565b620005cb620005be8b6000526035602052604060002090565b805460ff19166001179055565b369162000a05565b928a369162000a05565b9162000b85565b62000c5d565b809a81966000526036602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519687968762000a61565b0390a16040516001600160a01b0390911681529081906020820190565b0390f35b50346200000f57600080600319360112620006b7578054601081901c6001600160a01b0316906200067e338314620008bb565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b0319168255f35b80fd5b50346200000f5760003660031901126200000f5760005460405160109190911c6001600160a01b03168152602090f35b50346200000f5760003660031901126200000f576032546040516001600160a01b039091168152602090f35b50346200000f5760203660031901126200000f57620007346200024e565b60018060a01b036200074f8160005460101c163314620008bb565b8116156200076257620003549062000cd2565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15620007be57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b906200083960ff60005460081c16620008338162000c71565b62000c71565b620008443362000cd2565b603280546001600160a01b039384166001600160a01b03199182161790915560338054929093169116179055565b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117620008ac57604052565b620008b662000872565b604052565b15620008c357565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b15620008fd57565b60405162461bcd60e51b815260206004820152600c60248201526b5a65726f204164647265737360a01b6044820152606490fd5b156200093957565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903837b634b1bc9031b2b73a32b960711b6044820152606490fd5b156200097b57565b60405162461bcd60e51b815260206004820152601060248201526f5a65726f20657870697279206461746560801b6044820152606490fd5b15620009bb57565b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e4819195c1b1bde595960821b6044820152606490fd5b9062000a03604051928362000889565b565b92919267ffffffffffffffff821162000a51575b6040519162000a33601f8201601f19166020018462000889565b8294818452818301116200000f578281602093846000960137010152565b62000a5b62000872565b62000a19565b9491928060809598979460c093885260a060208901528160a0890152838801376000828288010152601f8019910116850101956040850152606084015260018060a01b0316910152565b918091926000905b82821062000acd57501162000ac6575050565b6000910152565b9150806020918301518186015201829162000ab3565b9060209162000afe8151809281855285808601910162000aab565b601f01601f1916010190565b96949160e0969362000b2d62000b41939b9a969b610100808c528b019062000ae3565b9160208a015288820360408a015262000ae3565b606087019890985260808601526001600160a01b0390811660a086015291821660c085015216910152565b9062000b816020928281519485920162000aab565b0190565b62000c4694919262000c1f62000c5a9562000c4d936121399562000bac60208801620009f3565b9680885262000d3360208901396032546001600160a01b0393908416919062000bd7831515620008f5565b6033546001600160a01b03169362000bf38686161515620008f5565b60345462000c0f906001600160a01b03169687161515620008f5565b6040519a8b9860208a0162000b0a565b039262000c35601f199485810183528262000889565b604051958693602085019062000b6c565b9062000b6c565b0390810183528262000889565b90565b6020815191016000f590813b156200000f57565b1562000c7957565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fe604060e0815234620005645762002139803803806200001e8162000569565b92833981019061010081830312620005645780516001600160401b0390818111620005645783620000519184016200058f565b90602093848401519086850151908382116200056457620000749186016200058f565b6060850151926080860151936200008e60a0880162000612565b97620000ab60e0620000a360c08b0162000612565b990162000612565b968a51918b83018381108682111762000464578c52600783526631b92a37b5b2b760c91b8184015285519285841162000464576003948554946001988987811c9716801562000559575b8588101462000543578190601f97888111620004ed575b50859088831160011462000486576000926200047a575b505060001982891b1c191690891b1786555b8151878111620004645760049283548a81811c9116801562000459575b868210146200044457908188849311620003ee575b50859088831160011462000387576000926200037b575b505060001982891b1c191690891b1782555b8760055560a05282519586116200036657600954908782811c921680156200035b575b83831014620003465750838111620002fa575b50809285116001146200028a57509383949184926000956200027e575b50501b92600019911b1c1916176009555b60c05260805260018060a01b0380928160018060a01b03199516856006541617600655168360075416176007551690600854161760085551611b119081620006288239608051818181610aa3015281816111eb015261137e015260a0518181816102570152818161072c0152610cef015260c0518181816104380152818161091301526111760152f35b015193503880620001e3565b92919084601f198116600960005285600020956000905b89838310620002df5750505010620002c4575b50505050811b01600955620001f4565b01519060f884600019921b161c1916905538808080620002b4565b858701518955909701969485019488935090810190620002a1565b6009600052816000208480880160051c8201928489106200033c575b0160051c019087905b8281106200032f575050620001c6565b600081550187906200031f565b9250819262000316565b602290634e487b7160e01b6000525260246000fd5b91607f1691620001b3565b604190634e487b7160e01b6000525260246000fd5b0151905038806200017e565b908b9350601f1983169186600052876000209260005b89828210620003d75750508411620003be575b505050811b01825562000190565b0151600019838b1b60f8161c19169055388080620003b0565b8385015186558f979095019493840193016200039d565b90915084600052856000208880850160051c8201928886106200043a575b918d91869594930160051c01915b8281106200042a57505062000167565b600081558594508d91016200041a565b925081926200040c565b602285634e487b7160e01b6000525260246000fd5b90607f169062000152565b634e487b7160e01b600052604160045260246000fd5b01519050388062000123565b908b9350601f198316918a600052876000209260005b89828210620004d65750508411620004bd575b505050811b01865562000135565b0151600019838b1b60f8161c19169055388080620004af565b8385015186558f979095019493840193016200049c565b90915088600052856000208880850160051c82019288861062000539575b918d91869594930160051c01915b828110620005295750506200010c565b600081558594508d910162000519565b925081926200050b565b634e487b7160e01b600052602260045260246000fd5b96607f1696620000f5565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200046457604052565b81601f8201121562000564578051906001600160401b0382116200046457602090620005c4601f8401601f1916830162000569565b93838552828483010111620005645782906000905b83838310620005f957505011620005ef57505090565b6000918301015290565b81935082819392010151828288010152018391620005d9565b51906001600160a01b0382168203620005645756fe608060408181526004908136101561001657600080fd5b600092833560e01c90816306fdde0314610b1957508063095ea7b314610aef5780630f89b77d14610ac65780631721952214610a8b57806318160ddd14610a6c57806323b872dd146109a2578063313ce5671461098657806339509351146109365780633e0dc34e146108fb5780636273106a146108d257806370a082311461089b5780638253b8261461085a57806382b2ed1314610834578063836a1040146106aa57806395d89b41146105d15780639eea5f66146103e4578063a457c2d71461033d578063a9059cbb1461030c578063b39d2bab146102f0578063d89232da146102c3578063dd62ed3e1461027a578063e184c9be1461023f578063e8adbf2f146102125763f3466dfa1461012c57600080fd5b3461020e578260031936011261020e57805191836009549060019082821c928281168015610204575b60209586861082146101f157508488529081156101cf5750600114610194575b6101908686610186828b0383610c6c565b5191829182610bba565b0390f35b929550600983528583205b8284106101bc575050508261019094610186928201019438610175565b805486850188015292860192810161019f565b60ff191687860152505050151560051b83010192506101868261019038610175565b634e487b7160e01b845260229052602483fd5b93607f1693610155565b8280fd5b83823461023b578160031936011261023b5760065490516001600160a01b039091168152602090f35b5080fd5b83823461023b578160031936011261023b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461023b578060031936011261023b5780602092610298610c11565b6102a0610c2c565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b83823461023b57602036600319011261023b576020906102e96102e4610c11565b611163565b9051908152f35b83823461023b578160031936011261023b576020905160028152f35b83823461023b578060031936011261023b5760209061033661032c610c11565b6024359033610cc6565b5160018152f35b5091346103e157826003193601126103e157610357610c11565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610390576020856103368585038733610f01565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50903461020e576103f436610c42565b6006546001600160a01b039081168015159592949293919261045d91876105ac575b506104266002600554141561103f565b600260055561043686151561108b565b7f0000000000000000000000000000000000000000000000000000000000000000146110c5565b1692831580159061055f5780610558575b610514575b508285528460205283852054908282106104c657506020828493600080516020611abc833981519152938896875286845203868620556104b581600254611101565b6002558551908152a3600160055551f35b608490602086519162461bcd60e51b8352820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b61051e5738610473565b606490602085519162461bcd60e51b8352820152601460248201527327b7363c903a37903837b634b1bca1b2b73a32b960611b6044820152fd5b508561046e565b855162461bcd60e51b8152602081850152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b331480156105c4575b6105be90611003565b38610416565b50600854841633146105b5565b5082903461023b578160031936011261023b57805191809380549160019083821c928285169485156106a0575b602095868610811461068d57858952908115610669575060011461062e575b6101908787610186828c0383610c6c565b9080949750528583205b8284106106565750505082610190946101869282010194868061061d565b8054868501880152928601928101610638565b60ff19168887015250505050151560051b830101925061018682610190868061061d565b634e487b7160e01b845260228352602484fd5b93607f16936105fe565b50903461020e576106ba36610c42565b600654919290916001600160a01b03916106f69183168061080f575b506106e66002600554141561103f565b600260055561043684151561108b565b6106ff426113d2565b921692838652602092600a84528587209087528352848620610722838254610ca4565b905583156107cc577f000000000000000000000000000000000000000000000000000000000000000042116107975750849181610770600080516020611abc83398151915293600254610ca4565b600255848452838252858420610787828254610ca4565b90558551908152a3600160055551f35b845162461bcd60e51b8152908101839052600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b845162461bcd60e51b8152908101839052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b33148015610827575b61082190611003565b386106d6565b5060085483163314610818565b83823461023b57602036600319011261023b576020906102e9610855610c11565b61110c565b83823461023b578060031936011261023b5760209181906001600160a01b03610881610c11565b168152600a84528181206024358252845220549051908152f35b83823461023b57602036600319011261023b5760209181906001600160a01b036108c3610c11565b16815280845220549051908152f35b83823461023b578160031936011261023b5760085490516001600160a01b039091168152602090f35b83823461023b578160031936011261023b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461023b578060031936011261023b5761033660209261097f610959610c11565b338352600186528483206001600160a01b03821684528652918490205460243590610ca4565b9033610f01565b83823461023b578160031936011261023b576020905160068152f35b5091903461023b57606036600319011261023b576109be610c11565b6109c6610c2c565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610a00575b602086610336878787610cc6565b848210610a295750918391610a1e6020969561033695033383610f01565b9193948193506109f2565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b83823461023b578160031936011261023b576020906002549051908152f35b83823461023b578160031936011261023b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461023b578160031936011261023b5760075490516001600160a01b039091168152602090f35b83823461023b578060031936011261023b57602090610336610b0f610c11565b6024359033610f01565b92905034610bb65783600319360112610bb657600354600181811c9186908281168015610bac575b60209586861082146101f157508488529081156101cf5750600114610b71576101908686610186828b0383610c6c565b929550600383528583205b828410610b99575050508261019094610186928201019438610175565b8054868501880152928601928101610b7c565b93607f1693610b41565b8380fd5b919091602080825283519081818401526000945b828610610bfb575050806040939411610bee575b601f01601f1916010190565b6000838284010152610be2565b8581018201518487016040015294810194610bce565b600435906001600160a01b0382168203610c2757565b600080fd5b602435906001600160a01b0382168203610c2757565b6060906003190112610c2757600435906024356001600160a01b0381168103610c27579060443590565b90601f8019910116810190811067ffffffffffffffff821117610c8e57604052565b634e487b7160e01b600052604160045260246000fd5b81198111610cb0570190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081168015801594919391929190610eae578116938415801590610e5d57807f00000000000000000000000000000000000000000000000000000000000000004211610e1c575b5081610e14575b50610dc8575b50600082815280602052604081205491808310610d745760408282600080516020611abc833981519152958760209652828652038282205586815220610d69828254610ca4565b9055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b600654168303610dd85738610d22565b60405162461bcd60e51b815260206004820152601460248201527327b7363c903a37903837b634b1bca1b2b73a32b960611b6044820152606490fd5b905038610d1c565b610e265780610d15565b60405162461bcd60e51b815260206004820152600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610fb25716918215610f625760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561100a57565b60405162461bcd60e51b815260206004820152600d60248201526c139bdd081c195c9b5a5d1d1959609a1b6044820152606490fd5b1561104657565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b1561109257565b60405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8105b5bdd5b9d60aa1b6044820152606490fd5b156110cc57565b60405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c81c1bdbdb081a59609a1b6044820152606490fd5b818110610cb0570390565b61111581611163565b6001600160a01b03909116600090815260208190526040902054908181111561113f575050600090565b61114891611101565b90565b62015180908060001904821181151516610cb0570290565b60075460408051637aaf11c760e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482018190526000959490936001600160a01b039390841692909187916020908181602481895afa90811561132f5784916113a5575b50801515908161137a575b506111e6575b50505050505050565b6001967f0000000000000000000000000000000000000000000000000000000000000000888110611366578551632509d07760e11b815260048101929092526000190160248201528181604481895afa90811561132f578491611339575b50845195869163c942adf760e01b835260048301528160246101609889935afa90811561132f57908891859786926112e8575b5050036111dd57825b6002811061128e57506111dd565b6112978161114b565b86116112a5575b8701611280565b986112e088916112c56112c06112ba8e61114b565b8a611101565b6113d2565b8986168752600a855287872090875284528686205490610ca4565b99905061129e565b925096505085813d8311611328575b6113018183610c6c565b8101031261020e57838501518681160361020e578661010060608701519601513880611277565b503d6112f7565b85513d86823e3d90fd5b90508181813d831161135f575b6113508183610c6c565b81010312610bb6575138611244565b503d611346565b634e487b7160e01b85526011600452602485fd5b90507f00000000000000000000000000000000000000000000000000000000000000001115386111d7565b90508181813d83116113cb575b6113bc8183610c6c565b81010312610bb65751386111cc565b503d6113b2565b62010bd9906000906001600160ff1b039062015180900482811281830381158187131661136657600160ff1b9583870392838212166119d75785908401129162010bd819908162253d8c930183138415166119c3570113166119af576226496501600191600494838383048711868513161661199c57848312600760fd1b841216841661199c5762023ab192838160021b0593858585048211888713161661197657857fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2861288871216166119765784028681128185036003138115166118ff578184036003121661197657908760036114ce93010590611a03565b9085821282840386138115166119765782820386121661198957848201610fa086828604821189841316166118ff57867ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c831289841216166118ff576115479162164b09910205928861154085611a57565b0590611a03565b868112818503601f138115166118ff57818303601f121661197657601f019185838504605011888513161661197657857ffe66666666666666666666666666666666666666666666666666666666666667841288851216166119765761098f94858460500205938785870488118a8713161661194c5788851296887ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268871289161661191257906050866115fc93020590611a03565b95600b850590858703600213811516611912578585036002121661194c57600c928882880485118b84131616611912577ff55555555555555555555555555555555555555555555555555555555555555695898784128c851216166119635761166b9060028487029101611a03565b926031600160ff1b0181128a1661196357603019018a8113818904606411168a1661196357897ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb982128c83121616611963576116d392916116ce91606402611a2c565b611a2c565b936107b2851061195f57617d4b600160ff1b018712881661194c5784860393898612918215986112c0928784138b166119255788900392838112851661192557908d611737611732611743948a6117298b6119eb565b05908d01611a2c565b611a57565b0590617d4a1901611a2c565b906002600160ff1b0185128b16611939578561175e866119eb565b05908c82137f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8311168c16611925578b9082128d83121616611939576117aa9086026001198601611a03565b61016f8c8213828b048211168c16611925578c82127fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318312168c16611925576117f892918791020590611a2c565b9761132495861316611912578412166118ff57926064926118259261181d89966119eb565b059101611a2c565b0580920460031185831316166118ec57827fd555555555555555555555555555555555555555555555555555555555555556821285831216166118ec579084611872926003020590611a03565b9062253d8c600160ff1b018212166118d9576118939062253d8b190161114b565b91620143701983116118c657610dd419620143708401116118c657603b19620151448401116118c65750506201517f0190565b634e487b7160e01b825260119052602490fd5b506011602492634e487b7160e01b835252fd5b634e487b7160e01b845260118552602484fd5b634e487b7160e01b885260118952602488fd5b634e487b7160e01b8a5260118b5260248afd5b50634e487b7160e01b8c5260118d5260248cfd5b634e487b7160e01b8c5260118d5260248cfd5b634e487b7160e01b895260118a52602489fd5b8880fd5b634e487b7160e01b8b5260118c5260248bfd5b634e487b7160e01b875260118852602487fd5b634e487b7160e01b865260118752602486fd5b634e487b7160e01b855260118652602485fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b600e600160ff1b018112600116610cb057600d190190565b600082128015600160ff1b8401831216610cb0576001600160ff1b038301821316610cb0570390565b6000811280156001600160ff1b03839003841316610cb057600160ff1b829003831216610cb0570190565b6105b560008083136001600160ff1b03849004831116600116611aa75760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa884128285121616611aa757500290565b634e487b7160e01b81526011600452602490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220d0d5672f525dc83a5d449266cbc0a66bf10065462f2b3fe6100e768f2a06c00b64736f6c634300080f0033a2646970667358221220fc8ab302b567feb977d9aac01adb17e63835ce5b039156b522d6fa2c87a634aa64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b60003560e01c80630f89b77d146200013d5780631158c64c14620001325780631620909514620001275780633f07b282146200011c5780633f81ff261462000111578063485cc95514620001065780636273106a14620000fb5780636a6cc25814620000f05780636c1020a114620000e5578063715018a614620000da5780638da5cb5b14620000cf578063e8adbf2f14620000c45763f2fde38b14620000ba57600080fd5b6200000f62000716565b506200000f620006ea565b506200000f620006ba565b506200000f6200064b565b506200000f6200046f565b506200000f6200040f565b506200000f620003e3565b506200000f620002da565b506200000f6200027c565b506200000f620001d8565b506200000f620001a6565b506200000f6200017c565b50346200000f5760003660031901126200000f576033546040516001600160a01b039091168152602090f35b60209060031901126200000f5760043590565b50346200000f576200018e3662000169565b60005260376020526020604060002054604051908152f35b50346200000f57620001b83662000169565b6000526036602052602060018060a01b0360406000205416604051908152f35b50346200000f5760603660031901126200000f5760405160208101906200022b816200021c6044356024356004358791606093918352602083015260408201520190565b03601f19810183528262000889565b5190206000526036602052602060018060a01b0360406000205416604051908152f35b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b50346200000f5760203660031901126200000f576200029a6200024e565b60018060a01b0390620002b68260005460101c163314620008bb565b16620002c4811515620008f5565b603480546001600160a01b031916919091179055005b50346200000f5760403660031901126200000f57620002f86200024e565b6200034e6200030662000265565b600054926200032f60ff8560081c161580958196620003d4575b8115620003b1575b50620007b6565b8362000343600160ff196000541617600055565b62000396576200081a565b62000356575b005b6200036761ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b620003ab61010061ff00196000541617600055565b6200081a565b303b15915081620003c5575b503862000328565b6001915060ff161438620003bd565b600160ff821610915062000320565b50346200000f5760003660031901126200000f576034546040516001600160a01b039091168152602090f35b50346200000f57620004213662000169565b6000526035602052602060ff604060002054166040519015158152f35b9181601f840112156200000f5782359167ffffffffffffffff83116200000f57602083818601950101116200000f57565b50346200000f5760a03660031901126200000f5767ffffffffffffffff6004358181116200000f57620004a79036906004016200043e565b9190602435926044359283116200000f5762000647936200062a7f30aea988271444d9893c99d63b763479d038c4b2756b3ede0182f293d5beda9193620004f7620005fe9636906004016200043e565b60325491956084359260643592916200061d91620005ea919062000526906001600160a01b0316331462000931565b6200053385151562000973565b620005e486868c8c620005dd620005d360405160208101906200056d816200021c8a8a898791606093918352602083015260408201520190565b5190209d8e98620005a56200059f6200059b620005948d6000526035602052604060002090565b5460ff1690565b1590565b620009b3565b620005cb620005be8b6000526035602052604060002090565b805460ff19166001179055565b369162000a05565b928a369162000a05565b9162000b85565b62000c5d565b809a81966000526036602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040519687968762000a61565b0390a16040516001600160a01b0390911681529081906020820190565b0390f35b50346200000f57600080600319360112620006b7578054601081901c6001600160a01b0316906200067e338314620008bb565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b0319168255f35b80fd5b50346200000f5760003660031901126200000f5760005460405160109190911c6001600160a01b03168152602090f35b50346200000f5760003660031901126200000f576032546040516001600160a01b039091168152602090f35b50346200000f5760203660031901126200000f57620007346200024e565b60018060a01b036200074f8160005460101c163314620008bb565b8116156200076257620003549062000cd2565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15620007be57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b906200083960ff60005460081c16620008338162000c71565b62000c71565b620008443362000cd2565b603280546001600160a01b039384166001600160a01b03199182161790915560338054929093169116179055565b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117620008ac57604052565b620008b662000872565b604052565b15620008c357565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b15620008fd57565b60405162461bcd60e51b815260206004820152600c60248201526b5a65726f204164647265737360a01b6044820152606490fd5b156200093957565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903837b634b1bc9031b2b73a32b960711b6044820152606490fd5b156200097b57565b60405162461bcd60e51b815260206004820152601060248201526f5a65726f20657870697279206461746560801b6044820152606490fd5b15620009bb57565b60405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e4819195c1b1bde595960821b6044820152606490fd5b9062000a03604051928362000889565b565b92919267ffffffffffffffff821162000a51575b6040519162000a33601f8201601f19166020018462000889565b8294818452818301116200000f578281602093846000960137010152565b62000a5b62000872565b62000a19565b9491928060809598979460c093885260a060208901528160a0890152838801376000828288010152601f8019910116850101956040850152606084015260018060a01b0316910152565b918091926000905b82821062000acd57501162000ac6575050565b6000910152565b9150806020918301518186015201829162000ab3565b9060209162000afe8151809281855285808601910162000aab565b601f01601f1916010190565b96949160e0969362000b2d62000b41939b9a969b610100808c528b019062000ae3565b9160208a015288820360408a015262000ae3565b606087019890985260808601526001600160a01b0390811660a086015291821660c085015216910152565b9062000b816020928281519485920162000aab565b0190565b62000c4694919262000c1f62000c5a9562000c4d936121399562000bac60208801620009f3565b9680885262000d3360208901396032546001600160a01b0393908416919062000bd7831515620008f5565b6033546001600160a01b03169362000bf38686161515620008f5565b60345462000c0f906001600160a01b03169687161515620008f5565b6040519a8b9860208a0162000b0a565b039262000c35601f199485810183528262000889565b604051958693602085019062000b6c565b9062000b6c565b0390810183528262000889565b90565b6020815191016000f590813b156200000f57565b1562000c7957565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fe604060e0815234620005645762002139803803806200001e8162000569565b92833981019061010081830312620005645780516001600160401b0390818111620005645783620000519184016200058f565b90602093848401519086850151908382116200056457620000749186016200058f565b6060850151926080860151936200008e60a0880162000612565b97620000ab60e0620000a360c08b0162000612565b990162000612565b968a51918b83018381108682111762000464578c52600783526631b92a37b5b2b760c91b8184015285519285841162000464576003948554946001988987811c9716801562000559575b8588101462000543578190601f97888111620004ed575b50859088831160011462000486576000926200047a575b505060001982891b1c191690891b1786555b8151878111620004645760049283548a81811c9116801562000459575b868210146200044457908188849311620003ee575b50859088831160011462000387576000926200037b575b505060001982891b1c191690891b1782555b8760055560a05282519586116200036657600954908782811c921680156200035b575b83831014620003465750838111620002fa575b50809285116001146200028a57509383949184926000956200027e575b50501b92600019911b1c1916176009555b60c05260805260018060a01b0380928160018060a01b03199516856006541617600655168360075416176007551690600854161760085551611b119081620006288239608051818181610aa3015281816111eb015261137e015260a0518181816102570152818161072c0152610cef015260c0518181816104380152818161091301526111760152f35b015193503880620001e3565b92919084601f198116600960005285600020956000905b89838310620002df5750505010620002c4575b50505050811b01600955620001f4565b01519060f884600019921b161c1916905538808080620002b4565b858701518955909701969485019488935090810190620002a1565b6009600052816000208480880160051c8201928489106200033c575b0160051c019087905b8281106200032f575050620001c6565b600081550187906200031f565b9250819262000316565b602290634e487b7160e01b6000525260246000fd5b91607f1691620001b3565b604190634e487b7160e01b6000525260246000fd5b0151905038806200017e565b908b9350601f1983169186600052876000209260005b89828210620003d75750508411620003be575b505050811b01825562000190565b0151600019838b1b60f8161c19169055388080620003b0565b8385015186558f979095019493840193016200039d565b90915084600052856000208880850160051c8201928886106200043a575b918d91869594930160051c01915b8281106200042a57505062000167565b600081558594508d91016200041a565b925081926200040c565b602285634e487b7160e01b6000525260246000fd5b90607f169062000152565b634e487b7160e01b600052604160045260246000fd5b01519050388062000123565b908b9350601f198316918a600052876000209260005b89828210620004d65750508411620004bd575b505050811b01865562000135565b0151600019838b1b60f8161c19169055388080620004af565b8385015186558f979095019493840193016200049c565b90915088600052856000208880850160051c82019288861062000539575b918d91869594930160051c01915b828110620005295750506200010c565b600081558594508d910162000519565b925081926200050b565b634e487b7160e01b600052602260045260246000fd5b96607f1696620000f5565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200046457604052565b81601f8201121562000564578051906001600160401b0382116200046457602090620005c4601f8401601f1916830162000569565b93838552828483010111620005645782906000905b83838310620005f957505011620005ef57505090565b6000918301015290565b81935082819392010151828288010152018391620005d9565b51906001600160a01b0382168203620005645756fe608060408181526004908136101561001657600080fd5b600092833560e01c90816306fdde0314610b1957508063095ea7b314610aef5780630f89b77d14610ac65780631721952214610a8b57806318160ddd14610a6c57806323b872dd146109a2578063313ce5671461098657806339509351146109365780633e0dc34e146108fb5780636273106a146108d257806370a082311461089b5780638253b8261461085a57806382b2ed1314610834578063836a1040146106aa57806395d89b41146105d15780639eea5f66146103e4578063a457c2d71461033d578063a9059cbb1461030c578063b39d2bab146102f0578063d89232da146102c3578063dd62ed3e1461027a578063e184c9be1461023f578063e8adbf2f146102125763f3466dfa1461012c57600080fd5b3461020e578260031936011261020e57805191836009549060019082821c928281168015610204575b60209586861082146101f157508488529081156101cf5750600114610194575b6101908686610186828b0383610c6c565b5191829182610bba565b0390f35b929550600983528583205b8284106101bc575050508261019094610186928201019438610175565b805486850188015292860192810161019f565b60ff191687860152505050151560051b83010192506101868261019038610175565b634e487b7160e01b845260229052602483fd5b93607f1693610155565b8280fd5b83823461023b578160031936011261023b5760065490516001600160a01b039091168152602090f35b5080fd5b83823461023b578160031936011261023b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461023b578060031936011261023b5780602092610298610c11565b6102a0610c2c565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b83823461023b57602036600319011261023b576020906102e96102e4610c11565b611163565b9051908152f35b83823461023b578160031936011261023b576020905160028152f35b83823461023b578060031936011261023b5760209061033661032c610c11565b6024359033610cc6565b5160018152f35b5091346103e157826003193601126103e157610357610c11565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610390576020856103368585038733610f01565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50903461020e576103f436610c42565b6006546001600160a01b039081168015159592949293919261045d91876105ac575b506104266002600554141561103f565b600260055561043686151561108b565b7f0000000000000000000000000000000000000000000000000000000000000000146110c5565b1692831580159061055f5780610558575b610514575b508285528460205283852054908282106104c657506020828493600080516020611abc833981519152938896875286845203868620556104b581600254611101565b6002558551908152a3600160055551f35b608490602086519162461bcd60e51b8352820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b61051e5738610473565b606490602085519162461bcd60e51b8352820152601460248201527327b7363c903a37903837b634b1bca1b2b73a32b960611b6044820152fd5b508561046e565b855162461bcd60e51b8152602081850152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b331480156105c4575b6105be90611003565b38610416565b50600854841633146105b5565b5082903461023b578160031936011261023b57805191809380549160019083821c928285169485156106a0575b602095868610811461068d57858952908115610669575060011461062e575b6101908787610186828c0383610c6c565b9080949750528583205b8284106106565750505082610190946101869282010194868061061d565b8054868501880152928601928101610638565b60ff19168887015250505050151560051b830101925061018682610190868061061d565b634e487b7160e01b845260228352602484fd5b93607f16936105fe565b50903461020e576106ba36610c42565b600654919290916001600160a01b03916106f69183168061080f575b506106e66002600554141561103f565b600260055561043684151561108b565b6106ff426113d2565b921692838652602092600a84528587209087528352848620610722838254610ca4565b905583156107cc577f000000000000000000000000000000000000000000000000000000000000000042116107975750849181610770600080516020611abc83398151915293600254610ca4565b600255848452838252858420610787828254610ca4565b90558551908152a3600160055551f35b845162461bcd60e51b8152908101839052600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b845162461bcd60e51b8152908101839052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b33148015610827575b61082190611003565b386106d6565b5060085483163314610818565b83823461023b57602036600319011261023b576020906102e9610855610c11565b61110c565b83823461023b578060031936011261023b5760209181906001600160a01b03610881610c11565b168152600a84528181206024358252845220549051908152f35b83823461023b57602036600319011261023b5760209181906001600160a01b036108c3610c11565b16815280845220549051908152f35b83823461023b578160031936011261023b5760085490516001600160a01b039091168152602090f35b83823461023b578160031936011261023b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461023b578060031936011261023b5761033660209261097f610959610c11565b338352600186528483206001600160a01b03821684528652918490205460243590610ca4565b9033610f01565b83823461023b578160031936011261023b576020905160068152f35b5091903461023b57606036600319011261023b576109be610c11565b6109c6610c2c565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610a00575b602086610336878787610cc6565b848210610a295750918391610a1e6020969561033695033383610f01565b9193948193506109f2565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b83823461023b578160031936011261023b576020906002549051908152f35b83823461023b578160031936011261023b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b83823461023b578160031936011261023b5760075490516001600160a01b039091168152602090f35b83823461023b578060031936011261023b57602090610336610b0f610c11565b6024359033610f01565b92905034610bb65783600319360112610bb657600354600181811c9186908281168015610bac575b60209586861082146101f157508488529081156101cf5750600114610b71576101908686610186828b0383610c6c565b929550600383528583205b828410610b99575050508261019094610186928201019438610175565b8054868501880152928601928101610b7c565b93607f1693610b41565b8380fd5b919091602080825283519081818401526000945b828610610bfb575050806040939411610bee575b601f01601f1916010190565b6000838284010152610be2565b8581018201518487016040015294810194610bce565b600435906001600160a01b0382168203610c2757565b600080fd5b602435906001600160a01b0382168203610c2757565b6060906003190112610c2757600435906024356001600160a01b0381168103610c27579060443590565b90601f8019910116810190811067ffffffffffffffff821117610c8e57604052565b634e487b7160e01b600052604160045260246000fd5b81198111610cb0570190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081168015801594919391929190610eae578116938415801590610e5d57807f00000000000000000000000000000000000000000000000000000000000000004211610e1c575b5081610e14575b50610dc8575b50600082815280602052604081205491808310610d745760408282600080516020611abc833981519152958760209652828652038282205586815220610d69828254610ca4565b9055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b600654168303610dd85738610d22565b60405162461bcd60e51b815260206004820152601460248201527327b7363c903a37903837b634b1bca1b2b73a32b960611b6044820152606490fd5b905038610d1c565b610e265780610d15565b60405162461bcd60e51b815260206004820152600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610fb25716918215610f625760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561100a57565b60405162461bcd60e51b815260206004820152600d60248201526c139bdd081c195c9b5a5d1d1959609a1b6044820152606490fd5b1561104657565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b1561109257565b60405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8105b5bdd5b9d60aa1b6044820152606490fd5b156110cc57565b60405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c81c1bdbdb081a59609a1b6044820152606490fd5b818110610cb0570390565b61111581611163565b6001600160a01b03909116600090815260208190526040902054908181111561113f575050600090565b61114891611101565b90565b62015180908060001904821181151516610cb0570290565b60075460408051637aaf11c760e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482018190526000959490936001600160a01b039390841692909187916020908181602481895afa90811561132f5784916113a5575b50801515908161137a575b506111e6575b50505050505050565b6001967f0000000000000000000000000000000000000000000000000000000000000000888110611366578551632509d07760e11b815260048101929092526000190160248201528181604481895afa90811561132f578491611339575b50845195869163c942adf760e01b835260048301528160246101609889935afa90811561132f57908891859786926112e8575b5050036111dd57825b6002811061128e57506111dd565b6112978161114b565b86116112a5575b8701611280565b986112e088916112c56112c06112ba8e61114b565b8a611101565b6113d2565b8986168752600a855287872090875284528686205490610ca4565b99905061129e565b925096505085813d8311611328575b6113018183610c6c565b8101031261020e57838501518681160361020e578661010060608701519601513880611277565b503d6112f7565b85513d86823e3d90fd5b90508181813d831161135f575b6113508183610c6c565b81010312610bb6575138611244565b503d611346565b634e487b7160e01b85526011600452602485fd5b90507f00000000000000000000000000000000000000000000000000000000000000001115386111d7565b90508181813d83116113cb575b6113bc8183610c6c565b81010312610bb65751386111cc565b503d6113b2565b62010bd9906000906001600160ff1b039062015180900482811281830381158187131661136657600160ff1b9583870392838212166119d75785908401129162010bd819908162253d8c930183138415166119c3570113166119af576226496501600191600494838383048711868513161661199c57848312600760fd1b841216841661199c5762023ab192838160021b0593858585048211888713161661197657857fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2861288871216166119765784028681128185036003138115166118ff578184036003121661197657908760036114ce93010590611a03565b9085821282840386138115166119765782820386121661198957848201610fa086828604821189841316166118ff57867ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c831289841216166118ff576115479162164b09910205928861154085611a57565b0590611a03565b868112818503601f138115166118ff57818303601f121661197657601f019185838504605011888513161661197657857ffe66666666666666666666666666666666666666666666666666666666666667841288851216166119765761098f94858460500205938785870488118a8713161661194c5788851296887ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268871289161661191257906050866115fc93020590611a03565b95600b850590858703600213811516611912578585036002121661194c57600c928882880485118b84131616611912577ff55555555555555555555555555555555555555555555555555555555555555695898784128c851216166119635761166b9060028487029101611a03565b926031600160ff1b0181128a1661196357603019018a8113818904606411168a1661196357897ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb982128c83121616611963576116d392916116ce91606402611a2c565b611a2c565b936107b2851061195f57617d4b600160ff1b018712881661194c5784860393898612918215986112c0928784138b166119255788900392838112851661192557908d611737611732611743948a6117298b6119eb565b05908d01611a2c565b611a57565b0590617d4a1901611a2c565b906002600160ff1b0185128b16611939578561175e866119eb565b05908c82137f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8311168c16611925578b9082128d83121616611939576117aa9086026001198601611a03565b61016f8c8213828b048211168c16611925578c82127fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318312168c16611925576117f892918791020590611a2c565b9761132495861316611912578412166118ff57926064926118259261181d89966119eb565b059101611a2c565b0580920460031185831316166118ec57827fd555555555555555555555555555555555555555555555555555555555555556821285831216166118ec579084611872926003020590611a03565b9062253d8c600160ff1b018212166118d9576118939062253d8b190161114b565b91620143701983116118c657610dd419620143708401116118c657603b19620151448401116118c65750506201517f0190565b634e487b7160e01b825260119052602490fd5b506011602492634e487b7160e01b835252fd5b634e487b7160e01b845260118552602484fd5b634e487b7160e01b885260118952602488fd5b634e487b7160e01b8a5260118b5260248afd5b50634e487b7160e01b8c5260118d5260248cfd5b634e487b7160e01b8c5260118d5260248cfd5b634e487b7160e01b895260118a52602489fd5b8880fd5b634e487b7160e01b8b5260118c5260248bfd5b634e487b7160e01b875260118852602487fd5b634e487b7160e01b865260118752602486fd5b634e487b7160e01b855260118652602485fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b600e600160ff1b018112600116610cb057600d190190565b600082128015600160ff1b8401831216610cb0576001600160ff1b038301821316610cb0570390565b6000811280156001600160ff1b03839003841316610cb057600160ff1b829003831216610cb0570190565b6105b560008083136001600160ff1b03849004831116600116611aa75760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa884128285121616611aa757500290565b634e487b7160e01b81526011600452602490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220d0d5672f525dc83a5d449266cbc0a66bf10065462f2b3fe6100e768f2a06c00b64736f6c634300080f0033a2646970667358221220fc8ab302b567feb977d9aac01adb17e63835ce5b039156b522d6fa2c87a634aa64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployCRToken(string,uint256,string,uint256,uint256)": {
        "params": {
          "_expiry": "Expiry date of cover right token",
          "_generation": "Generation of priority pool & crToken (1 if no liquidations occurred)",
          "_poolId": "Pool Id",
          "_poolName": "Name of Priority Pool",
          "_tokenName": "Name of insured token (e.g. DEG)"
        },
        "returns": {
          "newCRToken": "New deployed crToken address"
        }
      },
      "getCRTokenAddress(uint256,uint256,uint256)": {
        "params": {
          "_expiry": "Expiry timestamp",
          "_generation": "Generation of the crToken",
          "_poolId": "Pool id"
        },
        "returns": {
          "crToken": "CRToken address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployCRToken(string,uint256,string,uint256,uint256)": {
        "notice": "Deploy Cover Right Token for a given pool"
      },
      "getCRTokenAddress(uint256,uint256,uint256)": {
        "notice": "Get crToken address"
      }
    },
    "notice": "Factory for deploying crTokens         Salt as index for cover right tokens:             salt = keccak256(poolId, expiry, genration)         Factory will record whether a crToken has been deployed         Also record the generation of a specific crToken         And find the address of the crToken with its salt",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17599,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17706,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5853,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "policyCenter",
        "offset": 0,
        "slot": "50",
        "type": "t_address"
      },
      {
        "astId": 5855,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "incidentReport",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 5857,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "payoutPool",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 5861,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "deployed",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 5865,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "saltToAddress",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 5869,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "generation",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}