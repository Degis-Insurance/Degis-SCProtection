{
  "address": "0xF6fdA76857f9A37239dEEA0Ab92F1767263F53B9",
  "abi": [
    {
      "inputs": [],
      "name": "Executor__AlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ProposalNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ProposalNotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ReportNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ReportNotSettled",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "NewPoolExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        }
      ],
      "name": "ReportExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "newPriorityPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        }
      ],
      "name": "executeReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incidentReport",
      "outputs": [
        {
          "internalType": "contract IIncidentReport",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onboardProposal",
      "outputs": [
        {
          "internalType": "contract IOnboardProposal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "contract IPriorityPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reportExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "name": "setIncidentReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_onboardProposal",
          "type": "address"
        }
      ],
      "name": "setOnboardProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb734f823eef43e296ebf80365a802d7ee472d492addf3a98043ecbea3b6168de",
  "receipt": {
    "to": null,
    "from": "0xeB496257B64Cc2D39c291B209F465f3cfADE0873",
    "contractAddress": "0xF6fdA76857f9A37239dEEA0Ab92F1767263F53B9",
    "transactionIndex": 2,
    "gasUsed": "829493",
    "logsBloom": "0x
    "blockHash": "0xc5c6b54332af0c4db2a1d75648e9cc37af168d47479d37cb5608b79a153cba26",
    "transactionHash": "0xb734f823eef43e296ebf80365a802d7ee472d492addf3a98043ecbea3b6168de",
    "logs": [],
    "blockNumber": 25729022,
    "cumulativeGasUsed": "948197",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cceff87c1df2bd5d90eeac3f1d84e72a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Executor__AlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ProposalNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ProposalNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ReportNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ReportNotSettled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"NewPoolExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"}],\"name\":\"ReportExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPriorityPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"}],\"name\":\"executeReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incidentReport\",\"outputs\":[{\"internalType\":\"contract IIncidentReport\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onboardProposal\",\"outputs\":[{\"internalType\":\"contract IOnboardProposal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"contract IPriorityPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"name\":\"setIncidentReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onboardProposal\",\"type\":\"address\"}],\"name\":\"setOnboardProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ericlee@375labs.org) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"executeProposal(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"executeReport(uint256)\":{\"params\":{\"_reportId\":\"Id of the report to be executed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Executor Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeProposal(uint256)\":{\"notice\":\"Execute the proposal         The proposal must already been settled and the result is PASSED         New priority pool will be deployed with parameters\"},\"executeReport(uint256)\":{\"notice\":\"Execute a report         The report must already been settled and the result is PASSED         Execution means:             1) Give 10% of protocol income to reporter (USDC)             2) Move the total payout amount out of the priority pool (to payout pool)             3) Deploy new generations of CRTokens and PRI-LP tokens         Can not execute a report before the previous liquidation ended\"}},\"notice\":\"This is the executor contract for degis Protocol Protection          The executor is responsible for the execution of the reports and pool proposals         Both administrators or users can execute proposals and reports          Execute a report means:             - Mark the report as executed             - Reward the reported from the Treasury             - Liquidate / Move the total payout amount out of the priority pool (to the payout pool)           Execute a proposal means:             - Mark the proposal as executed             - Create a new priority pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/Executor.sol\":\"Executor\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363735333235353639323731\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"src/core/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/OwnableWithoutContextUpgradeable.sol\\\";\\nimport \\\"./interfaces/ExecutorDependencies.sol\\\";\\nimport \\\"../voting/interfaces/VotingParameters.sol\\\";\\nimport \\\"./interfaces/ExecutorEventError.sol\\\";\\n\\n/**\\n * @title Executor Contract\\n *\\n * @author Eric Lee (ericlee@375labs.org) & Primata (primata@375labs.org)\\n *\\n * @notice This is the executor contract for degis Protocol Protection\\n * \\n *         The executor is responsible for the execution of the reports and pool proposals\\n *         Both administrators or users can execute proposals and reports\\n * \\n *         Execute a report means:\\n *             - Mark the report as executed\\n *             - Reward the reported from the Treasury\\n *             - Liquidate / Move the total payout amount out of the priority pool (to the payout pool) \\n * \\n *         Execute a proposal means:\\n *             - Mark the proposal as executed\\n *             - Create a new priority pool\\n */\\ncontract Executor is\\n    VotingParameters,\\n    ExecutorEventError,\\n    OwnableWithoutContextUpgradeable,\\n    ExecutorDependencies\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Whether report already executed\\n    mapping(uint256 => bool) public reportExecuted;\\n\\n    // Whether proposal already executed\\n    mapping(uint256 => bool) public proposalExecuted;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        priorityPoolFactory = IPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    function setIncidentReport(address _incidentReport) external onlyOwner {\\n        incidentReport = IIncidentReport(_incidentReport);\\n    }\\n\\n    function setOnboardProposal(address _onboardProposal) external onlyOwner {\\n        onboardProposal = IOnboardProposal(_onboardProposal);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = ITreasury(_treasury);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Execute a report\\n     *         The report must already been settled and the result is PASSED\\n     *         Execution means:\\n     *             1) Give 10% of protocol income to reporter (USDC)\\n     *             2) Move the total payout amount out of the priority pool (to payout pool)\\n     *             3) Deploy new generations of CRTokens and PRI-LP tokens\\n     *\\n     *         Can not execute a report before the previous liquidation ended\\n     *\\n     * @param _reportId Id of the report to be executed\\n     */\\n    function executeReport(uint256 _reportId) public {\\n        // Check and mark the report as \\\"executed\\\"\\n        if (reportExecuted[_reportId]) revert Executor__AlreadyExecuted();\\n        reportExecuted[_reportId] = true;\\n\\n        IIncidentReport.Report memory report = incidentReport.getReport(\\n            _reportId\\n        );\\n\\n        if (report.status != SETTLED_STATUS)\\n            revert Executor__ReportNotSettled();\\n        if (report.result != PASS_RESULT) revert Executor__ReportNotPassed();\\n\\n        // Executed callback function\\n        incidentReport.executed(_reportId);\\n\\n        // Give 10% of treasury to the reporter\\n        treasury.rewardReporter(report.poolId, report.reporter);\\n\\n        // Unpause the priority pool and protection pool\\n        // factory.pausePriorityPool(report.poolId, false);\\n\\n        // Liquidate the pool\\n        (, address poolAddress, , , ) = priorityPoolFactory.pools(\\n            report.poolId\\n        );\\n        IPriorityPool(poolAddress).liquidatePool(report.payout);\\n\\n        emit ReportExecuted(poolAddress, report.poolId, _reportId);\\n    }\\n\\n    /**\\n     * @notice Execute the proposal\\n     *         The proposal must already been settled and the result is PASSED\\n     *         New priority pool will be deployed with parameters\\n     *\\n     * @param _proposalId Proposal id\\n     */\\n    function executeProposal(uint256 _proposalId)\\n        external\\n        returns (address newPriorityPool)\\n    {\\n        // Check and mark the proposal as \\\"executed\\\"\\n        if (proposalExecuted[_proposalId]) revert Executor__AlreadyExecuted();\\n        proposalExecuted[_proposalId] = true;\\n\\n        IOnboardProposal.Proposal memory proposal = onboardProposal.getProposal(\\n            _proposalId\\n        );\\n\\n        if (proposal.status != SETTLED_STATUS)\\n            revert Executor__ProposalNotSettled();\\n        if (proposal.result != PASS_RESULT)\\n            revert Executor__ProposalNotPassed();\\n\\n        // Execute the proposal\\n        newPriorityPool = priorityPoolFactory.deployPool(\\n            proposal.name,\\n            proposal.protocolToken,\\n            proposal.maxCapacity,\\n            proposal.basePremiumRatio\\n        );\\n\\n        emit NewPoolExecuted(\\n            newPriorityPool,\\n            _proposalId,\\n            proposal.protocolToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf74dea1485fb6fe7d5d65f01e087b5c5103b16c39d8d992beed9ee254dff4acb\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/ExecutorDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\n// import \\\"../../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\nimport \\\"../../interfaces/IOnboardProposal.sol\\\";\\n\\nimport \\\"../../interfaces/ITreasury.sol\\\";\\n\\ninterface IPriorityPool {\\n    function liquidatePool(uint256 amount) external;\\n}\\n\\ninterface IIncidentReport {\\n    struct Report {\\n        uint256 poolId; // Project pool id\\n        uint256 reportTimestamp; // Time of starting report\\n        address reporter; // Reporter address\\n        uint256 voteTimestamp; // Voting start timestamp\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 round; // 0: Initial round 3 days, 1: Extended round 1 day, 2: Double extended 1 day\\n        uint256 status; // 0: INIT, 1: PENDING, 2: VOTING, 3: SETTLED, 404: CLOSED\\n        uint256 result; // 1: Pass, 2: Reject, 3: Tied\\n        uint256 votingReward; // Voting reward per veDEG\\n        uint256 payout; // Payout amount of this report (partial payout)\\n    }\\n\\n    function getReport(uint256) external view returns (Report memory);\\n\\n    function executed(uint256 _reportId) external;\\n}\\n\\nabstract contract ExecutorDependencies {\\n    IPriorityPoolFactory public priorityPoolFactory;\\n    IIncidentReport public incidentReport;\\n    IOnboardProposal public onboardProposal;\\n    ITreasury public treasury;\\n}\\n\",\"keccak256\":\"0xd9be10554a0a67f65722e4f287d5f3900121fba3ffeef4ba3f91ee2550811081\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/ExecutorEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ExecutorEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event ReportExecuted(address pool, uint256 poolId, uint256 reportId);\\n\\n    event NewPoolExecuted(\\n        address poolAddress,\\n        uint256 proposalId,\\n        address protocol\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error Executor__ReportNotSettled();\\n    error Executor__ReportNotPassed();\\n    error Executor__ProposalNotSettled();\\n    error Executor__ProposalNotPassed();\\n    error Executor__AlreadyExecuted();\\n}\\n\",\"keccak256\":\"0x11a38d92c0f1f3af8a348b84907a9bc86600337c013223f161b9d7aa193541c1\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IOnboardProposal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IOnboardProposal {\\n    struct Proposal {\\n        string name; // Pool name (\\\"JOE\\\", \\\"GMX\\\")\\n        address protocolToken; // Protocol native token address\\n        address proposer; // Proposer address\\n        uint256 proposeTimestamp; // Timestamp when proposing\\n        uint256 voteTimestamp; // Timestamp when start voting\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 maxCapacity; // Max capacity ratio\\n        uint256 basePremiumRatio; // Base annual premium ratio\\n        uint256 poolId; // Priority pool id\\n        uint256 status; // Current status (PENDING, VOTING, SETTLED, CLOSED)\\n        uint256 result; // Final result (PASSED, REJECTED, TIED)\\n    }\\n\\n    struct UserVote {\\n        uint256 choice; // 1: vote for, 2: vote against\\n        uint256 amount; // veDEG amount for voting\\n        bool claimed; // Voting reward already claimed\\n    }\\n\\n    event NewProposal(\\n        string name,\\n        address token,\\n        uint256 maxCapacity,\\n        uint256 priceRatio\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event ProposalSettled(uint256 proposalId, uint256 result);\\n    event ProposalVoted(\\n        uint256 proposalId,\\n        address indexed user,\\n        uint256 voteFor,\\n        uint256 amount\\n    );\\n\\n    function claim(uint256 _proposalId, address _user) external;\\n\\n    function closeProposal(uint256 _proposalId) external;\\n\\n    function deg() external view returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getProposal(uint256 _proposalId)\\n        external\\n        view\\n        returns (Proposal memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolProposed(address) external view returns (bool);\\n\\n    function proposalCounter() external view returns (uint256);\\n\\n    function proposals(uint256)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address protocolToken,\\n            address proposer,\\n            uint256 proposeTimestamp,\\n            uint256 numFor,\\n            uint256 numAgainst,\\n            uint256 maxCapacity,\\n            uint256 priceRatio,\\n            uint256 poolId,\\n            uint256 status,\\n            uint256 result\\n        );\\n\\n    function propose(\\n        string memory _name,\\n        address _token,\\n        uint256 _maxCapacity,\\n        uint256 _priceRatio,\\n        address _user\\n    ) external;\\n\\n    function protectionPool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function settle(uint256 _proposalId) external;\\n\\n    function startVoting(uint256 _proposalId) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function getUserProposalVote(address user, uint256 proposalId)\\n        external\\n        view\\n        returns (UserVote memory);\\n\\n    function veDeg() external view returns (address);\\n\\n    function vote(\\n        uint256 _reportId,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6d6af37ecec2289b65f4e542ffebd7cbe03fcd9bef16bd72e295f1fca4569ecb\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerUSDC\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerUSDC\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n\\n   \\n}\\n\",\"keccak256\":\"0xcbc2bb32ce42fdcb8ba88a4437f9c0ab073b80538f89c14fac7654e6088c2079\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ITreasury {\\n    function rewardReporter(uint256 _poolId, address _reporter) external;\\n\\n    function premiumIncome(uint256 _poolId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2ef53813a74f1e7de1168f57dde2972cc51fc4a1cc4b4e885e5adc896045d4c7\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OwnableWithoutContextUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb7c1bac54d6b38b0ff582113689643e43bdbc9eaf4dcd906373c3f44f7b2eab5\",\"license\":\"MIT\"},\"src/voting/interfaces/VotingParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract VotingParameters {\\n    // Status parameters for a voting\\n    uint256 internal constant INIT_STATUS = 0;\\n    uint256 internal constant PENDING_STATUS = 1;\\n    uint256 internal constant VOTING_STATUS = 2;\\n    uint256 internal constant SETTLED_STATUS = 3;\\n    uint256 internal constant CLOSE_STATUS = 404;\\n\\n    // Result parameters for a voting\\n    uint256 internal constant INIT_RESULT = 0;\\n    uint256 internal constant PASS_RESULT = 1;\\n    uint256 internal constant REJECT_RESULT = 2;\\n    uint256 internal constant TIED_RESULT = 3;\\n    uint256 internal constant FAILED_RESULT = 4;\\n\\n    // Voting choices\\n    uint256 internal constant VOTE_FOR = 1;\\n    uint256 internal constant VOTE_AGAINST = 2;\\n}\\n\",\"keccak256\":\"0x207f4c911a33fe3927c4fc15d9f63806e4241b345f4a30e35d50842f6524938a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610e07908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b60009260e08435811c918263084b976314610bc4575081630d61b519146108cb5781630f89b77d146108a1578163103616e81461087457816345ac7890146108255781635e0403e1146104b45750806361d027b31461048b5780636f8a6e4314610462578063715018a6146103f35780638129fc1c146102c35780638da5cb5b14610293578063ad35e1dc14610245578063d4fe01c514610219578063e3356ccf146101cb578063f0f44260146101795763f2fde38b146100d557600080fd5b34610175576020366003190112610175578035906001600160a01b03808316908184036101715761010d90865460101c163314610be9565b1561011f575061011c90610d71565b51f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8580fd5b8280fd5b503461017557602036600319011261017557356001600160a01b03818116918290036101c7576101b090845460101c163314610be9565b603580546001600160a01b03191691909117905551f35b8380fd5b503461017557602036600319011261017557356001600160a01b03818116918290036101c75761020290845460101c163314610be9565b603380546001600160a01b03191691909117905551f35b5034610175576020366003190112610175578160209360ff923581526036855220541690519015158152f35b503461017557602036600319011261017557356001600160a01b03818116918290036101c75761027c90845460101c163314610be9565b603280546001600160a01b03191691909117905551f35b5050346102bf57816003193601126102bf579054905160109190911c6001600160a01b03168152602090f35b5080fd5b5034610175578260031936011261017557825460ff8160081c1615918280936103e6575b80156103cf575b15610375575060ff198116600117845581610364575b5061031e60ff845460081c1661031981610d11565b610d11565b61032733610d71565b61032e5751f35b61ff001982541682557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986020825160018152a151f35b61ffff191661010117835538610304565b608490602085519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b1580156102ee5750600160ff8316146102ee565b50600160ff8316106102e7565b5050346102bf57816003193601126102bf5781546001600160a01b0391906104219060101c83163314610be9565b600080549151928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b5050346102bf57816003193601126102bf5760325490516001600160a01b039091168152602090f35b5050346102bf57816003193601126102bf5760355490516001600160a01b039091168152602090f35b9050346101c757602091826003193601126106dc578035908186526036845260ff85872054166108175781865260368452848620805460ff191660011790556033548551634e7f9b1960e01b81528083018490526024949092916001600160a01b03919082169061016080868981865afa95861561080d578b9661073d575b50508401516002190161072d5760016101008501510361071d578089913b156102bf578190878a518094819363d3ecebd760e01b83528a898401525af18015610713576106fe575b5090818892603554168451828a87015116823b156101715760448692838d519586948593630627c88b60e01b85528a8501528d8401525af19081156106e05784916106ea575b50508060325416838551888b51809481936315895f4760e31b8352888301525afa9081156106e0578491610684575b50169461014084015191863b156101c75783918951938492630216e5ad60e31b84528301528183895af1801561067a57610660575b5050907f8fa9381fba721fd6948edce4a010404fc0032dc4dc0c1602636306c4965f5cf693606093925190865193845283015284820152a151f35b61066d9094939294610c22565b6101715790918538610625565b87513d84823e3d90fd5b90503d8085833e6106958183610c4c565b810160a0828203126106dc5781519067ffffffffffffffff8211610171576106be918301610cbc565b506106d5896106ce8a8401610c6e565b9201610c6e565b50386105f0565b8480fd5b89513d86823e3d90fd5b6106f390610c22565b6101755782386105c1565b61070b9098919298610c22565b96903861057b565b88513d8b823e3d90fd5b87516354b3680560e11b81528390fd5b87516317dbbab560e11b81528390fd5b908092965081813d8311610806575b6107568183610c4c565b8101031261080257895191820182811067ffffffffffffffff8211176107f0578a52805182528881015189830152600391906107938b8201610c6e565b8b830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301528681015187830152610100808201519083015261012080820151908301526101408091015190820152949038610533565b634e487b7160e01b8c5260418652888cfd5b8a80fd5b503d61074c565b8a513d8d823e3d90fd5b8451638a59351b60e01b8152fd5b50503461017557602036600319011261017557356001600160a01b03818116918290036101c75761085d90845460101c163314610be9565b603480546001600160a01b03191691909117905551f35b505034610175576020366003190112610175578160209360ff923581526037855220541690519015158152f35b505050346102bf57816003193601126102bf5760335490516001600160a01b039091168152602090f35b82848634610a7757602093846003193601126102bf578335938483526037865260ff8484205416610bb65784835260378652838320805460ff1916600117905560345484516318feeb1560e31b81528281018790526001600160a01b0393909185908390602490829088165afa918215610bac578592610aac575b50600361014083015103610a9c57600161016083015103610a8c578790846032541660808760a4865197868801986101008b8b5116978a01519901518d51998a988997889563bb9febaf60e01b87528601526109b0845180958160848901528d8989019101610c87565b602485015260448401526064830152601f01601f191681010301925af1938415610a81578094610a1e575b505091816060927f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f103749451169085519216958683528783015284820152a151908152f35b909193508682813d8311610a7a575b610a378183610c4c565b81010312610a7757509181606092610a6f7f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f1037495610c6e565b9450926109db565b80fd5b503d610a2d565b8551903d90823e3d90fd5b855163057c9ceb60e01b81528390fd5b855163c0e8dfe360e01b81528390fd5b9091503d8086833e610abe8183610c4c565b8101888282031261017157815167ffffffffffffffff92838211610b95570190610180928383830312610b9557885193840184811082821117610b995789528251908111610b955790610b12918301610cbc565b8252610b1f898201610c6e565b89830152610b2e878201610c6e565b87830152606081015160608301526080810151608083015260a081015160a083015260c081015160c0830152828101518383015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201529088610946565b8780fd5b634e487b7160e01b895260418752602489fd5b86513d87823e3d90fd5b8351638a59351b60e01b8152fd5b8590346102bf57816003193601126102bf576034546001600160a01b03168152602090f35b15610bf057565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b67ffffffffffffffff8111610c3657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610c3657604052565b51906001600160a01b0382168203610c8257565b600080fd5b918091926000905b828210610ca7575011610ca0575050565b6000910152565b91508060209183015181860152018291610c8f565b81601f82011215610c8257805167ffffffffffffffff8111610c365760405192610cf0601f8301601f191660200185610c4c565b81845260208284010111610c8257610d0e9160208085019101610c87565b90565b15610d1857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea2646970667358221220a6228e7f13c2c92c5a1ef763026301291517171f024363f4859a3167e2b9354a64736f6c634300080f0033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b60009260e08435811c918263084b976314610bc4575081630d61b519146108cb5781630f89b77d146108a1578163103616e81461087457816345ac7890146108255781635e0403e1146104b45750806361d027b31461048b5780636f8a6e4314610462578063715018a6146103f35780638129fc1c146102c35780638da5cb5b14610293578063ad35e1dc14610245578063d4fe01c514610219578063e3356ccf146101cb578063f0f44260146101795763f2fde38b146100d557600080fd5b34610175576020366003190112610175578035906001600160a01b03808316908184036101715761010d90865460101c163314610be9565b1561011f575061011c90610d71565b51f35b608490602084519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8580fd5b8280fd5b503461017557602036600319011261017557356001600160a01b03818116918290036101c7576101b090845460101c163314610be9565b603580546001600160a01b03191691909117905551f35b8380fd5b503461017557602036600319011261017557356001600160a01b03818116918290036101c75761020290845460101c163314610be9565b603380546001600160a01b03191691909117905551f35b5034610175576020366003190112610175578160209360ff923581526036855220541690519015158152f35b503461017557602036600319011261017557356001600160a01b03818116918290036101c75761027c90845460101c163314610be9565b603280546001600160a01b03191691909117905551f35b5050346102bf57816003193601126102bf579054905160109190911c6001600160a01b03168152602090f35b5080fd5b5034610175578260031936011261017557825460ff8160081c1615918280936103e6575b80156103cf575b15610375575060ff198116600117845581610364575b5061031e60ff845460081c1661031981610d11565b610d11565b61032733610d71565b61032e5751f35b61ff001982541682557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986020825160018152a151f35b61ffff191661010117835538610304565b608490602085519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b1580156102ee5750600160ff8316146102ee565b50600160ff8316106102e7565b5050346102bf57816003193601126102bf5781546001600160a01b0391906104219060101c83163314610be9565b600080549151928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b5050346102bf57816003193601126102bf5760325490516001600160a01b039091168152602090f35b5050346102bf57816003193601126102bf5760355490516001600160a01b039091168152602090f35b9050346101c757602091826003193601126106dc578035908186526036845260ff85872054166108175781865260368452848620805460ff191660011790556033548551634e7f9b1960e01b81528083018490526024949092916001600160a01b03919082169061016080868981865afa95861561080d578b9661073d575b50508401516002190161072d5760016101008501510361071d578089913b156102bf578190878a518094819363d3ecebd760e01b83528a898401525af18015610713576106fe575b5090818892603554168451828a87015116823b156101715760448692838d519586948593630627c88b60e01b85528a8501528d8401525af19081156106e05784916106ea575b50508060325416838551888b51809481936315895f4760e31b8352888301525afa9081156106e0578491610684575b50169461014084015191863b156101c75783918951938492630216e5ad60e31b84528301528183895af1801561067a57610660575b5050907f8fa9381fba721fd6948edce4a010404fc0032dc4dc0c1602636306c4965f5cf693606093925190865193845283015284820152a151f35b61066d9094939294610c22565b6101715790918538610625565b87513d84823e3d90fd5b90503d8085833e6106958183610c4c565b810160a0828203126106dc5781519067ffffffffffffffff8211610171576106be918301610cbc565b506106d5896106ce8a8401610c6e565b9201610c6e565b50386105f0565b8480fd5b89513d86823e3d90fd5b6106f390610c22565b6101755782386105c1565b61070b9098919298610c22565b96903861057b565b88513d8b823e3d90fd5b87516354b3680560e11b81528390fd5b87516317dbbab560e11b81528390fd5b908092965081813d8311610806575b6107568183610c4c565b8101031261080257895191820182811067ffffffffffffffff8211176107f0578a52805182528881015189830152600391906107938b8201610c6e565b8b830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301528681015187830152610100808201519083015261012080820151908301526101408091015190820152949038610533565b634e487b7160e01b8c5260418652888cfd5b8a80fd5b503d61074c565b8a513d8d823e3d90fd5b8451638a59351b60e01b8152fd5b50503461017557602036600319011261017557356001600160a01b03818116918290036101c75761085d90845460101c163314610be9565b603480546001600160a01b03191691909117905551f35b505034610175576020366003190112610175578160209360ff923581526037855220541690519015158152f35b505050346102bf57816003193601126102bf5760335490516001600160a01b039091168152602090f35b82848634610a7757602093846003193601126102bf578335938483526037865260ff8484205416610bb65784835260378652838320805460ff1916600117905560345484516318feeb1560e31b81528281018790526001600160a01b0393909185908390602490829088165afa918215610bac578592610aac575b50600361014083015103610a9c57600161016083015103610a8c578790846032541660808760a4865197868801986101008b8b5116978a01519901518d51998a988997889563bb9febaf60e01b87528601526109b0845180958160848901528d8989019101610c87565b602485015260448401526064830152601f01601f191681010301925af1938415610a81578094610a1e575b505091816060927f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f103749451169085519216958683528783015284820152a151908152f35b909193508682813d8311610a7a575b610a378183610c4c565b81010312610a7757509181606092610a6f7f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f1037495610c6e565b9450926109db565b80fd5b503d610a2d565b8551903d90823e3d90fd5b855163057c9ceb60e01b81528390fd5b855163c0e8dfe360e01b81528390fd5b9091503d8086833e610abe8183610c4c565b8101888282031261017157815167ffffffffffffffff92838211610b95570190610180928383830312610b9557885193840184811082821117610b995789528251908111610b955790610b12918301610cbc565b8252610b1f898201610c6e565b89830152610b2e878201610c6e565b87830152606081015160608301526080810151608083015260a081015160a083015260c081015160c0830152828101518383015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201529088610946565b8780fd5b634e487b7160e01b895260418752602489fd5b86513d87823e3d90fd5b8351638a59351b60e01b8152fd5b8590346102bf57816003193601126102bf576034546001600160a01b03168152602090f35b15610bf057565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b67ffffffffffffffff8111610c3657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610c3657604052565b51906001600160a01b0382168203610c8257565b600080fd5b918091926000905b828210610ca7575011610ca0575050565b6000910152565b91508060209183015181860152018291610c8f565b81601f82011215610c8257805167ffffffffffffffff8111610c365760405192610cf0601f8301601f191660200185610c4c565b81845260208284010111610c8257610d0e9160208085019101610c87565b90565b15610d1857565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea2646970667358221220a6228e7f13c2c92c5a1ef763026301291517171f024363f4859a3167e2b9354a64736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ericlee@375labs.org) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "executeProposal(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "executeReport(uint256)": {
        "params": {
          "_reportId": "Id of the report to be executed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Executor Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeProposal(uint256)": {
        "notice": "Execute the proposal         The proposal must already been settled and the result is PASSED         New priority pool will be deployed with parameters"
      },
      "executeReport(uint256)": {
        "notice": "Execute a report         The report must already been settled and the result is PASSED         Execution means:             1) Give 10% of protocol income to reporter (USDC)             2) Move the total payout amount out of the priority pool (to payout pool)             3) Deploy new generations of CRTokens and PRI-LP tokens         Can not execute a report before the previous liquidation ended"
      }
    },
    "notice": "This is the executor contract for degis Protocol Protection          The executor is responsible for the execution of the reports and pool proposals         Both administrators or users can execute proposals and reports          Execute a report means:             - Mark the report as executed             - Reward the reported from the Treasury             - Liquidate / Move the total payout amount out of the priority pool (to the payout pool)           Execute a proposal means:             - Mark the proposal as executed             - Create a new priority pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 184,
        "contract": "src/core/Executor.sol:Executor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 187,
        "contract": "src/core/Executor.sol:Executor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17599,
        "contract": "src/core/Executor.sol:Executor",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17706,
        "contract": "src/core/Executor.sol:Executor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5230,
        "contract": "src/core/Executor.sol:Executor",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "50",
        "type": "t_contract(IPriorityPoolFactory)7284"
      },
      {
        "astId": 5233,
        "contract": "src/core/Executor.sol:Executor",
        "label": "incidentReport",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IIncidentReport)5227"
      },
      {
        "astId": 5236,
        "contract": "src/core/Executor.sol:Executor",
        "label": "onboardProposal",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IOnboardProposal)6851"
      },
      {
        "astId": 5239,
        "contract": "src/core/Executor.sol:Executor",
        "label": "treasury",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(ITreasury)7362"
      },
      {
        "astId": 3515,
        "contract": "src/core/Executor.sol:Executor",
        "label": "reportExecuted",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3519,
        "contract": "src/core/Executor.sol:Executor",
        "label": "proposalExecuted",
        "offset": 0,
        "slot": "55",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IIncidentReport)5227": {
        "encoding": "inplace",
        "label": "contract IIncidentReport",
        "numberOfBytes": "20"
      },
      "t_contract(IOnboardProposal)6851": {
        "encoding": "inplace",
        "label": "contract IOnboardProposal",
        "numberOfBytes": "20"
      },
      "t_contract(IPriorityPoolFactory)7284": {
        "encoding": "inplace",
        "label": "contract IPriorityPoolFactory",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)7362": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}