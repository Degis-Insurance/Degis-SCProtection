{
  "address": "0x5b513C06f7AD39A3d4F9Bdc9435BfA0Dd4ca1ce6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PayoutPool__NoPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayoutPool__NotPolicyCenter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayoutPool__OnlyPriorityPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayoutPool__WrongCRToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "NewPayout",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLAIM_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newGenerationCRAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "newPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "payouts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTiemstamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priorityPool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shield",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5069d4c8e86f7d91da6f07b225b48712623de687bd047421e9fc5a48070159aa",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x5b513C06f7AD39A3d4F9Bdc9435BfA0Dd4ca1ce6",
    "transactionIndex": 0,
    "gasUsed": "599525",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x01cdf5b28363f83a366f912312151545a8ba1d034cf579515ec898ecf2f4de00",
    "transactionHash": "0x5069d4c8e86f7d91da6f07b225b48712623de687bd047421e9fc5a48070159aa",
    "logs": [],
    "blockNumber": 13576066,
    "cumulativeGasUsed": "599525",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0e86DC69Da2A96f9820682baB609701615e52763",
    "0xC68d2e2a73984457362D2F61cf000eCdeAC95D65",
    "0x73889a4F800E41FdBd6050fd4834601B8447b651",
    "0xDa7008400f3d3c7414c90D1983c79bf7D533A05C"
  ],
  "numDeployments": 16,
  "solcInputHash": "22a3caab06bc9e0983da48d35bf9592c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PayoutPool__NoPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutPool__NotPolicyCenter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutPool__OnlyPriorityPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayoutPool__WrongCRToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"NewPayout\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newGenerationCRAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"newPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTiemstamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priorityPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shield\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,address,uint256,uint256)\":{\"params\":{\"_crToken\":\"Cover right token address\",\"_generation\":\"Generation of priority pool (started at 1)\",\"_poolId\":\"Pool Id\",\"_user\":\"User address\"},\"returns\":{\"claimed\":\"              The actual amount transferred to the user\",\"newGenerationCRAmount\":\"New generation crToken minted to the user\"}},\"newPayout(uint256,uint256,uint256,uint256,address)\":{\"params\":{\"_amount\":\"Total amount to be claimed\",\"_generation\":\"Generation of priority pool (start at 1)\",\"_poolAddress\":\"Address of priority pool\",\"_poolId\":\"Pool Id\",\"_ratio\":\"Payout ratio of this payout (users can only use part of their crTokens to claim)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,address,uint256,uint256)\":{\"notice\":\"Claim payout for a user         Only callable from policy center         Need provide certain crToken address and generation\"},\"newPayout(uint256,uint256,uint256,uint256,address)\":{\"notice\":\"New payout comes in         Only callable from one of the priority pools         After the pool's report is passed and executed,         part of the assets will be moved to this pool.\"}},\"notice\":\"Payout Pool         Every time there is a report passed, some assets will be moved to this pool         It is stored as a Payout struct         - amount       Total amount of this payout         - remaining    Remaining amount         - endTimestamp After this timestamp, no more claims         - ratio        Max ratio of a user's crToken\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/PayoutPool.sol\":\"PayoutPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363633333431393332343037\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/interfaces/ICoverRightToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightToken {\\n    function expiry() external view returns (uint256);\\n\\n    function getClaimableOf(address _user) external view returns (uint256);\\n\\n    function mint(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function generation() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd06b45a4cefc10086b3ad76a27e23ff30c32e687856dc47d783698813848c25\",\"license\":\"MIT\"},\"src/interfaces/ICoverRightTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightTokenFactory {\\n    function deployCRToken(\\n        string calldata _poolName,\\n        uint256 _poolId,\\n        string calldata _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external returns (address newCRTokenAddress);\\n\\n    function deployed(bytes32 _salt) external view returns (bool);\\n\\n    function saltToAddress(bytes32 _salt) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf17c79edd1d32f1b61e8bdcdc74262f7935a899d03b9cfd677e4ff438f0814db\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function crTokenAddress(uint256 generation) external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external;\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x83e5056ae9508747e92dae0a557430c5f187ef4fcb689a8c1ea5c675c0e063cf\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n}\\n\",\"keccak256\":\"0x8c988f1fbeea64eede1c093a62bb6523f0f3e35a5d1807fc1909060cad38928f\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/PayoutPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ICoverRightTokenFactory.sol\\\";\\nimport \\\"../interfaces/ICoverRightToken.sol\\\";\\nimport \\\"../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../interfaces/IPriorityPoolFactory.sol\\\";\\n\\nimport \\\"./SimpleIERC20.sol\\\";\\n\\n/**\\n * @notice Payout Pool\\n *\\n *         Every time there is a report passed, some assets will be moved to this pool\\n *         It is stored as a Payout struct\\n *         - amount       Total amount of this payout\\n *         - remaining    Remaining amount\\n *         - endTimestamp After this timestamp, no more claims\\n *         - ratio        Max ratio of a user's crToken\\n */\\ncontract PayoutPool {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    uint256 public constant SCALE = 1e12;\\n\\n    uint256 public constant CLAIM_PERIOD = 30 days;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address public shield;\\n\\n    address public crFactory;\\n\\n    address public policyCenter;\\n\\n    address public priorityPoolFactory;\\n\\n    struct Payout {\\n        uint256 amount;\\n        uint256 remaining;\\n        uint256 endTiemstamp;\\n        uint256 ratio;\\n        address priorityPool;\\n    }\\n    // Pool id => Generation => Payout\\n    mapping(uint256 => mapping(uint256 => Payout)) public payouts;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event NewPayout(\\n        uint256 indexed _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PayoutPool__OnlyPriorityPool();\\n    error PayoutPool__NotPolicyCenter();\\n    error PayoutPool__WrongCRToken();\\n    error PayoutPool__NoPayout();\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _shield,\\n        address _policyCenter,\\n        address _crFactory,\\n        address _priorityPoolFactory\\n    ) {\\n        shield = _shield;\\n        policyCenter = _policyCenter;\\n        crFactory = _crFactory;\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    modifier onlyPriorityPool(uint256 _poolId) {\\n        (, address poolAddress, , , ) = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        ).pools(_poolId);\\n        if (poolAddress != msg.sender) revert PayoutPool__OnlyPriorityPool();\\n        _;\\n    }\\n\\n    modifier onlyPolicyCenter() {\\n        if (msg.sender != policyCenter) revert PayoutPool__NotPolicyCenter();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice New payout comes in\\n     *\\n     *         Only callable from one of the priority pools\\n     *\\n     *         After the pool's report is passed and executed,\\n     *         part of the assets will be moved to this pool.\\n     *\\n     *\\n     * @param _poolId       Pool Id\\n     * @param _generation   Generation of priority pool (start at 1)\\n     * @param _amount       Total amount to be claimed\\n     * @param _ratio        Payout ratio of this payout (users can only use part of their crTokens to claim)\\n     * @param _poolAddress  Address of priority pool\\n     */\\n    function newPayout(\\n        uint256 _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio,\\n        address _poolAddress\\n    ) external onlyPriorityPool(_poolId) {\\n        Payout storage payout = payouts[_poolId][_generation];\\n\\n        // Store the information\\n        payout.amount = _amount;\\n        payout.endTiemstamp = block.timestamp + CLAIM_PERIOD;\\n        payout.ratio = _ratio;\\n        payout.priorityPool = _poolAddress;\\n\\n        emit NewPayout(_poolId, _generation, _amount, _ratio);\\n    }\\n\\n    /**\\n     * @notice Claim payout for a user\\n     *\\n     *         Only callable from policy center\\n     *         Need provide certain crToken address and generation\\n     *\\n     * @param _user       User address\\n     * @param _crToken    Cover right token address\\n     * @param _poolId     Pool Id\\n     * @param _generation Generation of priority pool (started at 1)\\n     *\\n     * @return claimed               The actual amount transferred to the user\\n     * @return newGenerationCRAmount New generation crToken minted to the user\\n     */\\n    function claim(\\n        address _user,\\n        address _crToken,\\n        uint256 _poolId,\\n        uint256 _generation\\n    )\\n        external\\n        onlyPolicyCenter\\n        returns (uint256 claimed, uint256 newGenerationCRAmount)\\n    {\\n        Payout storage payout = payouts[_poolId][_generation];\\n\\n        uint256 expiry = ICoverRightToken(_crToken).expiry();\\n\\n        // Check the crToken address and generation matched\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_poolId, expiry, _generation)\\n        );\\n        if (ICoverRightTokenFactory(crFactory).saltToAddress(salt) != _crToken)\\n            revert PayoutPool__WrongCRToken();\\n\\n        // Get claimable amount of crToken\\n        uint256 claimableBalance = ICoverRightToken(_crToken).getClaimableOf(\\n            _user\\n        );\\n        // Only part of the crToken can be used for claim\\n        uint256 claimable = (claimableBalance * payout.ratio) / SCALE;\\n\\n        if (claimable == 0) revert PayoutPool__NoPayout();\\n\\n        uint256 coverIndex = IPriorityPool(payout.priorityPool).coverIndex();\\n\\n        // Actual amount given to the user\\n        claimed = (claimable * coverIndex) / 10000;\\n\\n        ICoverRightToken(_crToken).burn(\\n            _poolId,\\n            _user,\\n            // burns the users' crToken balance, not the payout amount,\\n            // since rest of the payout will be minted as a new generation token\\n            claimableBalance\\n        );\\n\\n        SimpleIERC20(shield).transfer(_user, claimed);\\n\\n        // Amount of new generation cr token to be minted\\n        newGenerationCRAmount = claimableBalance - claimable;\\n    }\\n}\\n\",\"keccak256\":\"0xb219442bbf36f5b073a2ed1715ac8fb2c3e708ff9a67e45ecadf01f7e46093ae\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b15e78313a0d5b81dcaaea2e7545aa8688d1e44ef97f607f2405d0c9e7e0df7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100b957601f61091838819003918201601f19168301916001600160401b038311848410176100be578084926080946040528339810103126100b957610047816100d4565b90610054602082016100d4565b61006c6060610065604085016100d4565b93016100d4565b9060018060a01b03928380928160018060a01b0319971687600054161760005516856002541617600255168360015416176001551690600354161760035560405161082f90816100e98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b95756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826321241dfe146107675750816326af4832146103c4578163304de8731461035f5781636f8a6e431461033657816370d39cff1461030e578163c773a2d1146100fa57508063e8adbf2f146100d2578063eced5526146100b35763f4ecd0911461008857600080fd5b346100af57816003193601126100af5760015490516001600160a01b039091168152602090f35b5080fd5b50346100af57816003193601126100af576020905164e8d4a510008152f35b50346100af57816003193601126100af5760025490516001600160a01b039091168152602090f35b90503461030a5760a036600319011261030a578035906024359060643590604435906084356001600160a01b038181169291839003610305578089602492600354168a51938480926315895f4760e31b82528c888301525afa9182156102fb578a92610207575b50339116036101f9578588528060205286882085895260205286882083815562278d001942116101e6574262278d00016002820155600381018590550180546001600160a01b031916909117905584519283526020830152818401527fd303ba41003252f101801d7b067a3b4ccab80e936da6462f7ead1a40c1eb941d90606090a251f35b634e487b7160e01b895260118252602489fd5b865163f6c16f2960e01b8152fd5b9091503d808b833e6102198183610784565b810160a0828203126102f757815167ffffffffffffffff908181116102f357830182601f820112156102f35780519182116102e0578b519060209361026785601f19601f8701160184610784565b8383528484830101116102dc57918d918d9383905b8382106102bd575094826102a2949282946102a998116102b1575b5050505084016107bc565b92016107bc565b509038610161565b0101528d813880610297565b9294508580929450818401015182828601015201918e928e949261027c565b8d80fd5b634e487b7160e01b8d526041865260248dfd5b8c80fd5b8a80fd5b89513d8c823e3d90fd5b600080fd5b8280fd5b5050346100af57816003193601126100af57905490516001600160a01b039091168152602090f35b5050346100af57816003193601126100af5760035490516001600160a01b039091168152602090f35b9190503461030a578060031936011261030a578060a093833581528360205281812060243582526020522091825492600181015492600282015491600381015493600180891b0391015416938151958652602086015284015260608301526080820152f35b90508234610764576080366003190112610764576001600160a01b03908235828116919082900361076457602480359184831680930361076457604435956064359486600254163303610755578783526020968288528984208785528852898420968a51906370c264df60e11b8252898286818b5afa91821561063f578692610726575b508b51908a8201928c84528d8301526060820152606081526080810167ffffffffffffffff92828210848311176107145781898f8e938380925286519020886001541690631620909560e01b835260848801525afa91821561067c579184918c8b948a936106d9575b50505016036106c9578a516382b2ed1360e01b81528481018490529689888881845afa97881561063f578698610696575b5064e8d4a510006104f760038b01548a6107d0565b04988915610686578501548c51631b20a87760e31b8152908b9082908890829088165afa90811561067c57879161064d575b50610537612710918b6107d0565b049a813b1561064957869291606484928f519586938492634f752fb360e11b84528b840152898d8401528d60448401525af1801561063f57908a94939291610611575b5050906044859392845416918c51948593849263a9059cbb60e01b8452888401528d8a8401525af18015610607576105d4575b508484106105c45750505084519384520390820152f35b634e487b7160e01b825260119052fd5b8681813d8311610600575b6105e98183610784565b8101031261030a5751801515036100af57886105ad565b503d6105df565b89513d85823e3d90fd5b90809295969394501161062d578a52929187919060448c61057a565b634e487b7160e01b8252604185528582fd5b8c513d88823e3d90fd5b8680fd5b90508a81813d8311610675575b6106648183610784565b810103126106495751610537610529565b503d61065a565b8d513d89823e3d90fd5b8c51636a2f23b760e01b81528690fd5b9097508981813d83116106c2575b6106ae8183610784565b810103126106be5751968c6104e2565b8580fd5b503d6106a4565b8a516374da7ab160e01b81528490fd5b925092509250813d831161070d575b6106f28185610784565b810103126106be578261070589926107bc565b8e8c816104b1565b503d6106e8565b634e487b7160e01b8852604187528888fd5b9091508981813d831161074e575b61073e8183610784565b810103126106be5751908c610448565b503d610734565b5087516321d0c2eb60e11b8152fd5b80fd5b8490346100af57816003193601126100af578062278d0060209252f35b90601f8019910116810190811067ffffffffffffffff8211176107a657604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361030557565b80600019048211811515166107e3570290565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207fd78b6b17b5b2ad01361003dddebbe001c03cc2b58ac074d070452e33ac8ffa64736f6c634300080f0033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826321241dfe146107675750816326af4832146103c4578163304de8731461035f5781636f8a6e431461033657816370d39cff1461030e578163c773a2d1146100fa57508063e8adbf2f146100d2578063eced5526146100b35763f4ecd0911461008857600080fd5b346100af57816003193601126100af5760015490516001600160a01b039091168152602090f35b5080fd5b50346100af57816003193601126100af576020905164e8d4a510008152f35b50346100af57816003193601126100af5760025490516001600160a01b039091168152602090f35b90503461030a5760a036600319011261030a578035906024359060643590604435906084356001600160a01b038181169291839003610305578089602492600354168a51938480926315895f4760e31b82528c888301525afa9182156102fb578a92610207575b50339116036101f9578588528060205286882085895260205286882083815562278d001942116101e6574262278d00016002820155600381018590550180546001600160a01b031916909117905584519283526020830152818401527fd303ba41003252f101801d7b067a3b4ccab80e936da6462f7ead1a40c1eb941d90606090a251f35b634e487b7160e01b895260118252602489fd5b865163f6c16f2960e01b8152fd5b9091503d808b833e6102198183610784565b810160a0828203126102f757815167ffffffffffffffff908181116102f357830182601f820112156102f35780519182116102e0578b519060209361026785601f19601f8701160184610784565b8383528484830101116102dc57918d918d9383905b8382106102bd575094826102a2949282946102a998116102b1575b5050505084016107bc565b92016107bc565b509038610161565b0101528d813880610297565b9294508580929450818401015182828601015201918e928e949261027c565b8d80fd5b634e487b7160e01b8d526041865260248dfd5b8c80fd5b8a80fd5b89513d8c823e3d90fd5b600080fd5b8280fd5b5050346100af57816003193601126100af57905490516001600160a01b039091168152602090f35b5050346100af57816003193601126100af5760035490516001600160a01b039091168152602090f35b9190503461030a578060031936011261030a578060a093833581528360205281812060243582526020522091825492600181015492600282015491600381015493600180891b0391015416938151958652602086015284015260608301526080820152f35b90508234610764576080366003190112610764576001600160a01b03908235828116919082900361076457602480359184831680930361076457604435956064359486600254163303610755578783526020968288528984208785528852898420968a51906370c264df60e11b8252898286818b5afa91821561063f578692610726575b508b51908a8201928c84528d8301526060820152606081526080810167ffffffffffffffff92828210848311176107145781898f8e938380925286519020886001541690631620909560e01b835260848801525afa91821561067c579184918c8b948a936106d9575b50505016036106c9578a516382b2ed1360e01b81528481018490529689888881845afa97881561063f578698610696575b5064e8d4a510006104f760038b01548a6107d0565b04988915610686578501548c51631b20a87760e31b8152908b9082908890829088165afa90811561067c57879161064d575b50610537612710918b6107d0565b049a813b1561064957869291606484928f519586938492634f752fb360e11b84528b840152898d8401528d60448401525af1801561063f57908a94939291610611575b5050906044859392845416918c51948593849263a9059cbb60e01b8452888401528d8a8401525af18015610607576105d4575b508484106105c45750505084519384520390820152f35b634e487b7160e01b825260119052fd5b8681813d8311610600575b6105e98183610784565b8101031261030a5751801515036100af57886105ad565b503d6105df565b89513d85823e3d90fd5b90809295969394501161062d578a52929187919060448c61057a565b634e487b7160e01b8252604185528582fd5b8c513d88823e3d90fd5b8680fd5b90508a81813d8311610675575b6106648183610784565b810103126106495751610537610529565b503d61065a565b8d513d89823e3d90fd5b8c51636a2f23b760e01b81528690fd5b9097508981813d83116106c2575b6106ae8183610784565b810103126106be5751968c6104e2565b8580fd5b503d6106a4565b8a516374da7ab160e01b81528490fd5b925092509250813d831161070d575b6106f28185610784565b810103126106be578261070589926107bc565b8e8c816104b1565b503d6106e8565b634e487b7160e01b8852604187528888fd5b9091508981813d831161074e575b61073e8183610784565b810103126106be5751908c610448565b503d610734565b5087516321d0c2eb60e11b8152fd5b80fd5b8490346100af57816003193601126100af578062278d0060209252f35b90601f8019910116810190811067ffffffffffffffff8211176107a657604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361030557565b80600019048211811515166107e3570290565b634e487b7160e01b600052601160045260246000fdfea26469706673582212207fd78b6b17b5b2ad01361003dddebbe001c03cc2b58ac074d070452e33ac8ffa64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,address,uint256,uint256)": {
        "params": {
          "_crToken": "Cover right token address",
          "_generation": "Generation of priority pool (started at 1)",
          "_poolId": "Pool Id",
          "_user": "User address"
        },
        "returns": {
          "claimed": "              The actual amount transferred to the user",
          "newGenerationCRAmount": "New generation crToken minted to the user"
        }
      },
      "newPayout(uint256,uint256,uint256,uint256,address)": {
        "params": {
          "_amount": "Total amount to be claimed",
          "_generation": "Generation of priority pool (start at 1)",
          "_poolAddress": "Address of priority pool",
          "_poolId": "Pool Id",
          "_ratio": "Payout ratio of this payout (users can only use part of their crTokens to claim)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,address,uint256,uint256)": {
        "notice": "Claim payout for a user         Only callable from policy center         Need provide certain crToken address and generation"
      },
      "newPayout(uint256,uint256,uint256,uint256,address)": {
        "notice": "New payout comes in         Only callable from one of the priority pools         After the pool's report is passed and executed,         part of the assets will be moved to this pool."
      }
    },
    "notice": "Payout Pool         Every time there is a report passed, some assets will be moved to this pool         It is stored as a Payout struct         - amount       Total amount of this payout         - remaining    Remaining amount         - endTimestamp After this timestamp, no more claims         - ratio        Max ratio of a user's crToken",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16317,
        "contract": "src/pools/PayoutPool.sol:PayoutPool",
        "label": "shield",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16319,
        "contract": "src/pools/PayoutPool.sol:PayoutPool",
        "label": "crFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16321,
        "contract": "src/pools/PayoutPool.sol:PayoutPool",
        "label": "policyCenter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 16323,
        "contract": "src/pools/PayoutPool.sol:PayoutPool",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 16341,
        "contract": "src/pools/PayoutPool.sol:PayoutPool",
        "label": "payouts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Payout)16334_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Payout)16334_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct PayoutPool.Payout))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Payout)16334_storage)"
      },
      "t_mapping(t_uint256,t_struct(Payout)16334_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PayoutPool.Payout)",
        "numberOfBytes": "32",
        "value": "t_struct(Payout)16334_storage"
      },
      "t_struct(Payout)16334_storage": {
        "encoding": "inplace",
        "label": "struct PayoutPool.Payout",
        "members": [
          {
            "astId": 16325,
            "contract": "src/pools/PayoutPool.sol:PayoutPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16327,
            "contract": "src/pools/PayoutPool.sol:PayoutPool",
            "label": "remaining",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16329,
            "contract": "src/pools/PayoutPool.sol:PayoutPool",
            "label": "endTiemstamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16331,
            "contract": "src/pools/PayoutPool.sol:PayoutPool",
            "label": "ratio",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16333,
            "contract": "src/pools/PayoutPool.sol:PayoutPool",
            "label": "priorityPool",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}