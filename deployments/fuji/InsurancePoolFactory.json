{
  "address": "0xB939B76c07B46B2150BccEd4E165AD2cD43381D5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reinsurancePool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "policyPricePerShield",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_protocolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceRatio",
          "type": "uint256"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "deregisterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolAddressList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "protocolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "policyPricePerShield",
              "type": "uint256"
            }
          ],
          "internalType": "struct InsurancePoolFactory.PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfoById",
      "outputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "policyPricePerShield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinsurancePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        }
      ],
      "name": "setPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reinsurancePool",
          "type": "address"
        }
      ],
      "name": "setReinsurancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shield",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x45e6782ba132f6a54b7ecddfbf01879f6ceb0eb7399b4524663a61e93b0b490f",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xB939B76c07B46B2150BccEd4E165AD2cD43381D5",
    "transactionIndex": 1,
    "gasUsed": "3232803",
    "logsBloom": "0x
    "blockHash": "0xbc0ce6482cb1d15bbd02d045418b29598ea118bb4e46e7aeeba5cdbebec5ee83",
    "transactionHash": "0x45e6782ba132f6a54b7ecddfbf01879f6ceb0eb7399b4524663a61e93b0b490f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12299572,
        "transactionHash": "0x45e6782ba132f6a54b7ecddfbf01879f6ceb0eb7399b4524663a61e93b0b490f",
        "address": "0xB939B76c07B46B2150BccEd4E165AD2cD43381D5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbc0ce6482cb1d15bbd02d045418b29598ea118bb4e46e7aeeba5cdbebec5ee83"
      }
    ],
    "blockNumber": 12299572,
    "cumulativeGasUsed": "3313433",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4C5fAB0Da4ecB345eb5C52B697970A9236A608a8",
    "0xF3a9BADD378218345FDF9a1bf239f07416eEEc1d",
    "0x4D16BA86A3b4a6aE9EE124bA48BbaD711B26DDfc",
    "0x273d94d4A7650FB55467232De554dC9336011436"
  ],
  "numDeployments": 1,
  "solcInputHash": "d095d9d167592e42a1dfc04c7269338b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reinsurancePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"policyPricePerShield\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_protocolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceRatio\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"deregisterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"policyPricePerShield\",\"type\":\"uint256\"}],\"internalType\":\"struct InsurancePoolFactory.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfoById\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"policyPricePerShield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"}],\"name\":\"setPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reinsurancePool\",\"type\":\"address\"}],\"name\":\"setReinsurancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shield\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com)\",\"kind\":\"dev\",\"methods\":{\"deployPool(string,address,uint256,uint256)\":{\"params\":{\"_maxCapacity\":\"Maximum capacity of the pool\",\"_name\":\"Name of the protocol\",\"_priceRatio\":\"Initial policy price per shield\",\"_protocolToken\":\"Address of the token used for the protocol\"},\"returns\":{\"_0\":\"address Address of the new insurance pool\"}},\"getPoolAddressList()\":{\"returns\":{\"_0\":\"List of pool addresses\"}},\"getPoolInfo(uint256)\":{\"params\":{\"_poolId\":\"Pool id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Insurance Pool Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployPool(string,address,uint256,uint256)\":{\"notice\":\"Creates a new insurance pool\"},\"getPoolAddressList()\":{\"notice\":\"Get the pool address list\"},\"getPoolInfo(uint256)\":{\"notice\":\"Get the pool information by pool id\"}},\"notice\":\"This is the factory contract for deploying new insurance pools         Each pool represents a project that has joined Degis Smart Contract Protection\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/InsurancePoolFactory.sol\":\"InsurancePoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363539383833343930393537\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd7d3e7686d4ed743649de993d276044d90c8fb939f9f04a51bf65175c3d40f6f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IVeDEG.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\n\\nabstract contract ExternalTokenDependencies {\\n    uint256 public constant SCALE = 1e12;\\n\\n    address public immutable deg;\\n    address public immutable veDeg;\\n    address public immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = _deg;\\n        veDeg = _veDeg;\\n        shield = _shield;\\n    }\\n}\\n\",\"keccak256\":\"0xf33ecf76a155608f5d5aec270e42feadd8e8960374a4c25fa27288c79a1fcf9a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x7fc061fdc39f52163a849ab85a3fc59b148e16f6eeb72dc6a3e7dd393d3ab5b3\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPolicyCenter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPolicyCenter {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event Payout(uint256 _amount, address _address);\\n    event Reward(uint256 _amount, address _address);\\n\\n    function approvePoolToken(address _token) external;\\n    function buyCoverage(uint256 _poolId, uint256 _pay, uint256 _coverAmount, uint256 _length) external;\\n    function calculatePayout(uint256 _poolId, address _insured) view external returns (uint256);\\n    function calculateReward(uint256 _poolId, address _provider) view external returns (uint256);\\n    function claimPayout(uint256 _poolId) external;\\n    function claimReward(uint256 _poolId) external;\\n    function coverages(uint256, address) view external returns (uint256 amount, uint256 buyDate, uint256 length);\\n    function deg() view external returns (address);\\n    function exchange() view external returns (address);\\n    function executor() view external returns (address);\\n    function fundsByPoolId(uint256) view external returns (uint256);\\n\\n    function getInsurancePoolById(uint256 _poolId) view external returns (address);\\n    function getPoolInfo(uint256 _poolId) external view returns (bool, uint256, uint256, uint256 ,uint256, uint256, uint256);\\n    function getPremiumSplits() view external returns (uint256, uint256);\\n    function incidentReport() view external returns (address);\\n    function insurancePoolFactory() view external returns (address);\\n    function insurancePools(uint256) view external returns (address);\\n\\n    function liquidities(uint256, address) view external returns (uint256 amount, uint256 userDebt, uint256 lastClaim);\\n    function liquidityByPoolId(uint256) view external returns (uint256);\\n    function onboardProposal() view external returns (address);\\n    function owner() view external returns (address);\\n    function policyCenter() view external returns (address);\\n    function premiumSplits(uint256) view external returns (uint256);\\n    function provideLiquidity(uint256 _poolId, uint256 _amount) external;\\n    function reinsurancePool() view external returns (address);\\n    function removeLiquidity(uint256 _poolId, uint256 _amount) external;\\n    function renounceOwnership() external;\\n    function rewardTreasuryToReporter(address _reporter) external;\\n    \\n    function setExchange(address _exchange) external;\\n    function setExecutor(address _executor) external;\\n    function setIncidentReport(address _incidentReport) external;\\n    function setInsurancePoolFactory(address _insurancePoolFactory) external;\\n    function setOnboardProposal(address _onboardProposal) external;\\n    function setPolicyCenter(address _policyCenter) external;\\n    function setPremiumSplit(uint256 _insurance, uint256 _reinsurance) external;\\n    function setReinsurancePool(address _reinsurancePool) external;\\n    \\n    function shield() view external returns (address);\\n    function storePoolInformation(address _pool, address _token, uint256 _poolId) external;\\n    function tokenByPoolId(uint256) view external returns (address);\\n    function totalRewardsByPoolId(uint256) view external returns (uint256);\\n    function transferOwnership(address newOwner) external;\\n    function treasury() view external returns (uint256);\\n    function veDeg() view external returns (address);\\n}\\n\",\"keccak256\":\"0x6d2fde19584ddc992ab6d86a7300a928c49d2cbea390228e5c6fa762fc57a2cf\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is IERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n    \\n    function users(uint256 _pool, address _user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x52de2840d0927eb6d241ec6bead7e88fcf1c30c4fbe4fa6d5efc77159b6290c1\",\"license\":\"MIT\"},\"src/pools/InsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/security/Pausable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/InsurancePoolDependencies.sol\\\";\\n\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/**\\n * @title Insurance Pool Factory\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the factory contract for deploying new insurance pools\\n *         Each pool represents a project that has joined Degis Smart Contract Protection\\n */\\ncontract InsurancePool is\\n    ERC20,\\n    InsurancePoolDependencies,\\n    OwnableWithoutContext,\\n    Pausable\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Time to distribute premium payments to liquidity providers\\n    uint256 public constant DISTRIBUTION_PERIOD = 30;\\n\\n    // Time users have to claim payout when pool is liquidated\\n    uint256 public constant CLAIM_PERIOD = 90;\\n\\n    uint256 public constant MIN_COVER_AMOUNT = 1e18;\\n\\n    // Max time length in days of granted protection\\n    uint256 public immutable maxLength;\\n\\n    // Min time length in days\\n    uint256 public immutable minLength;\\n\\n    uint256 public immutable premiumRatio;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Admin address, set to be the owner of factory\\n    address public admin;\\n\\n    // Address of insured token\\n    address public insuredToken;\\n\\n    // If the pool has been liquidated\\n    bool public liquidated;\\n\\n    // Max amount of bought protection in shield\\n    uint256 public maxCapacity;\\n\\n    // Timestamp of pool creation\\n    uint256 public startTime;\\n\\n    // Accumulated reward per lp token\\n    uint256 public accumulatedRewardPerShare;\\n\\n    uint256 public lastRewardTimestamp;\\n\\n    uint256 public emissionEndTime;\\n\\n    uint256 public emissionRate;\\n\\n    uint256 public endLiquidationDate;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event LiquidityProvision(uint256 amount, address sender);\\n    event LiquidityRemoved(uint256 amount, address sender);\\n    event Liquidation(uint256 amount, uint256 endDate);\\n    event EmissionRateUpdated(\\n        uint256 newEmissionRate,\\n        uint256 newEmissionEndTime\\n    );\\n    event AccRewardsPerShareUpdated(uint256 amount);\\n    event LiquidationEnded(uint256 timestamp);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _premiumRatio,\\n        address _admin\\n    ) ERC20(_name, _symbol) OwnableWithoutContext(_admin) {\\n        // token address insured by pool\\n        insuredToken = _protocolToken;\\n        maxCapacity = _maxCapacity;\\n        startTime = block.timestamp;\\n        premiumRatio = _premiumRatio;\\n\\n        maxLength = 90;\\n        minLength = 7;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // allows executor contract\\n    modifier onlyExecutor() {\\n        require(msg.sender == executor, \\\"Only executor can call this function\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice returns cost to buy coverage for a given period of time and amount of tokens\\n     *\\n     * @param _amount Amount being covered\\n     * @param _length Coverage length in days\\n     */\\n    function coveragePrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(_amount >= MIN_COVER_AMOUNT, \\\"Under minimum cover amount\\\");\\n        require(_withinLength(_length), \\\"Wrong cover length\\\");\\n\\n        // price in bps per year * amount of tokens to receive when pool is liquidated\\n        // * lenght of coverage in days / year and 100 to get bps to percentage\\n        return (premiumRatio * _amount * _length) / 3650000;\\n    }\\n\\n    function _withinLength(uint256 _length) internal view returns (bool) {\\n        return _length >= minLength && _length <= maxLength;\\n    }\\n\\n    /**\\n     * @notice Calculate your reward\\n     *\\n     * @param _amount   Amount in provided liquidity\\n     * @param _userDebt Amount of debt the user\\n     */\\n    function calculateReward(uint256 _amount, uint256 _userDebt)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (totalSupply() == 0) {\\n            return 0;\\n        }\\n        uint256 timePassed = block.timestamp - lastRewardTimestamp;\\n        uint256 rewards = timePassed * emissionRate;\\n\\n        uint256 acc = accumulatedRewardPerShare + rewards / totalSupply();\\n        uint256 reward = (_amount * acc) - _userDebt;\\n        return reward;\\n    }\\n\\n    /**\\n     * @notice returns pool information\\n     */\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            paused(),\\n            accumulatedRewardPerShare,\\n            lastRewardTimestamp,\\n            emissionEndTime,\\n            emissionRate,\\n            maxCapacity\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Pause this pool\\n     *\\n     * @param _paused True to pause, false to unpause\\n     */\\n    function pauseInsurancePool(bool _paused) external {\\n        require(\\n            (msg.sender == owner()) || (msg.sender == incidentReport),\\n            \\\"Only owner or Incident Report can call this function\\\"\\n        );\\n        if (_paused) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function setMaxCapacity(uint256 _maxCapacity) external onlyOwner {\\n        maxCapacity = _maxCapacity;\\n    }\\n\\n    function setExecutor(address _executor) external onlyOwner {\\n        _setExecutor(_executor);\\n    }\\n\\n    function setIncidentReport(address _incidentReport) external onlyOwner {\\n        _setIncidentReport(_incidentReport);\\n    }\\n\\n    function setPolicyCenter(address _policyCenter) external onlyOwner {\\n        _setPolicyCenter(_policyCenter);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Provide liquidity from liquidity pool. Only callable through policyCenter\\n     *\\n     * @param _amount   Amount of liquidity to provide\\n     * @param _provider Liquidity provider adress\\n     */\\n    function provideLiquidity(uint256 _amount, address _provider)\\n        external\\n        whenNotPaused\\n    {\\n        require(!liquidated, \\\"cannot provide new liquidity\\\");\\n        require(_amount > 0, \\\"amount should be greater than 0\\\");\\n        require(\\n            msg.sender == policyCenter,\\n            \\\"cannot provide liquidity directly to insurance pool\\\"\\n        );\\n        _mint(_provider, _amount);\\n        emit LiquidityProvision(_amount, _provider);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from insurance pool. Only callable through policyCenter\\n     *\\n     * @param _amount   Amount of liquidity to remove\\n     * @param _provider Provider address\\n     */\\n    function removeLiquidity(uint256 _amount, address _provider)\\n        external\\n        whenNotPaused\\n    {\\n        require(\\n            !liquidated,\\n            \\\"Pool has been liquidated, cannot remove liquidity\\\"\\n        );\\n        require(\\n            msg.sender == policyCenter,\\n            \\\"cannot remove liquidity directly from insurance pool\\\"\\n        );\\n\\n        require(_amount > 0, \\\"amount should be greater than 0\\\");\\n        _burn(_provider, _amount);\\n        emit LiquidityRemoved(_amount, _provider);\\n    }\\n\\n    /**\\n    @notice Called when liqudity is provided, removed or coverage is bought.\\n    updates all state variables to reflect current reward emission.\\n    */\\n    function updateRewards() public {\\n        require(\\n            msg.sender == policyCenter,\\n            \\\"Only pollicyCenter can update rewards\\\"\\n        );\\n        _updateRewards();\\n    }\\n\\n    /**\\n     * @notice Update emission rate based on new premium comission to liquidity providers\\n     *\\n     * @param _premium premium given to liquidity providers\\n     */\\n    function updateEmissionRate(uint256 _premium) public {\\n        require(\\n            msg.sender == policyCenter,\\n            \\\"Only pollicyCenter can update emission rate\\\"\\n        );\\n        _updateEmissionRate(_premium);\\n    }\\n\\n    /**\\n     * @notice Sets this insurance pool status to liquidated\\n     *         Only callable by executor\\n     *         Only after the report has passed the voting\\n     */\\n    function liquidatePool() external onlyExecutor {\\n        // changes the status of the insurance pool to liquidated and allows payout claims\\n        _setLiquidationStatus(true);\\n\\n        // when liquidated, totalSupply does not change. liquidity providers keep LP tokens.\\n        // LP tokens represent their share of remaining liquidity after payout is done.\\n        uint256 amount = totalSupply();\\n\\n        // Set end liquidation date\\n        // Users will have CLAIM_PERIOD days to claim payout.\\n        endLiquidationDate = block.timestamp + CLAIM_PERIOD * 1 days;\\n\\n        // emit event to notify users that pool has been liquidated.\\n        emit Liquidation(amount, endLiquidationDate);\\n    }\\n\\n    /**\\n     * @notice End the liquidation period\\n     */\\n    function verifyLiquidationEnded() external {\\n        require(liquidated, \\\"Pool has not been liquidated\\\");\\n        require(\\n            block.timestamp > endLiquidationDate,\\n            \\\"Pool has not ended liquidation\\\"\\n        );\\n\\n        // liquidation has ended. payout claims cannot be made.\\n        _setLiquidationStatus(false);\\n\\n        emit LiquidationEnded(block.timestamp);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Updates emission rate based on new incoming premium\\n     *\\n     * @param _premium incoming new premium\\n     */\\n    function _updateEmissionRate(uint256 _premium) internal {\\n        // Update current reward taking into account new emission rate\\n        _updateRewards();\\n        // Get time to complete current pool of tokens emission to liquidity providers\\n        uint256 timeToFinishEmission = emissionEndTime > block.timestamp\\n            ? emissionEndTime - block.timestamp\\n            : 0;\\n\\n        console.log(\\\"Timetofinish emission\\\", timeToFinishEmission);\\n        console.log(\\\"premium comes in\\\", _premium);\\n\\n        // Calculate new emission rate by adding new premium and redistributing previous emission\\n        // Throughout the time it takes to complete emission.\\n        if (timeToFinishEmission > 0) {\\n            emissionRate =\\n                ((emissionRate * timeToFinishEmission) + _premium) /\\n                DISTRIBUTION_PERIOD;\\n            // Update emission rate\\n        } else {\\n            // Update emission rate\\n            emissionRate = _premium / DISTRIBUTION_PERIOD;\\n        }\\n\\n        // update emission rate and emission ends\\n        emissionEndTime = block.timestamp + (DISTRIBUTION_PERIOD * 1 days);\\n\\n        emit EmissionRateUpdated(emissionRate, emissionEndTime);\\n    }\\n\\n    /**\\n     * @notice Update rewards\\n     */\\n    function _updateRewards() internal {\\n        if (totalSupply() == 0 || emissionEndTime == 0) {\\n            // if totalSupply is 0, no rewards can be paid\\n            // update last time rewards were claimed\\n            lastRewardTimestamp = block.timestamp;\\n        } else {\\n            // if no coverages have been bought in over 30 days,\\n            // discount time passed since the time that emission ends.\\n            console.log(\\\"emmission end\\\", emissionEndTime);\\n            uint256 claimTimestamp = emissionEndTime < block.timestamp\\n                ? emissionEndTime\\n                : block.timestamp;\\n            // Calculate difference between claim time and last time rewards were claimed\\n            uint256 timeSinceLastReward = claimTimestamp - lastRewardTimestamp;\\n\\n            console.log(\\\"time passed\\\", timeSinceLastReward);\\n            console.log(\\\"claimTime\\\", claimTimestamp);\\n            console.log(\\\"lastRewardTimestamp\\\", lastRewardTimestamp);\\n\\n            // Calculate new reward\\n            uint256 rewards = (timeSinceLastReward * emissionRate) / 1 days;\\n\\n            console.log(\\\"emission rate:\\\", emissionRate);\\n            console.log(\\\"new rewards\\\", rewards);\\n\\n            // Update accumulated rewards given to each pool share\\n            // accumulated\\n            accumulatedRewardPerShare += rewards / totalSupply();\\n            lastRewardTimestamp = block.timestamp;\\n\\n            // emit event to notify users that rewards have been updated\\n            emit AccRewardsPerShareUpdated(accumulatedRewardPerShare);\\n        }\\n    }\\n\\n    function _setLiquidationStatus(bool _liquidated) internal {\\n        liquidated = _liquidated;\\n    }\\n}\\n\",\"keccak256\":\"0x104fa4f31e98c024773b1fa9da4a855ac50587e2b67573433add864e44fe9818\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/InsurancePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./interfaces/InsurancePoolFactoryDependencies.sol\\\";\\n\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"../interfaces/ExternalTokenDependencies.sol\\\";\\n\\nimport \\\"./InsurancePool.sol\\\";\\n\\n/**\\n * @title Insurance Pool Factory\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com)\\n *\\n * @notice This is the factory contract for deploying new insurance pools\\n *         Each pool represents a project that has joined Degis Smart Contract Protection\\n */\\ncontract InsurancePoolFactory is\\n    InsurancePoolFactoryDependencies,\\n    ExternalTokenDependencies,\\n    OwnableWithoutContext\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    struct PoolInfo {\\n        string protocolName;\\n        address poolAddress;\\n        address protocolToken;\\n        uint256 maxCapacity;\\n        uint256 policyPricePerShield;\\n    }\\n    // poolId => Pool Information\\n    mapping(uint256 => PoolInfo) public poolInfoById;\\n\\n    uint256 public poolCounter;\\n    uint256 public maxCapacity;\\n\\n    // Record whether a protocol token or pool address has been registered\\n    mapping(address => bool) public poolRegistered;\\n    mapping(address => bool) public tokenRegistered;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event PoolCreated(\\n        uint256 poolId,\\n        address poolAddress,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield,\\n        address _reinsurancePool\\n    )\\n        ExternalTokenDependencies(_deg, _veDeg, _shield)\\n        OwnableWithoutContext(msg.sender)\\n    {\\n        // stores addresses of the reinsurance pool and degis token\\n        reinsurancePool = _reinsurancePool;\\n\\n        // stores information about reinsurance pool, first pool recorded\\n        poolInfoById[poolCounter] = PoolInfo(\\n            \\\"ReinsurancePool\\\",\\n            _reinsurancePool,\\n            _shield,\\n            100000e18,\\n            1\\n        );\\n\\n        // Register reinsurance pool and degis token\\n        poolRegistered[_reinsurancePool] = true;\\n        tokenRegistered[_shield] = true;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the pool address list\\n     *\\n     * @return List of pool addresses\\n     */\\n    function getPoolAddressList() external view returns (address[] memory) {\\n        uint256 poolAmount = poolCounter + 1;\\n\\n        address[] memory list = new address[](poolAmount);\\n\\n        for (uint256 i; i < poolAmount; ) {\\n            list[i] = poolInfoById[i].poolAddress;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @notice Get the pool information by pool id\\n     *\\n     * @param _poolId Pool id\\n     */\\n    function getPoolInfo(uint256 _poolId)\\n        public\\n        view\\n        returns (PoolInfo memory)\\n    {\\n        return poolInfoById[_poolId];\\n    }\\n\\n    function setPolicyCenter(address _policyCenter) external onlyOwner {\\n        _setPolicyCenter(_policyCenter);\\n    }\\n\\n    function setReinsurancePool(address _reinsurancePool) external onlyOwner {\\n        _setReinsurancePool(_reinsurancePool);\\n    }\\n\\n    function setExecutor(address _executor) external onlyOwner {\\n        _setExecutor(_executor);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Creates a new insurance pool\\n     *\\n     * @param _name                 Name of the protocol\\n     * @param _protocolToken        Address of the token used for the protocol\\n     * @param _maxCapacity          Maximum capacity of the pool\\n     * @param _priceRatio  Initial policy price per shield\\n     *\\n     * @return address Address of the new insurance pool\\n     */\\n    function deployPool(\\n        string calldata _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _priceRatio\\n    ) public returns (address) {\\n        require(\\n            msg.sender == owner() || msg.sender == executor,\\n            \\\"Only owner or executor contract can create a new insurance pool\\\"\\n        );\\n        require(!tokenRegistered[_protocolToken], \\\"Already registered\\\");\\n\\n        bytes32 salt = keccak256(abi.encodePacked(_name));\\n\\n        bytes memory bytecode = _getInsurancePoolBytecode(\\n            _protocolToken,\\n            _maxCapacity,\\n            _priceRatio,\\n            _name,\\n            _name\\n        );\\n\\n        // Finish deployment and get the address\\n        address newPoolAddress = _deploy(bytecode, salt);\\n\\n        tokenRegistered[_protocolToken] = true;\\n        poolRegistered[newPoolAddress] = true;\\n\\n        uint256 currentPoolId = ++poolCounter;\\n\\n        // Store pool information in Policy Center\\n        IPolicyCenter(policyCenter).storePoolInformation(\\n            newPoolAddress,\\n            _protocolToken,\\n            currentPoolId\\n        );\\n        poolInfoById[currentPoolId] = PoolInfo(\\n            _name,\\n            newPoolAddress,\\n            _protocolToken,\\n            _maxCapacity,\\n            _priceRatio\\n        );\\n\\n        emit PoolCreated(\\n            currentPoolId,\\n            newPoolAddress,\\n            _name,\\n            _protocolToken,\\n            _maxCapacity,\\n            _priceRatio\\n        );\\n\\n        return newPoolAddress;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get bytecode for insurance pool creation according to parameters\\n     *\\n     * @param _protocolToken Address of the protocol token to insure\\n     * @param _maxCapacity   Max coverage capacity\\n     * @param _policyPrice   Policy price\\n     * @param _tokenName     Name for the new pool\\n     * @param _symbol        Symbol for new pool\\n     *\\n     * @return bytecode Creation bytecode\\n     */\\n    function _getInsurancePoolBytecode(\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPrice,\\n        string memory _tokenName,\\n        string memory _symbol\\n    ) internal view virtual returns (bytes memory) {\\n        bytes memory bytecode = type(InsurancePool).creationCode;\\n\\n        // Encodepacked the parameters\\n        // The minter is set to be the policyCore address\\n        return\\n            abi.encodePacked(\\n                bytecode,\\n                abi.encode(\\n                    _protocolToken,\\n                    _maxCapacity,\\n                    _tokenName,\\n                    _symbol,\\n                    _policyPrice,\\n                    owner()\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Deploy function with create2\\n     *\\n     * @param _code Byte code of the contract (creation code) (including constructor parameters if any)\\n     * @param _salt Salt for the deployment\\n     *\\n     * @return addr The deployed contract address\\n     */\\n    function _deploy(bytes memory _code, bytes32 _salt)\\n        internal\\n        returns (address addr)\\n    {\\n        assembly {\\n            addr := create2(0, add(_code, 0x20), mload(_code), _salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    function deregisterAddress(address _tokenAddress) external {\\n        require(\\n            msg.sender == owner() || msg.sender == executor,\\n            \\\"Only owner or executor contract can deregister an address\\\"\\n        );\\n        require(tokenRegistered[_tokenAddress], \\\"Address is not registered\\\");\\n        tokenRegistered[_tokenAddress] = false;\\n    }\\n}\\n\",\"keccak256\":\"0x94f655a5edcf0e60c97c753439ac9cd926d4b6bbf45c6988f1cedc6b6375383e\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/interfaces/InsurancePoolDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract InsurancePoolDependencies {\\n    address public executor;\\n    address public incidentReport;\\n    address public policyCenter;\\n\\n    function _setExecutor(address _executor) internal virtual {\\n        executor = _executor;\\n    }\\n\\n\\n    function _setIncidentReport(address _incidentReport) internal virtual {\\n        incidentReport = _incidentReport;\\n    }\\n\\n    function _setPolicyCenter(address _policyCenter) internal virtual {\\n        policyCenter = _policyCenter;\\n    }\\n\\n  \\n}\\n\",\"keccak256\":\"0x58cf1eecf5e0f5db89e6aa362c2b040921f956d2c83bf378260295211dd0a730\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/interfaces/InsurancePoolFactoryDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPolicyCenter.sol\\\";\\n\\nabstract contract InsurancePoolFactoryDependencies {\\n    address public reinsurancePool;\\n    address public policyCenter;\\n    address public executor;\\n\\n    function _setExecutor(address _executor) internal virtual {\\n        executor = _executor;\\n    }\\n\\n    function _setReinsurancePool(address _reinsurancePool) internal virtual {\\n        reinsurancePool = _reinsurancePool;\\n    }\\n\\n    function _setPolicyCenter(address _policyCenter) internal virtual {\\n        policyCenter = _policyCenter;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x07e3f477c0c7245733f93d1da9f34d8281fb65b84768c74ddbec49a51be393d2\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _transferOwnership(_initOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0cf3a1968613bb036219db76df7643df085878ed42beb669c9803037c0396c75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200390a3803806200390a833981016040819052620000349162000295565b6001600160a01b0380851660805280841660a052821660c05233620000598162000180565b50600080546001600160a01b0319166001600160a01b0383811691821783556040805160e081018252600f60a082019081526e14995a5b9cdd5c985b98d9541bdbdb608a1b60c083015281526020808201949094529186168282015269152d02c7e14af6800000606083015260016080830152600554845260048352909220825180519192620000ef92849290910190620001d2565b50602082810151600183810180546001600160a01b03199081166001600160a01b03948516179091556040808701516002870180549093169085161790915560608601516003860155608090950151600490940193909355938416600090815260078252838120805460ff1990811685179091559590941684526008905291208054909216179055506200032e9050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001e090620002f2565b90600052602060002090601f0160209004810192826200020457600085556200024f565b82601f106200021f57805160ff19168380011785556200024f565b828001600101855582156200024f579182015b828111156200024f57825182559160200191906001019062000232565b506200025d92915062000261565b5090565b5b808211156200025d576000815560010162000262565b80516001600160a01b03811681146200029057600080fd5b919050565b60008060008060808587031215620002ac57600080fd5b620002b78562000278565b9350620002c76020860162000278565b9250620002d76040860162000278565b9150620002e76060860162000278565b905092959194509250565b600181811c908216806200030757607f821691505b6020821081036200032857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c0516135ac6200035e60003960006102a60152600061037c0152600061023501526135ac6000f3fe60806040523480156200001157600080fd5b50600436106200015d5760003560e01c8063715018a611620000c7578063bb9febaf1162000086578063bb9febaf146200034b578063c34c08e51462000362578063c3a593b31462000376578063e8adbf2f146200039e578063eced552614620003b2578063f2fde38b14620003bf57600080fd5b8063715018a614620002c8578063746376ee14620002d25780638da5cb5b14620003095780639e3079cb146200031b578063a2e1ce62146200032557600080fd5b80632fbac6d711620001205780632fbac6d714620002025780634858b300146200022f5780635254076a146200025757806359b6a0c9146200026e5780636bdbd195146200028757806370d39cff14620002a057600080fd5b80630a2c433d14620001625780630acf58e4146200017b5780631c3c0ea814620001ae5780632dd57bb014620001c55780632f380b3514620001dc575b600080fd5b620001796200017336600462000efd565b620003d6565b005b620001926200018c36600462000f22565b62000401565b604051620001a595949392919062000f9d565b60405180910390f35b62000179620001bf36600462000efd565b620004ce565b62000179620001d636600462000efd565b620004f6565b620001f3620001ed36600462000f22565b6200051e565b604051620001a5919062000fdf565b60005462000216906001600160a01b031681565b6040516001600160a01b039091168152602001620001a5565b620002167f000000000000000000000000000000000000000000000000000000000000000081565b620001796200026836600462000efd565b62000650565b6200027860065481565b604051908152602001620001a5565b6200029162000777565b604051620001a591906200103f565b620002167f000000000000000000000000000000000000000000000000000000000000000081565b6200017962000842565b620002f8620002e336600462000efd565b60076020526000908152604090205460ff1681565b6040519015158152602001620001a5565b6003546001600160a01b031662000216565b6200027860055481565b620002f86200033636600462000efd565b60086020526000908152604090205460ff1681565b620002166200035c3660046200108e565b6200085a565b60025462000216906001600160a01b031681565b620002167f000000000000000000000000000000000000000000000000000000000000000081565b60015462000216906001600160a01b031681565b6200027864e8d4a5100081565b62000179620003d036600462000efd565b62000c3c565b620003e062000cb8565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b6004602052600090815260409020805481906200041e9062001128565b80601f01602080910402602001604051908101604052809291908181526020018280546200044c9062001128565b80156200049d5780601f1062000471576101008083540402835291602001916200049d565b820191906000526020600020905b8154815290600101906020018083116200047f57829003601f168201915b5050505060018301546002840154600385015460049095015493946001600160a01b03928316949290911692509085565b620004d862000cb8565b600280546001600160a01b0319166001600160a01b03831617905550565b6200050062000cb8565b600180546001600160a01b0319166001600160a01b03831617905550565b620005636040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b60008281526004602052604090819020815160a081019092528054829082906200058d9062001128565b80601f0160208091040260200160405190810160405280929190818152602001828054620005bb9062001128565b80156200060c5780601f10620005e0576101008083540402835291602001916200060c565b820191906000526020600020905b815481529060010190602001808311620005ee57829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820154606082015260049091015460809091015292915050565b6003546001600160a01b03163314806200067457506002546001600160a01b031633145b620006ec5760405162461bcd60e51b815260206004820152603960248201527f4f6e6c79206f776e6572206f72206578656375746f7220636f6e74726163742060448201527f63616e206465726567697374657220616e20616464726573730000000000000060648201526084015b60405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff16620007565760405162461bcd60e51b815260206004820152601960248201527f41646472657373206973206e6f742072656769737465726564000000000000006044820152606401620006e3565b6001600160a01b03166000908152600860205260409020805460ff19169055565b6060600060055460016200078c91906200117a565b905060008167ffffffffffffffff811115620007ac57620007ac62001195565b604051908082528060200260200182016040528015620007d6578160200160208202803683370190505b50905060005b828110156200083b5760008181526004602052604090206001015482516001600160a01b03909116908390839081106200081a576200081a620011ab565b6001600160a01b0390921660209283029190910190910152600101620007dc565b5092915050565b6200084c62000cb8565b62000858600062000d24565b565b60006200086f6003546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806200089957506002546001600160a01b031633145b6200090d5760405162461bcd60e51b815260206004820152603f60248201527f4f6e6c79206f776e6572206f72206578656375746f7220636f6e74726163742060448201527f63616e206372656174652061206e657720696e737572616e636520706f6f6c006064820152608401620006e3565b6001600160a01b03841660009081526008602052604090205460ff16156200096d5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401620006e3565b6000868660405160200162000984929190620011c1565b604051602081830303815290604052805190602001209050600062000a278686868b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062000d7692505050565b9050600062000a37828462000e0c565b6001600160a01b0388811660009081526008602090815260408083208054600160ff199182168117909255948616845260079092528220805490931617909155600580549293509091829062000a8d90620011d1565b9182905550600154604051630b6cccdd60e41b81526001600160a01b0385811660048301528b811660248301526044820184905292935091169063b6cccdd090606401600060405180830381600087803b15801562000aeb57600080fd5b505af115801562000b00573d6000803e3d6000fd5b505050506040518060a001604052808b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b03808616602080850191909152908c16604080850191909152606084018c905260809093018a90528482526004815291902082518051919262000b979284929091019062000e2c565b5060208201516001820180546001600160a01b03199081166001600160a01b0393841617909155604080850151600285018054909316931692909217905560608301516003830155608090920151600490910155517f6f92dd7fd4aaa286bc76a2ea88bede9a5077443cccc9b4aece620689e3fc63de9062000c2790839085908e908e908e908e908e90620011ed565b60405180910390a15098975050505050505050565b62000c4662000cb8565b6001600160a01b03811662000cad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006e3565b620003fe8162000d24565b3362000ccc6003546001600160a01b031690565b6001600160a01b031614620008585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620006e3565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060006040518060200162000d8c9062000ebb565b601f1982820381018352601f90910116604052905080878786868962000dba6003546001600160a01b031690565b60405160200162000dd1969594939291906200124e565b60408051601f198184030181529082905262000df19291602001620012a8565b60405160208183030381529060405291505095945050505050565b6000818351602085016000f59050803b62000e2657600080fd5b92915050565b82805462000e3a9062001128565b90600052602060002090601f01602090048101928262000e5e576000855562000ea9565b82601f1062000e7957805160ff191683800117855562000ea9565b8280016001018555821562000ea9579182015b8281111562000ea957825182559160200191906001019062000e8c565b5062000eb792915062000ec9565b5090565b61229b80620012dc83390190565b5b8082111562000eb7576000815560010162000eca565b80356001600160a01b038116811462000ef857600080fd5b919050565b60006020828403121562000f1057600080fd5b62000f1b8262000ee0565b9392505050565b60006020828403121562000f3557600080fd5b5035919050565b60005b8381101562000f5957818101518382015260200162000f3f565b8381111562000f69576000848401525b50505050565b6000815180845262000f8981602086016020860162000f3c565b601f01601f19169290920160200192915050565b60a08152600062000fb260a083018862000f6f565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b602081526000825160a0602084015262000ffd60c084018262000f6f565b9050602084015160018060a01b038082166040860152806040870151166060860152505060608401516080840152608084015160a08401528091505092915050565b6020808252825182820181905260009190848201906040850190845b81811015620010825783516001600160a01b0316835292840192918401916001016200105b565b50909695505050505050565b600080600080600060808688031215620010a757600080fd5b853567ffffffffffffffff80821115620010c057600080fd5b818801915088601f830112620010d557600080fd5b813581811115620010e557600080fd5b896020828501011115620010f857600080fd5b60209283019750955062001110918801905062000ee0565b94979396509394604081013594506060013592915050565b600181811c908216806200113d57607f821691505b6020821081036200115e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111562001190576200119062001164565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b600060018201620011e657620011e662001164565b5060010190565b8781526001600160a01b03878116602083015260c0604083018190528201869052600090868860e0850137600060e08885018101919091529516606083015250608081019290925260a0820152601f909201601f1916909101019392505050565b600060018060a01b03808916835287602084015260c060408401526200127860c084018862000f6f565b83810360608501526200128c818862000f6f565b6080850196909652509290921660a09091015250949350505050565b60008351620012bc81846020880162000f3c565b835190830190620012d281836020880162000f3c565b0194935050505056fe60e06040523480156200001157600080fd5b506040516200229b3803806200229b8339810160408190526200003491620002a7565b80848481600390805190602001906200004f92919062000117565b5080516200006590600490602084019062000117565b5050506200007981620000c560201b60201c565b50506008805460ff60a01b19169055600a80546001600160a01b0319166001600160a01b0396909616959095179094555050600b5542600c5560c052605a608052600760a05262000385565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001259062000349565b90600052602060002090601f01602090048101928262000149576000855562000194565b82601f106200016457805160ff191683800117855562000194565b8280016001018555821562000194579182015b828111156200019457825182559160200191906001019062000177565b50620001a2929150620001a6565b5090565b5b80821115620001a25760008155600101620001a7565b80516001600160a01b0381168114620001d557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020257600080fd5b81516001600160401b03808211156200021f576200021f620001da565b604051601f8301601f19908116603f011681019082821181831017156200024a576200024a620001da565b816040528381526020925086838588010111156200026757600080fd5b600091505b838210156200028b57858201830151818301840152908201906200026c565b838211156200029d5760008385830101525b9695505050505050565b60008060008060008060c08789031215620002c157600080fd5b620002cc87620001bd565b6020880151604089015191975095506001600160401b0380821115620002f157600080fd5b620002ff8a838b01620001f0565b955060608901519150808211156200031657600080fd5b506200032589828a01620001f0565b935050608087015191506200033d60a08801620001bd565b90509295509295509295565b600181811c908216806200035e57607f821691505b6020821081036200037f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611ed1620003ca600039600081816103d50152610f670152600081816103130152611b0301526000818161058e0152611b2f0152611ed16000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80635c975abb11610167578063b092deb1116100ce578063e775c19211610087578063e775c192146105e5578063e8adbf2f146105f8578063f2cf6e461461060b578063f2fde38b14610613578063f8077fae14610626578063f851a4401461062f57600080fd5b8063b092deb11461056e578063c34c08e514610576578063d06a89a414610589578063d4d6e3f6146105b0578063dd62ed3e146105bf578063e3356ccf146105d257600080fd5b80639080780711610120578063908078071461052657806395d89b411461052e57806396afc45014610536578063a457c2d71461053f578063a9059cbb14610552578063ad8913c61461056557600080fd5b80635c975abb146104b657806370a08231146104c8578063715018a6146104f1578063780723d9146104f957806378e979251461050c5780638da5cb5b1461051557600080fd5b806323b98cde1161020b57806339509351116101c457806339509351146104355780633e158b0c146104485780634317e3d414610450578063453d91c11461046357806359b6a0c9146104765780635a2f3d091461047f57600080fd5b806323b98cde146103bc57806327522d4b146103d05780632b796968146103f75780632dd57bb01461040a578063313ce5671461041d57806336d421951461042c57600080fd5b80630f89b77d1161025d5780630f89b77d1461034857806313ed08461461037357806318160ddd146103865780631c3c0ea81461038e57806321241dfe146103a157806323b872dd146103a957600080fd5b806305fe138b146102a5578063064b8cb3146102ba57806306fdde03146102d6578063095ea7b3146102eb57806309777aa61461030e5780630ba84cd214610335575b600080fd5b6102b86102b3366004611c25565b610642565b005b6102c360115481565b6040519081526020015b60405180910390f35b6102de6107da565b6040516102cd9190611c9e565b6102fe6102f9366004611cb1565b61086c565b60405190151581526020016102cd565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102b8610343366004611cdb565b610886565b60065461035b906001600160a01b031681565b6040516001600160a01b0390911681526020016102cd565b6102c3610381366004611cf4565b610900565b6002546102c3565b6102b861039c366004611d16565b610984565b6102c3605a81565b6102fe6103b7366004611d31565b6109aa565b600a546102fe90600160a01b900460ff1681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b600a5461035b906001600160a01b031681565b6102b8610418366004611d16565b6109ce565b604051601281526020016102cd565b6102c3600d5481565b6102fe610443366004611cb1565b6109f4565b6102b8610a16565b6102b861045e366004611c25565b610a88565b6102b8610471366004611cdb565b610bf8565b6102c3600b5481565b610487610c05565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c0016102cd565b600854600160a01b900460ff166102fe565b6102c36104d6366004611d16565b6001600160a01b031660009081526020819052604090205490565b6102b8610c44565b6102b8610507366004611d6d565b610c56565b6102c3600c5481565b6008546001600160a01b031661035b565b6102b8610cf8565b6102de610dcf565b6102c360105481565b6102fe61054d366004611cb1565b610dde565b6102fe610560366004611cb1565b610e59565b6102c3600f5481565b6102c3601e81565b60055461035b906001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102c3670de0b6b3a764000081565b6102c36105cd366004611d8f565b610e67565b6102b86105e0366004611d16565b610e92565b6102c36105f3366004611cf4565b610eb8565b60075461035b906001600160a01b031681565b6102b8610fa6565b6102b8610621366004611d16565b611090565b6102c3600e5481565b60095461035b906001600160a01b031681565b61064a611106565b600a54600160a01b900460ff16156106c35760405162461bcd60e51b815260206004820152603160248201527f506f6f6c20686173206265656e206c6971756964617465642c2063616e6e6f746044820152702072656d6f7665206c697175696469747960781b60648201526084015b60405180910390fd5b6007546001600160a01b0316331461073a5760405162461bcd60e51b815260206004820152603460248201527f63616e6e6f742072656d6f7665206c6971756964697479206469726563746c7960448201527308199c9bdb481a5b9cdd5c985b98d9481c1bdbdb60621b60648201526084016106ba565b6000821161078a5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e20300060448201526064016106ba565b6107948183611153565b604080518381526001600160a01b03831660208201527f17a63db1a9a8665c388fd097b279eb78a8145c270157a550a610252132edbebe91015b60405180910390a15050565b6060600380546107e990611db9565b80601f016020809104026020016040519081016040528092919081815260200182805461081590611db9565b80156108625780601f1061083757610100808354040283529160200191610862565b820191906000526020600020905b81548152906001019060200180831161084557829003601f168201915b5050505050905090565b60003361087a818585611286565b60019150505b92915050565b6007546001600160a01b031633146108f45760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c7920706f6c6c69637943656e7465722063616e2075706461746520656d60448201526a697373696f6e207261746560a81b60648201526084016106ba565b6108fd816113a2565b50565b600061090b60025490565b60000361091a57506000610880565b6000600e544261092a9190611e09565b905060006010548261093c9190611e20565b9050600061094960025490565b6109539083611e3f565b600d546109609190611e61565b905060008561096f8389611e20565b6109799190611e09565b979650505050505050565b61098c6114cd565b600580546001600160a01b0319166001600160a01b03831617905550565b6000336109b8858285611536565b6109c38585856115b0565b506001949350505050565b6109d66114cd565b600780546001600160a01b0319166001600160a01b03831617905550565b60003361087a818585610a078383610e67565b610a119190611e61565b611286565b6007546001600160a01b03163314610a7e5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920706f6c6c69637943656e7465722063616e20757064617465207265604482015264776172647360d81b60648201526084016106ba565b610a86611754565b565b610a90611106565b600a54600160a01b900460ff1615610aea5760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f742070726f76696465206e6577206c69717569646974790000000060448201526064016106ba565b60008211610b3a5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e20300060448201526064016106ba565b6007546001600160a01b03163314610bb05760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f742070726f76696465206c6971756964697479206469726563746c6044820152721e481d1bc81a5b9cdd5c985b98d9481c1bdbdb606a1b60648201526084016106ba565b610bba8183611938565b604080518381526001600160a01b03831660208201527f2fab008f593b573f234e491ae40dce937f18be981fa9ae4eac7507bc28c0d93391016107ce565b610c006114cd565b600b55565b600080600080600080610c2260085460ff600160a01b9091041690565b600d54600e54600f54601054600b54949b939a50919850965094509092509050565b610c4c6114cd565b610a8660006119f8565b6008546001600160a01b0316331480610c7957506006546001600160a01b031633145b610ce25760405162461bcd60e51b815260206004820152603460248201527f4f6e6c79206f776e6572206f7220496e636964656e74205265706f7274206361604482015273371031b0b636103a3434b990333ab731ba34b7b760611b60648201526084016106ba565b8015610cf0576108fd611a4a565b6108fd611aa5565b6005546001600160a01b03163314610d5e5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206578656375746f722063616e2063616c6c20746869732066756e636044820152633a34b7b760e11b60648201526084016106ba565b610d686001611ae1565b6000610d7360025490565b9050610d83605a62015180611e20565b610d8d9042611e61565b60118190556040805183815260208101929092527fd2f6618ba448f8b76ee0e823f8bb8c568b748f1687e1bc6bd625306fc4fb5035910160405180910390a150565b6060600480546107e990611db9565b60003381610dec8286610e67565b905083811015610e4c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106ba565b6109c38286868403611286565b60003361087a8185856115b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610e9a6114cd565b600680546001600160a01b0319166001600160a01b03831617905550565b6000670de0b6b3a7640000831015610f125760405162461bcd60e51b815260206004820152601a60248201527f556e646572206d696e696d756d20636f76657220616d6f756e7400000000000060448201526064016106ba565b610f1b82611aff565b610f5c5760405162461bcd60e51b81526020600482015260126024820152710aee4dedcce40c6deeccae440d8cadccee8d60731b60448201526064016106ba565b6237b1d082610f8b857f0000000000000000000000000000000000000000000000000000000000000000611e20565b610f959190611e20565b610f9f9190611e3f565b9392505050565b600a54600160a01b900460ff16610fff5760405162461bcd60e51b815260206004820152601c60248201527f506f6f6c20686173206e6f74206265656e206c6971756964617465640000000060448201526064016106ba565b60115442116110505760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c20686173206e6f7420656e646564206c69717569646174696f6e000060448201526064016106ba565b61105a6000611ae1565b6040514281527fc4fb89bd6f774f46d564ab330734025bfcb863fdc30ed693d645db7367ff868e906020015b60405180910390a1565b6110986114cd565b6001600160a01b0381166110fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ba565b6108fd816119f8565b600854600160a01b900460ff1615610a865760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ba565b6001600160a01b0382166111b35760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106ba565b6001600160a01b038216600090815260208190526040902054818110156112275760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106ba565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a3505050565b6001600160a01b0383166112e85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106ba565b6001600160a01b0382166113495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106ba565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611279565b6113aa611754565b600042600f54116113bc5760006113ca565b42600f546113ca9190611e09565b9050611403604051806040016040528060158152602001742a34b6b2ba37b334b734b9b41032b6b4b9b9b4b7b760591b81525082611b53565b6114356040518060400160405280601081526020016f383932b6b4bab69031b7b6b2b99034b760811b81525083611b53565b801561146857601e828260105461144c9190611e20565b6114569190611e61565b6114609190611e3f565b601055611477565b611473601e83611e3f565b6010555b611485601e62015180611e20565b61148f9042611e61565b600f8190556010546040517f144d30c57e277deb14c5d686b95cf61cfea257d9d551cef4288b2f7db418f87a926107ce928252602082015260400190565b336114e06008546001600160a01b031690565b6001600160a01b031614610a865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ba565b60006115428484610e67565b905060001981146115aa578181101561159d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106ba565b6115aa8484848403611286565b50505050565b6001600160a01b0383166116145760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106ba565b6001600160a01b0382166116765760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106ba565b6001600160a01b038316600090815260208190526040902054818110156116ee5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106ba565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36115aa565b60025415806117635750600f54155b1561176e5742600e55565b61179f6040518060400160405280600d81526020016c195b5b5a5cdcda5bdb88195b99609a1b815250600f54611b53565b600042600f54106117b057426117b4565b600f545b90506000600e54826117c69190611e09565b90506117f56040518060400160405280600b81526020016a1d1a5b59481c185cdcd95960aa1b81525082611b53565b61182060405180604001604052806009815260200168636c61696d54696d6560b81b81525083611b53565b6118576040518060400160405280601381526020017206c61737452657761726454696d657374616d7606c1b815250600e54611b53565b6000620151806010548361186b9190611e20565b6118759190611e3f565b90506118a96040518060400160405280600e81526020016d32b6b4b9b9b4b7b7103930ba329d60911b815250601054611b53565b6118d66040518060400160405280600b81526020016a6e6577207265776172647360a81b81525082611b53565b6002546118e39082611e3f565b600d60008282546118f49190611e61565b909155505042600e55600d546040519081527fe75561565db6793e979ed98ca01ef534d8c11d811bd56003eb4344c959079c1f9060200160405180910390a1505050565b6001600160a01b03821661198e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ba565b80600260008282546119a09190611e61565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611a52611106565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a8d3390565b6040516001600160a01b039091168152602001611086565b611aad611b98565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611a8d565b600a8054911515600160a01b0260ff60a01b19909216919091179055565b60007f000000000000000000000000000000000000000000000000000000000000000082101580156108805750507f0000000000000000000000000000000000000000000000000000000000000000101590565b6119f48282604051602401611b69929190611e79565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052611be8565b600854600160a01b900460ff16610a865760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ba565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b0381168114611c2057600080fd5b919050565b60008060408385031215611c3857600080fd5b82359150611c4860208401611c09565b90509250929050565b6000815180845260005b81811015611c7757602081850181015186830182015201611c5b565b81811115611c89576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610f9f6020830184611c51565b60008060408385031215611cc457600080fd5b611ccd83611c09565b946020939093013593505050565b600060208284031215611ced57600080fd5b5035919050565b60008060408385031215611d0757600080fd5b50508035926020909101359150565b600060208284031215611d2857600080fd5b610f9f82611c09565b600080600060608486031215611d4657600080fd5b611d4f84611c09565b9250611d5d60208501611c09565b9150604084013590509250925092565b600060208284031215611d7f57600080fd5b81358015158114610f9f57600080fd5b60008060408385031215611da257600080fd5b611dab83611c09565b9150611c4860208401611c09565b600181811c90821680611dcd57607f821691505b602082108103611ded57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611e1b57611e1b611df3565b500390565b6000816000190483118215151615611e3a57611e3a611df3565b500290565b600082611e5c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611e7457611e74611df3565b500190565b604081526000611e8c6040830185611c51565b9050826020830152939250505056fea2646970667358221220248e97e7c70e5b3dc1d1f157cce51ab65be134befda1b05c979757e1c0b8b46864736f6c634300080d0033a26469706673582212205d222a12ca5a61b5a36dda74c00445520f919c893df20e45c434f97b8c46d99864736f6c634300080d0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200015d5760003560e01c8063715018a611620000c7578063bb9febaf1162000086578063bb9febaf146200034b578063c34c08e51462000362578063c3a593b31462000376578063e8adbf2f146200039e578063eced552614620003b2578063f2fde38b14620003bf57600080fd5b8063715018a614620002c8578063746376ee14620002d25780638da5cb5b14620003095780639e3079cb146200031b578063a2e1ce62146200032557600080fd5b80632fbac6d711620001205780632fbac6d714620002025780634858b300146200022f5780635254076a146200025757806359b6a0c9146200026e5780636bdbd195146200028757806370d39cff14620002a057600080fd5b80630a2c433d14620001625780630acf58e4146200017b5780631c3c0ea814620001ae5780632dd57bb014620001c55780632f380b3514620001dc575b600080fd5b620001796200017336600462000efd565b620003d6565b005b620001926200018c36600462000f22565b62000401565b604051620001a595949392919062000f9d565b60405180910390f35b62000179620001bf36600462000efd565b620004ce565b62000179620001d636600462000efd565b620004f6565b620001f3620001ed36600462000f22565b6200051e565b604051620001a5919062000fdf565b60005462000216906001600160a01b031681565b6040516001600160a01b039091168152602001620001a5565b620002167f000000000000000000000000000000000000000000000000000000000000000081565b620001796200026836600462000efd565b62000650565b6200027860065481565b604051908152602001620001a5565b6200029162000777565b604051620001a591906200103f565b620002167f000000000000000000000000000000000000000000000000000000000000000081565b6200017962000842565b620002f8620002e336600462000efd565b60076020526000908152604090205460ff1681565b6040519015158152602001620001a5565b6003546001600160a01b031662000216565b6200027860055481565b620002f86200033636600462000efd565b60086020526000908152604090205460ff1681565b620002166200035c3660046200108e565b6200085a565b60025462000216906001600160a01b031681565b620002167f000000000000000000000000000000000000000000000000000000000000000081565b60015462000216906001600160a01b031681565b6200027864e8d4a5100081565b62000179620003d036600462000efd565b62000c3c565b620003e062000cb8565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b6004602052600090815260409020805481906200041e9062001128565b80601f01602080910402602001604051908101604052809291908181526020018280546200044c9062001128565b80156200049d5780601f1062000471576101008083540402835291602001916200049d565b820191906000526020600020905b8154815290600101906020018083116200047f57829003601f168201915b5050505060018301546002840154600385015460049095015493946001600160a01b03928316949290911692509085565b620004d862000cb8565b600280546001600160a01b0319166001600160a01b03831617905550565b6200050062000cb8565b600180546001600160a01b0319166001600160a01b03831617905550565b620005636040518060a001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b60008281526004602052604090819020815160a081019092528054829082906200058d9062001128565b80601f0160208091040260200160405190810160405280929190818152602001828054620005bb9062001128565b80156200060c5780601f10620005e0576101008083540402835291602001916200060c565b820191906000526020600020905b815481529060010190602001808311620005ee57829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820154606082015260049091015460809091015292915050565b6003546001600160a01b03163314806200067457506002546001600160a01b031633145b620006ec5760405162461bcd60e51b815260206004820152603960248201527f4f6e6c79206f776e6572206f72206578656375746f7220636f6e74726163742060448201527f63616e206465726567697374657220616e20616464726573730000000000000060648201526084015b60405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff16620007565760405162461bcd60e51b815260206004820152601960248201527f41646472657373206973206e6f742072656769737465726564000000000000006044820152606401620006e3565b6001600160a01b03166000908152600860205260409020805460ff19169055565b6060600060055460016200078c91906200117a565b905060008167ffffffffffffffff811115620007ac57620007ac62001195565b604051908082528060200260200182016040528015620007d6578160200160208202803683370190505b50905060005b828110156200083b5760008181526004602052604090206001015482516001600160a01b03909116908390839081106200081a576200081a620011ab565b6001600160a01b0390921660209283029190910190910152600101620007dc565b5092915050565b6200084c62000cb8565b62000858600062000d24565b565b60006200086f6003546001600160a01b031690565b6001600160a01b0316336001600160a01b031614806200089957506002546001600160a01b031633145b6200090d5760405162461bcd60e51b815260206004820152603f60248201527f4f6e6c79206f776e6572206f72206578656375746f7220636f6e74726163742060448201527f63616e206372656174652061206e657720696e737572616e636520706f6f6c006064820152608401620006e3565b6001600160a01b03841660009081526008602052604090205460ff16156200096d5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606401620006e3565b6000868660405160200162000984929190620011c1565b604051602081830303815290604052805190602001209050600062000a278686868b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525062000d7692505050565b9050600062000a37828462000e0c565b6001600160a01b0388811660009081526008602090815260408083208054600160ff199182168117909255948616845260079092528220805490931617909155600580549293509091829062000a8d90620011d1565b9182905550600154604051630b6cccdd60e41b81526001600160a01b0385811660048301528b811660248301526044820184905292935091169063b6cccdd090606401600060405180830381600087803b15801562000aeb57600080fd5b505af115801562000b00573d6000803e3d6000fd5b505050506040518060a001604052808b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506001600160a01b03808616602080850191909152908c16604080850191909152606084018c905260809093018a90528482526004815291902082518051919262000b979284929091019062000e2c565b5060208201516001820180546001600160a01b03199081166001600160a01b0393841617909155604080850151600285018054909316931692909217905560608301516003830155608090920151600490910155517f6f92dd7fd4aaa286bc76a2ea88bede9a5077443cccc9b4aece620689e3fc63de9062000c2790839085908e908e908e908e908e90620011ed565b60405180910390a15098975050505050505050565b62000c4662000cb8565b6001600160a01b03811662000cad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620006e3565b620003fe8162000d24565b3362000ccc6003546001600160a01b031690565b6001600160a01b031614620008585760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620006e3565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060006040518060200162000d8c9062000ebb565b601f1982820381018352601f90910116604052905080878786868962000dba6003546001600160a01b031690565b60405160200162000dd1969594939291906200124e565b60408051601f198184030181529082905262000df19291602001620012a8565b60405160208183030381529060405291505095945050505050565b6000818351602085016000f59050803b62000e2657600080fd5b92915050565b82805462000e3a9062001128565b90600052602060002090601f01602090048101928262000e5e576000855562000ea9565b82601f1062000e7957805160ff191683800117855562000ea9565b8280016001018555821562000ea9579182015b8281111562000ea957825182559160200191906001019062000e8c565b5062000eb792915062000ec9565b5090565b61229b80620012dc83390190565b5b8082111562000eb7576000815560010162000eca565b80356001600160a01b038116811462000ef857600080fd5b919050565b60006020828403121562000f1057600080fd5b62000f1b8262000ee0565b9392505050565b60006020828403121562000f3557600080fd5b5035919050565b60005b8381101562000f5957818101518382015260200162000f3f565b8381111562000f69576000848401525b50505050565b6000815180845262000f8981602086016020860162000f3c565b601f01601f19169290920160200192915050565b60a08152600062000fb260a083018862000f6f565b6001600160a01b039687166020840152949095166040820152606081019290925260809091015292915050565b602081526000825160a0602084015262000ffd60c084018262000f6f565b9050602084015160018060a01b038082166040860152806040870151166060860152505060608401516080840152608084015160a08401528091505092915050565b6020808252825182820181905260009190848201906040850190845b81811015620010825783516001600160a01b0316835292840192918401916001016200105b565b50909695505050505050565b600080600080600060808688031215620010a757600080fd5b853567ffffffffffffffff80821115620010c057600080fd5b818801915088601f830112620010d557600080fd5b813581811115620010e557600080fd5b896020828501011115620010f857600080fd5b60209283019750955062001110918801905062000ee0565b94979396509394604081013594506060013592915050565b600181811c908216806200113d57607f821691505b6020821081036200115e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111562001190576200119062001164565b500190565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b8183823760009101908152919050565b600060018201620011e657620011e662001164565b5060010190565b8781526001600160a01b03878116602083015260c0604083018190528201869052600090868860e0850137600060e08885018101919091529516606083015250608081019290925260a0820152601f909201601f1916909101019392505050565b600060018060a01b03808916835287602084015260c060408401526200127860c084018862000f6f565b83810360608501526200128c818862000f6f565b6080850196909652509290921660a09091015250949350505050565b60008351620012bc81846020880162000f3c565b835190830190620012d281836020880162000f3c565b0194935050505056fe60e06040523480156200001157600080fd5b506040516200229b3803806200229b8339810160408190526200003491620002a7565b80848481600390805190602001906200004f92919062000117565b5080516200006590600490602084019062000117565b5050506200007981620000c560201b60201c565b50506008805460ff60a01b19169055600a80546001600160a01b0319166001600160a01b0396909616959095179094555050600b5542600c5560c052605a608052600760a05262000385565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001259062000349565b90600052602060002090601f01602090048101928262000149576000855562000194565b82601f106200016457805160ff191683800117855562000194565b8280016001018555821562000194579182015b828111156200019457825182559160200191906001019062000177565b50620001a2929150620001a6565b5090565b5b80821115620001a25760008155600101620001a7565b80516001600160a01b0381168114620001d557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200020257600080fd5b81516001600160401b03808211156200021f576200021f620001da565b604051601f8301601f19908116603f011681019082821181831017156200024a576200024a620001da565b816040528381526020925086838588010111156200026757600080fd5b600091505b838210156200028b57858201830151818301840152908201906200026c565b838211156200029d5760008385830101525b9695505050505050565b60008060008060008060c08789031215620002c157600080fd5b620002cc87620001bd565b6020880151604089015191975095506001600160401b0380821115620002f157600080fd5b620002ff8a838b01620001f0565b955060608901519150808211156200031657600080fd5b506200032589828a01620001f0565b935050608087015191506200033d60a08801620001bd565b90509295509295509295565b600181811c908216806200035e57607f821691505b6020821081036200037f57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051611ed1620003ca600039600081816103d50152610f670152600081816103130152611b0301526000818161058e0152611b2f0152611ed16000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80635c975abb11610167578063b092deb1116100ce578063e775c19211610087578063e775c192146105e5578063e8adbf2f146105f8578063f2cf6e461461060b578063f2fde38b14610613578063f8077fae14610626578063f851a4401461062f57600080fd5b8063b092deb11461056e578063c34c08e514610576578063d06a89a414610589578063d4d6e3f6146105b0578063dd62ed3e146105bf578063e3356ccf146105d257600080fd5b80639080780711610120578063908078071461052657806395d89b411461052e57806396afc45014610536578063a457c2d71461053f578063a9059cbb14610552578063ad8913c61461056557600080fd5b80635c975abb146104b657806370a08231146104c8578063715018a6146104f1578063780723d9146104f957806378e979251461050c5780638da5cb5b1461051557600080fd5b806323b98cde1161020b57806339509351116101c457806339509351146104355780633e158b0c146104485780634317e3d414610450578063453d91c11461046357806359b6a0c9146104765780635a2f3d091461047f57600080fd5b806323b98cde146103bc57806327522d4b146103d05780632b796968146103f75780632dd57bb01461040a578063313ce5671461041d57806336d421951461042c57600080fd5b80630f89b77d1161025d5780630f89b77d1461034857806313ed08461461037357806318160ddd146103865780631c3c0ea81461038e57806321241dfe146103a157806323b872dd146103a957600080fd5b806305fe138b146102a5578063064b8cb3146102ba57806306fdde03146102d6578063095ea7b3146102eb57806309777aa61461030e5780630ba84cd214610335575b600080fd5b6102b86102b3366004611c25565b610642565b005b6102c360115481565b6040519081526020015b60405180910390f35b6102de6107da565b6040516102cd9190611c9e565b6102fe6102f9366004611cb1565b61086c565b60405190151581526020016102cd565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102b8610343366004611cdb565b610886565b60065461035b906001600160a01b031681565b6040516001600160a01b0390911681526020016102cd565b6102c3610381366004611cf4565b610900565b6002546102c3565b6102b861039c366004611d16565b610984565b6102c3605a81565b6102fe6103b7366004611d31565b6109aa565b600a546102fe90600160a01b900460ff1681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b600a5461035b906001600160a01b031681565b6102b8610418366004611d16565b6109ce565b604051601281526020016102cd565b6102c3600d5481565b6102fe610443366004611cb1565b6109f4565b6102b8610a16565b6102b861045e366004611c25565b610a88565b6102b8610471366004611cdb565b610bf8565b6102c3600b5481565b610487610c05565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c0016102cd565b600854600160a01b900460ff166102fe565b6102c36104d6366004611d16565b6001600160a01b031660009081526020819052604090205490565b6102b8610c44565b6102b8610507366004611d6d565b610c56565b6102c3600c5481565b6008546001600160a01b031661035b565b6102b8610cf8565b6102de610dcf565b6102c360105481565b6102fe61054d366004611cb1565b610dde565b6102fe610560366004611cb1565b610e59565b6102c3600f5481565b6102c3601e81565b60055461035b906001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102c3670de0b6b3a764000081565b6102c36105cd366004611d8f565b610e67565b6102b86105e0366004611d16565b610e92565b6102c36105f3366004611cf4565b610eb8565b60075461035b906001600160a01b031681565b6102b8610fa6565b6102b8610621366004611d16565b611090565b6102c3600e5481565b60095461035b906001600160a01b031681565b61064a611106565b600a54600160a01b900460ff16156106c35760405162461bcd60e51b815260206004820152603160248201527f506f6f6c20686173206265656e206c6971756964617465642c2063616e6e6f746044820152702072656d6f7665206c697175696469747960781b60648201526084015b60405180910390fd5b6007546001600160a01b0316331461073a5760405162461bcd60e51b815260206004820152603460248201527f63616e6e6f742072656d6f7665206c6971756964697479206469726563746c7960448201527308199c9bdb481a5b9cdd5c985b98d9481c1bdbdb60621b60648201526084016106ba565b6000821161078a5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e20300060448201526064016106ba565b6107948183611153565b604080518381526001600160a01b03831660208201527f17a63db1a9a8665c388fd097b279eb78a8145c270157a550a610252132edbebe91015b60405180910390a15050565b6060600380546107e990611db9565b80601f016020809104026020016040519081016040528092919081815260200182805461081590611db9565b80156108625780601f1061083757610100808354040283529160200191610862565b820191906000526020600020905b81548152906001019060200180831161084557829003601f168201915b5050505050905090565b60003361087a818585611286565b60019150505b92915050565b6007546001600160a01b031633146108f45760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c7920706f6c6c69637943656e7465722063616e2075706461746520656d60448201526a697373696f6e207261746560a81b60648201526084016106ba565b6108fd816113a2565b50565b600061090b60025490565b60000361091a57506000610880565b6000600e544261092a9190611e09565b905060006010548261093c9190611e20565b9050600061094960025490565b6109539083611e3f565b600d546109609190611e61565b905060008561096f8389611e20565b6109799190611e09565b979650505050505050565b61098c6114cd565b600580546001600160a01b0319166001600160a01b03831617905550565b6000336109b8858285611536565b6109c38585856115b0565b506001949350505050565b6109d66114cd565b600780546001600160a01b0319166001600160a01b03831617905550565b60003361087a818585610a078383610e67565b610a119190611e61565b611286565b6007546001600160a01b03163314610a7e5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920706f6c6c69637943656e7465722063616e20757064617465207265604482015264776172647360d81b60648201526084016106ba565b610a86611754565b565b610a90611106565b600a54600160a01b900460ff1615610aea5760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f742070726f76696465206e6577206c69717569646974790000000060448201526064016106ba565b60008211610b3a5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e20300060448201526064016106ba565b6007546001600160a01b03163314610bb05760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f742070726f76696465206c6971756964697479206469726563746c6044820152721e481d1bc81a5b9cdd5c985b98d9481c1bdbdb606a1b60648201526084016106ba565b610bba8183611938565b604080518381526001600160a01b03831660208201527f2fab008f593b573f234e491ae40dce937f18be981fa9ae4eac7507bc28c0d93391016107ce565b610c006114cd565b600b55565b600080600080600080610c2260085460ff600160a01b9091041690565b600d54600e54600f54601054600b54949b939a50919850965094509092509050565b610c4c6114cd565b610a8660006119f8565b6008546001600160a01b0316331480610c7957506006546001600160a01b031633145b610ce25760405162461bcd60e51b815260206004820152603460248201527f4f6e6c79206f776e6572206f7220496e636964656e74205265706f7274206361604482015273371031b0b636103a3434b990333ab731ba34b7b760611b60648201526084016106ba565b8015610cf0576108fd611a4a565b6108fd611aa5565b6005546001600160a01b03163314610d5e5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c79206578656375746f722063616e2063616c6c20746869732066756e636044820152633a34b7b760e11b60648201526084016106ba565b610d686001611ae1565b6000610d7360025490565b9050610d83605a62015180611e20565b610d8d9042611e61565b60118190556040805183815260208101929092527fd2f6618ba448f8b76ee0e823f8bb8c568b748f1687e1bc6bd625306fc4fb5035910160405180910390a150565b6060600480546107e990611db9565b60003381610dec8286610e67565b905083811015610e4c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106ba565b6109c38286868403611286565b60003361087a8185856115b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610e9a6114cd565b600680546001600160a01b0319166001600160a01b03831617905550565b6000670de0b6b3a7640000831015610f125760405162461bcd60e51b815260206004820152601a60248201527f556e646572206d696e696d756d20636f76657220616d6f756e7400000000000060448201526064016106ba565b610f1b82611aff565b610f5c5760405162461bcd60e51b81526020600482015260126024820152710aee4dedcce40c6deeccae440d8cadccee8d60731b60448201526064016106ba565b6237b1d082610f8b857f0000000000000000000000000000000000000000000000000000000000000000611e20565b610f959190611e20565b610f9f9190611e3f565b9392505050565b600a54600160a01b900460ff16610fff5760405162461bcd60e51b815260206004820152601c60248201527f506f6f6c20686173206e6f74206265656e206c6971756964617465640000000060448201526064016106ba565b60115442116110505760405162461bcd60e51b815260206004820152601e60248201527f506f6f6c20686173206e6f7420656e646564206c69717569646174696f6e000060448201526064016106ba565b61105a6000611ae1565b6040514281527fc4fb89bd6f774f46d564ab330734025bfcb863fdc30ed693d645db7367ff868e906020015b60405180910390a1565b6110986114cd565b6001600160a01b0381166110fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ba565b6108fd816119f8565b600854600160a01b900460ff1615610a865760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ba565b6001600160a01b0382166111b35760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106ba565b6001600160a01b038216600090815260208190526040902054818110156112275760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106ba565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a3505050565b6001600160a01b0383166112e85760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106ba565b6001600160a01b0382166113495760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106ba565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611279565b6113aa611754565b600042600f54116113bc5760006113ca565b42600f546113ca9190611e09565b9050611403604051806040016040528060158152602001742a34b6b2ba37b334b734b9b41032b6b4b9b9b4b7b760591b81525082611b53565b6114356040518060400160405280601081526020016f383932b6b4bab69031b7b6b2b99034b760811b81525083611b53565b801561146857601e828260105461144c9190611e20565b6114569190611e61565b6114609190611e3f565b601055611477565b611473601e83611e3f565b6010555b611485601e62015180611e20565b61148f9042611e61565b600f8190556010546040517f144d30c57e277deb14c5d686b95cf61cfea257d9d551cef4288b2f7db418f87a926107ce928252602082015260400190565b336114e06008546001600160a01b031690565b6001600160a01b031614610a865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ba565b60006115428484610e67565b905060001981146115aa578181101561159d5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106ba565b6115aa8484848403611286565b50505050565b6001600160a01b0383166116145760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106ba565b6001600160a01b0382166116765760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106ba565b6001600160a01b038316600090815260208190526040902054818110156116ee5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106ba565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36115aa565b60025415806117635750600f54155b1561176e5742600e55565b61179f6040518060400160405280600d81526020016c195b5b5a5cdcda5bdb88195b99609a1b815250600f54611b53565b600042600f54106117b057426117b4565b600f545b90506000600e54826117c69190611e09565b90506117f56040518060400160405280600b81526020016a1d1a5b59481c185cdcd95960aa1b81525082611b53565b61182060405180604001604052806009815260200168636c61696d54696d6560b81b81525083611b53565b6118576040518060400160405280601381526020017206c61737452657761726454696d657374616d7606c1b815250600e54611b53565b6000620151806010548361186b9190611e20565b6118759190611e3f565b90506118a96040518060400160405280600e81526020016d32b6b4b9b9b4b7b7103930ba329d60911b815250601054611b53565b6118d66040518060400160405280600b81526020016a6e6577207265776172647360a81b81525082611b53565b6002546118e39082611e3f565b600d60008282546118f49190611e61565b909155505042600e55600d546040519081527fe75561565db6793e979ed98ca01ef534d8c11d811bd56003eb4344c959079c1f9060200160405180910390a1505050565b6001600160a01b03821661198e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106ba565b80600260008282546119a09190611e61565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35b5050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611a52611106565b6008805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a8d3390565b6040516001600160a01b039091168152602001611086565b611aad611b98565b6008805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611a8d565b600a8054911515600160a01b0260ff60a01b19909216919091179055565b60007f000000000000000000000000000000000000000000000000000000000000000082101580156108805750507f0000000000000000000000000000000000000000000000000000000000000000101590565b6119f48282604051602401611b69929190611e79565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052611be8565b600854600160a01b900460ff16610a865760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ba565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b0381168114611c2057600080fd5b919050565b60008060408385031215611c3857600080fd5b82359150611c4860208401611c09565b90509250929050565b6000815180845260005b81811015611c7757602081850181015186830182015201611c5b565b81811115611c89576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610f9f6020830184611c51565b60008060408385031215611cc457600080fd5b611ccd83611c09565b946020939093013593505050565b600060208284031215611ced57600080fd5b5035919050565b60008060408385031215611d0757600080fd5b50508035926020909101359150565b600060208284031215611d2857600080fd5b610f9f82611c09565b600080600060608486031215611d4657600080fd5b611d4f84611c09565b9250611d5d60208501611c09565b9150604084013590509250925092565b600060208284031215611d7f57600080fd5b81358015158114610f9f57600080fd5b60008060408385031215611da257600080fd5b611dab83611c09565b9150611c4860208401611c09565b600181811c90821680611dcd57607f821691505b602082108103611ded57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611e1b57611e1b611df3565b500390565b6000816000190483118215151615611e3a57611e3a611df3565b500290565b600082611e5c57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611e7457611e74611df3565b500190565b604081526000611e8c6040830185611c51565b9050826020830152939250505056fea2646970667358221220248e97e7c70e5b3dc1d1f157cce51ab65be134befda1b05c979757e1c0b8b46864736f6c634300080d0033a26469706673582212205d222a12ca5a61b5a36dda74c00445520f919c893df20e45c434f97b8c46d99864736f6c634300080d0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com)",
    "kind": "dev",
    "methods": {
      "deployPool(string,address,uint256,uint256)": {
        "params": {
          "_maxCapacity": "Maximum capacity of the pool",
          "_name": "Name of the protocol",
          "_priceRatio": "Initial policy price per shield",
          "_protocolToken": "Address of the token used for the protocol"
        },
        "returns": {
          "_0": "address Address of the new insurance pool"
        }
      },
      "getPoolAddressList()": {
        "returns": {
          "_0": "List of pool addresses"
        }
      },
      "getPoolInfo(uint256)": {
        "params": {
          "_poolId": "Pool id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Insurance Pool Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployPool(string,address,uint256,uint256)": {
        "notice": "Creates a new insurance pool"
      },
      "getPoolAddressList()": {
        "notice": "Get the pool address list"
      },
      "getPoolInfo(uint256)": {
        "notice": "Get the pool information by pool id"
      }
    },
    "notice": "This is the factory contract for deploying new insurance pools         Each pool represents a project that has joined Degis Smart Contract Protection",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16108,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "reinsurancePool",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16110,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "policyCenter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16112,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "executor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 16364,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15123,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "poolInfoById",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)15118_storage)"
      },
      {
        "astId": 15125,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "poolCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 15127,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "maxCapacity",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15131,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "poolRegistered",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15135,
        "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
        "label": "tokenRegistered",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)15118_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InsurancePoolFactory.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)15118_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)15118_storage": {
        "encoding": "inplace",
        "label": "struct InsurancePoolFactory.PoolInfo",
        "members": [
          {
            "astId": 15109,
            "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
            "label": "protocolName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15111,
            "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
            "label": "poolAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15113,
            "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
            "label": "protocolToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 15115,
            "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
            "label": "maxCapacity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15117,
            "contract": "src/pools/InsurancePoolFactory.sol:InsurancePoolFactory",
            "label": "policyPricePerShield",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}