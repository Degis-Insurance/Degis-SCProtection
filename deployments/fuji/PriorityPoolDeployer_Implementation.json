{
  "address": "0x6398E85b310F430D7fA14244F2ca900efA9cB3D0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minLength",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLength",
          "type": "uint256"
        }
      ],
      "name": "LengthChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_protocolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basePremiumRatio",
          "type": "uint256"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weightedFarmingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_payoutPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedFarmingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf72264e9b3e37cab5039658cdebec21a50eb3a3f6cd1372d5b4e997efb1b83a1",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x6398E85b310F430D7fA14244F2ca900efA9cB3D0",
    "transactionIndex": 0,
    "gasUsed": "4488705",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xec1a15797067e6a65a1c41ca46bc9229127a3aaddaa5a3e7410f711d69cabd40",
    "transactionHash": "0xf72264e9b3e37cab5039658cdebec21a50eb3a3f6cd1372d5b4e997efb1b83a1",
    "logs": [],
    "blockNumber": 13628599,
    "cumulativeGasUsed": "4488705",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "64d33c1fe980d2353cecc02ff755b0d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLength\",\"type\":\"uint256\"}],\"name\":\"LengthChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_protocolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePremiumRatio\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weightedFarmingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payoutPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedFarmingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployPool(uint256,string,address,uint256,uint256)\":{\"params\":{\"_basePremiumRatio\":\"Initial policy price per shield\",\"_maxCapacity\":\"Maximum capacity of the pool\",\"_name\":\"Name of the protocol\",\"_protocolToken\":\"Address of the token used for the protocol\"},\"returns\":{\"_0\":\"address Address of the new insurance pool\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployPool(uint256,string,address,uint256,uint256)\":{\"notice\":\"Create a new priority pool         Called by executor when an onboard proposal has passed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/priorityPool/PriorityPoolDeployer.sol\":\"PriorityPoolDeployer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363633343834313533393330\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/libraries/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nlibrary StringUtils {\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x3b775a5710bb0d859cecdd99277a789e642853062ceef6dbaa187ca4a7a4164e\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../util/PausableWithoutContext.sol\\\";\\n\\nimport \\\"./PriorityPoolDependencies.sol\\\";\\nimport \\\"./PriorityPoolEventError.sol\\\";\\nimport \\\"./PriorityPoolToken.sol\\\";\\n\\nimport \\\"../../libraries/DateTime.sol\\\";\\nimport \\\"../../libraries/StringUtils.sol\\\";\\n\\n/**\\n * @title Priority Pool (for single project)\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice Priority pool is used for protecting a specific project\\n *         Each priority pool has a maxCapacity (0 ~ 10,000 <=> 0 ~ 100%) that it can cover\\n *         (that ratio represents the part of total assets in Protection Pool)\\n *\\n *         When liquidity providers join a priority pool,\\n *         they need to transfer their RP_LP token to this priority pool.\\n *\\n *         After that, they can share the 45% percent native token reward of this pool.\\n *         At the same time, that also means these liquidity will be first liquidated,\\n *         when there is an incident happened for this project.\\n *\\n *         This reward is distributed in another contract (WeightedFarmingPool)\\n *         By default, policy center will help user to deposit into farming pool when staking liquidity\\n *\\n *         For liquidation process, the pool will first redeem Shield from protectionPool with the staked RP_LP tokens.\\n *         - If that is enough, no more redeeming.\\n *         - If still need some liquidity to cover, it will directly transfer part of the protectionPool assets to users.\\n *\\n *         Most of the functions need to be called through Policy Center:\\n *             1) When buying new covers: updateWhenBuy\\n *             2) When staking liquidity: stakedLiquidity\\n *             3) When unstaking liquidity: unstakedLiquidity\\n *\\n */\\ncontract PriorityPool is\\n    PriorityPoolEventError,\\n    PausableWithoutContext,\\n    PriorityPoolDependencies\\n{\\n    using StringUtils for uint256;\\n    using DateTimeLibrary for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Mininum cover amount 10U\\n    // Avoid accuracy issues\\n    uint256 internal constant MIN_COVER_AMOUNT = 10e6;\\n\\n    // Max time length in month\\n    uint256 internal constant MAX_LENGTH = 3;\\n\\n    // Min time length in month\\n    uint256 internal constant MIN_LENGTH = 1;\\n\\n    address internal immutable owner;\\n\\n    // Base premium ratio (max 10000) (260 means 2.6% annually)\\n    uint256 public immutable basePremiumRatio;\\n\\n    // Pool id set when deployed\\n    uint256 public immutable poolId;\\n\\n    // Timestamp of pool creation\\n    uint256 public immutable startTime;\\n\\n    // Address of insured token (used for premium payment)\\n    address public immutable insuredToken;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Pool name\\n    string public poolName;\\n\\n    // Current generation of this priority pool (start from 1)\\n    // Every time there is a report and liquidation, generation += 1\\n    uint256 public generation;\\n\\n    // Max capacity of cover amount to be bought (ratio of total liquidity)\\n    // 10000 = 100%\\n    uint256 public maxCapacity;\\n\\n    // Index for cover amount\\n    uint256 public coverIndex;\\n\\n    // Has already passed the base premium ratio period\\n    bool public passedBasePeriod;\\n\\n    // Year => Month => Amount of cover ends in that month\\n    mapping(uint256 => mapping(uint256 => uint256)) public coverInMonth;\\n\\n    // Generation => lp token address\\n    mapping(uint256 => address) public lpTokenAddress;\\n\\n    // Address => Whether is LP address\\n    mapping(address => bool) public isLPToken;\\n\\n    // PRI-LP address => Price of lp tokens\\n    // PRI-LP token amount * Price Index = PRO-LP token amount\\n    mapping(address => uint256) public priceIndex;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        uint256 _poolId,\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _baseRatio,\\n        address _owner,\\n        address _weightedFarmingPool,\\n        address _protectionPool,\\n        address _policyCenter,\\n        address _payoutPool\\n    ) {\\n        owner = _owner;\\n\\n        poolId = _poolId;\\n        poolName = _name;\\n\\n        insuredToken = _protocolToken;\\n        maxCapacity = _maxCapacity;\\n        startTime = block.timestamp;\\n\\n        basePremiumRatio = _baseRatio;\\n\\n        // Generation 1, price starts from 1 (SCALE)\\n        priceIndex[_deployNewGenerationLP(_weightedFarmingPool)] = SCALE;\\n\\n        coverIndex = 10000;\\n\\n        priorityPoolFactory = msg.sender;\\n        weightedFarmingPool = _weightedFarmingPool;\\n        protectionPool = _protectionPool;\\n        policyCenter = _policyCenter;\\n        payoutPool = _payoutPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    modifier onlyExecutor() {\\n        if (msg.sender != IPriorityPoolFactory(priorityPoolFactory).executor())\\n            revert PriorityPool__OnlyExecutor();\\n        _;\\n    }\\n\\n    modifier onlyPolicyCenter() {\\n        if (msg.sender != policyCenter) revert PriorityPool__OnlyPolicyCenter();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the current generation PRI-LP token address\\n     *\\n     * @return lpAddress Current pri-lp address\\n     */\\n    function currentLPAddress() public view returns (address) {\\n        return lpTokenAddress[generation];\\n    }\\n\\n    /**\\n     * @notice Cost to buy a cover for a given period of time and amount of tokens\\n     *\\n     * @param _amount        Amount being covered (Shield)\\n     * @param _coverDuration Cover length in month\\n     *\\n     * @return price  Cover price in shield\\n     * @return length Real length in timestamp\\n     */\\n    function coverPrice(uint256 _amount, uint256 _coverDuration)\\n        external\\n        view\\n        returns (uint256 price, uint256 length)\\n    {\\n        _checkAmount(_amount);\\n\\n        // Dynamic premium ratio (annually)\\n        uint256 dynamicRatio = dynamicPremiumRatio(_amount);\\n\\n        (uint256 endTimestamp, , ) = DateTimeLibrary._getExpiry(\\n            block.timestamp,\\n            _coverDuration\\n        );\\n\\n        // Length in second\\n        length = endTimestamp - block.timestamp;\\n\\n        // Price depends on the real timestamp length\\n        price = (dynamicRatio * _amount * length) / (SECONDS_PER_YEAR * 10000);\\n    }\\n\\n    /**\\n     * @notice Get current active cover amount\\n     *         Active cover amount = sum of the nearest 3 months' covers\\n     *\\n     * @return covered Total active cover amount\\n     */\\n    function activeCovered() public view returns (uint256 covered) {\\n        (uint256 currentYear, uint256 currentMonth, ) = block\\n            .timestamp\\n            .timestampToDate();\\n\\n        // Only count the latest 3 months\\n        for (uint256 i; i < 3; ) {\\n            covered += coverInMonth[currentYear][currentMonth];\\n\\n            unchecked {\\n                if (++currentMonth > 12) {\\n                    ++currentYear;\\n                    currentMonth = 1;\\n                }\\n\\n                ++i;\\n            }\\n        }\\n\\n        covered = (covered * coverIndex) / 10000;\\n    }\\n\\n    /**\\n     * @notice Current minimum asset requirement for Protection Pool\\n     *         Min requirement * capacity ratio = active covered\\n     *\\n     *         Total assets in protection pool should be larger than any of the \\\"minAssetRequirement\\\"\\n     *         Or the cover index would be cut\\n     */\\n    function minAssetRequirement() external view returns (uint256) {\\n        return (activeCovered() * 10000) / maxCapacity;\\n    }\\n\\n    /**\\n     * @notice Get the dynamic premium ratio (annually)\\n     *         Depends on the covers sold and liquidity amount in all dynamic priority pools\\n     *         For the first 7 days, use the base premium ratio\\n     *\\n     * @param _coverAmount New cover amount (shield) being bought\\n     *\\n     * @return ratio The dynamic ratio\\n     */\\n    function dynamicPremiumRatio(uint256 _coverAmount)\\n        public\\n        view\\n        returns (uint256 ratio)\\n    {\\n        // Time passed since this pool started\\n        uint256 fromStart = block.timestamp - startTime;\\n\\n        // First 7 days use base ratio\\n        // Then use dynamic ratio\\n        // TODO: test use 5 hours\\n        if (fromStart > DYNAMIC_TIME) {\\n            // Total dynamic pools\\n            uint256 numofDynamicPools = IPriorityPoolFactory(\\n                priorityPoolFactory\\n            ).dynamicPoolCounter();\\n\\n            if (numofDynamicPools > 0) {\\n                // Covered ratio = Covered amount of this pool / Total covered amount\\n                uint256 coveredRatio = ((activeCovered() + _coverAmount) *\\n                    SCALE) /\\n                    (IProtectionPool(protectionPool).getTotalActiveCovered() +\\n                        _coverAmount);\\n\\n                address lp = currentLPAddress();\\n\\n                //                         PRO-LP token in this pool\\n                // LP Token ratio =  -------------------------------------------\\n                //                    PRO-LP token staked in all priority pools\\n                //\\n                uint256 tokenRatio = (SimpleERC20(lp).totalSupply() * SCALE) /\\n                    IProtectionPool(protectionPool).stakedSupply();\\n\\n                // Dynamic premium ratio\\n                // ( N = total dynamic pools \\u2264 total pools )\\n                //\\n                //                      Covered          1\\n                //                   --------------- + -----\\n                //                    TotalCovered       N\\n                // dynamic ratio =  -------------------------- * base ratio\\n                //                      LP Amount         1\\n                //                  ----------------- + -----\\n                //                   Total LP Amount      N\\n                //\\n                ratio =\\n                    (basePremiumRatio *\\n                        (coveredRatio * numofDynamicPools + SCALE)) /\\n                    ((tokenRatio * numofDynamicPools) + SCALE);\\n            } else ratio = basePremiumRatio;\\n        } else {\\n            ratio = basePremiumRatio;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set the max capacity of this priority pool manually\\n     *         Only owner set this function on a monthly / quaterly base\\n     *         (For those unpopular pools to decrease, and those popular ones to increase)\\n     *\\n     * @param _isUp        Whether it should increase the capacity\\n     * @param _maxCapacity New max capacity of this pool\\n     */\\n    function setMaxCapacity(bool _isUp, uint256 _maxCapacity) external {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n\\n        maxCapacity = _maxCapacity;\\n\\n        uint256 diff;\\n        if (_isUp) {\\n            diff = _maxCapacity - maxCapacity;\\n        } else {\\n            diff = maxCapacity - _maxCapacity;\\n        }\\n\\n        // Store the max capacity change\\n        IPriorityPoolFactory(priorityPoolFactory).updateMaxCapacity(\\n            _isUp,\\n            diff\\n        );\\n    }\\n\\n    /**\\n     * @notice Set the cover index of this priority pool\\n     *\\n     *         Only called from protection pool\\n     *\\n     *         When a payout happened in another priority pool,\\n     *         and this priority pool's minAssetRequirement is less than proteciton pool's asset,\\n     *         the cover index of this pool will be cut by a ratio\\n     *\\n     * @param _newIndex New cover index\\n     */\\n    function setCoverIndex(uint256 _newIndex) external {\\n        require(msg.sender == protectionPool, \\\"Only protection pool\\\");\\n\\n        emit CoverIndexChanged(coverIndex, _newIndex);\\n        coverIndex = _newIndex;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Provide liquidity to priority pool\\n     *         Only callable through policyCenter\\n     *         Can not provide new liquidity when paused\\n     *\\n     * @param _amount   Amount of liquidity (PRO-LP token) to provide\\n     * @param _provider Liquidity provider adress\\n     */\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        whenNotPaused\\n        onlyPolicyCenter\\n        returns (address)\\n    {\\n        // Check whether this priority pool should be dynamic\\n        // If so, update it\\n        _updateDynamic();\\n\\n        // Mint current generation lp tokens to the provider\\n        // PRI-LP amount always 1:1 to PRO-LP\\n        _mintLP(_provider, _amount);\\n        emit StakedLiquidity(_amount, _provider);\\n\\n        return currentLPAddress();\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from priority pool\\n     *         Only callable through policyCenter\\n     *\\n     * @param _lpToken  Address of PRI-LP token\\n     * @param _amount   Amount of liquidity (PRI-LP) to remove\\n     * @param _provider Provider address\\n     */\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external whenNotPaused onlyPolicyCenter {\\n        if (!isLPToken[_lpToken]) revert PriorityPool__WrongLPToken();\\n\\n        // Check whether this priority pool should be dynamic\\n        // If so, update it\\n        _updateDynamic();\\n\\n        // Burn PRI-LP tokens and transfer PRO-LP tokens back\\n        _burnLP(_lpToken, _provider, _amount);\\n        emit UnstakedLiquidity(_amount, _provider);\\n    }\\n\\n    /**\\n     * @notice Update the record when new policy is bought\\n     *         Only called from policy center\\n     *\\n     * @param _amount          Cover amount (shield)\\n     * @param _premium         Premium for priority pool (in protocol token)\\n     * @param _length          Cover length (in month)\\n     * @param _timestampLength Cover length (in second)\\n     */\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external whenNotPaused onlyPolicyCenter {\\n        // Check cover length\\n        _checkLength(_length);\\n\\n        // Check cover amount\\n        _checkAmount(_amount);\\n\\n        _updateDynamic();\\n\\n        // Record cover amount in each month\\n        _updateCoverInfo(_amount, _length);\\n\\n        // Update the weighted farming pool speed for this priority pool\\n        uint256 newSpeed = (_premium * SCALE) / _timestampLength;\\n        _updateWeightedFarmingSpeed(_length, newSpeed);\\n    }\\n\\n    function _checkLength(uint256 _length) internal pure {\\n        if (_length > MAX_LENGTH || _length < MIN_LENGTH)\\n            revert PriorityPool__WrongCoverLength();\\n    }\\n\\n    /**\\n     * @notice Pause this pool\\n     *\\n     * @param _paused True to pause, false to unpause\\n     */\\n    function pausePriorityPool(bool _paused) external {\\n        if ((msg.sender != owner) && (msg.sender != priorityPoolFactory))\\n            revert PriorityPool__NotOwnerOrFactory();\\n\\n        _pause(_paused);\\n    }\\n\\n    /**\\n     * @notice Liquidate pool\\n     *         Only callable by executor\\n     *         Only after the report has passed the voting\\n     *\\n     * @param _amount Payout amount to be moved out\\n     */\\n    function liquidatePool(uint256 _amount) external onlyExecutor {\\n        uint256 payout = _amount > activeCovered() ? activeCovered() : _amount;\\n\\n        _retrievePayout(payout);\\n\\n        _updateCurrentLPWeight();\\n\\n        // Generation ++\\n        // Deploy the new generation lp token\\n        // Those who stake liquidity into this priority pool will be given the new lp token\\n        _deployNewGenerationLP(weightedFarmingPool);\\n\\n        emit Liquidation(_amount, generation);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check & update dynamic status of this pool\\n     *         Record this pool as \\\"already dynamic\\\" in factory\\n     *\\n     *         Every time there is a new interaction, will do this check\\n     */\\n    function _updateDynamic() internal {\\n        // Put the cheaper check in the first place\\n        if (!passedBasePeriod && (block.timestamp - startTime > DYNAMIC_TIME)) {\\n            IPriorityPoolFactory(priorityPoolFactory).updateDynamicPool(poolId);\\n            passedBasePeriod = true;\\n        }\\n    }\\n\\n    function _checkAmount(uint256 _amount) internal pure {\\n        if (_amount < MIN_COVER_AMOUNT)\\n            revert PriorityPool__UnderMinCoverAmount();\\n    }\\n\\n    /**\\n     * @notice Deploy a new generation lp token\\n     *         Generation starts from 1\\n     *\\n     * @return newLPAddress The deployed lp token address\\n     */\\n    function _deployNewGenerationLP(address _weightedFarmingPool)\\n        internal\\n        returns (address newLPAddress)\\n    {\\n        uint256 currentGeneration = ++generation;\\n\\n        // PRI-LP-2-JOE-G1: First generation of JOE priority pool with pool id 2\\n        string memory _name = string.concat(\\n            \\\"PRI-LP-\\\",\\n            poolId._toString(),\\n            \\\"-\\\",\\n            poolName,\\n            \\\"-G\\\",\\n            currentGeneration._toString()\\n        );\\n\\n        newLPAddress = address(new PriorityPoolToken(_name));\\n        lpTokenAddress[currentGeneration] = newLPAddress;\\n\\n        IWeightedFarmingPool(_weightedFarmingPool).addToken(\\n            poolId,\\n            newLPAddress,\\n            SCALE\\n        );\\n\\n        priceIndex[newLPAddress] = SCALE;\\n\\n        isLPToken[newLPAddress] = true;\\n\\n        emit NewGenerationLPTokenDeployed(\\n            poolName,\\n            poolId,\\n            currentGeneration,\\n            _name,\\n            newLPAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Mint current generation lp tokens\\n     *\\n     * @param _user   User address\\n     * @param _amount PRI-LP token amount\\n     */\\n    function _mintLP(address _user, uint256 _amount) internal {\\n        // Get current generation lp token address and mint tokens\\n        address lp = currentLPAddress();\\n        PriorityPoolToken(lp).mint(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn lp tokens\\n     *         Need specific generation lp token address as parameter\\n     *\\n     * @param _lpToken PRI-LP token adderss\\n     * @param _user    User address\\n     * @param _amount  PRI-LP token amount to burn\\n     */\\n    function _burnLP(\\n        address _lpToken,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        // Transfer PRO-LP token to user\\n        uint256 proLPAmount = (priceIndex[_lpToken] * _amount) / SCALE;\\n        SimpleERC20(protectionPool).transfer(_user, proLPAmount);\\n\\n        // Burn PRI-LP token\\n        PriorityPoolToken(_lpToken).burn(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Update cover record info when new covers come in\\n     *         Record the total cover amount in each month\\n     *\\n     * @param _amount Cover amount\\n     * @param _length Cover length in month\\n     */\\n    function _updateCoverInfo(uint256 _amount, uint256 _length) internal {\\n        (uint256 currentYear, uint256 currentMonth, uint256 currentDay) = block\\n            .timestamp\\n            .timestampToDate();\\n\\n        uint256 monthsToAdd = _length - 1;\\n\\n        if (currentDay >= 25) {\\n            monthsToAdd++;\\n        }\\n\\n        uint256 endMonth = currentMonth + monthsToAdd;\\n\\n        coverInMonth[currentYear][endMonth] += _amount;\\n    }\\n\\n    /**\\n     * @notice Update the farming speed in WeightedFarmingPool\\n     *\\n     * @param _length   Length in month\\n     * @param _newSpeed Speed to be added (SCALED)\\n     */\\n    function _updateWeightedFarmingSpeed(uint256 _length, uint256 _newSpeed)\\n        internal\\n    {\\n        uint256[] memory _years = new uint256[](_length);\\n        uint256[] memory _months = new uint256[](_length);\\n\\n        (uint256 currentYear, uint256 currentMonth, ) = block\\n            .timestamp\\n            .timestampToDate();\\n\\n        for (uint256 i; i < _length; ) {\\n            _years[i] = currentYear;\\n            _months[i] = currentMonth;\\n\\n            unchecked {\\n                if (++currentMonth > 12) {\\n                    ++currentYear;\\n                    currentMonth = 1;\\n                }\\n                ++i;\\n            }\\n        }\\n\\n        IWeightedFarmingPool(weightedFarmingPool).updateRewardSpeed(\\n            poolId,\\n            _newSpeed,\\n            _years,\\n            _months\\n        );\\n    }\\n\\n    /**\\n     * @notice Retrieve assets from Protection Pool for payout\\n     *\\n     * @param _amount Amount of SHIELD to retrieve\\n     */\\n    function _retrievePayout(uint256 _amount) internal {\\n        // Current PRO-LP amount\\n        uint256 currentLPAmount = SimpleERC20(protectionPool).balanceOf(\\n            address(this)\\n        );\\n\\n        IProtectionPool proPool = IProtectionPool(protectionPool);\\n\\n        uint256 proLPPrice = proPool.getLatestPrice();\\n\\n        // Need how many PRO-LP tokens to cover the _amount\\n        uint256 neededLPAmount = (_amount * SCALE) / proLPPrice;\\n\\n        // If current PRO-LP inside priority pool is enough\\n        // Remove part of the liquidity from Protection Pool\\n        if (neededLPAmount < currentLPAmount) {\\n            proPool.removedLiquidity(neededLPAmount, payoutPool);\\n\\n            priceIndex[currentLPAddress()] =\\n                ((currentLPAmount - neededLPAmount) * SCALE) /\\n                currentLPAmount;\\n        } else {\\n            uint256 shieldGot = proPool.removedLiquidity(\\n                currentLPAmount,\\n                address(this)\\n            );\\n\\n            uint256 remainingPayout = _amount - shieldGot;\\n\\n            proPool.removedLiquidityWhenClaimed(remainingPayout, payoutPool);\\n\\n            priceIndex[currentLPAddress()] = 0;\\n        }\\n\\n        // Set a ratio used when claiming with crTokens\\n        // E.g. ratio is 1e11\\n        //      You can only use 10% (1e11 / SCALE) of your crTokens for claiming\\n        uint256 payoutRatio;\\n        activeCovered() > 0\\n            ? payoutRatio = (_amount * SCALE) / activeCovered()\\n            : payoutRatio = 0;\\n\\n        IPayoutPool(payoutPool).newPayout(\\n            poolId,\\n            generation,\\n            _amount,\\n            payoutRatio,\\n            address(this)\\n        );\\n    }\\n\\n    function _updateCurrentLPWeight() internal {\\n        address lp = currentLPAddress();\\n\\n        // Update the farming pool with the new price index\\n        IWeightedFarmingPool(weightedFarmingPool).updateWeight(\\n            poolId,\\n            lp,\\n            priceIndex[lp]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x19c1cff2b0b38e4e705e935ebc73a0cdea45f0294e8ead6aa9722ca006b1f595\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function executor() external view returns (address);\\n}\\n\\ninterface IProtectionPool {\\n    function getTotalActiveCovered() external view returns (uint256);\\n\\n    function getLatestPrice() external returns (uint256);\\n\\n    function removedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (uint256);\\n\\n    function removedLiquidityWhenClaimed(uint256 _amount, address _to) external;\\n\\n    function pauseProtectionPool(bool _paused) external;\\n\\n    function stakedSupply() external view returns (uint256);\\n}\\n\\ninterface IPolicyCenter {\\n    function storePoolInformation(\\n        address _pool,\\n        address _token,\\n        uint256 _poolId\\n    ) external;\\n}\\n\\ninterface IPayoutPool {\\n    function newPayout(\\n        uint256 _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio,\\n        address _poolAddress\\n    ) external;\\n}\\n\\ninterface IWeightedFarmingPool {\\n    function addPool(address _token) external;\\n\\n    function addToken(\\n        uint256 _id,\\n        address _token,\\n        uint256 _weight\\n    ) external;\\n\\n    function updateRewardSpeed(\\n        uint256 _id,\\n        uint256 _newSpeed,\\n        uint256[] memory _years,\\n        uint256[] memory _months\\n    ) external;\\n\\n    function updateWeight(\\n        uint256 _id,\\n        address _token,\\n        uint256 _newWeight\\n    ) external;\\n}\\n\\nabstract contract PriorityPoolDependencies {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    uint256 internal constant SCALE = 1e12;\\n    uint256 internal constant SECONDS_PER_YEAR = 86400 * 365;\\n    uint256 internal constant DYNAMIC_TIME = 10 minutes;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address internal policyCenter;\\n    address internal priorityPoolFactory;\\n    address internal protectionPool;\\n    address internal weightedFarmingPool;\\n    address internal payoutPool;\\n}\\n\",\"keccak256\":\"0xee1bf284873f365621b9baa610c700ae68664ccadebcf07a9916c727b01d4691\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./PriorityPool.sol\\\";\\n\\ncontract PriorityPoolDeployer is Initializable {\\n    address public owner;\\n\\n    address public priorityPoolFactory;\\n    address public weightedFarmingPool;\\n    address public protectionPool;\\n    address public policyCenter;\\n    address public payoutPool;\\n\\n    event LengthChange(uint256 minLength, uint256 maxLength);\\n\\n    function initialize(\\n        address _priorityPoolFactory,\\n        address _weightedFarmingPool,\\n        address _protectionPool,\\n        address _policyCenter,\\n        address _payoutPool\\n    ) public initializer {\\n        owner = msg.sender;\\n\\n        priorityPoolFactory = _priorityPoolFactory;\\n        weightedFarmingPool = _weightedFarmingPool;\\n        protectionPool = _protectionPool;\\n        policyCenter = _policyCenter;\\n        payoutPool = _payoutPool;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @notice Create a new priority pool\\n     *         Called by executor when an onboard proposal has passed\\n     *\\n     * @param _name             Name of the protocol\\n     * @param _protocolToken    Address of the token used for the protocol\\n     * @param _maxCapacity      Maximum capacity of the pool\\n     * @param _basePremiumRatio Initial policy price per shield\\n     *\\n     * @return address Address of the new insurance pool\\n     */\\n    function deployPool(\\n        uint256 poolId,\\n        string calldata _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _basePremiumRatio\\n    ) public returns (address) {\\n        require(\\n            msg.sender == priorityPoolFactory || msg.sender == owner,\\n            \\\"Only factory\\\"\\n        );\\n\\n        address newPoolAddress = _deployPool(\\n            poolId,\\n            _name,\\n            _protocolToken,\\n            _maxCapacity,\\n            _basePremiumRatio\\n        );\\n\\n        return newPoolAddress;\\n    }\\n\\n    function _deployPool(\\n        uint256 _poolId,\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _baseRatio\\n    ) internal returns (address addr) {\\n        bytes memory bytecode = type(PriorityPool).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_poolId, _name));\\n\\n        bytes memory bytecodeWithParameters = abi.encodePacked(\\n            bytecode,\\n            abi.encode(\\n                _poolId,\\n                _name,\\n                _protocolToken,\\n                _maxCapacity,\\n                _baseRatio,\\n                owner,\\n                weightedFarmingPool,\\n                protectionPool,\\n                policyCenter,\\n                payoutPool\\n            )\\n        );\\n\\n        addr = _deploy(bytecodeWithParameters, salt);\\n    }\\n\\n    /**\\n     * @notice Deploy function with create2\\n     *\\n     * @param _code Byte code of the contract (creation code) (including constructor parameters if any)\\n     * @param _salt Salt for the deployment\\n     *\\n     * @return addr The deployed contract address\\n     */\\n    function _deploy(bytes memory _code, bytes32 _salt)\\n        internal\\n        returns (address addr)\\n    {\\n        assembly {\\n            addr := create2(0, add(_code, 0x20), mload(_code), _salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b52eec0f21d88a11efca1aba805c5a290a625ba8c757096d683bb304057b844\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface PriorityPoolEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event StakedLiquidity(uint256 amount, address sender);\\n    event UnstakedLiquidity(uint256 amount, address sender);\\n    event Liquidation(uint256 amount, uint256 generation);\\n\\n    event NewGenerationLPTokenDeployed(\\n        string poolName,\\n        uint256 poolId,\\n        uint256 currentGeneration,\\n        string name,\\n        address newLPAddress\\n    );\\n\\n    event CoverIndexChanged(uint256 oldIndex, uint256 newIndex);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PriorityPool__OnlyExecutor();\\n    error PriorityPool__OnlyPolicyCenter();\\n    error PriorityPool__NotOwnerOrFactory();\\n    error PriorityPool__WrongLPToken();\\n    error PriorityPool__WrongCoverLength();\\n    error PriorityPool__UnderMinCoverAmount();\\n}\\n\",\"keccak256\":\"0x4b082a742976f09532efb0159e914356d0a436f3d011affc440a6953b4b2879a\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n    *******         **********     ***********     *****     ***********\\n    *      *        *              *                 *       *\\n    *        *      *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     *              *                 *       *\\n    *         *     **********     *       *****     *       ***********\\n    *         *     *              *         *       *                 *\\n    *         *     *              *         *       *                 *\\n    *        *      *              *         *       *                 *\\n    *      *        *              *         *       *                 *\\n    *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../util/SimpleERC20.sol\\\";\\n\\n/**\\n * @notice LP token for priority pools\\n *\\n *         This lp token can be deposited into farming pool to get the premium income\\n *         LP token has different generations and they are different in names\\n *\\n *         E.g.  PRI-LP-2-JOE-G1 and PRI-LP-2-JOE-G2\\n *               They are both lp tokens for priority pool 2 (JOE pool)\\n *               But with different generations, they have different weights in farming\\n *\\n *         Every time there is a report for the project and some payout are given out\\n *         There will be a new generation of lp token\\n *\\n *         The weight will be set when the report happened\\n *         and will depend on how much part are paid during that report\\n */\\ncontract PriorityPoolToken is SimpleERC20 {\\n    // Only minter and burner is Priority Pool\\n    address private priorityPool;\\n\\n    modifier onlyPriorityPool() {\\n        require(msg.sender == priorityPool, \\\"Only priority pool\\\");\\n        _;\\n    }\\n\\n    constructor(string memory _name) SimpleERC20(_name, \\\"PRI-LP\\\") {\\n        priorityPool = msg.sender;\\n    }\\n\\n    function mint(address _user, uint256 _amount) external onlyPriorityPool {\\n        _mint(_user, _amount);\\n    }\\n\\n    function burn(address _user, uint256 _amount) external onlyPriorityPool {\\n        _burn(_user, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x07dc5d808c542a6b1d19d2c0f68941d5df61ef4d97c5e8d0331a996570001540\",\"license\":\"GPL-3.0-or-later\"},\"src/util/PausableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract PausableWithoutContext {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Paused\\\");\\n        _;\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _pause(bool _p) internal virtual {\\n        _paused = _p;\\n    }\\n}\\n\",\"keccak256\":\"0xe610bf149f8aaf333258716ecafc0bdc3e395ad2f7ee6ba38036839ca195d673\",\"license\":\"GPL-3.0-or-later\"},\"src/util/SimpleERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract SimpleERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public constant decimals = 6;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max)\\n            allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x243a2a4023d4d37a7a8e66500c0705e6f6f0929d1ef6f813e6d7fe4bdca4dd98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b6000803560e01c9081631459457a14620000cd575080634758ff0114620000c25780636273106a14620000b75780636c1b700f14620000ac5780636f8a6e4314620000a15780638da5cb5b1462000096578063b567dc6a146200008b5763e8adbf2f146200008157600080fd5b6200000f620004b7565b506200000f6200048b565b506200000f6200045b565b506200000f6200042f565b506200000f62000403565b506200000f620003d7565b506200000f62000343565b34620002cd5760a0366003190112620002cd57620000ea620002d0565b620001c9620000f8620002e7565b62000102620002fe565b6200010c62000315565b90620001176200032c565b928654956200014060ff8860081c161580988199620002be575b81156200029b575b50620004e3565b8662000154600160ff196000541617600055565b620002165793919260005462010000600160b01b033360101b169062010000600160b01b0319161760005560018060a01b0380948180948160018060a01b0319991689600154161760015516876002541617600255168560035416176003551683600454161760045516906005541617600555565b620001d357604051f35b620001e461ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1604051f35b6200022b61010061ff00196000541617600055565b93919260005462010000600160b01b033360101b169062010000600160b01b0319161760005560018060a01b0380948180948160018060a01b0319991689600154161760015516876002541617600255168560035416176003551683600454161760045516906005541617600555565b303b15915081620002af575b508a62000139565b6001915060ff16148a620002a7565b600160ff821610915062000131565b80fd5b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b604435906001600160a01b03821682036200000f57565b606435906001600160a01b03821682036200000f57565b608435906001600160a01b03821682036200000f57565b50346200000f5760a03660031901126200000f5767ffffffffffffffff6024358181116200000f57366023820112156200000f5780600401359182116200000f5736602483830101116200000f57620003d391620003b991620003a5620002fe565b6084359260246064359301600435620005a2565b6040516001600160a01b0390911681529081906020820190565b0390f35b50346200000f5760003660031901126200000f576005546040516001600160a01b039091168152602090f35b50346200000f5760003660031901126200000f576003546040516001600160a01b039091168152602090f35b50346200000f5760003660031901126200000f576001546040516001600160a01b039091168152602090f35b50346200000f5760003660031901126200000f5760005460405160109190911c6001600160a01b03168152602090f35b50346200000f5760003660031901126200000f576002546040516001600160a01b039091168152602090f35b50346200000f5760003660031901126200000f576004546040516001600160a01b039091168152602090f35b15620004eb57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176200058157604052565b6200058b62000547565b604052565b90620005a060405192836200055e565b565b600154919594939291336001600160a01b039182161490811562000660575b50156200062c5767ffffffffffffffff82116200061c575b60405191620005f3601f8201601f1916602001846200055e565b80835236818801116200000f57602081600092620006199983870137840101526200078a565b90565b6200062662000547565b620005d9565b60405162461bcd60e51b815260206004820152600c60248201526b4f6e6c7920666163746f727960a01b6044820152606490fd5b905060005460101c16331438620005c1565b918091926000905b828210620006945750116200068d575050565b6000910152565b915080602091830151818601520182916200067a565b90620006bf6020928281519485920162000672565b0190565b602092918152620006dd8251809385808501910162000672565b010190565b9596620007699361012098886200077a989e9d9b95620005a09d98958252620007266101408060208501528251928380928601526020610160809601910162000672565b601f80199101168a01019d60018060a01b03948580941660408c015260608b015260808a01521660a08801521660c086015260e085019060018060a01b03169052565b6001600160a01b0316610100830152565b6001600160a01b03909216910152565b926200086f926200087662000883936200085e620006199897620008516147b695620007b96020880162000590565b96808852620008986020890139604051976020890189620007dc888784620006c3565b0399620007f2601f199b8c81018352826200055e565b519020600054909c9060101c6001600160a01b03166002546001600160a01b03166003549091906001600160a01b03166004549093906001600160a01b03166005549095906001600160a01b0316966040519b8c9a60208c01620006e2565b038581018352826200055e565b6040519586936020850190620006aa565b90620006aa565b039081018352826200055e565b6020815191016000f590813b156200000f5756fe6101208060405234620006e7576000620047b68038038091620000238286620006ec565b843982019161014081840312620006e357805160208201516001600160401b038111620006df57820184601f82011215620006df57805190620000668262000726565b95620000766040519788620006ec565b82875260208383010111620006db579062000098916020808801910162000742565b620000a6604083016200077a565b936060830151608084015190620000c060a086016200077a565b96620000cf60c087016200077a565b93620000de60e088016200077a565b95620000fd610120620000f56101008b016200077a565b99016200077a565b60809a909a5260c0528051906001600160401b0382116200057b578190620001276005546200078f565b601f811162000688575b50602090601f83116001146200060c578a9262000600575b50508160011b916000199060031b1c1916176005555b610100526007554260e05260a0526200017a600654620007cc565b806006556200018b60c05162000819565b620001968262000819565b6040518092665052492d4c502d60c81b6020830152620001c181518092602060278601910162000742565b8101602d60f81b6027820152889060055490620001de826200078f565b9160018116908115620005da57506001146200058f575b5050906200022e9282612d4760f01b600294526200021d825180936020878501910162000742565b0103601d19810184520182620006ec565b604051610acf808201906001600160401b038211838310176200057b5760208392620002659262003cc785398181520184620007f2565b039087f09182156200057057808752600b6020526040872080546001600160a01b0319166001600160a01b038581169190911790915560c0519085163b156200056c5760405160016224184f60e11b0319815260048101919091526001600160a01b03848116602483015264e8d4a51000604483015288908290606490829084908a165af18015620005615762000530575b5060018060a01b0383168752600d60205264e8d4a510006040882055600c602052604087209160ff199260018482541617905560c051916040519260a08452899460055462000346816200078f565b918260a088015260018216918260001462000510575050600114620004c5575b50938392620003a9927f5bc145acec26384dc09c6269c9e569c69db21ad88cbd81319958b05998b83b5b96602086015260408501528382036060850152620007f2565b6001600160a01b03851660808301520390a16001600160a01b039081168552600d602052604080862064e8d4a5100090556127106008908155600180546001600160a01b0319908116331790915560038054821695851695909517909455600280548516958416959095179094558554610100600160a81b0319169490931b610100600160a81b03169390931790935560048054909316939091169290921790555161339a90816200092d82396080518181816102bf0152610749015260a05181818161026e015281816123b0015281816124f70152612560015260c05181818161088c01528181610e94015281816116a701526125fb015260e0518181816106ba015281816122330152612666015261010051816108c60152f35b60058b52939450928990600080516020620047968339815191525b818310620004f8575050840160c00193928362000366565b805460c08489010152602090920191600101620004e0565b1660c08781019190915291151560051b8601909101955084905062000366565b9096906001600160401b0381116200054d576040529538620002f7565b634e487b7160e01b82526041600452602482fd5b6040513d8a823e3d90fd5b8780fd5b6040513d88823e3d90fd5b634e487b7160e01b89526041600452602489fd5b60058b5290915089600080516020620047968339815191525b838210620005bf57505001602801826002620001f5565b805460288385010152869450602090910190600101620005a8565b60ff191660288381019190915283151590930290910190910191508390506002620001f5565b01519050388062000149565b60058b528a93506000805160206200479683398151915291905b601f19841685106200066c576001945083601f1981161062000652575b505050811b016005556200015f565b015160001960f88460031b161c1916905538808062000643565b8181015183556020948501946001909301929091019062000626565b90915060058a5260208a20601f840160051c810160208510620006d3575b90849392915b601f830160051c82018110620006c457505062000131565b8c8155859450600101620006ac565b5080620006a6565b8480fd5b8380fd5b5080fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200071057604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116200071057601f01601f191660200190565b918091926000905b828210620007645750116200075d575050565b6000910152565b915080602091830151818601520182916200074a565b51906001600160a01b0382168203620006e757565b90600182811c92168015620007c1575b6020831014620007ab57565b634e487b7160e01b600052602260045260246000fd5b91607f16916200079f565b6000198114620007dc5760010190565b634e487b7160e01b600052601160045260246000fd5b906020916200080d8151809281855285808601910162000742565b601f01601f1916010190565b8015620008fd5780816000925b620008e45750620008378262000726565b91620008476040519384620006ec565b80835281601f19620008598362000726565b013660208601375b6200086b57505090565b8060018110620007dc576000190191600a91828206603081198111620007dc578651861015620008ce570160f81b7fff000000000000000000000000000000000000000000000000000000000000001660001a908501601f015304908162000861565b634e487b7160e01b600052603260045260246000fd5b9091620008f3600a91620007cc565b9291048062000826565b50604080519081016001600160401b03811182821017620007105760405260018152600360fc1b60208201529056fe604060808152600490813610156200001657600080fd5b600091823560e01c9081630aadb77714620015625781630b92b5e4146200152d57816310b72d681462000cf35781631487ddda1462000bbd578163172195221462000b9c5781631733ea5014620009935781632440f3e914620008f55781632b79696814620008af5781633e0dc34e14620008725781634d05124c146200082b5781634e75827114620007f557816359b6a0c914620007d45781635c975abb14620007b05781635e5fe230146200071f5781636497587a14620006dd57816378e9792514620006a057816379e25f3a14620006645781638905faeb14620004745781638a9be828146200044d5781639926878e146200041e578163a775a6fd14620003f8578163d06a30be14620003d0578163d90543b814620003af578163e17739b5146200029157508063e2e7c36614620002555763f3466dfa146200015c57600080fd5b346200025157816003193601126200025157805190826005546200018081620017f4565b80855290600190818116908115620002265750600114620001c8575b505050620001b182620001c49403836200185c565b51918291602083526020830190620018b7565b0390f35b60058352602095507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410620002125750505082620001c494620001b192820101946200019c565b8054868501880152928601928101620001f2565b620001c49750620001b19450602092508693915060ff191682840152151560051b820101946200019c565b5080fd5b50346200025157816003193601126200025157602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b8383346200025157806003193601126200025157620002af620017cd565b602435936001600160a01b0391907f0000000000000000000000000000000000000000000000000000000000000000831633036200037f57858596600796959655826000146200036c57806200030591620018de565b925b60015416803b156200036857849283604492885196879586946349e51b2560e01b865215159085015260248401525af180156200035b576200034857505051f35b620003539062001831565b620002515751f35b50505051903d90823e3d90fd5b8480fd5b806200037891620018de565b9262000307565b606490602085519162461bcd60e51b8352820152600a60248201526927b7363c9037bbb732b960b11b6044820152fd5b50503462000251578160031936011262000251576020906008549051908152f35b5050346200025157816003193601126200025157602090620003f16200219c565b9051908152f35b505034620002515781600319360112620002515760209060ff6009541690519015158152f35b5050346200025157806020926200043536620017dd565b908252600a8552828220908252845220549051908152f35b82843462000471576020366003190112620004715750620003f16020923562002229565b80fd5b9050823462000471576200048836620017dd565b6200049582949262002693565b620004a08462002229565b92620151809182420490620004b58262001a4d565b939150506001821062000651576000199160198382019410156200063b575b50620004e4620004f09162001a4d565b94859492939162001969565b600181106200062857600c916200050d9101928284049062001969565b910660011981116200061557926200054f926200054992600162000559960191620005398383620020c8565b8091116200060c575b5062001e4b565b6200191b565b8342069062001969565b90428210620004715750620005786200058c9262000549920462001a4d565b50620005858183620020c8565b9162001e4b565b9062014370198211620005f757610dd41962014370830111620005f757603b1962015144830111620005f7575064496cebb80091620005e3620005da620005e9936201517f429101620018de565b94859262001934565b62001934565b049082519182526020820152f35b601190634e487b7160e01b6000525260246000fd5b92508c62000542565b634e487b7160e01b855260118752602485fd5b634e487b7160e01b865260118852602486fd5b909260011910620006515791620004e4620004d4565b634e487b7160e01b845260118652602484fd5b50503462000251576020366003190112620002515760209181906001600160a01b0362000690620017b6565b168152600d845220549051908152f35b5050346200025157816003193601126200025157602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50503462000251576020366003190112620002515760209160ff9082906001600160a01b036200070c620017b6565b168152600c855220541690519015158152f35b905034620007ac576020366003190112620007ac576200073e620017cd565b9060018060a01b03807f00000000000000000000000000000000000000000000000000000000000000001633141590816200079c575b506200078e575060ff801960005416911515161760005551f35b8251633d769c1160e21b8152fd5b9050600154163314153862000774565b8280fd5b505034620002515781600319360112620002515760ff602092541690519015158152f35b50503462000251578160031936011262000251576020906007549051908152f35b50503462000251578160031936011262000251576006548252600b6020908152918190205490516001600160a01b039091168152f35b8284346200047157806003193601126200047157506200084a6200219c565b91612710908360001904821184151516620005f75750600754602093620003f1920262001948565b5050346200025157816003193601126200025157602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5050346200025157816003193601126200025157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b905034620007ac576020366003190112620007ac57600254813591906001600160a01b031633036200095957507f98f8638d7fcb95eacabcf74919bde278d0b069a0579c6784d9bba8f93a4f62ee826008548151908152836020820152a160085551f35b606490602084519162461bcd60e51b8352820152601460248201527313db9b1e481c1c9bdd1958dd1a5bdb881c1bdbdb60621b6044820152fd5b905034620007ac576060366003190112620007ac57620009b2620017b6565b60243591604435916001600160a01b0390818416840362000b9757818754620009df60ff82161562002583565b60081c16330362000b8757811690818752602090600c825260ff87892054161562000b7757818894939262000a72869362000a19620025b9565b858552600d835264e8d4a5100062000a358b8d88205462001934565b6002548d5163a9059cbb60e01b81526001600160a01b038d168b820190815293909204602084015290968794919093169284929091839160400190565b03925af1801562000b6d5762000b33575b5050803b15620007ac578551632770a7eb60e21b81526001600160a01b03851692810192835260208301869052918391839182908490829060400103925af1801562000b295762000b0d575b505082519182526001600160a01b031660208201527fad77d19b2b77e0dfe7bf3e9cd2c87dc639cc1e223d58cf3d69603478f684064590604090a151f35b62000b189062001831565b62000b2557833862000acf565b8380fd5b85513d84823e3d90fd5b81813d831162000b65575b62000b4a81836200185c565b8101031262000b25575180151503620007ac57388062000a83565b503d62000b3e565b88513d87823e3d90fd5b8651631f05e71b60e31b81528490fd5b855163e3dfb17f60e01b81528390fd5b600080fd5b50503462000251578160031936011262000251576020906006549051908152f35b905034620007ac5781600319360112620007ac576001600160a01b039060243590803590838316830362000b975783865462000bfd60ff82161562002583565b60081c16330362000ce55762000c12620025b9565b6006548652600b6020528584868220541691823b15620002515786516340c10f1960e01b81526001600160a01b0386169181019182526020820185905292839182908490829060400103925af1801562000cdb5762000cc3575b5083519081526001600160a01b03919091166020808301919091529383917ff02b701fc10bff0958891c152c9eeabe4286e300c7ec9a0b08f64456ad941f7990604090a16006548152600b85522054169051908152f35b62000ccf869162001831565b62000368573862000c6c565b85513d88823e3d90fd5b845163e3dfb17f60e01b8152fd5b905034620007ac576020908160031936011262000b2557803560018060a01b0392600183828683541688519283809263c34c08e560e01b82525afa8015620015235786918991620014e2575b50163303620014d25762000d526200219c565b831115620014ca5762000d646200219c565b905b87866002541688516370a0823160e01b815230888201528581602481855afa9081156200144357839162001493575b508951638e15f47360e01b81528a87828b8188885af180156200148957889286916200144d575b5062000dd39062000dcd8962001900565b62001948565b938a8c85871015620013385781549351636d40d7d760e11b815291820187815293166001600160a01b0316602084015294959394938492839190829060400103925af19081156200123957869162001309575b505062000dcd62000e3c62000e429383620018de565b62001900565b6006548952600b845286888a2054168952600d8452878920555b62000e666200219c565b1562001301578762000e8d62000e7c8462001900565b62000e866200219c565b9062001948565b87875416907f00000000000000000000000000000000000000000000000000000000000000009460065492803b156200036857898560a49281958f958b9651988997889663c773a2d160e01b88528701526024860152604485015260648401523060848401525af18015620012df57620012e9575b50506006548852600b8352878688822054168760035416818352600d86528983205490803b1562000b255760648985889381958f51978896879563c65323f160e01b8752860152602485015260448401525af18015620012df57620012c3575b505085600354169562000f77600654620026b1565b8060065562000f8684620026de565b9162000f9282620026de565b8a518094665052492d4c502d60c81b8983015262000fba815180928b6027860191016200187f565b8101602d60f81b60278201528d80916005549162000fd883620017f4565b928a81169081156200129a575060011462001256575b50505090620010279282612d4760f01b6002945262001016825180938d87850191016200187f565b0103601d198101865201846200185c565b8951610acf8082019082821067ffffffffffffffff83111762001243578883926200105d926200287685398181520186620018b7565b03908cf080156200123957828c52600b87528a8c2080546001600160a01b031916929091169182179055978a813b1562000471578a98868a5191637fdbe7b160e11b83528201528a602482015281816064818364e8d4a51000978860448401525af180156200122f576200120e575b50899052600d8652878b2055600c8552868a209360ff1994848682541617905587519460a086528b946005546200110381620017f4565b928360a08a01528282169182600014620011dc5750506001146200118f575b5050849384937fd2f6618ba448f8b76ee0e823f8bb8c568b748f1687e1bc6bd625306fc4fb50359a93620011769389600080516020620033458339815191529901528a8601528482036060860152620018b7565b9060808301520390a1600654908351928352820152a151f35b60058d52878d209295508c925b828410620011c457505050840160c00192806000805160206200334583398151915262001122565b805488850160c001528c9a509288019281016200119c565b1660c0808a019190915292151560051b8801909201955082915060008051602062003345833981519152905062001122565b6200121c9192995062001831565b6200122b5788968a38620010cc565b8980fd5b8a513d84823e3d90fd5b8a513d8d823e3d90fd5b634e487b7160e01b8e5260418b5260248efd5b90919250600581528a898183205b8584106200127e5750505050016028018260028f62000fee565b8054858501602801528a965092909101918c918b910162001264565b60ff19166028848101919091528415159094029092019092019250849150600290508f62000fee565b620012ce9062001831565b620012db57873862000f62565b8780fd5b89513d84823e3d90fd5b620012f49062001831565b620012db57873862000f02565b878062000e8d565b813d831162001330575b6200131f81836200185c565b8101031262000b9757843862000e26565b503d62001313565b50509051636d40d7d760e11b81528a81019384523060208501529093509182908190604001038186865af19081156200144357839162001408575b50620013809085620018de565b88885416823b1562000b25578a5163329b1a9360e21b8152808a019283526001600160a01b03909116602083015291839183919082908490829060400103925af18015620012df57620013f0575b50506006548852600b83528587892054168852600d8352878781205562000e5c565b620013fb9062001831565b620012db578738620013ce565b809350868092503d83116200143b575b6200142481836200185c565b8101031262000b9757620013808a92519062001373565b503d62001418565b8a513d85823e3d90fd5b9550505083813d831162001481575b6200146881836200185c565b8101031262000b9757858a62000dd38d95519062000dbc565b503d6200145c565b81513d87823e3d90fd5b809350868092503d8311620014c2575b620014af81836200185c565b8101031262000b97578991513862000d95565b503d620014a3565b829062000d66565b8551633f77a45b60e01b81528490fd5b809250848092503d83116200151b575b620014fe81836200185c565b81010312620012db57518581168103620012db5785903862000d3f565b503d620014f2565b87513d8a823e3d90fd5b905034620007ac576020366003190112620007ac57358252600b6020908152918190205490516001600160a01b039091168152f35b839150346200025157600319608036820112620007ac578135604435928454926200159160ff85161562002583565b6001600160a01b039360081c84163303620017a7576003851180156200179c575b6200178d57620015c28362002693565b620015cc620025b9565b62015180420493620015de8562001a4d565b6001969291878a106200177a5790620016069160196000198c01921015620017675762001969565b908952600a6020528989209089526020526200162789892091825462001969565b90556200163d60643562000dcd60243562001900565b936200164987620027f2565b96620016606200165982620027f2565b9762001a4d565b5089898c925b8584106200172357505050505050506003541693843b156200171f57869492620016f1620016e197959387938b51998a988997889663341922c160e01b88527f00000000000000000000000000000000000000000000000000000000000000009088015260248701526080604487015260848601906200283f565b918483030160648501526200283f565b03925af1801562001715576200170657509051f35b620017119062001831565b9051f35b83513d84823e3d90fd5b8680fd5b806200174185899594886200173a8389986200282a565b526200282a565b520191600c831162001759575b0190898b9162001666565b92019184915081906200174e565b906200177390620026b1565b9062001969565b634e487b7160e01b8b526011875260248bfd5b508551632afd62f560e21b8152fd5b5060018510620015b2565b50855163e3dfb17f60e01b8152fd5b600435906001600160a01b038216820362000b9757565b60043590811515820362000b9757565b604090600319011262000b97576004359060243590565b90600182811c9216801562001826575b60208310146200181057565b634e487b7160e01b600052602260045260246000fd5b91607f169162001804565b67ffffffffffffffff81116200184657604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176200184657604052565b918091926000905b828210620018a15750116200189a575050565b6000910152565b9150806020918301518186015201829162001887565b90602091620018d2815180928185528580860191016200187f565b601f01601f1916010190565b818110620018ea570390565b634e487b7160e01b600052601160045260246000fd5b64e8d4a51000908060001904821181151516620018ea570290565b62015180908060001904821181151516620018ea570290565b8060001904821181151516620018ea570290565b811562001953570490565b634e487b7160e01b600052601260045260246000fd5b81198111620018ea570190565b6000811280156001600160ff1b03839003841316620018ea57600160ff1b829003831216620018ea570190565b6105b560008083136001600160ff1b03849004831116600116620019f55760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa884128285121616620019f557500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b018112600116620018ea57600d190190565b600082128015600160ff1b8401831216620018ea576001600160ff1b038301821316620018ea570390565b6000916001600160ff1b039162010bd99084811281850381158185131662001e3757600160ff1b93838503928382121662001e235787908401129162010bd819908162253d8c9301831384151662001e0f5701131662001dfb57622649650193600193600491858783048411828913161662001de857808712600760fd1b881216861662001de85762023ab196878160021b0597878985048211848b13161662001dd557877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b12161662001dd557880282811281850360031381151662000651578187036003121662001dd5579084600362001b509301059062001a22565b92818412848403881381151662001d895784860388121662001d7657868401610fa0888286048211858413161662001d9c57887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8312858412161662001d9c5762001bd19162164b09910205948262001bc987620019a3565b059062001a22565b828112818503601f1381151662001d9c57818703601f121662001d8957601f019680888504605011848a13161662001d8957807ffe666666666666666666666666666666666666666666666666666666666666678912848a12161662001d895761098f9788816050020590828287048b11868413161662001dc25784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c161662001daf579060508362001c8e9302059062001a22565b98600b82059782870360021382151662001daf578290036002121662001d9c5781878604600c11858913161662001d9c57817ff5555555555555555555555555555555555555555555555555555555555555568812858912161662001d9c5762001d0090600288600c02910162001a22565b986031600160ff1b018112821662001d9c57819060301901809504606411848613161662001d89577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98412838512161662001d7657505062001d71929162001d6b9160640262001976565b62001976565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b9291926107b2811062000b9757600191617d4b600160ff1b0185128316620018ea576000918281128015926001600160ff1b03929182840391906112c0838113871662001e2357600160ff1b85900390818112831662001e0f5762001ed298999a9b62001ee59162001ed860049b8c92600c62001ec88a62001a09565b05908b0162001976565b620019a3565b0590617d4a190162001976565b6002600160ff1b0184128b16620020b557600c62001f038562001a09565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c83131616620020a2578b7ff55555555555555555555555555555555555555555555555555555555555555682128c83121616620020a25762001f7390600c02600119860162001a22565b61016f8c828a0482118d841316166200208f578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d841216166200208f5762001fc69291600c9102059062001976565b96611324948513166200207c5783121662002069578792606492600c62001ff162001ffa9462001a09565b05910162001976565b05809204600311858313161662001d9c57847fd5555555555555555555555555555555555555555555555555555555555555568212858312161662001d9c5790826200204b92600302059062001a22565b9262253d8c600160ff1b0184121662001d7657505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b9060018114801562002191575b801562002186575b80156200217b575b801562002170575b801562002165575b80156200215a575b156200210a575050601f90565b600214620021185750601e90565b600381161590816200214c575b81156200213e575b50156200213957601d90565b601c90565b61019091500615386200212d565b606481061515915062002125565b50600c8114620020fd565b50600a8114620020f5565b5060088114620020ed565b5060078114620020e5565b5060058114620020dd565b5060038114620020d5565b600080620021af62015180420462001a4d565b50919081905b60038210620021d85750505050620021d4612710916008549062001934565b0490565b90919293620021ff908285526020600a815260409081872090888852528520549062001969565b93600180910192600c84116200221b575b0192919290620021b5565b925080910190809262002210565b90610258620022597f000000000000000000000000000000000000000000000000000000000000000042620018de565b11156200255e576001546040805163a7e9f1c760e01b81526004946001600160a01b039391929091602090819085908990829089165afa93841562002553576000946200251e575b508315620024f457620022c262000e3c84620022bc6200219c565b62001969565b8560025416938351631d23a7ad60e01b815283818b81895afa908115620024e957918a93918593600091620024aa575b5062002304929162000e869162001969565b96600654600052600b82528460002054168451928380926318160ddd60e01b82525afa9081156200249f579088929160009162002464575b5062002349829162001900565b9484519384809263d41ce4b160e01b82525afa9283156200245a57509084929160009262002420575b505062002384906200238b9362001948565b9362001934565b9064e8d4a5100019908183116200240b57620023dc90620023d564e8d4a510008095017f000000000000000000000000000000000000000000000000000000000000000062001934565b9462001934565b908111620023f657620023f3939450019062001948565b90565b601185634e487b7160e01b6000525260246000fd5b601186634e487b7160e01b6000525260246000fd5b90809350813d831162002452575b6200243a81836200185c565b81010312620004715750518290826200238462002372565b503d6200242e565b513d6000823e3d90fd5b9180935082813d831162002497575b6200247f81836200185c565b8101031262000471575051879190620023496200233c565b503d62002473565b83513d6000823e3d90fd5b929450909282813d8111620024e1575b620024c681836200185c565b810103126200047157505189928492909162002304620022f2565b503d620024ba565b85513d6000823e3d90fd5b507f0000000000000000000000000000000000000000000000000000000000000000955050505050565b90938482813d83116200254b575b6200253881836200185c565b81010312620004715750519238620022a1565b503d6200252c565b82513d6000823e3d90fd5b7f00000000000000000000000000000000000000000000000000000000000000009150565b156200258b57565b60405162461bcd60e51b815260206004820152600660248201526514185d5cd95960d21b6044820152606490fd5b60ff6009541615806200265c575b620025ce57565b6001546001600160a01b0316803b1562000b975760008091602460405180948193631528244d60e11b83527f000000000000000000000000000000000000000000000000000000000000000060048401525af1801562002650576200263e575b50600160ff196009541617600955565b620026499062001831565b386200262e565b6040513d6000823e3d90fd5b506102586200268c7f000000000000000000000000000000000000000000000000000000000000000042620018de565b11620025c7565b62989680116200269f57565b604051630dc1588960e01b8152600490fd5b6000198114620018ea5760010190565b67ffffffffffffffff81116200184657601f01601f191660200190565b8015620027a957600081805b620027925750620026fb81620026c1565b906200270b60405192836200185c565b808252601f196200271c82620026c1565b013660208401375b8083156200278b5760018110620018ea576000190192600a91828206603081198111620018ea57855187101562002775570160f81b6001600160f81b03191660001a908401601f0153049162002724565b634e487b7160e01b600052603260045260246000fd5b5050905090565b90620027a0600a91620026b1565b910480620026ea565b506040516040810181811067ffffffffffffffff821117620018465760405260018152600360fc1b602082015290565b67ffffffffffffffff8111620018465760051b60200190565b90620027fe82620027d9565b6200280d60405191826200185c565b828152809262002820601f1991620027d9565b0190602036910137565b8051821015620027755760209160051b010190565b90815180825260208080930193019160005b82811062002860575050505090565b8351855293810193928101926001016200285156fe6080604052346200038a5762000acf803803806200001d816200038f565b928339810160209182818303126200038a5780516001600160401b03918282116200038a570192601f908382860112156200038a5784518381116200027957601f199562000071828501881684016200038f565b958287528383830101116200038a578183916000905b8282106200037057501162000361575b50506040519460408601868110858211176200027957604052600686526505052492d4c560d41b82870152845184811162000279576000546001968782811c9216801562000356575b858310146200025857818684931162000300575b5084908683116001146200029b576000926200028f575b5050600019600383901b1c191690861b176000555b8551938411620002795784548581811c911680156200026e575b8382101462000258578381116200020d575b5081928411600114620001a95750508192936000926200019d575b5050600019600383901b1c191690821b1790555b600580546001600160a01b031916331790556040516107199081620003b68239f35b01519050388062000167565b6000858152828120918516969193925b878210620001f557505083859610620001db575b505050811b0190556200017b565b015160001960f88460031b161c19169055388080620001cd565b808785968294968601518155019501930190620001b9565b85600052826000208480870160051c8201928588106200024e575b0160051c019086905b828110620002415750506200014c565b6000815501869062000231565b9250819262000228565b634e487b7160e01b600052602260045260246000fd5b90607f16906200013a565b634e487b7160e01b600052604160045260246000fd5b0151905038806200010b565b90848994169160008052866000209260005b88828210620002e95750508411620002cf575b505050811b0160005562000120565b015160001960f88460031b161c19169055388080620002c0565b8385015186558c97909501949384019301620002ad565b90915060008052846000208680850160051c8201928786106200034c575b918a91869594930160051c01915b8281106200033c575050620000f4565b600081558594508a91016200032c565b925081926200031e565b91607f1691620000e0565b60009186010152388162000097565b92809250818401015182828a010152018290849262000087565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002795760405256fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461050357508063095ea7b31461049557806318160ddd1461047657806323b872dd146103b2578063313ce5671461039657806340c10f191461030a57806370a08231146102d257806395d89b41146101ce5780639dc29fac1461015d578063a9059cbb146100e75763dd62ed3e1461009c57600080fd5b346100e357816003193601126100e35760209282916100b9610630565b6100c161064b565b6001600160a01b03918216845291865283832091168252845220549051908152f35b8280fd5b505034610159578060031936011261015957602091610104610630565b82602435913384526003865281842061011e8482546106a2565b90556001600160a01b0316808452600386529220805482019055825190815233906000805160206106c4833981519152908590a35160018152f35b5080fd5b50503461015957806003193601126101595781610178610630565b6000805160206106c483398151915260206024359260018060a01b03906101a482600554163314610661565b1692838552600382528585206101bb8282546106a2565b905580600254036002558551908152a351f35b5091903461015957816003193601126101595780519082600180549081811c908083169283156102c8575b60209384841081146102b5578388529081156102995750600114610261575b505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b0390f35b634e487b7160e01b815260418552602490fd5b809293508652828620918387935b8385106102855750505050830101388080610218565b80548886018301529301928490820161026f565b60ff1916878501525050151560051b8401019050388080610218565b634e487b7160e01b895260228a52602489fd5b91607f16916101f9565b5050346101595760203660031901126101595760209181906001600160a01b036102fa610630565b1681526003845220549051908152f35b50346100e357816003193601126100e357610323610630565b600554602435926001600160a01b0392916103419084163314610661565b6002549084198211610383575085926000805160206106c48339815191529285602093016002551693848452600382528584208181540190558551908152a351f35b634e487b7160e01b875260119052602486fd5b5050346101595781600319360112610159576020905160068152f35b509134610473576060366003190112610473576103cd610630565b6000805160206106c48339815191526103e461064b565b6001600160a01b0392831680855260208781528686203387528152868620549097919488936044359389938560018201610450575b505050868852600385528288206104318582546106a2565b9055169586815260038452208181540190558551908152a35160018152f35b610459916106a2565b90888a528652838920338a52865283892055388085610419565b80fd5b5050346101595781600319360112610159576020906002549051908152f35b50346100e357816003193601126100e3576020926104b1610630565b918360243592839233825287528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b84915083346100e357826003193601126100e357828354600181811c908083169283156105cf575b60209384841081146102b5578388529081156105b3575060011461057b57505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b919250858052828620918387935b83851061059f5750505050830101858080610218565b805488860183015293019284908201610589565b60ff1916878501525050151560051b8401019050858080610218565b91607f169161052b565b919091602080825283519081818401526000945b82861061061a57505080604093941161060d575b601f01601f1916010190565b6000838284010152610601565b85810182015184870160400152948101946105ed565b600435906001600160a01b038216820361064657565b600080fd5b602435906001600160a01b038216820361064657565b1561066857565b60405162461bcd60e51b815260206004820152601260248201527113db9b1e481c1c9a5bdc9a5d1e481c1bdbdb60721b6044820152606490fd5b8181106106ad570390565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220ca9d29eeaf738d96683d3ebf044b4d2dec4e579fdcc94c4409c0e7590853a54f64736f6c634300080f00335bc145acec26384dc09c6269c9e569c69db21ad88cbd81319958b05998b83b5ba26469706673582212204084226db54233626236cc83a3d596c69f1ac5d61913c9e9bc8db1157025eb5a64736f6c634300080f00336080604052346200038a5762000acf803803806200001d816200038f565b928339810160209182818303126200038a5780516001600160401b03918282116200038a570192601f908382860112156200038a5784518381116200027957601f199562000071828501881684016200038f565b958287528383830101116200038a578183916000905b8282106200037057501162000361575b50506040519460408601868110858211176200027957604052600686526505052492d4c560d41b82870152845184811162000279576000546001968782811c9216801562000356575b858310146200025857818684931162000300575b5084908683116001146200029b576000926200028f575b5050600019600383901b1c191690861b176000555b8551938411620002795784548581811c911680156200026e575b8382101462000258578381116200020d575b5081928411600114620001a95750508192936000926200019d575b5050600019600383901b1c191690821b1790555b600580546001600160a01b031916331790556040516107199081620003b68239f35b01519050388062000167565b6000858152828120918516969193925b878210620001f557505083859610620001db575b505050811b0190556200017b565b015160001960f88460031b161c19169055388080620001cd565b808785968294968601518155019501930190620001b9565b85600052826000208480870160051c8201928588106200024e575b0160051c019086905b828110620002415750506200014c565b6000815501869062000231565b9250819262000228565b634e487b7160e01b600052602260045260246000fd5b90607f16906200013a565b634e487b7160e01b600052604160045260246000fd5b0151905038806200010b565b90848994169160008052866000209260005b88828210620002e95750508411620002cf575b505050811b0160005562000120565b015160001960f88460031b161c19169055388080620002c0565b8385015186558c97909501949384019301620002ad565b90915060008052846000208680850160051c8201928786106200034c575b918a91869594930160051c01915b8281106200033c575050620000f4565b600081558594508a91016200032c565b925081926200031e565b91607f1691620000e0565b60009186010152388162000097565b92809250818401015182828a010152018290849262000087565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002795760405256fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461050357508063095ea7b31461049557806318160ddd1461047657806323b872dd146103b2578063313ce5671461039657806340c10f191461030a57806370a08231146102d257806395d89b41146101ce5780639dc29fac1461015d578063a9059cbb146100e75763dd62ed3e1461009c57600080fd5b346100e357816003193601126100e35760209282916100b9610630565b6100c161064b565b6001600160a01b03918216845291865283832091168252845220549051908152f35b8280fd5b505034610159578060031936011261015957602091610104610630565b82602435913384526003865281842061011e8482546106a2565b90556001600160a01b0316808452600386529220805482019055825190815233906000805160206106c4833981519152908590a35160018152f35b5080fd5b50503461015957806003193601126101595781610178610630565b6000805160206106c483398151915260206024359260018060a01b03906101a482600554163314610661565b1692838552600382528585206101bb8282546106a2565b905580600254036002558551908152a351f35b5091903461015957816003193601126101595780519082600180549081811c908083169283156102c8575b60209384841081146102b5578388529081156102995750600114610261575b505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b0390f35b634e487b7160e01b815260418552602490fd5b809293508652828620918387935b8385106102855750505050830101388080610218565b80548886018301529301928490820161026f565b60ff1916878501525050151560051b8401019050388080610218565b634e487b7160e01b895260228a52602489fd5b91607f16916101f9565b5050346101595760203660031901126101595760209181906001600160a01b036102fa610630565b1681526003845220549051908152f35b50346100e357816003193601126100e357610323610630565b600554602435926001600160a01b0392916103419084163314610661565b6002549084198211610383575085926000805160206106c48339815191529285602093016002551693848452600382528584208181540190558551908152a351f35b634e487b7160e01b875260119052602486fd5b5050346101595781600319360112610159576020905160068152f35b509134610473576060366003190112610473576103cd610630565b6000805160206106c48339815191526103e461064b565b6001600160a01b0392831680855260208781528686203387528152868620549097919488936044359389938560018201610450575b505050868852600385528288206104318582546106a2565b9055169586815260038452208181540190558551908152a35160018152f35b610459916106a2565b90888a528652838920338a52865283892055388085610419565b80fd5b5050346101595781600319360112610159576020906002549051908152f35b50346100e357816003193601126100e3576020926104b1610630565b918360243592839233825287528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b84915083346100e357826003193601126100e357828354600181811c908083169283156105cf575b60209384841081146102b5578388529081156105b3575060011461057b57505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b919250858052828620918387935b83851061059f5750505050830101858080610218565b805488860183015293019284908201610589565b60ff1916878501525050151560051b8401019050858080610218565b91607f169161052b565b919091602080825283519081818401526000945b82861061061a57505080604093941161060d575b601f01601f1916010190565b6000838284010152610601565b85810182015184870160400152948101946105ed565b600435906001600160a01b038216820361064657565b600080fd5b602435906001600160a01b038216820361064657565b1561066857565b60405162461bcd60e51b815260206004820152601260248201527113db9b1e481c1c9a5bdc9a5d1e481c1bdbdb60721b6044820152606490fd5b8181106106ad570390565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220ca9d29eeaf738d96683d3ebf044b4d2dec4e579fdcc94c4409c0e7590853a54f64736f6c634300080f0033036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0a264697066735822122039f8d68a097ef7cae0b37028b605e0f0febbfac7478d16f4e9316ee46b0402bc64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployPool(uint256,string,address,uint256,uint256)": {
        "params": {
          "_basePremiumRatio": "Initial policy price per shield",
          "_maxCapacity": "Maximum capacity of the pool",
          "_name": "Name of the protocol",
          "_protocolToken": "Address of the token used for the protocol"
        },
        "returns": {
          "_0": "address Address of the new insurance pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployPool(uint256,string,address,uint256,uint256)": {
        "notice": "Create a new priority pool         Called by executor when an onboard proposal has passed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 55,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 18884,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18886,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18888,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "weightedFarmingPool",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 18890,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "protectionPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18892,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "policyCenter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 18894,
        "contract": "src/pools/priorityPool/PriorityPoolDeployer.sol:PriorityPoolDeployer",
        "label": "payoutPool",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}