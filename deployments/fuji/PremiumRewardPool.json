{
  "address": "0xa80E59DD05F99FF824b9Cf9737c195613Ec3ca6b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RewardTokenRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ShieldDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDistributed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeShield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shield",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x599623afaef34ef20c57b4a6490e83b4768b9c61b54bfb80344ed06b5f35530f",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xa80E59DD05F99FF824b9Cf9737c195613Ec3ca6b",
    "transactionIndex": 3,
    "gasUsed": "408515",
    "logsBloom": "0x
    "blockHash": "0x0f518d63a35b319413149bbb1f3fcfac4a4152e1543db15708f81946c84aa86b",
    "transactionHash": "0x599623afaef34ef20c57b4a6490e83b4768b9c61b54bfb80344ed06b5f35530f",
    "logs": [],
    "blockNumber": 13158081,
    "cumulativeGasUsed": "604400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5CCC562D1b4ED7c75dFd22B63fe3ab8b8F2001dD",
    "0x345F5A523a039D88545c2dc6346d784BbD35C9D6",
    "0x92c045b45567888FbA78a946eC67D23D18bF8271"
  ],
  "numDeployments": 4,
  "solcInputHash": "a72266a9511da4ed10aaff2bef53d9af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardTokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShieldDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDistributed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shield\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"distributeShield(uint256)\":{\"params\":{\"_amount\":\"Amount of shield to distribute\"}},\"distributeToken(address,uint256)\":{\"params\":{\"_amount\":\"Amount of shield to distribute\",\"_token\":\"Token address to distribute\"}},\"register(address,address)\":{\"params\":{\"_pool\":\"Priority Pool address\",\"_token\":\"Reward token address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distributeShield(uint256)\":{\"notice\":\"Distributes shield to Protection Pool\"},\"distributeToken(address,uint256)\":{\"notice\":\"Distributes given token to one of the Priority Pools\"},\"register(address,address)\":{\"notice\":\"Registers a Priority Pool when it is deployed\"}},\"notice\":\"Premium Reward Pool         Temporarily store the shield reward for Protection Pool                     store the token reward for Priority Pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/PremiumRewardPool.sol\":\"PremiumRewardPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632323836333732313938\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/pools/PremiumRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @notice Premium Reward Pool\\n *\\n *         Temporarily store the shield reward for Protection Pool\\n *                     store the token reward for Priority Pool\\n */\\ncontract PremiumRewardPool {\\n    address public factory;\\n\\n    address public protectionPool;\\n\\n    address public shield;\\n\\n    // Pool address => Reward token\\n    mapping(address => address) public rewardToken;\\n\\n    event ShieldDistributed(uint256 amount);\\n    event TokenDistributed(address token, uint256 amount);\\n    event RewardTokenRegistered(address pool, address token);\\n\\n    constructor(\\n        address _shield,\\n        address _factory,\\n        address _protectionPool\\n    ) {\\n        shield = _shield;\\n        factory = _factory;\\n        protectionPool = _protectionPool;\\n    }\\n\\n    /**\\n    * @notice Distributes shield to Protection Pool\\n    *\\n    * @param _amount          Amount of shield to distribute\\n    */\\n    function distributeShield(uint256 _amount) external {\\n        require(msg.sender == protectionPool, \\\"Only protection pool\\\");\\n        require(_amount > 0, \\\"Zero amount to transfer\\\");\\n\\n        IERC20(shield).transfer(protectionPool, _amount);\\n\\n        emit ShieldDistributed(_amount);\\n    }\\n\\n    /**\\n    * @notice Distributes given token to one of the Priority Pools\\n    *\\n    * @param _token         Token address to distribute\\n    * @param _amount        Amount of shield to distribute\\n    */\\n    function distributeToken(address _token, uint256 _amount) external {\\n        require(_token == rewardToken[msg.sender], \\\"Wrong priority pool\\\");\\n        require(_amount > 0, \\\"Zero amount to transfer\\\");\\n\\n        IERC20(_token).transfer(msg.sender, _amount);\\n\\n        emit TokenDistributed(_token, _amount);\\n    }\\n\\n    /**\\n    * @notice Registers a Priority Pool when it is deployed\\n    * @param _pool          Priority Pool address\\n    * @param _token         Reward token address\\n    */\\n    function register(address _pool, address _token) external {\\n        require(msg.sender == factory, \\\"Only factory\\\");\\n\\n        rewardToken[_pool] = _token;\\n\\n        emit RewardTokenRegistered(_pool, _token);\\n    }\\n}\\n\",\"keccak256\":\"0x1301b88fd44d6955dcabc851bc3637d09a6566ba85756f12fa04b312984e6670\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080346100a057601f6105f538819003918201601f19168301916001600160401b038311848410176100a5578084926060946040528339810103126100a057610047816100bb565b906100606040610059602084016100bb565b92016100bb565b60018060a01b0380928160018060a01b03199516856002541617600255168360005416176000551690600154161760015560405161052590816100d08239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100a05756fe608060408181526004918236101561001657600080fd5b600092833560e01c9182632ca9cbe81461031657508163518277db146101f15781636c1b700f146101c857816370d39cff1461019f578163aa677354146100d657508063c45a0155146100af5763cdef91d01461007257600080fd5b346100ab5760203660031901126100ab576020916001600160a01b039082908261009a61043e565b168152600385522054169051908152f35b5080fd5b50346100ab57816003193601126100ab57905490516001600160a01b039091168152602090f35b90503461019b578160031936011261019b576100f061043e565b6024356001600160a01b0381811693909291849003610197578286541633036101655750168084526003602090815283852080546001600160a01b0319168417905583519182528101919091527fac9952e7f5b7af8d68f871b1181dc8ef08879e7f81142a988925ba3021ce9b80908290a151f35b606490602086519162461bcd60e51b8352820152600c60248201526b4f6e6c7920666163746f727960a01b6044820152fd5b8580fd5b8280fd5b5050346100ab57816003193601126100ab5760025490516001600160a01b039091168152602090f35b5050346100ab57816003193601126100ab5760015490516001600160a01b039091168152602090f35b8383346100ab5760208060031936011261019b576001548435906001600160a01b0390811690338290036102dc578596849261026996978593610235851515610459565b600254169289519889958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af19283156102d2577fac2a4a7594ca6465b05ac77a2de75fb29de1fed2a14b9fc186a2cc84dfb5f082936102a5575b508351908152a151f35b6102c490833d85116102cb575b6102bc818361049f565b8101906104d7565b508561029b565b503d6102b2565b84513d87823e3d90fd5b845162461bcd60e51b8152808801859052601460248201527313db9b1e481c1c9bdd1958dd1a5bdb881c1bdbdb60621b6044820152606490fd5b8385913461019b578160031936011261019b5761033161043e565b338452600360205282842054602435926001600160a01b038381169216820361040757508260209161039795969761036a831515610459565b875163a9059cbb60e01b81523391810191825260208201939093529195869283918a918391604090910190565b03925af19283156102d2577ff6f55ada4fbb9e2bc6813f97e749a30067f3c13a200ce783269b50e6419e8f64936103e9575b5083516001600160a01b039190911681526020810191909152604090a151f35b6104009060203d81116102cb576102bc818361049f565b50856103c9565b62461bcd60e51b8152602087820152601360248201527215dc9bdb99c81c1c9a5bdc9a5d1e481c1bdbdb606a1b6044820152606490fd5b600435906001600160a01b038216820361045457565b600080fd5b1561046057565b60405162461bcd60e51b81526020600482015260176024820152762d32b9379030b6b7bab73a103a37903a3930b739b332b960491b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff8211176104c157604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261045457518015158103610454579056fea26469706673582212209222bb6116f998a561c71b1263639370f4cfc56db8cb9891e1bdaad1601467b364736f6c634300080f0033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c9182632ca9cbe81461031657508163518277db146101f15781636c1b700f146101c857816370d39cff1461019f578163aa677354146100d657508063c45a0155146100af5763cdef91d01461007257600080fd5b346100ab5760203660031901126100ab576020916001600160a01b039082908261009a61043e565b168152600385522054169051908152f35b5080fd5b50346100ab57816003193601126100ab57905490516001600160a01b039091168152602090f35b90503461019b578160031936011261019b576100f061043e565b6024356001600160a01b0381811693909291849003610197578286541633036101655750168084526003602090815283852080546001600160a01b0319168417905583519182528101919091527fac9952e7f5b7af8d68f871b1181dc8ef08879e7f81142a988925ba3021ce9b80908290a151f35b606490602086519162461bcd60e51b8352820152600c60248201526b4f6e6c7920666163746f727960a01b6044820152fd5b8580fd5b8280fd5b5050346100ab57816003193601126100ab5760025490516001600160a01b039091168152602090f35b5050346100ab57816003193601126100ab5760015490516001600160a01b039091168152602090f35b8383346100ab5760208060031936011261019b576001548435906001600160a01b0390811690338290036102dc578596849261026996978593610235851515610459565b600254169289519889958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af19283156102d2577fac2a4a7594ca6465b05ac77a2de75fb29de1fed2a14b9fc186a2cc84dfb5f082936102a5575b508351908152a151f35b6102c490833d85116102cb575b6102bc818361049f565b8101906104d7565b508561029b565b503d6102b2565b84513d87823e3d90fd5b845162461bcd60e51b8152808801859052601460248201527313db9b1e481c1c9bdd1958dd1a5bdb881c1bdbdb60621b6044820152606490fd5b8385913461019b578160031936011261019b5761033161043e565b338452600360205282842054602435926001600160a01b038381169216820361040757508260209161039795969761036a831515610459565b875163a9059cbb60e01b81523391810191825260208201939093529195869283918a918391604090910190565b03925af19283156102d2577ff6f55ada4fbb9e2bc6813f97e749a30067f3c13a200ce783269b50e6419e8f64936103e9575b5083516001600160a01b039190911681526020810191909152604090a151f35b6104009060203d81116102cb576102bc818361049f565b50856103c9565b62461bcd60e51b8152602087820152601360248201527215dc9bdb99c81c1c9a5bdc9a5d1e481c1bdbdb606a1b6044820152606490fd5b600435906001600160a01b038216820361045457565b600080fd5b1561046057565b60405162461bcd60e51b81526020600482015260176024820152762d32b9379030b6b7bab73a103a37903a3930b739b332b960491b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff8211176104c157604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261045457518015158103610454579056fea26469706673582212209222bb6116f998a561c71b1263639370f4cfc56db8cb9891e1bdaad1601467b364736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "distributeShield(uint256)": {
        "params": {
          "_amount": "Amount of shield to distribute"
        }
      },
      "distributeToken(address,uint256)": {
        "params": {
          "_amount": "Amount of shield to distribute",
          "_token": "Token address to distribute"
        }
      },
      "register(address,address)": {
        "params": {
          "_pool": "Priority Pool address",
          "_token": "Reward token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distributeShield(uint256)": {
        "notice": "Distributes shield to Protection Pool"
      },
      "distributeToken(address,uint256)": {
        "notice": "Distributes given token to one of the Priority Pools"
      },
      "register(address,address)": {
        "notice": "Registers a Priority Pool when it is deployed"
      }
    },
    "notice": "Premium Reward Pool         Temporarily store the shield reward for Protection Pool                     store the token reward for Priority Pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16224,
        "contract": "src/pools/PremiumRewardPool.sol:PremiumRewardPool",
        "label": "factory",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16226,
        "contract": "src/pools/PremiumRewardPool.sol:PremiumRewardPool",
        "label": "protectionPool",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16228,
        "contract": "src/pools/PremiumRewardPool.sol:PremiumRewardPool",
        "label": "shield",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 16232,
        "contract": "src/pools/PremiumRewardPool.sol:PremiumRewardPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}