{
  "address": "0x579E1B61Af1567eDD007F791FDf43bEEF6e2897C",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb07afafad3ee3da0865d54d3cc040a787ce0b86b9498c7cd2c9e47c553b08ec4",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x579E1B61Af1567eDD007F791FDf43bEEF6e2897C",
    "transactionIndex": 1,
    "gasUsed": "186262",
    "logsBloom": "0x
    "blockHash": "0x1622509e34c7a1ac510b253ebace278057b6f592e1f588c1cd05bc03bc1cc18c",
    "transactionHash": "0xb07afafad3ee3da0865d54d3cc040a787ce0b86b9498c7cd2c9e47c553b08ec4",
    "logs": [],
    "blockNumber": 13156784,
    "cumulativeGasUsed": "317076",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "4eb5f227bd7bf0ed322722368b3a587e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockExchange.sol\":\"MockExchange\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632323832363537393530\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/mock/MockExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MockExchange {\\n    constructor() {}\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut) {\\n        require(block.timestamp <= deadline);\\n\\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\n\\n        amountOut = amountIn;\\n        IERC20(path[1]).transfer(to, amountOut);\\n    }\\n}\\n\",\"keccak256\":\"0x071ffc5993c4fa2e688c909fd6d8a8c1b1a9f4659c4d93c966f708431e39c61d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657610267908161001c8239f35b600080fdfe60808060405260048036101561001457600080fd5b600090813560e01c6338ed17391461002b57600080fd5b346101c45760a03660031901126101c45780359060443567ffffffffffffffff918282116101c057366023830112156101c057818101359283116101c05760249236848260051b850101116101bc576001600160a01b03606435818116949192908590036101b85760843542116101b85780156101a6578798836100b488859b999a9b016101c8565b166323b872dd60e01b8252338683015230898301528960448301528160648160209d8e945af1801561019b5761017e575b506001101561016b579184604492610100848b9796016101c8565b1688604051988996879563a9059cbb60e01b87528601528401525af190811561015f5750610132575b50604051908152f35b61015190833d8511610158575b61014981836101e1565b810190610219565b5038610129565b503d61013f565b604051903d90823e3d90fd5b5050634e487b7160e01b83526032905250fd5b610194908a3d8c116101585761014981836101e1565b50386100e5565b6040513d89823e3d90fd5b634e487b7160e01b8852603284528588fd5b8780fd5b8580fd5b8480fd5b5080fd5b356001600160a01b03811681036101dc5790565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761020357604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126101dc575180151581036101dc579056fea2646970667358221220f32673b90e68b26ed8a2836ba4a16d48dcdfce0c635f725e3fad7caff984006564736f6c634300080f0033",
  "deployedBytecode": "0x60808060405260048036101561001457600080fd5b600090813560e01c6338ed17391461002b57600080fd5b346101c45760a03660031901126101c45780359060443567ffffffffffffffff918282116101c057366023830112156101c057818101359283116101c05760249236848260051b850101116101bc576001600160a01b03606435818116949192908590036101b85760843542116101b85780156101a6578798836100b488859b999a9b016101c8565b166323b872dd60e01b8252338683015230898301528960448301528160648160209d8e945af1801561019b5761017e575b506001101561016b579184604492610100848b9796016101c8565b1688604051988996879563a9059cbb60e01b87528601528401525af190811561015f5750610132575b50604051908152f35b61015190833d8511610158575b61014981836101e1565b810190610219565b5038610129565b503d61013f565b604051903d90823e3d90fd5b5050634e487b7160e01b83526032905250fd5b610194908a3d8c116101585761014981836101e1565b50386100e5565b6040513d89823e3d90fd5b634e487b7160e01b8852603284528588fd5b8780fd5b8580fd5b8480fd5b5080fd5b356001600160a01b03811681036101dc5790565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761020357604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126101dc575180151581036101dc579056fea2646970667358221220f32673b90e68b26ed8a2836ba4a16d48dcdfce0c635f725e3fad7caff984006564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}