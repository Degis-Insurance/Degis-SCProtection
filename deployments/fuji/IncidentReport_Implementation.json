{
  "address": "0x219d452729E27157e7D55024462886e2d41C70Db",
  "abi": [
    {
      "inputs": [],
      "name": "IncidentReport__AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__AlreadyPaid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__AlreadyReported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__AlreadySettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__ChooseBothSides",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__NoReward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__NotEnoughVeDEG",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__NotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__NotWrongChoice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__OnlyExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__PayoutExceedCovered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__PoolNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__QuorumRatioTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__WrongChoice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__WrongPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__WrongStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncidentReport__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockAmount",
          "type": "uint256"
        }
      ],
      "name": "DebtPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closeTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ReportClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportTimestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "ReportCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "ReportExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        }
      ],
      "name": "ReportFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "ReportSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReportVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        }
      ],
      "name": "ReportVotingStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewardToVoters",
          "type": "uint256"
        }
      ],
      "name": "VotingRewardSettled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_WRONG_REPORT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXTEND_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INCIDENT_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EXTEND_ROUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PENDING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REPORTER_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REPORT_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESERVE_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SAMPLE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "addPoolReports",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "closeReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        }
      ],
      "name": "executed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolReports",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolReportsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getReport",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reportTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "reporter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "voteTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numFor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numAgainst",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "round",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "status",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "payout",
              "type": "uint256"
            }
          ],
          "internalType": "struct IncidentReport.Report",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getTempResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sampleTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasChanged",
              "type": "bool"
            }
          ],
          "internalType": "struct IncidentReport.TempResult",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getUserVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "choice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "paid",
              "type": "bool"
            }
          ],
          "internalType": "struct IncidentReport.UserVote",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "payDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolReports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "contract IPriorityPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payout",
          "type": "uint256"
        }
      ],
      "name": "report",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reportCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reports",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reportTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "voteTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "setQuorumRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setReported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "startVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tempResults",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sampleTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasChanged",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "unpausePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_isFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "paid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x003753c6d92d42083396e92e2d80059f1df787624f2968f3f039cb94b0ac4344",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x219d452729E27157e7D55024462886e2d41C70Db",
    "transactionIndex": 0,
    "gasUsed": "1965109",
    "logsBloom": "0x
    "blockHash": "0x85f4466b3f8996d2d41ef0fb3ce931120429a5965aa1922d7d898eaf8c83c695",
    "transactionHash": "0x003753c6d92d42083396e92e2d80059f1df787624f2968f3f039cb94b0ac4344",
    "logs": [],
    "blockNumber": 13656988,
    "cumulativeGasUsed": "1965109",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e1ba30aa7fe1764f1fb0e486bbf521c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IncidentReport__AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__AlreadyPaid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__AlreadyReported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__AlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__ChooseBothSides\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__NoReward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__NotEnoughVeDEG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__NotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__NotWrongChoice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__OnlyExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__PayoutExceedCovered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__PoolNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__QuorumRatioTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__WrongChoice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__WrongPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__WrongStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncidentReport__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockAmount\",\"type\":\"uint256\"}],\"name\":\"DebtPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closeTimestamp\",\"type\":\"uint256\"}],\"name\":\"ReportClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportTimestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"ReportCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"ReportExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"}],\"name\":\"ReportFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ReportSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReportVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"}],\"name\":\"ReportVotingStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewardToVoters\",\"type\":\"uint256\"}],\"name\":\"VotingRewardSettled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_WRONG_REPORT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTEND_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INCIDENT_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EXTEND_ROUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENDING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORTER_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORT_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAMPLE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"addPoolReports\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"}],\"name\":\"executed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolReports\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolReportsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getReport\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"internalType\":\"struct IncidentReport.Report\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getTempResult\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sampleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasChanged\",\"type\":\"bool\"}],\"internalType\":\"struct IncidentReport.TempResult\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getUserVote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"internalType\":\"struct IncidentReport.UserVote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"payDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolReports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"contract IPriorityPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payout\",\"type\":\"uint256\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reportCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reports\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reportTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setQuorumRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setReported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tempResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sampleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasChanged\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"unpausePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_isFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(uint256)\":{\"params\":{\"_id\":\"Report id\"}},\"closeReport(uint256)\":{\"params\":{\"_id\":\"Report id\"}},\"executed(uint256)\":{\"params\":{\"_reportId\":\"Report id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payDebt(uint256,address)\":{\"params\":{\"_id\":\"Report id\",\"_user\":\"User address (can pay debt for another user)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"report(uint256,uint256)\":{\"params\":{\"_payout\":\"Payout amount of this report\",\"_poolId\":\"Pool id to report incident\"}},\"settle(uint256)\":{\"params\":{\"_id\":\"Report id\"}},\"startVoting(uint256)\":{\"params\":{\"_id\":\"Report id\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of veDEG used for this vote\",\"_id\":\"Id of the report to be voted on\",\"_isFor\":\"The user's choice (1: vote for, 2: vote against)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(uint256)\":{\"notice\":\"Claim the voting reward         Only callable through proposal center\"},\"closeReport(uint256)\":{\"notice\":\"Close a pending report         Only owner can close a pending report         Can only be closed before the pending period ends         Will change the status from PENDING to CLOSED\"},\"executed(uint256)\":{\"notice\":\"Update status after execution         Only callable by executor\"},\"payDebt(uint256,address)\":{\"notice\":\"Pay debt to get back veDEG         For those who made a wrong voting choice         The paid DEG will be burned and the veDEG will be unlocked         Can not call this function when result is TIED or choose the correct side\"},\"report(uint256,uint256)\":{\"notice\":\"Start a new incident report         1000 DEG tokens are staked to start a report         If the report is correct, reporter gets back 1000DEG + 10% shield income + extra 1000DEG         If the report is wrong, reporter loses 1000DEG to those who vote against         Only callable through proposal center\"},\"settle(uint256)\":{\"notice\":\"Settle the final result for a report\"},\"startVoting(uint256)\":{\"notice\":\"Start the voting process         Can only be started after the pending period         Will change the status from PENDING to VOTING\"},\"vote(uint256,uint256,uint256)\":{\"notice\":\"Vote on current reports         Voting power is decided by the (unlocked) balance of veDEG         Once voted, those veDEG will be locked         Rewarded if votes with majority         Punished if votes against majority\"}},\"notice\":\"Incident Report Contract         New reports for project hacks are handled inside this contract         Timeline for a report is:         |-----------------------|----------------------|-------|-------|               Pending Period         Voting Period       Extend Period         When a new report is proposed, it start with PENDING_STATUS.         The person who start the report need to deposit REPORT_THRESHOLD DEG tokens.         During PENDING_STATUS, users & security companies can look at the report event.         After PENDING_PERIOD, the voting can be started and status transfer to VOTING_STATUS.         Users can vote for or against the report with veDeg tokens.         VeDeg tokens used for voting will be tentatively locked until the voting is settled.         After VOTING_PERIOD, the voting can be settled and status transfer to SETTLED_STATUS.         Depending on the votes of each side, the result can be PASSED, REJECTED or TIED.         Different results for their veDeg tokens will be set depending on the result.         If the result has changes during the last 24 hours of voting, the voting will be extended.         The time can only be extended twice.         For voters:              PASSED: Who vote for will get all veDeg tokens from the opposite side              REJECTED: Who vote against will get all veDeg tokens from the opposite side              TIED: Users can unlock their veDeg tokens         For reporter:              PASSED: Get back REPORT_THRESHOLD and get extra REPORT_REWARD & 10% of total treasury income              REJECTED: Lose REPORT_THRESHOLD to whom vote against              TIED: Lose REPORT_THRESHOLD         When an incident report has passed and been executed         The corresponding priority pool will be liquidated which means:             - Move out some assets for users to claim             - Deploy new generation of crTokens and PRI-LP tokens             - Update the farming weights for the priority farming pool\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/voting/incidentReport/IncidentReport.sol\":\"IncidentReport\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363633353630313835323839\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IShield.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\nabstract contract ExternalTokenDependencies is\\n    CommonDependencies,\\n    Initializable\\n{\\n    IDegisToken internal deg;\\n    IVeDEG internal veDeg;\\n    IShield internal shield;\\n\\n    function __ExternalToken__Init(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) internal onlyInitializing {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n        shield = IShield(_shield);\\n    }\\n}\\n\",\"keccak256\":\"0x4d420306f09309f1f235437967130000a9303869e1dd051d0ab8dea42972eae0\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x926ec7ef1eb5d6178e8cc0e29f12d1853f6ed27ec6b1864697e7a845e4a6294d\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n}\\n\",\"keccak256\":\"0x8c988f1fbeea64eede1c093a62bb6523f0f3e35a5d1807fc1909060cad38928f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IShield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\ninterface IShield is SimpleIERC20 {\\n    function deposit(\\n        uint256 _type,\\n        address _stablecoin,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xea3edf57ae974302360119e5b648eb85bda72762c996680ef5b7e0b827be0c02\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x8e86f7b957f4a1d3e5e34a57f051b90c5008f431c00ce2e0a1d47c6c8ad5911d\",\"license\":\"MIT\"},\"src/util/OwnableWithoutContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OwnableWithoutContextUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb7c1bac54d6b38b0ff582113689643e43bdbc9eaf4dcd906373c3f44f7b2eab5\",\"license\":\"MIT\"},\"src/util/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b15e78313a0d5b81dcaaea2e7545aa8688d1e44ef97f607f2405d0c9e7e0df7\",\"license\":\"MIT\"},\"src/voting/incidentReport/IncidentReport.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../util/OwnableWithoutContextUpgradeable.sol\\\";\\n\\nimport \\\"./IncidentReportParameters.sol\\\";\\nimport \\\"./IncidentReportDependencies.sol\\\";\\nimport \\\"./IncidentReportEventError.sol\\\";\\n\\nimport \\\"../../interfaces/ExternalTokenDependencies.sol\\\";\\n\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/**\\n * @notice Incident Report Contract\\n *\\n *         New reports for project hacks are handled inside this contract\\n *\\n *         Timeline for a report is:\\n *\\n *         |-----------------------|----------------------|-------|-------|\\n *               Pending Period         Voting Period       Extend Period\\n *\\n *         When a new report is proposed, it start with PENDING_STATUS.\\n *         The person who start the report need to deposit REPORT_THRESHOLD DEG tokens.\\n *         During PENDING_STATUS, users & security companies can look at the report event.\\n *\\n *         After PENDING_PERIOD, the voting can be started and status transfer to VOTING_STATUS.\\n *         Users can vote for or against the report with veDeg tokens.\\n *         VeDeg tokens used for voting will be tentatively locked until the voting is settled.\\n *\\n *         After VOTING_PERIOD, the voting can be settled and status transfer to SETTLED_STATUS.\\n *         Depending on the votes of each side, the result can be PASSED, REJECTED or TIED.\\n *         Different results for their veDeg tokens will be set depending on the result.\\n *\\n *         If the result has changes during the last 24 hours of voting, the voting will be extended.\\n *         The time can only be extended twice.\\n *\\n *         For voters:\\n *              PASSED: Who vote for will get all veDeg tokens from the opposite side\\n *              REJECTED: Who vote against will get all veDeg tokens from the opposite side\\n *              TIED: Users can unlock their veDeg tokens\\n *         For reporter:\\n *              PASSED: Get back REPORT_THRESHOLD and get extra REPORT_REWARD & 10% of total treasury income\\n *              REJECTED: Lose REPORT_THRESHOLD to whom vote against\\n *              TIED: Lose REPORT_THRESHOLD\\n *\\n *         When an incident report has passed and been executed\\n *         The corresponding priority pool will be liquidated which means:\\n *             - Move out some assets for users to claim\\n *             - Deploy new generation of crTokens and PRI-LP tokens\\n *             - Update the farming weights for the priority farming pool\\n *\\n */\\ncontract IncidentReport is\\n    IncidentReportParameters,\\n    IncidentReportEventError,\\n    OwnableWithoutContextUpgradeable,\\n    ExternalTokenDependencies,\\n    IncidentReportDependencies\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Total number of reports\\n    uint256 public reportCounter;\\n\\n    // Report quorum ratio\\n    uint256 public quorumRatio;\\n\\n    struct Report {\\n        uint256 poolId; // Project pool id\\n        uint256 reportTimestamp; // Time of starting report\\n        address reporter; // Reporter address\\n        uint256 voteTimestamp; // Voting start timestamp\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 round; // 0: Initial round 3 days, 1: Extended round 1 day, 2: Double extended 1 day\\n        uint256 status; // PENDING, VOTING, SETTLED, CLOSED\\n        uint256 result; // 1: Pass, 2: Reject, 3: Tied\\n        uint256 votingReward; // Voting reward per veDEG\\n        uint256 payout; // Payout amount of this report (partial payout)\\n    }\\n    // Report id => Report\\n    mapping(uint256 => Report) public reports;\\n\\n    // Pool id => All related reports\\n    mapping(uint256 => uint256[]) public poolReports;\\n\\n    struct TempResult {\\n        uint256 result;\\n        uint256 sampleTimestamp;\\n        bool hasChanged;\\n    }\\n    mapping(uint256 => TempResult) public tempResults;\\n\\n    struct UserVote {\\n        uint256 choice; // 1: vote for, 2: vote against\\n        uint256 amount; // total veDEG amount for voting\\n        bool claimed; // whether has claimed the reward\\n        bool paid; // whether has paid the debt   // @audit Add paid status\\n    }\\n    // User address => report id => user's voting info\\n    mapping(address => mapping(uint256 => UserVote)) public votes;\\n\\n    // Pool id => whether the pool is being reported\\n    mapping(uint256 => bool) public reported;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) public initializer {\\n        __Ownable_init();\\n        __ExternalToken__Init(_deg, _veDeg, _shield);\\n\\n        // Initial quorum 50%\\n        quorumRatio = 50;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function getUserVote(address _user, uint256 _poolId)\\n        external\\n        view\\n        returns (UserVote memory)\\n    {\\n        return votes[_user][_poolId];\\n    }\\n\\n    function getTempResult(uint256 _poolId)\\n        external\\n        view\\n        returns (TempResult memory)\\n    {\\n        return tempResults[_poolId];\\n    }\\n\\n    function getReport(uint256 _id) public view returns (Report memory) {\\n        return reports[_id];\\n    }\\n\\n    function getPoolReports(uint256 _poolId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return poolReports[_poolId];\\n    }\\n\\n    function getPoolReportsAmount(uint256 _poolId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return poolReports[_poolId].length;\\n    }\\n\\n    function addPoolReports(uint256 _poolId, uint256 _number) external {\\n        poolReports[_poolId].push(_number);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        priorityPoolFactory = IPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    function setExecutor(address _executor) external onlyOwner {\\n        executor = _executor;\\n    }\\n\\n    function setQuorumRatio(uint256 _ratio) external onlyOwner {\\n        if (_ratio >= 100) revert IncidentReport__QuorumRatioTooBig();\\n        quorumRatio = _ratio;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new incident report\\n     *\\n     *         1000 DEG tokens are staked to start a report\\n     *         If the report is correct, reporter gets back 1000DEG + 10% shield income + extra 1000DEG\\n     *         If the report is wrong, reporter loses 1000DEG to those who vote against\\n     *         Only callable through proposal center\\n     *\\n     * @param _poolId Pool id to report incident\\n     * @param _payout Payout amount of this report\\n     */\\n    function report(uint256 _poolId, uint256 _payout) external {\\n        _report(_poolId, _payout, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Start the voting process\\n     *\\n     *         Can only be started after the pending period\\n     *         Will change the status from PENDING to VOTING\\n     *\\n     * @param _id Report id\\n     */\\n    function startVoting(uint256 _id) external {\\n        Report storage currentReport = reports[_id];\\n        if (currentReport.status != PENDING_STATUS)\\n            revert IncidentReport__WrongStatus();\\n\\n        // Can only start the voting after pending period\\n        if (!_passedPendingPeriod(currentReport.reportTimestamp))\\n            revert IncidentReport__WrongPeriod();\\n\\n        currentReport.status = VOTING_STATUS;\\n        currentReport.voteTimestamp = block.timestamp;\\n\\n        // @audit Pause pools when report rather than start voting\\n        // // Pause insurance pool and reinsurance pool\\n        // _pausePools(currentReport.poolId);\\n\\n        emit ReportVotingStart(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Close a pending report\\n     *\\n     *         Only owner can close a pending report\\n     *         Can only be closed before the pending period ends\\n     *         Will change the status from PENDING to CLOSED\\n     *\\n     * @param _id Report id\\n     */\\n    function closeReport(uint256 _id) external onlyOwner {\\n        Report storage currentReport = reports[_id];\\n        if (currentReport.status != PENDING_STATUS)\\n            revert IncidentReport__WrongStatus();\\n\\n        // Must close the report before pending period ends\\n        if (_passedPendingPeriod(currentReport.reportTimestamp))\\n            revert IncidentReport__WrongPeriod();\\n\\n        currentReport.status = CLOSE_STATUS;\\n        reported[_id] = false;\\n\\n        _unpausePools(currentReport.poolId);\\n\\n        emit ReportClosed(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Vote on current reports\\n     *\\n     *         Voting power is decided by the (unlocked) balance of veDEG\\n     *         Once voted, those veDEG will be locked\\n     *         Rewarded if votes with majority\\n     *         Punished if votes against majority\\n     *\\n     * @param _id     Id of the report to be voted on\\n     * @param _isFor  The user's choice (1: vote for, 2: vote against)\\n     * @param _amount Amount of veDEG used for this vote\\n     */\\n    function vote(\\n        uint256 _id,\\n        uint256 _isFor,\\n        uint256 _amount\\n    ) external {\\n        _vote(_id, _isFor, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Settle the final result for a report\\n     *\\n     * @param _id Report id\\n     */\\n    function settle(uint256 _id) external {\\n        Report storage currentReport = reports[_id];\\n\\n        if (currentReport.status != VOTING_STATUS)\\n            revert IncidentReport__WrongStatus();\\n\\n        // Check has passed the voting period\\n        if (\\n            !_passedVotingPeriod(\\n                currentReport.round,\\n                currentReport.voteTimestamp\\n            )\\n        ) revert IncidentReport__WrongPeriod();\\n\\n        if (currentReport.result > 0) revert IncidentReport__AlreadySettled();\\n\\n        uint256 res = _checkRoundExtended(_id, currentReport.round);\\n\\n        if (res > 0) {\\n            currentReport.status = SETTLED_STATUS;\\n            if (_checkQuorum(currentReport.numFor + currentReport.numAgainst)) {\\n                // REJECT or TIED: unlock the priority pool & protection pool immediately\\n                //                 mark the report as not reported\\n                if (res != PASS_RESULT) {\\n                    uint256 poolId = currentReport.poolId;\\n                    _unpausePools(poolId);\\n                    reported[poolId] = false;\\n                }\\n\\n                currentReport.result = res;\\n\\n                _settleVotingReward(_id, res);\\n                emit ReportSettled(_id, res);\\n            } else {\\n                currentReport.result = FAILED_RESULT;\\n                uint256 poolId = currentReport.poolId;\\n                // FAILED: unlock the priority pool & protection pool immediately\\n                _unpausePools(poolId);\\n                reported[poolId] = false;\\n                emit ReportFailed(_id);\\n            }\\n        } else {\\n            tempResults[_id].hasChanged = false;\\n\\n            emit ReportExtended(_id, currentReport.round);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claim the voting reward\\n     *         Only callable through proposal center\\n     *\\n     * @param _id Report id\\n     */\\n    function claimReward(uint256 _id) external {\\n        _claimReward(_id, msg.sender);\\n    }\\n\\n    function setReported(uint256 _id) external {\\n        reported[_id] = false;\\n    }\\n\\n    /**\\n     * @notice Pay debt to get back veDEG\\n     *\\n     *         For those who made a wrong voting choice\\n     *         The paid DEG will be burned and the veDEG will be unlocked\\n     *\\n     *         Can not call this function when result is TIED or choose the correct side\\n     *\\n     * @param _id   Report id\\n     * @param _user User address (can pay debt for another user)\\n     */\\n    function payDebt(uint256 _id, address _user) external {\\n        UserVote memory userVote = votes[_user][_id];\\n        uint256 finalResult = reports[_id].result;\\n\\n        if (finalResult == 0) revert IncidentReport__NotSettled();\\n        if (\\n            userVote.choice == finalResult ||\\n            finalResult == TIED_RESULT ||\\n            finalResult == FAILED_RESULT\\n        ) revert IncidentReport__NotWrongChoice();\\n        // @audit Add paid status\\n        if (userVote.paid) revert IncidentReport__AlreadyPaid();\\n\\n        uint256 debt = (userVote.amount * DEBT_RATIO) / 10000;\\n\\n        // Pay the debt in DEG\\n        deg.burnDegis(msg.sender, debt);\\n\\n        // Unlock the user's veDEG\\n        veDeg.unlockVeDEG(_user, userVote.amount);\\n\\n        // @audit Add paid status\\n        votes[_user][_id].paid = true;\\n\\n        emit DebtPaid(msg.sender, _user, debt, userVote.amount);\\n    }\\n\\n    function unpausePools(uint256 _poolId) external onlyOwner {\\n        _unpausePools(_poolId);\\n    }\\n\\n    /**\\n     * @notice Update status after execution\\n     *         Only callable by executor\\n     *\\n     * @param _reportId Report id\\n     */\\n    function executed(uint256 _reportId) external {\\n        if (msg.sender != executor) revert IncidentReport__OnlyExecutor();\\n\\n        uint256 poolId = reports[_reportId].poolId;\\n        reported[poolId] = false;\\n\\n        _unpausePools(poolId);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new incident report\\n     *\\n     *         1000 DEG tokens are staked to start a report\\n     *         If the report is correct, reporter gets back 1000DEG + 10% shield income + extra 1000DEG\\n     *         If the report is wrong, reporter loses 1000DEG to those who vote against\\n     *\\n     * @param _poolId Pool id to report incident\\n     * @param _payout Payout amount of this report\\n     * @param _user   Reporter\\n     */\\n    function _report(\\n        uint256 _poolId,\\n        uint256 _payout,\\n        address _user\\n    ) internal {\\n        // Check whether the pool can be reported\\n        _checkPoolStatus(_poolId, _payout);\\n\\n        // Mark as already reported\\n        reported[_poolId] = true;\\n\\n        uint256 currentId = ++reportCounter;\\n        // Record the new report\\n        Report storage newReport = reports[currentId];\\n        newReport.poolId = _poolId;\\n        newReport.reportTimestamp = block.timestamp;\\n        newReport.reporter = _user;\\n        newReport.status = PENDING_STATUS;\\n        newReport.payout = _payout;\\n\\n        // Burn degis tokens to start a report\\n        // Need to add this smart contract to burner list\\n        deg.burnDegis(_user, REPORT_THRESHOLD);\\n\\n        // TODO: Check this part\\n        poolReports[_poolId].push(currentId);\\n\\n        // @audit Pause pools immediately when report\\n        _pausePools(_poolId);\\n\\n        emit ReportCreated(currentId, _poolId, block.timestamp, _user, _payout);\\n    }\\n\\n    /**\\n     * @notice Vote on current reports\\n     *\\n     *         Voting power is decided by the (unlocked) balance of veDEG\\n     *         Once voted, those veDEG will be locked\\n     *         Rewarded if votes with majority\\n     *         Punished if votes against majority\\n     *\\n     * @param _id       Id of the report to be voted on\\n     * @param _isFor    The user's choice (1: vote for, 2: vote against)\\n     * @param _amount   Amount of veDEG used for this vote\\n     * @param _user     The user who votes on the incidnet\\n     */\\n    function _vote(\\n        uint256 _id,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        // Should be manually switched on the voting process\\n        if (reports[_id].status != VOTING_STATUS)\\n            revert IncidentReport__WrongStatus();\\n        if (_amount == 0) revert IncidentReport__ZeroAmount();\\n        if (_isFor != VOTE_FOR && _isFor != VOTE_AGAINST)\\n            revert IncidentReport__WrongChoice();\\n\\n        _enoughVeDEG(_user, _amount);\\n\\n        // Lock vedeg until this report is settled\\n        _lockVeDEG(_user, _amount);\\n\\n        // Record the user's choice\\n        UserVote storage userVote = votes[_user][_id];\\n        if (userVote.amount > 0) {\\n            if (userVote.choice != _isFor)\\n                revert IncidentReport__ChooseBothSides();\\n        } else {\\n            userVote.choice = _isFor;\\n        }\\n        userVote.amount += _amount;\\n\\n        Report storage currentReport = reports[_id];\\n        // Record the vote for this report\\n        if (_isFor == VOTE_FOR) {\\n            currentReport.numFor += _amount;\\n        } else {\\n            currentReport.numAgainst += _amount;\\n        }\\n\\n        // Record a temporary result\\n        // If the hasChanged already been true, no need for further update\\n        // If not reached the last day, no need for update\\n        if (\\n            !tempResults[_id].hasChanged &&\\n            _withinSamplePeriod(\\n                currentReport.voteTimestamp,\\n                currentReport.round\\n            )\\n        ) {\\n            _recordTempResult(\\n                _id,\\n                currentReport.numFor,\\n                currentReport.numAgainst\\n            );\\n        }\\n\\n        emit ReportVoted(_id, _user, _isFor, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim the voting reward\\n     *\\n     *         Only called when:\\n     *         - Result is TIED or FAILED\\n     *         - Result is PASS or REJECT and you have the correct choice\\n     *\\n     *         If the result is TIED or FAILED, only unlock veDEG\\n     *         If the result is the same as your choice, get the reward\\n     *\\n     * @param _id   Report id\\n     * @param _user User address\\n     */\\n    function _claimReward(uint256 _id, address _user) internal {\\n        UserVote memory userVote = votes[_user][_id];\\n        uint256 finalResult = reports[_id].result;\\n\\n        if (finalResult == INIT_RESULT) revert IncidentReport__NotSettled();\\n        if (userVote.claimed) revert IncidentReport__AlreadyClaimed();\\n\\n        // Correct choice\\n        if (userVote.choice == finalResult) {\\n            uint256 reward = reports[_id].votingReward * userVote.amount;\\n            deg.mintDegis(_user, reward / SCALE);\\n\\n            _unlockVeDEG(_user, userVote.amount);\\n        }\\n        // Tied result, give back user's veDEG\\n        else if (finalResult == TIED_RESULT || finalResult == FAILED_RESULT) {\\n            _unlockVeDEG(_user, userVote.amount);\\n        }\\n        // Wrong choice, no reward\\n        else revert IncidentReport__NoReward();\\n\\n        votes[_user][_id].claimed = true;\\n    }\\n\\n    /**\\n     * @notice Settle voting reward depending on the result\\n     *\\n     * @param _id     Report id\\n     * @param _result Settle result\\n     */\\n    function _settleVotingReward(uint256 _id, uint256 _result) internal {\\n        Report storage currentReport = reports[_id];\\n\\n        uint256 numFor = currentReport.numFor;\\n        uint256 numAgainst = currentReport.numAgainst;\\n\\n        uint256 totalRewardToVoters;\\n\\n        if (_result == PASS_RESULT) {\\n            // Get back REPORT_THRESHOLD and get extra REPORTER_REWARD deg tokens\\n            deg.mintDegis(\\n                currentReport.reporter,\\n                REPORTER_REWARD + REPORT_THRESHOLD\\n            );\\n\\n            // 40% of total deg reward to the opposite\\n            totalRewardToVoters = (numAgainst * REWARD_RATIO) / 100;\\n\\n            // Update deg reward for those who vote for\\n            currentReport.votingReward = (totalRewardToVoters * SCALE) / numFor;\\n        } else if (_result == REJECT_RESULT) {\\n            // Total deg reward = reporter's DEG + those who vote for\\n            totalRewardToVoters =\\n                REPORT_THRESHOLD +\\n                (numFor * REWARD_RATIO) /\\n                100;\\n\\n            // Update deg reward for those who vote against\\n            currentReport.votingReward =\\n                (totalRewardToVoters * SCALE) /\\n                numAgainst;\\n        }\\n\\n        emit VotingRewardSettled(_id, totalRewardToVoters);\\n    }\\n\\n    /**\\n     * @notice Check quorum requirement\\n     *         30% of totalSupply is the minimum requirement for participation\\n     *\\n     * @param _totalVotes Total vote numbers\\n     */\\n    function _checkQuorum(uint256 _totalVotes) internal view returns (bool) {\\n        return\\n            _totalVotes >=\\n            (SimpleIERC20(veDeg).totalSupply() * quorumRatio) / 100;\\n    }\\n\\n    /**\\n     * @notice Check veDEG to be enough\\n     *\\n     * @param _user   User address\\n     * @param _amount Amount to fulfill\\n     */\\n    function _enoughVeDEG(address _user, uint256 _amount) internal view {\\n        uint256 unlockedBalance = veDeg.balanceOf(_user) - veDeg.locked(_user);\\n        if (unlockedBalance < _amount) revert IncidentReport__NotEnoughVeDEG();\\n    }\\n\\n    /**\\n     * @notice Check whether has passed the pending time period\\n     *\\n     * @param _reportTimestamp Start timestamp of the report\\n     *\\n     * @return hasPassed True for passing\\n     */\\n    function _passedPendingPeriod(uint256 _reportTimestamp)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return block.timestamp >= _reportTimestamp + PENDING_PERIOD;\\n    }\\n\\n    /**\\n     * @notice Check whether has passed the voting time period\\n     *\\n     * @param _round         Current round\\n     * @param _voteTimestamp Start timestamp of the report voting\\n     *\\n     * @return hasPassed True for passing\\n     */\\n    function _passedVotingPeriod(uint256 _round, uint256 _voteTimestamp)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 endTime = _voteTimestamp +\\n            INCIDENT_VOTING_PERIOD +\\n            _round *\\n            EXTEND_PERIOD;\\n        return block.timestamp >= endTime;\\n    }\\n\\n    /**\\n     * @notice Check whether this round need extend\\n     *\\n     * @param _id    Report id\\n     * @param _round Current round\\n     *\\n     * @return result 0 for extending, 1/2/3 for final result\\n     */\\n    function _checkRoundExtended(uint256 _id, uint256 _round)\\n        internal\\n        returns (uint256 result)\\n    {\\n        bool hasChanged = tempResults[_id].hasChanged;\\n\\n        if (hasChanged && _round < MAX_EXTEND_ROUND) {\\n            _extendRound(_id);\\n        } else {\\n            result = _getVotingResult(\\n                reports[_id].numFor,\\n                reports[_id].numAgainst\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Extend the current round\\n     *\\n     * @param _id Report id\\n     */\\n    function _extendRound(uint256 _id) internal {\\n        unchecked {\\n            ++reports[_id].round;\\n        }\\n    }\\n\\n    /**\\n     * @notice Record a temporary result when goes in the sampling period\\n     *\\n     *         Temporary result use 1 for \\\"pass\\\" and 2 for \\\"reject\\\"\\n     *\\n     * @param _id         Report id\\n     * @param _numFor     Vote numbers for\\n     * @param _numAgainst Vote numbers against\\n     */\\n    function _recordTempResult(\\n        uint256 _id,\\n        uint256 _numFor,\\n        uint256 _numAgainst\\n    ) internal {\\n        TempResult storage temp = tempResults[_id];\\n\\n        uint256 currentResult = _getVotingResult(_numFor, _numAgainst);\\n\\n        // If this is the first time for sampling, not record hasChange state\\n        if (temp.result > 0) {\\n            temp.hasChanged = currentResult != temp.result;\\n        }\\n\\n        // Store the current result and sample time\\n        temp.result = currentResult;\\n        temp.sampleTimestamp = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Check time is within sample period\\n     *\\n     * @param _voteTimestamp Vote start timestamp\\n     * @param _round         Current round\\n     */\\n    function _withinSamplePeriod(uint256 _voteTimestamp, uint256 _round)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 endTime = _voteTimestamp +\\n            INCIDENT_VOTING_PERIOD +\\n            _extendTime(_round);\\n\\n        uint256 lastDayStart = _voteTimestamp +\\n            INCIDENT_VOTING_PERIOD +\\n            _extendTime(_round) -\\n            SAMPLE_PERIOD;\\n\\n        return block.timestamp > lastDayStart && block.timestamp < endTime;\\n    }\\n\\n    /**\\n     * @notice Get the final voting result\\n     *\\n     * @param _numFor     Votes for\\n     * @param _numAgainst Votes against\\n     *\\n     * @return result PASS(1), REJECT(2) or TIED(3)reported\\n     */\\n    function _getVotingResult(uint256 _numFor, uint256 _numAgainst)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (_numFor > _numAgainst) result = PASS_RESULT;\\n        else if (_numFor < _numAgainst) result = REJECT_RESULT;\\n        else result = TIED_RESULT;\\n    }\\n\\n    /**\\n     * @notice Check pool status and return address\\n     *         Ensure the pool:\\n     *             1) Exists\\n     *             2) Has not been reported'\\n     *             3) The payout is less than the active covered amount\\n     *\\n     * @param _poolId Pool id\\n     * @param _payout Payout amount\\n     *\\n     */\\n    function _checkPoolStatus(uint256 _poolId, uint256 _payout) internal view {\\n        (, address pool, , , ) = priorityPoolFactory.pools(_poolId);\\n\\n        if (pool == address(0)) revert IncidentReport__PoolNotExist();\\n        if (reported[_poolId]) revert IncidentReport__AlreadyReported();\\n\\n        if (_payout > ISimplePriorityPool(pool).activeCovered())\\n            revert IncidentReport__PayoutExceedCovered();\\n    }\\n\\n    /**\\n     * @notice Pause the related priority pool and protection pool\\n     *         Once there is an incident reported and voting start\\n     *\\n     * @param _poolId Priority pool id\\n     */\\n    function _pausePools(uint256 _poolId) internal {\\n        IPriorityPoolFactory(priorityPoolFactory).pausePriorityPool(\\n            _poolId,\\n            true\\n        );\\n    }\\n\\n    /**\\n     * @notice Unpause the related project pool and the re-insurance pool\\n     *         When the report was REJECTED / TIED / FAILED, unlock immediately\\n     *         When the report was PASSED, unlock when executor execute it\\n     *\\n     * @param _poolId Priority pool id\\n     */\\n    function _unpausePools(uint256 _poolId) internal {\\n        IPriorityPoolFactory(priorityPoolFactory).pausePriorityPool(\\n            _poolId,\\n            false\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculate the extend time\\n     *\\n     * @param _round Rounds to extend\\n     *\\n     * @return extendTime Extend time length\\n     */\\n    function _extendTime(uint256 _round) internal pure returns (uint256) {\\n        return _round * EXTEND_PERIOD;\\n    }\\n\\n    /**\\n     * @notice Unlock veDEG\\n     *\\n     * @param _user   User address\\n     * @param _amount Amount to unlock\\n     */\\n    function _unlockVeDEG(address _user, uint256 _amount) internal {\\n        veDeg.unlockVeDEG(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Lock veDEG\\n     *\\n     * @param _user   User address\\n     * @param _amount Amount to lock\\n     */\\n    function _lockVeDEG(address _user, uint256 _amount) internal {\\n        veDeg.lockVeDEG(_user, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x832ec9fb737cdf6bf3a2d7a3cf97899ff80d4db6adaf42c9b1cc40924ef39fc9\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/incidentReport/IncidentReportDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\n\\ninterface ISimplePriorityPool {\\n    function activeCovered() external view returns (uint256);\\n}\\n\\nabstract contract IncidentReportDependencies {\\n    IPriorityPoolFactory public priorityPoolFactory;\\n\\n    address public executor;\\n}\\n\",\"keccak256\":\"0x9c22f249a37f3a27888b96b574b1f1cd74394d3b9a1b7a978797709c32e0e955\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/incidentReport/IncidentReportEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IncidentReportEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event ReportCreated(\\n        uint256 reportId,\\n        uint256 indexed poolId,\\n        uint256 reportTimestamp,\\n        address indexed reporter,\\n        uint256 payout\\n    );\\n\\n    event ReportVotingStart(uint256 reportId, uint256 startTimestamp);\\n\\n    event ReportClosed(uint256 reportId, uint256 closeTimestamp);\\n\\n    event ReportVoted(\\n        uint256 reportId,\\n        address indexed user,\\n        uint256 voteFor,\\n        uint256 amount\\n    );\\n\\n    event ReportSettled(uint256 reportId, uint256 result);\\n\\n    event ReportExtended(uint256 reportId, uint256 round);\\n\\n    event ReportFailed(uint256 reportId);\\n\\n    event DebtPaid(\\n        address payer,\\n        address user,\\n        uint256 debt,\\n        uint256 unlockAmount\\n    );\\n\\n    event VotingRewardSettled(uint256 reportId, uint256 totalRewardToVoters);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error IncidentReport__WrongStatus();\\n    error IncidentReport__WrongPeriod();\\n    error IncidentReport__WrongChoice();\\n    error IncidentReport__ChooseBothSides();\\n    error IncidentReport__NotEnoughVeDEG();\\n    error IncidentReport__AlreadySettled();\\n    error IncidentReport__NotSettled();\\n    error IncidentReport__NotWrongChoice();\\n    error IncidentReport__AlreadyClaimed();\\n    error IncidentReport__PoolNotExist();\\n    error IncidentReport__AlreadyReported();\\n    error IncidentReport__ZeroAmount();\\n    error IncidentReport__NoReward();\\n    error IncidentReport__PayoutExceedCovered();\\n    error IncidentReport__AlreadyPaid();\\n    error IncidentReport__OnlyExecutor();\\n    error IncidentReport__QuorumRatioTooBig();\\n}\\n\",\"keccak256\":\"0x09c529286b9255c6f29d728274885bf845b4c1cc4f446c7e0b6e4590c6675b92\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/incidentReport/IncidentReportParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/VotingParameters.sol\\\";\\n\\nabstract contract IncidentReportParameters is VotingParameters {\\n    // Cool down time parameter\\n    // If you submitted a wrong report, you cannot start another within cooldown period\\n    uint256 public constant COOLDOWN_WRONG_REPORT = 7 days;\\n\\n    // TODO: change parameters\\n    // Voting time length parameters\\n    // uint256 constant PENDING_PERIOD = 3 days;\\n    uint256 public constant PENDING_PERIOD = 1 minutes;\\n\\n    // 16 hours for fuji, 2 hours for fujiInternal\\n    uint256 public constant INCIDENT_VOTING_PERIOD = 5 minutes;\\n\\n    uint256 public constant EXTEND_PERIOD = 2 minutes;\\n    uint256 public constant SAMPLE_PERIOD = 2 minutes;\\n\\n    // DEG threshold for starting a report\\n    uint256 public constant REPORT_THRESHOLD = 10000 ether;\\n\\n    // DEG reward for correct reporter\\n    uint256 public constant REPORTER_REWARD = 10000 ether;\\n\\n    // Reward & Punishment ratios\\n    uint256 public constant REWARD_RATIO = 40; // 40% go to winners, 40% reserve\\n    uint256 public constant RESERVE_RATIO = 40;\\n    uint256 public constant DEBT_RATIO = 80; // 80% as the debt to unlock veDEG\\n\\n    // 2 extra rounds at most\\n    uint256 public constant MAX_EXTEND_ROUND = 2;\\n}\\n\",\"keccak256\":\"0x3b3fb453a9217b9c5750df154a4ffd0020258b7f64be20fbf8e5d760eb375a11\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/interfaces/VotingParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract VotingParameters {\\n    // Status parameters for a voting\\n    uint256 internal constant INIT_STATUS = 0;\\n    uint256 internal constant PENDING_STATUS = 1;\\n    uint256 internal constant VOTING_STATUS = 2;\\n    uint256 internal constant SETTLED_STATUS = 3;\\n    uint256 internal constant CLOSE_STATUS = 404;\\n\\n    // Result parameters for a voting\\n    uint256 internal constant INIT_RESULT = 0;\\n    uint256 internal constant PASS_RESULT = 1;\\n    uint256 internal constant REJECT_RESULT = 2;\\n    uint256 internal constant TIED_RESULT = 3;\\n    uint256 internal constant FAILED_RESULT = 4;\\n\\n    // Voting choices\\n    uint256 internal constant VOTE_FOR = 1;\\n    uint256 internal constant VOTE_AGAINST = 2;\\n}\\n\",\"keccak256\":\"0x207f4c911a33fe3927c4fc15d9f63806e4241b345f4a30e35d50842f6524938a\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761228f908161001c8239f35b600080fdfe6080604052600480361015610014575b600080fd5b600090813560e01c90816312d5cc861461066e5781631c3c0ea814611d6e57816320731ab814611d5157816321bef21c14611d2e5781633d2f5bda14611caa57816343a5ada214611c0a5781634a13a0ee14611bca5781634aa0644714611bbf5781634e7f9b1914611a625781636530db98146119a25781636f8a6e4314611979578163715018a614611913578163753c0985146115a65781637aaf11c71461157c578163805a219f146115605781638a6655d6146111a65781638da5cb5b1461117b5781638df8280014610d395781639418ce1714610ceb578163966d8a5f14610c6c5781639e17215514610c4e5781639f2524ee14610be0578163a01bc01f14610b2b578163ad35e1dc14610ae2578163ae169a501461094b578163af5283491461033f578163b4643d291461092d578163b9bc38f21461090f578163c0c53b8b14610770578163c34c08e514610747578163c583777b1461071c578163c942adf714610679578163ce4f29fc1461066e578163d3ecebd714610611578163d6069060146105e2578163d92747cc146105c6578163d9dc8f1d1461034a578163e37dbfd91461033f578163e7d918e21461030b578163f2fde38b1461026e578163fc6e85d31461022357508063fd123806146102195763fe131778146101fb57600080fd5b346102165780600319360112610216576020604051603c8152f35b80fd5b505061000f611e44565b90503461026a57602036600319011261026a57606091604091358152603b6020522080549060ff600260018301549201541690604051928352602083015215156040820152f35b5080fd5b90503461026a57602036600319011261026a57610289611dd4565b9060018060a01b036102a281855460101c163314611e87565b8216156102b857506102b390611ec0565b604051f35b60849060206040519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b90503461026a57602036600319011261026a576102b39061033960018060a01b03845460101c163314611e87565b35612134565b50505061000f611e6a565b90503461026a57604036600319011261026a578035610367611dea565b9060018060a01b0380831691828652602093603c8552604087208288528552604087209560405161039781611fe0565b875481526002600189015498888301998a5201549060ff82161515604082015260ff606082019260081c1615158252848a5260398852600860408b2001549081156105b55781849151149182156105aa575b82156105a0575b5050610590575161058157865180600019046050118115151661056c579061271060508a94930204948060325416803b15610545576040805163342c6d4d60e11b815233858201908152602081018a90529092879284928391859183910103925af1908115610561578591610549575b505060335416885190803b156105455760408051634bdc2db560e11b81526001600160a01b039095169385019384526020840192909252849284928391859183910103925af1801561053a5761051a575b5094839291608095947fb4b7f3a9d727d0ac344f696304df335d2936ce3b0a58d52600c692632c9fa7259752603c85526040882090885284526002604088200161010061ff001982541617905551916040519333855284015260408301526060820152a1604051f35b610528909594939295611fb2565b6105365790919285386104b1565b8580fd5b6040513d84823e3d90fd5b8480fd5b61055290611fb2565b61055d578338610460565b8380fd5b6040513d87823e3d90fd5b601182634e487b7160e01b6000525260246000fd5b604051631abf06a960e21b8152fd5b50604051631ae2961d60e01b8152fd5b14905082386103f0565b6003811492506103e9565b60405163403ba18960e01b81528490fd5b8234610216578060031936011261021657602060405160028152f35b90503461026a57602036600319011261026a57604060209260ff92358152603d84522054166040519015158152f35b90503461026a57602036600319011261026a576036546001600160a01b0316330361065f5735815260396020526102b36040822054808352603d6020526040832060ff198154169055612134565b6040516324bba59760e21b8152fd5b50505061000f611db7565b90503461026a57602036600319011261026a57604061016092823581526039602052209081549160018101549160018060a01b03600283015416906003830154908301546005840154600685015491600786015493600887015495600a6009890154980154986040519a8b5260208b015260408a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152f35b90503461026a57602036600319011261026a57358152603d6020526040808220805460ff1916905551f35b82346102165780600319360112610216576036546040516001600160a01b039091168152602090f35b90503461026a57606036600319011261026a5761078b611dd4565b90610794611dea565b916044356001600160a01b03818116929183900361000f57855460ff8160081c161594858096610902575b80156108eb575b15610890575060ff19811660011787558461087f575b506107f660ff875460081c166107f181611f20565b611f20565b6107ff33611ec0565b85549461081160ff8760081c16611f20565b8160018060a01b031993168360325416176032551681603354161760335560345416176034556032603855610847575b50604051f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a138610841565b61ffff1916610101178655386107dc565b60849060206040519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b1580156107c65750600160ff8316146107c6565b50600160ff8316106107bf565b82346102165780600319360112610216576020603754604051908152f35b82346102165780600319360112610216576020603854604051908152f35b90503461026a57602080600319360112610ade57813591338452603c8252604084208385528252604084209060405161098381611fe0565b82548152600260018401549385830194855201549060ff60408201928181161515845260081c16151560608201528587526039855260086040882001549182156105b55751610acd5751869291908103610a8c5750848252603984526109f260096040842001548451906120bb565b6032546001600160a01b031691823b1561055d576040805163168ece7360e31b81523392810192835264e8d4a5100090930460208301529192849284928391859183910103925af1801561053a57610a78575b5050610a529051336121b1565b338352603c8152604083209183525260026040822001600160ff19825416179055604051f35b610a8190611fb2565b61055d578338610a45565b9080925060038214918215610ac3575b505015610ab45750610aaf9051336121b1565b610a52565b60405163158f1f4160e11b8152fd5b1490508138610a9c565b60405163961e9b0d60e01b81528390fd5b8280fd5b823461021657602036600319011261021657610afc611dd4565b60018060a01b0390610b1582845460101c163314611e87565b1660018060a01b03196035541617603555604051f35b8234610216576040366003190112610216576040608091610b4a611dd4565b8160608451610b5881611fe0565b8281528260208201528286820152015260018060a01b03168152603c60205281812060243582526020522060405190610b9082611fe0565b80549182815260026001830154926020830193845201549160ff6060604084019382861615158552019360081c161515835260405193845251602084015251151560408301525115156060820152f35b8234610216576040366003190112610216576080906040906001600160a01b03610c08611dd4565b168152603c60205281812060243582526020522060ff815491600260018201549101549060405193845260208401528181161515604084015260081c1615156060820152f35b8234610216578060031936011261021657602060405162093a808152f35b90503461026a57602036600319011261026a5781604091606093838051610c9281611fc5565b8281528260208201520152358152603b60205220604051610cb281611fc5565b815491828252604060ff600260018401549360208601948552015416920191151582526040519283525160208301525115156040820152f35b90503461026a57602036600319011261026a57803590610d1860018060a01b03845460101c163314611e87565b6064821015610d2a5750603855604051f35b604051633f18bddf60e01b8152fd5b90503461026a5760209081600319360112610ade5780359081845260398352604084209260078401916002908184540361116c576006860191825494600388015461012c19811161115957610d9b9061012c610d9489612075565b9101612053565b4210611148576008880193845461113757908992918397898552603b88528360ff8160408820015416918261112d575b505015611109578884526039875260066040852001600181540190555b87156110b9575060039055610e058389015460058a015490612053565b6033546040516318160ddd60e01b81526001600160a01b0396929188908290889082908b165afa908115610561578591611084575b50610e4a606491603854906120bb565b041161103157869060018214998a1561100f575b505586825260398552604082209280840154946005850154998490600014610f50575080603254169285015416823b1561055d576044849283604051958694859363168ece7360e31b855284015269043c33c193756480000060248401525af1801561053a57610f2e575b50506040809594939260008051602061223a833981519152926009610f116064610f0160008051602061221a8339815191529c61208b565b0493610f0c856120a1565b6120ce565b9101555b81519086825284820152a18351928352820152a1604051f35b610f3c909695949396611fb2565b610f4c5786389592939495610ec9565b8680fd5b969798999592919350508714610f8f575b505050509160008051602061221a833981519152939160008051602061223a83398151915260408095610f15565b60649192939450610f9f9061208b565b049069021e19e0c9bab24000009082198211610ffc57506040959360008051602061221a8339815191529795936009610fee60008051602061223a833981519152958a950193610f0c856120a1565b910155939583959750610f61565b634e487b7160e01b895260119052602488fd5b5461101981612134565b8452603d875260408420805460ff1916905538610e5e565b92935050507f1dcabc7d01df1ee725f7c437ce5ec43e00015579d266f8a65d0911c4eb36ad909592949350555461106781612134565b8452603d82526040808520805460ff1916905551908152a1604051f35b809550888092503d83116110b2575b61109d8183611ffb565b8101031261000f5792518a9390610e4a610e3a565b503d611093565b94505091507fb7891e9b049f460b1641e0a0556e45b1d2adfb12bd2c6459ea5a5d645d40179d96508594509460409552603b83528487200160ff19815416905554908351928352820152a1604051f35b96506039865261112784604085200154600560408620015490612100565b96610de8565b1090508338610dcb565b60405163037d379160e11b81528490fd5b6040516324b1a7e960e01b81528390fd5b634e487b7160e01b8a526011845260248afd5b60405163363bbdfd60e01b8152fd5b82346102165780600319360112610216575460405160109190911c6001600160a01b03168152602090f35b823461021657606036600319011261021657813560249283356044359183855260209060398252600260076040882001540361116c578315611551576001831491821580611546575b611536576033546040516370a0823160e01b815233848201526001600160a01b039091169082818b81855afa90811561152b5789916114fe575b5060405163cbf9fe5f60e01b815233858201529083828c81865afa9182156114f3578a926114c4575b508181106114b05703861161149f57803b1561149b5760408051633c56aa6160e11b8152338582019081526020810189905290928a9284928391859183910103925af180156114905790889161147c575b5050338752603c81526040808820878952825287206001810180549091869115611476575403611465575b6112d9868254612053565b90558587526039815260408720921561144f578183016112fa868254612053565b90555b858752603b815260ff60026040892001541615806113b0575b7f025e12b9cbba227587ada73c57f6b6b6a70272d7ed782681793125ec29afc77b96979850611360575b5050604080519586526020860192909252508301523391606090a2604051f35b603b600561137d9385015494015491888a52526040882092612100565b815480611396575b508155600142910155858080611340565b600283019060ff8019835416918414151617905587611385565b50600383015460068401549061012c19811161143d5761012c6113ef91016113e96113e36113dd85612075565b83612053565b93612075565b90612053565b6078811061143d577f025e12b9cbba227587ada73c57f6b6b6a70272d7ed782681793125ec29afc77b979899506077190142119081611433575b5088979650611316565b9050421089611429565b634e487b7160e01b8952601184528989fd5b6005830161145e868254612053565b90556112fd565b6040516346bdda4560e11b81528390fd5b556112ce565b61148590611fb2565b610f4c5786896112a3565b6040513d8a823e3d90fd5b8780fd5b60405163729aeac360e01b81528390fd5b8a601186634e487b7160e01b600052526000fd5b9091508381813d83116114ec575b6114dc8183611ffb565b8101031261000f5751908b611252565b503d6114d2565b6040513d8c823e3d90fd5b90508281813d8311611524575b6115158183611ffb565b8101031261000f57518a611229565b503d61150b565b6040513d8b823e3d90fd5b50604051631422ca1d60e31b8152fd5b5060028414156111ef565b60405163583202e160e01b8152fd5b8234610216578060031936011261021657602060405160508152f35b90503461026a57602036600319011261026a57602091604091358152603a83522054604051908152f35b90503461026a576115b636611e00565b6035546040516315895f4760e31b81528085018490526001600160a01b03949186908290602490829089165afa80156119085785918791611819575b501693841561180957838652602094603d865260ff6040882054166117f85785839160405192838092636835185f60e11b82525afa9081156117ed5787916117c0575b5083116117b057838652603d855260408620805460ff19166001179055603754600019811461179d5760010194856037558587526039815283600a60408920878155426001820155600281013360018060a01b0319825416179055600160078201550155868260325416803b1561026a57819060446040518094819363342c6d4d60e11b8352338a84015269021e19e0c9bab240000060248401525af1801561149057611783575b5090603a879392868552526116f5866040852061201c565b6035541690813b15610ade578460448492836040519586948593631b35278960e01b8552840152600160248401525af1801561053a5761176f575b50506040805193845242602085015283015233917fe4af8b66d6c4b132955627bb2e4e80a62c544714e2f19dafec934a3b156cbe9390606090a3604051f35b61177890611fb2565b61055d578338611730565b96611793603a9894939294611fb2565b96929091926116dd565b634e487b7160e01b875260118352602487fd5b5060405163cab1fa1b60e01b8152fd5b90508581813d83116117e6575b6117d78183611ffb565b81010312610f4c575138611635565b503d6117cd565b6040513d89823e3d90fd5b6040516360b2438960e01b81528390fd5b5060405163148115cf60e21b8152fd5b9150503d8087833e61182b8183611ffb565b810160a082820312610f4c5781516001600160401b039081811161190457830182601f820112156119045780519182116118f1576040519060209361187985601f19601f8701160184611ffb565b8383528484830101116118ed579189918995949383905b8382106118d257509284836118bf96936118b895604097116118c6575b505050508401612120565b9201612120565b50386115f2565b0101528a8138806118ad565b8181018601518284018701528b97508c945090850190611890565b8980fd5b634e487b7160e01b895260418552602489fd5b8880fd5b6040513d88823e3d90fd5b82346102165780600319360112610216578054601081901c6001600160a01b031690611940338314611e87565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b0319168255f35b82346102165780600319360112610216576035546040516001600160a01b039091168152602090f35b90503461026a57602036600319011261026a578035906119cf60018060a01b03845460101c163314611e87565b818352603960205260408320906007820190600182540361116c576119f760018401546120ee565b611a53575091611a426040926101947f17b76cf2012024f7fe05b4a8b036b188464d5b49b7c8532e95c5c67a4b792eb29555828652603d60205283862060ff19815416905554612134565b8151908152426020820152a1604051f35b6040516324b1a7e960e01b8152fd5b90503461026a57602036600319011261026a5761014061016092604051611a8881611f80565b8181528160208201528160408201528160608201528160808201528160a08201528160c08201528160e08201526040610100928084840152808561012094828682015201528535815260396020522091600a60405193611ae785611f80565b8054968786526001820154602087015260018060a01b036002830154166040870152600382015460608701528101546080860152600581015460a0860152600681015460c0860152600781015460e08601526008810154838601526009810154848601520154848401526040519485526020830151602086015260018060a01b036040840151166040860152606083015160608601526080830151608086015260a083015160a086015260c083015160c086015260e083015160e0860152808301519085015280820151908401520151610140820152f35b50505061000f611e44565b823461021657611bd936611e00565b91908152603a60205260408120908154831015610216576020611bfc8484611e16565b90546040519160031b1c8152f35b90503461026a5760209081600319360112610ade57358252603a81526040822060405192838383549182815201908193835284832090835b818110611c965750505084611c58910385611ffb565b60405193838594850191818652518092526040850193925b828110611c7f57505050500390f35b835185528695509381019392810192600101611c70565b825484529286019260019283019201611c42565b90503461026a57602036600319011261026a57803590818352603960205260408320906007820190600182540361116c57611ce860018401546120ee565b15611a5357509160409160027fde7965c8d6f24b73501e8bcad1a4f03937db4f902bfda3bee08b335accf0749694556003429101558151908152426020820152a1604051f35b8234610216576102b3611d4036611e00565b908352603a6020526040832061201c565b8234610216578060031936011261021657602060405161012c8152f35b823461021657602036600319011261021657611d88611dd4565b60018060a01b0390611da182845460101c163314611e87565b1660018060a01b03196036541617603655604051f35b503461000f57600036600319011261000f57602060405160788152f35b600435906001600160a01b038216820361000f57565b602435906001600160a01b038216820361000f57565b604090600319011261000f576004359060243590565b8054821015611e2e5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b503461000f57600036600319011261000f57602060405169021e19e0c9bab24000008152f35b503461000f57600036600319011261000f57602060405160288152f35b15611e8e57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b031617600055565b15611f2757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61016081019081106001600160401b03821117611f9c57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111611f9c57604052565b606081019081106001600160401b03821117611f9c57604052565b608081019081106001600160401b03821117611f9c57604052565b90601f801991011681019081106001600160401b03821117611f9c57604052565b8054600160401b811015611f9c5761203991600182018155611e16565b819291549060031b600019811b9283911b16911916179055565b8119811161205f570190565b634e487b7160e01b600052601160045260246000fd5b80600019046078118115151661205f5760780290565b80600019046028118115151661205f5760280290565b64e8d4a5100090806000190482118115151661205f570290565b806000190482118115151661205f570290565b81156120d8570490565b634e487b7160e01b600052601260045260246000fd5b603c19811161205f57603c0142101590565b818111156121105750506001905b565b101561211b57600290565b600390565b51906001600160a01b038216820361000f57565b6035546001600160a01b031690813b1561000f57604051918291631b35278960e01b835260048301528160446000938480948160248401525af180156121a45761217c575050565b6001600160401b0382116121905750604052565b634e487b7160e01b81526041600452602490fd5b50604051903d90823e3d90fd5b6033546001600160a01b031691823b1561000f57604051634bdc2db560e11b81526001600160a01b039290921660048301526024820152906000908290604490829084905af1801561220d576122045750565b61210e90611fb2565b6040513d6000823e3d90fdfe30922d3a94c33e0ce3f99be437cbdf00f141e304f742a1cbd0df5cc5b490cd45bf97c766fd98feb70e7d5cc384ac953bcce9a7ca082cf57da33a199d67f7b7aba2646970667358221220550d9cc0dd25af2bdbdbb8401f3fa12fc959854fbb100999ec7eb4fcd340b68664736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600480361015610014575b600080fd5b600090813560e01c90816312d5cc861461066e5781631c3c0ea814611d6e57816320731ab814611d5157816321bef21c14611d2e5781633d2f5bda14611caa57816343a5ada214611c0a5781634a13a0ee14611bca5781634aa0644714611bbf5781634e7f9b1914611a625781636530db98146119a25781636f8a6e4314611979578163715018a614611913578163753c0985146115a65781637aaf11c71461157c578163805a219f146115605781638a6655d6146111a65781638da5cb5b1461117b5781638df8280014610d395781639418ce1714610ceb578163966d8a5f14610c6c5781639e17215514610c4e5781639f2524ee14610be0578163a01bc01f14610b2b578163ad35e1dc14610ae2578163ae169a501461094b578163af5283491461033f578163b4643d291461092d578163b9bc38f21461090f578163c0c53b8b14610770578163c34c08e514610747578163c583777b1461071c578163c942adf714610679578163ce4f29fc1461066e578163d3ecebd714610611578163d6069060146105e2578163d92747cc146105c6578163d9dc8f1d1461034a578163e37dbfd91461033f578163e7d918e21461030b578163f2fde38b1461026e578163fc6e85d31461022357508063fd123806146102195763fe131778146101fb57600080fd5b346102165780600319360112610216576020604051603c8152f35b80fd5b505061000f611e44565b90503461026a57602036600319011261026a57606091604091358152603b6020522080549060ff600260018301549201541690604051928352602083015215156040820152f35b5080fd5b90503461026a57602036600319011261026a57610289611dd4565b9060018060a01b036102a281855460101c163314611e87565b8216156102b857506102b390611ec0565b604051f35b60849060206040519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b90503461026a57602036600319011261026a576102b39061033960018060a01b03845460101c163314611e87565b35612134565b50505061000f611e6a565b90503461026a57604036600319011261026a578035610367611dea565b9060018060a01b0380831691828652602093603c8552604087208288528552604087209560405161039781611fe0565b875481526002600189015498888301998a5201549060ff82161515604082015260ff606082019260081c1615158252848a5260398852600860408b2001549081156105b55781849151149182156105aa575b82156105a0575b5050610590575161058157865180600019046050118115151661056c579061271060508a94930204948060325416803b15610545576040805163342c6d4d60e11b815233858201908152602081018a90529092879284928391859183910103925af1908115610561578591610549575b505060335416885190803b156105455760408051634bdc2db560e11b81526001600160a01b039095169385019384526020840192909252849284928391859183910103925af1801561053a5761051a575b5094839291608095947fb4b7f3a9d727d0ac344f696304df335d2936ce3b0a58d52600c692632c9fa7259752603c85526040882090885284526002604088200161010061ff001982541617905551916040519333855284015260408301526060820152a1604051f35b610528909594939295611fb2565b6105365790919285386104b1565b8580fd5b6040513d84823e3d90fd5b8480fd5b61055290611fb2565b61055d578338610460565b8380fd5b6040513d87823e3d90fd5b601182634e487b7160e01b6000525260246000fd5b604051631abf06a960e21b8152fd5b50604051631ae2961d60e01b8152fd5b14905082386103f0565b6003811492506103e9565b60405163403ba18960e01b81528490fd5b8234610216578060031936011261021657602060405160028152f35b90503461026a57602036600319011261026a57604060209260ff92358152603d84522054166040519015158152f35b90503461026a57602036600319011261026a576036546001600160a01b0316330361065f5735815260396020526102b36040822054808352603d6020526040832060ff198154169055612134565b6040516324bba59760e21b8152fd5b50505061000f611db7565b90503461026a57602036600319011261026a57604061016092823581526039602052209081549160018101549160018060a01b03600283015416906003830154908301546005840154600685015491600786015493600887015495600a6009890154980154986040519a8b5260208b015260408a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152f35b90503461026a57602036600319011261026a57358152603d6020526040808220805460ff1916905551f35b82346102165780600319360112610216576036546040516001600160a01b039091168152602090f35b90503461026a57606036600319011261026a5761078b611dd4565b90610794611dea565b916044356001600160a01b03818116929183900361000f57855460ff8160081c161594858096610902575b80156108eb575b15610890575060ff19811660011787558461087f575b506107f660ff875460081c166107f181611f20565b611f20565b6107ff33611ec0565b85549461081160ff8760081c16611f20565b8160018060a01b031993168360325416176032551681603354161760335560345416176034556032603855610847575b50604051f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a138610841565b61ffff1916610101178655386107dc565b60849060206040519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152fd5b50303b1580156107c65750600160ff8316146107c6565b50600160ff8316106107bf565b82346102165780600319360112610216576020603754604051908152f35b82346102165780600319360112610216576020603854604051908152f35b90503461026a57602080600319360112610ade57813591338452603c8252604084208385528252604084209060405161098381611fe0565b82548152600260018401549385830194855201549060ff60408201928181161515845260081c16151560608201528587526039855260086040882001549182156105b55751610acd5751869291908103610a8c5750848252603984526109f260096040842001548451906120bb565b6032546001600160a01b031691823b1561055d576040805163168ece7360e31b81523392810192835264e8d4a5100090930460208301529192849284928391859183910103925af1801561053a57610a78575b5050610a529051336121b1565b338352603c8152604083209183525260026040822001600160ff19825416179055604051f35b610a8190611fb2565b61055d578338610a45565b9080925060038214918215610ac3575b505015610ab45750610aaf9051336121b1565b610a52565b60405163158f1f4160e11b8152fd5b1490508138610a9c565b60405163961e9b0d60e01b81528390fd5b8280fd5b823461021657602036600319011261021657610afc611dd4565b60018060a01b0390610b1582845460101c163314611e87565b1660018060a01b03196035541617603555604051f35b8234610216576040366003190112610216576040608091610b4a611dd4565b8160608451610b5881611fe0565b8281528260208201528286820152015260018060a01b03168152603c60205281812060243582526020522060405190610b9082611fe0565b80549182815260026001830154926020830193845201549160ff6060604084019382861615158552019360081c161515835260405193845251602084015251151560408301525115156060820152f35b8234610216576040366003190112610216576080906040906001600160a01b03610c08611dd4565b168152603c60205281812060243582526020522060ff815491600260018201549101549060405193845260208401528181161515604084015260081c1615156060820152f35b8234610216578060031936011261021657602060405162093a808152f35b90503461026a57602036600319011261026a5781604091606093838051610c9281611fc5565b8281528260208201520152358152603b60205220604051610cb281611fc5565b815491828252604060ff600260018401549360208601948552015416920191151582526040519283525160208301525115156040820152f35b90503461026a57602036600319011261026a57803590610d1860018060a01b03845460101c163314611e87565b6064821015610d2a5750603855604051f35b604051633f18bddf60e01b8152fd5b90503461026a5760209081600319360112610ade5780359081845260398352604084209260078401916002908184540361116c576006860191825494600388015461012c19811161115957610d9b9061012c610d9489612075565b9101612053565b4210611148576008880193845461113757908992918397898552603b88528360ff8160408820015416918261112d575b505015611109578884526039875260066040852001600181540190555b87156110b9575060039055610e058389015460058a015490612053565b6033546040516318160ddd60e01b81526001600160a01b0396929188908290889082908b165afa908115610561578591611084575b50610e4a606491603854906120bb565b041161103157869060018214998a1561100f575b505586825260398552604082209280840154946005850154998490600014610f50575080603254169285015416823b1561055d576044849283604051958694859363168ece7360e31b855284015269043c33c193756480000060248401525af1801561053a57610f2e575b50506040809594939260008051602061223a833981519152926009610f116064610f0160008051602061221a8339815191529c61208b565b0493610f0c856120a1565b6120ce565b9101555b81519086825284820152a18351928352820152a1604051f35b610f3c909695949396611fb2565b610f4c5786389592939495610ec9565b8680fd5b969798999592919350508714610f8f575b505050509160008051602061221a833981519152939160008051602061223a83398151915260408095610f15565b60649192939450610f9f9061208b565b049069021e19e0c9bab24000009082198211610ffc57506040959360008051602061221a8339815191529795936009610fee60008051602061223a833981519152958a950193610f0c856120a1565b910155939583959750610f61565b634e487b7160e01b895260119052602488fd5b5461101981612134565b8452603d875260408420805460ff1916905538610e5e565b92935050507f1dcabc7d01df1ee725f7c437ce5ec43e00015579d266f8a65d0911c4eb36ad909592949350555461106781612134565b8452603d82526040808520805460ff1916905551908152a1604051f35b809550888092503d83116110b2575b61109d8183611ffb565b8101031261000f5792518a9390610e4a610e3a565b503d611093565b94505091507fb7891e9b049f460b1641e0a0556e45b1d2adfb12bd2c6459ea5a5d645d40179d96508594509460409552603b83528487200160ff19815416905554908351928352820152a1604051f35b96506039865261112784604085200154600560408620015490612100565b96610de8565b1090508338610dcb565b60405163037d379160e11b81528490fd5b6040516324b1a7e960e01b81528390fd5b634e487b7160e01b8a526011845260248afd5b60405163363bbdfd60e01b8152fd5b82346102165780600319360112610216575460405160109190911c6001600160a01b03168152602090f35b823461021657606036600319011261021657813560249283356044359183855260209060398252600260076040882001540361116c578315611551576001831491821580611546575b611536576033546040516370a0823160e01b815233848201526001600160a01b039091169082818b81855afa90811561152b5789916114fe575b5060405163cbf9fe5f60e01b815233858201529083828c81865afa9182156114f3578a926114c4575b508181106114b05703861161149f57803b1561149b5760408051633c56aa6160e11b8152338582019081526020810189905290928a9284928391859183910103925af180156114905790889161147c575b5050338752603c81526040808820878952825287206001810180549091869115611476575403611465575b6112d9868254612053565b90558587526039815260408720921561144f578183016112fa868254612053565b90555b858752603b815260ff60026040892001541615806113b0575b7f025e12b9cbba227587ada73c57f6b6b6a70272d7ed782681793125ec29afc77b96979850611360575b5050604080519586526020860192909252508301523391606090a2604051f35b603b600561137d9385015494015491888a52526040882092612100565b815480611396575b508155600142910155858080611340565b600283019060ff8019835416918414151617905587611385565b50600383015460068401549061012c19811161143d5761012c6113ef91016113e96113e36113dd85612075565b83612053565b93612075565b90612053565b6078811061143d577f025e12b9cbba227587ada73c57f6b6b6a70272d7ed782681793125ec29afc77b979899506077190142119081611433575b5088979650611316565b9050421089611429565b634e487b7160e01b8952601184528989fd5b6005830161145e868254612053565b90556112fd565b6040516346bdda4560e11b81528390fd5b556112ce565b61148590611fb2565b610f4c5786896112a3565b6040513d8a823e3d90fd5b8780fd5b60405163729aeac360e01b81528390fd5b8a601186634e487b7160e01b600052526000fd5b9091508381813d83116114ec575b6114dc8183611ffb565b8101031261000f5751908b611252565b503d6114d2565b6040513d8c823e3d90fd5b90508281813d8311611524575b6115158183611ffb565b8101031261000f57518a611229565b503d61150b565b6040513d8b823e3d90fd5b50604051631422ca1d60e31b8152fd5b5060028414156111ef565b60405163583202e160e01b8152fd5b8234610216578060031936011261021657602060405160508152f35b90503461026a57602036600319011261026a57602091604091358152603a83522054604051908152f35b90503461026a576115b636611e00565b6035546040516315895f4760e31b81528085018490526001600160a01b03949186908290602490829089165afa80156119085785918791611819575b501693841561180957838652602094603d865260ff6040882054166117f85785839160405192838092636835185f60e11b82525afa9081156117ed5787916117c0575b5083116117b057838652603d855260408620805460ff19166001179055603754600019811461179d5760010194856037558587526039815283600a60408920878155426001820155600281013360018060a01b0319825416179055600160078201550155868260325416803b1561026a57819060446040518094819363342c6d4d60e11b8352338a84015269021e19e0c9bab240000060248401525af1801561149057611783575b5090603a879392868552526116f5866040852061201c565b6035541690813b15610ade578460448492836040519586948593631b35278960e01b8552840152600160248401525af1801561053a5761176f575b50506040805193845242602085015283015233917fe4af8b66d6c4b132955627bb2e4e80a62c544714e2f19dafec934a3b156cbe9390606090a3604051f35b61177890611fb2565b61055d578338611730565b96611793603a9894939294611fb2565b96929091926116dd565b634e487b7160e01b875260118352602487fd5b5060405163cab1fa1b60e01b8152fd5b90508581813d83116117e6575b6117d78183611ffb565b81010312610f4c575138611635565b503d6117cd565b6040513d89823e3d90fd5b6040516360b2438960e01b81528390fd5b5060405163148115cf60e21b8152fd5b9150503d8087833e61182b8183611ffb565b810160a082820312610f4c5781516001600160401b039081811161190457830182601f820112156119045780519182116118f1576040519060209361187985601f19601f8701160184611ffb565b8383528484830101116118ed579189918995949383905b8382106118d257509284836118bf96936118b895604097116118c6575b505050508401612120565b9201612120565b50386115f2565b0101528a8138806118ad565b8181018601518284018701528b97508c945090850190611890565b8980fd5b634e487b7160e01b895260418552602489fd5b8880fd5b6040513d88823e3d90fd5b82346102165780600319360112610216578054601081901c6001600160a01b031690611940338314611e87565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b0319168255f35b82346102165780600319360112610216576035546040516001600160a01b039091168152602090f35b90503461026a57602036600319011261026a578035906119cf60018060a01b03845460101c163314611e87565b818352603960205260408320906007820190600182540361116c576119f760018401546120ee565b611a53575091611a426040926101947f17b76cf2012024f7fe05b4a8b036b188464d5b49b7c8532e95c5c67a4b792eb29555828652603d60205283862060ff19815416905554612134565b8151908152426020820152a1604051f35b6040516324b1a7e960e01b8152fd5b90503461026a57602036600319011261026a5761014061016092604051611a8881611f80565b8181528160208201528160408201528160608201528160808201528160a08201528160c08201528160e08201526040610100928084840152808561012094828682015201528535815260396020522091600a60405193611ae785611f80565b8054968786526001820154602087015260018060a01b036002830154166040870152600382015460608701528101546080860152600581015460a0860152600681015460c0860152600781015460e08601526008810154838601526009810154848601520154848401526040519485526020830151602086015260018060a01b036040840151166040860152606083015160608601526080830151608086015260a083015160a086015260c083015160c086015260e083015160e0860152808301519085015280820151908401520151610140820152f35b50505061000f611e44565b823461021657611bd936611e00565b91908152603a60205260408120908154831015610216576020611bfc8484611e16565b90546040519160031b1c8152f35b90503461026a5760209081600319360112610ade57358252603a81526040822060405192838383549182815201908193835284832090835b818110611c965750505084611c58910385611ffb565b60405193838594850191818652518092526040850193925b828110611c7f57505050500390f35b835185528695509381019392810192600101611c70565b825484529286019260019283019201611c42565b90503461026a57602036600319011261026a57803590818352603960205260408320906007820190600182540361116c57611ce860018401546120ee565b15611a5357509160409160027fde7965c8d6f24b73501e8bcad1a4f03937db4f902bfda3bee08b335accf0749694556003429101558151908152426020820152a1604051f35b8234610216576102b3611d4036611e00565b908352603a6020526040832061201c565b8234610216578060031936011261021657602060405161012c8152f35b823461021657602036600319011261021657611d88611dd4565b60018060a01b0390611da182845460101c163314611e87565b1660018060a01b03196036541617603655604051f35b503461000f57600036600319011261000f57602060405160788152f35b600435906001600160a01b038216820361000f57565b602435906001600160a01b038216820361000f57565b604090600319011261000f576004359060243590565b8054821015611e2e5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b503461000f57600036600319011261000f57602060405169021e19e0c9bab24000008152f35b503461000f57600036600319011261000f57602060405160288152f35b15611e8e57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b031617600055565b15611f2757565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61016081019081106001600160401b03821117611f9c57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111611f9c57604052565b606081019081106001600160401b03821117611f9c57604052565b608081019081106001600160401b03821117611f9c57604052565b90601f801991011681019081106001600160401b03821117611f9c57604052565b8054600160401b811015611f9c5761203991600182018155611e16565b819291549060031b600019811b9283911b16911916179055565b8119811161205f570190565b634e487b7160e01b600052601160045260246000fd5b80600019046078118115151661205f5760780290565b80600019046028118115151661205f5760280290565b64e8d4a5100090806000190482118115151661205f570290565b806000190482118115151661205f570290565b81156120d8570490565b634e487b7160e01b600052601260045260246000fd5b603c19811161205f57603c0142101590565b818111156121105750506001905b565b101561211b57600290565b600390565b51906001600160a01b038216820361000f57565b6035546001600160a01b031690813b1561000f57604051918291631b35278960e01b835260048301528160446000938480948160248401525af180156121a45761217c575050565b6001600160401b0382116121905750604052565b634e487b7160e01b81526041600452602490fd5b50604051903d90823e3d90fd5b6033546001600160a01b031691823b1561000f57604051634bdc2db560e11b81526001600160a01b039290921660048301526024820152906000908290604490829084905af1801561220d576122045750565b61210e90611fb2565b6040513d6000823e3d90fdfe30922d3a94c33e0ce3f99be437cbdf00f141e304f742a1cbd0df5cc5b490cd45bf97c766fd98feb70e7d5cc384ac953bcce9a7ca082cf57da33a199d67f7b7aba2646970667358221220550d9cc0dd25af2bdbdbb8401f3fa12fc959854fbb100999ec7eb4fcd340b68664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(uint256)": {
        "params": {
          "_id": "Report id"
        }
      },
      "closeReport(uint256)": {
        "params": {
          "_id": "Report id"
        }
      },
      "executed(uint256)": {
        "params": {
          "_reportId": "Report id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payDebt(uint256,address)": {
        "params": {
          "_id": "Report id",
          "_user": "User address (can pay debt for another user)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "report(uint256,uint256)": {
        "params": {
          "_payout": "Payout amount of this report",
          "_poolId": "Pool id to report incident"
        }
      },
      "settle(uint256)": {
        "params": {
          "_id": "Report id"
        }
      },
      "startVoting(uint256)": {
        "params": {
          "_id": "Report id"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vote(uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount of veDEG used for this vote",
          "_id": "Id of the report to be voted on",
          "_isFor": "The user's choice (1: vote for, 2: vote against)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimReward(uint256)": {
        "notice": "Claim the voting reward         Only callable through proposal center"
      },
      "closeReport(uint256)": {
        "notice": "Close a pending report         Only owner can close a pending report         Can only be closed before the pending period ends         Will change the status from PENDING to CLOSED"
      },
      "executed(uint256)": {
        "notice": "Update status after execution         Only callable by executor"
      },
      "payDebt(uint256,address)": {
        "notice": "Pay debt to get back veDEG         For those who made a wrong voting choice         The paid DEG will be burned and the veDEG will be unlocked         Can not call this function when result is TIED or choose the correct side"
      },
      "report(uint256,uint256)": {
        "notice": "Start a new incident report         1000 DEG tokens are staked to start a report         If the report is correct, reporter gets back 1000DEG + 10% shield income + extra 1000DEG         If the report is wrong, reporter loses 1000DEG to those who vote against         Only callable through proposal center"
      },
      "settle(uint256)": {
        "notice": "Settle the final result for a report"
      },
      "startVoting(uint256)": {
        "notice": "Start the voting process         Can only be started after the pending period         Will change the status from PENDING to VOTING"
      },
      "vote(uint256,uint256,uint256)": {
        "notice": "Vote on current reports         Voting power is decided by the (unlocked) balance of veDEG         Once voted, those veDEG will be locked         Rewarded if votes with majority         Punished if votes against majority"
      }
    },
    "notice": "Incident Report Contract         New reports for project hacks are handled inside this contract         Timeline for a report is:         |-----------------------|----------------------|-------|-------|               Pending Period         Voting Period       Extend Period         When a new report is proposed, it start with PENDING_STATUS.         The person who start the report need to deposit REPORT_THRESHOLD DEG tokens.         During PENDING_STATUS, users & security companies can look at the report event.         After PENDING_PERIOD, the voting can be started and status transfer to VOTING_STATUS.         Users can vote for or against the report with veDeg tokens.         VeDeg tokens used for voting will be tentatively locked until the voting is settled.         After VOTING_PERIOD, the voting can be settled and status transfer to SETTLED_STATUS.         Depending on the votes of each side, the result can be PASSED, REJECTED or TIED.         Different results for their veDeg tokens will be set depending on the result.         If the result has changes during the last 24 hours of voting, the voting will be extended.         The time can only be extended twice.         For voters:              PASSED: Who vote for will get all veDeg tokens from the opposite side              REJECTED: Who vote against will get all veDeg tokens from the opposite side              TIED: Users can unlock their veDeg tokens         For reporter:              PASSED: Get back REPORT_THRESHOLD and get extra REPORT_REWARD & 10% of total treasury income              REJECTED: Lose REPORT_THRESHOLD to whom vote against              TIED: Lose REPORT_THRESHOLD         When an incident report has passed and been executed         The corresponding priority pool will be liquidated which means:             - Move out some assets for users to claim             - Deploy new generation of crTokens and PRI-LP tokens             - Update the farming weights for the priority farming pool",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 55,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23413,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23520,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14000,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "deg",
        "offset": 0,
        "slot": "50",
        "type": "t_contract(IDegisToken)14127"
      },
      {
        "astId": 14003,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "veDeg",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IVeDEG)15276"
      },
      {
        "astId": 14006,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "shield",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IShield)15231"
      },
      {
        "astId": 25411,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IPriorityPoolFactory)15153"
      },
      {
        "astId": 25413,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "executor",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 23905,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "reportCounter",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 23907,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "quorumRatio",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 23935,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "reports",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_uint256,t_struct(Report)23930_storage)"
      },
      {
        "astId": 23940,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "poolReports",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 23952,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "tempResults",
        "offset": 0,
        "slot": "59",
        "type": "t_mapping(t_uint256,t_struct(TempResult)23947_storage)"
      },
      {
        "astId": 23968,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "votes",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)23961_storage))"
      },
      {
        "astId": 23972,
        "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
        "label": "reported",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)14127": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IPriorityPoolFactory)15153": {
        "encoding": "inplace",
        "label": "contract IPriorityPoolFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IShield)15231": {
        "encoding": "inplace",
        "label": "contract IShield",
        "numberOfBytes": "20"
      },
      "t_contract(IVeDEG)15276": {
        "encoding": "inplace",
        "label": "contract IVeDEG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)23961_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IncidentReport.UserVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserVote)23961_storage)"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Report)23930_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IncidentReport.Report)",
        "numberOfBytes": "32",
        "value": "t_struct(Report)23930_storage"
      },
      "t_mapping(t_uint256,t_struct(TempResult)23947_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IncidentReport.TempResult)",
        "numberOfBytes": "32",
        "value": "t_struct(TempResult)23947_storage"
      },
      "t_mapping(t_uint256,t_struct(UserVote)23961_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IncidentReport.UserVote)",
        "numberOfBytes": "32",
        "value": "t_struct(UserVote)23961_storage"
      },
      "t_struct(Report)23930_storage": {
        "encoding": "inplace",
        "label": "struct IncidentReport.Report",
        "members": [
          {
            "astId": 23909,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "poolId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23911,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "reportTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23913,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "reporter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 23915,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "voteTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23917,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "numFor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23919,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "numAgainst",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23921,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "round",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23923,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 23925,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "result",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 23927,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "votingReward",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 23929,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "payout",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(TempResult)23947_storage": {
        "encoding": "inplace",
        "label": "struct IncidentReport.TempResult",
        "members": [
          {
            "astId": 23942,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "result",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23944,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "sampleTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23946,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "hasChanged",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserVote)23961_storage": {
        "encoding": "inplace",
        "label": "struct IncidentReport.UserVote",
        "members": [
          {
            "astId": 23954,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "choice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23956,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23958,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 23960,
            "contract": "src/voting/incidentReport/IncidentReport.sol:IncidentReport",
            "label": "paid",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}