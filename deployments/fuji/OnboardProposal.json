{
  "address": "0xbd3baf463E5AD5E8cb6673Beebf3E6597eB6Ed1d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceRatio",
          "type": "uint256"
        }
      ],
      "name": "NewProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "ProposalSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "closeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "protocolToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "proposeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numFor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numAgainst",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "status",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            }
          ],
          "internalType": "struct OnboardProposal.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolProposed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "protocolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposeTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceRatio",
          "type": "uint256"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePoolFactory",
          "type": "address"
        }
      ],
      "name": "setInsurancePoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shield",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "startVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userProposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_isFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3a81ff3a3300c747f1a8518f008a7c5bdedbb4b5284df77c8ba275288c263de",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xbd3baf463E5AD5E8cb6673Beebf3E6597eB6Ed1d",
    "transactionIndex": 4,
    "gasUsed": "1405654",
    "logsBloom": "0x
    "blockHash": "0xe3cd2121f86085e33cc3319e8531030b10e44683fc8d7aa639518af784e9d7fb",
    "transactionHash": "0xa3a81ff3a3300c747f1a8518f008a7c5bdedbb4b5284df77c8ba275288c263de",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 12308671,
        "transactionHash": "0xa3a81ff3a3300c747f1a8518f008a7c5bdedbb4b5284df77c8ba275288c263de",
        "address": "0xbd3baf463E5AD5E8cb6673Beebf3E6597eB6Ed1d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xe3cd2121f86085e33cc3319e8531030b10e44683fc8d7aa639518af784e9d7fb"
      }
    ],
    "blockNumber": 12308671,
    "cumulativeGasUsed": "1853637",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4C5fAB0Da4ecB345eb5C52B697970A9236A608a8",
    "0xF3a9BADD378218345FDF9a1bf239f07416eEEc1d",
    "0x4D16BA86A3b4a6aE9EE124bA48BbaD711B26DDfc"
  ],
  "numDeployments": 2,
  "solcInputHash": "636dc198869c5c9a4918ff616bedc3c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceRatio\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ProposalSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"closeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"internalType\":\"struct OnboardProposal.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolProposed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceRatio\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePoolFactory\",\"type\":\"address\"}],\"name\":\"setInsurancePoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shield\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userProposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_isFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"propose(string,address,uint256,uint256)\":{\"params\":{\"_maxCapacity\":\"Max capacity for the project pool\",\"_name\":\"New project name\",\"_priceRatio\":\"Price ratio of the premium\",\"_token\":\"Native token address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"settle(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"startVoting(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount to vote\",\"_isFor\":\"Voting choice\",\"_proposalId\":\"Proposal id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256)\":{\"notice\":\"Claim back veDEG after voting result settled\"},\"propose(string,address,uint256,uint256)\":{\"notice\":\"Start a new proposal\"},\"settle(uint256)\":{\"notice\":\"Settle the proposal\"},\"startVoting(uint256)\":{\"notice\":\"Check if the proposal is settled\"},\"vote(uint256,uint256,uint256)\":{\"notice\":\"Vote for a proposal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/voting/OnboardProposal.sol\":\"OnboardProposal\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363539393235383335353336\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IVeDEG.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\n\\nabstract contract ExternalTokenDependencies {\\n    uint256 public constant SCALE = 1e12;\\n\\n    address public immutable deg;\\n    address public immutable veDeg;\\n    address public immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = _deg;\\n        veDeg = _veDeg;\\n        shield = _shield;\\n    }\\n}\\n\",\"keccak256\":\"0xf33ecf76a155608f5d5aec270e42feadd8e8960374a4c25fa27288c79a1fcf9a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x7fc061fdc39f52163a849ab85a3fc59b148e16f6eeb72dc6a3e7dd393d3ab5b3\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\ninterface IExecutor {\\n    event NewPoolEecuted(address poolAddress, uint256 proposalId, address protocol);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event QueuePool(uint256 proposalId, uint256 maxCapacity, uint256 ends);\\n    event QueueReport(uint256 reportId, uint256 poolId, uint256 ends);\\n    event ReportExecuted(address pool, uint256 poolId, uint256 reportId);\\n\\n    function cancelNewPool(uint256 _proposalId) external;\\n    function cancelReport(uint256 _reportId) external;\\n    function deg() view external returns (address);\\n    function executeProposal(uint256 _proposalId) external returns (address newPool);\\n    function executeReport(uint256 _reportId) external;\\n    function executor() view external returns (address);\\n    function incidentReport() view external returns (address);\\n    function insurancePoolFactory() view external returns (address);\\n    function owner() view external returns (address);\\n    function policyCenter() view external returns (address);\\n    function poolBuffer() view external returns (uint256);\\n    function proposalCenter() view external returns (address);\\n    function queuePool(string memory _protocolName, uint256 _proposalId, address _protocol, uint256 _maxCapacity, uint256 _policyPricePerToken, bool _pending, bool _approved) external;\\n    function queueReport(bool _pending, bool _approved, uint256 _reportId, uint256 _poolId) external;\\n    function queuedPoolsById(uint256) view external returns (string memory protocolName, address protocol, uint256 maxCapacity, uint256 policyPricePerShield, uint256 queueEnds, bool pending, bool approved);\\n    function queuedReportsById(uint256) view external returns (uint256 poolId, uint256 queueEnds, bool pending, bool approved);\\n    function reinsurancePool() view external returns (address);\\n    function renounceOwnership() external;\\n    function reportBuffer() view external returns (uint256);\\n    function setBuffers(uint256 _poolBuffer, uint256 _reportBuffer) external;\\n   \\n    function setExecutor(address _executor) external;\\n    function setIncidentReport(address _incidentReport) external;\\n    function setInsurancePoolFactory(address _insurancePoolFactory) external;\\n    function setPolicyCenter(address _policyCenter) external;\\n    function setProposalCenter(address _proposalCenter) external;\\n    function setReinsurancePool(address _reinsurancePool) external;\\n    \\n    function shield() view external returns (address);\\n    function transferOwnership(address newOwner) external;\\n    function veDeg() view external returns (address);\\n}\",\"keccak256\":\"0x6aba858519fecec54f09b6bd59691aa63f31016f1bcd9eca602208081eca7b9b\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IInsurancePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IInsurancePoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function administrator() external view returns (address);\\n\\n    function deg() external view returns (address);\\n\\n    function deregisterAddress(address _tokenAddress) external;\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function insurancePoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function proposalCenter() external view returns (address);\\n\\n    function reinsurancePool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setInsurancePoolFactory(address _insurancePoolFactory) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProposalCenter(address _proposalCenter) external;\\n\\n    function setReinsurancePool(address _reinsurancePool) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n}\\n\",\"keccak256\":\"0x90a2f328cf8124955127c1351288ead9265b760fbcc18915d3922877973ca49a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is IERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n    \\n    function users(uint256 _pool, address _user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x52de2840d0927eb6d241ec6bead7e88fcf1c30c4fbe4fa6d5efc77159b6290c1\",\"license\":\"MIT\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _transferOwnership(_initOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0cf3a1968613bb036219db76df7643df085878ed42beb669c9803037c0396c75\",\"license\":\"MIT\"},\"src/voting/OnboardProposal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"./interfaces/OnboardProposalParameters.sol\\\";\\nimport \\\"./interfaces/OnboardProposalDependencies.sol\\\";\\n\\nimport \\\"../interfaces/ExternalTokenDependencies.sol\\\";\\n\\ncontract OnboardProposal is\\n    OnboardProposalParameters,\\n    OnboardProposalDependencies,\\n    ExternalTokenDependencies,\\n    OwnableWithoutContext\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Total number of reports\\n    uint256 public proposalCounter;\\n\\n    struct Proposal {\\n        string name;\\n        address protocolToken;\\n        address proposer;\\n        uint256 proposeTimestamp;\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 maxCapacity;\\n        uint256 priceRatio;\\n        uint256 poolId;\\n        uint256 status;\\n        uint256 result;\\n    }\\n    // Proposal ID => Proposal\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(address => bool) public poolProposed;\\n\\n    struct UserVote {\\n        uint256 choice; // 1: vote for, 2: vote against\\n        uint256 amount;\\n        bool claimed;\\n    }\\n    // User address => report id => user's voting info\\n    mapping(address => mapping(uint256 => UserVote)) public userProposalVotes;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event NewProposal(\\n        string name,\\n        address token,\\n        uint256 maxCapacity,\\n        uint256 priceRatio\\n    );\\n\\n    event ProposalVoted(\\n        uint256 proposalId,\\n        address indexed user,\\n        uint256 voteFor,\\n        uint256 amount\\n    );\\n\\n    event ProposalSettled(uint256 proposalId, uint256 result);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) ExternalTokenDependencies(_deg, _veDeg, _shield) OwnableWithoutContext(msg.sender) {}\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function getProposal(uint256 _proposalId)\\n        public\\n        view\\n        returns (Proposal memory)\\n    {\\n        return proposals[_proposalId];\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setExecutor(address _executor) external onlyOwner {\\n        _setExecutor(_executor);\\n    }\\n\\n    function setInsurancePoolFactory(address _insurancePoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setInsurancePoolFactory(_insurancePoolFactory);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new proposal\\n     *\\n     * @param _name        New project name\\n     * @param _token       Native token address\\n     * @param _maxCapacity Max capacity for the project pool\\n     * @param _priceRatio  Price ratio of the premium\\n     */\\n    function propose(\\n        string calldata _name,\\n        address _token,\\n        uint256 _maxCapacity,\\n        uint256 _priceRatio // 10000 == 100% premium anual cost\\n    ) external {\\n        require(\\n            !IInsurancePoolFactory(insurancePoolFactory).tokenRegistered(\\n                _token\\n            ),\\n            \\\"Protocol already protected\\\"\\n        );\\n\\n        require(poolProposed[_token] == false, \\\"Protocol already proposed\\\");\\n\\n        // Burn degis tokens to start a proposal\\n        IDegisToken(deg).burnDegis(msg.sender, REPORT_THRESHOLD);\\n\\n        poolProposed[_token] = true;\\n\\n        uint256 currentProposalCounter = ++proposalCounter;\\n\\n        Proposal storage proposal = proposals[currentProposalCounter];\\n        proposal.protocolToken = _token;\\n        proposal.proposer = msg.sender;\\n        proposal.proposeTimestamp = block.timestamp;\\n        proposal.status = PENDING_STATUS;\\n        proposal.maxCapacity = _maxCapacity;\\n        proposal.priceRatio = _priceRatio;\\n\\n        emit NewProposal(_name, _token, _maxCapacity, _priceRatio);\\n    }\\n\\n    /**\\n     * @notice Vote for a proposal\\n     *\\n     * @param _proposalId Proposal id\\n     * @param _isFor      Voting choice\\n     * @param _amount     Amount to vote\\n     */\\n    function vote(\\n        uint256 _proposalId,\\n        uint256 _isFor,\\n        uint256 _amount\\n    ) external {\\n        // Should be manually switched on the voting process\\n        require(\\n            proposals[_proposalId].status == VOTING_STATUS,\\n            \\\"Not voting status\\\"\\n        );\\n\\n        require(_isFor == 1 || _isFor == 2, \\\"Wrong choice\\\");\\n\\n        _enoughVeDEG(msg.sender, _amount);\\n\\n        // Lock vedeg until this report is settled\\n        IVeDEG(veDeg).lockVeDEG(msg.sender, _amount);\\n\\n        // Record the user's choice\\n        UserVote storage userProposalVote = userProposalVotes[msg.sender][\\n            _proposalId\\n        ];\\n        if (userProposalVote.amount > 0) {\\n            require(\\n                userProposalVote.choice == _isFor,\\n                \\\"Can not choose both sides\\\"\\n            );\\n        } else {\\n            userProposalVote.choice = _isFor;\\n        }\\n\\n        Proposal storage currentProposal = proposals[_proposalId];\\n        // Record the vote for this report\\n        if (_isFor == 1) {\\n            currentProposal.numFor += _amount;\\n        } else {\\n            currentProposal.numAgainst += _amount;\\n        }\\n\\n        emit ProposalVoted(_proposalId, msg.sender, _isFor, _amount);\\n    }\\n\\n    /**\\n     * @notice Settle the proposal\\n     *\\n     * @param _proposalId Proposal id\\n     */\\n    function settle(uint256 _proposalId) external {\\n        Proposal storage currentProposal = proposals[_proposalId];\\n\\n        require(currentProposal.status == VOTING_STATUS, \\\"Not voting status\\\");\\n\\n        // Check has passed the voting period\\n        require(\\n            _passedVotingPeriod(currentProposal.proposeTimestamp),\\n            \\\"Not reached settlement\\\"\\n        );\\n\\n        require(currentProposal.result == 0, \\\"Already settled\\\");\\n\\n        _checkQuorum(currentProposal.numFor + currentProposal.numAgainst);\\n\\n        uint256 res = _getVotingResult(\\n            currentProposal.numFor,\\n            currentProposal.numAgainst\\n        );\\n\\n        currentProposal.result = res;\\n        currentProposal.status = SETTLED_STATUS;\\n\\n        // allow for new proposals to be proposed for this protocol\\n        poolProposed[currentProposal.protocolToken] = false;\\n        emit ProposalSettled(_proposalId, res);\\n    }\\n\\n    function closeProposal(uint256 _proposalId) external {\\n        require(msg.sender == executor, \\\"Only executor can close proposal\\\");\\n\\n        Proposal storage currentProposal = proposals[_proposalId];\\n\\n        // require current proposal to be settled\\n        require(\\n            currentProposal.status == PENDING_STATUS,\\n            \\\"Not pending or settled status\\\"\\n        );\\n\\n        // Must close the report before pending period ends\\n        require(\\n            !_passedVotingPeriod(currentProposal.proposeTimestamp),\\n            \\\"Already passed pending period\\\"\\n        );\\n\\n        currentProposal.status = CLOSE_STATUS;\\n    }\\n\\n    /**\\n     * @notice Claim back veDEG after voting result settled\\n     *\\n     * @param _proposalId Proposal id\\n     */\\n    function claim(uint256 _proposalId) external {\\n        Proposal storage currentProposal = proposals[_proposalId];\\n\\n        require(currentProposal.status == SETTLED_STATUS, \\\"Not settled status\\\");\\n\\n        UserVote storage userVote = userProposalVotes[msg.sender][_proposalId];\\n\\n        IVeDEG(veDeg).unlockVeDEG(msg.sender, userVote.amount);\\n\\n        userVote.claimed = true;\\n    }\\n\\n    /**\\n     * @notice Check if the proposal is settled\\n     *\\n     * @param _proposalId Proposal id\\n     */\\n    function startVoting(uint256 _proposalId) external {\\n        Proposal storage currentProposal = proposals[_proposalId];\\n\\n        require(currentProposal.status == PENDING_STATUS, \\\"Not pending status\\\");\\n\\n        require(\\n            _passedVotingPeriod(currentProposal.proposeTimestamp),\\n            \\\"Not reached voting period\\\"\\n        );\\n\\n        currentProposal.status = VOTING_STATUS;\\n    }\\n\\n    /**\\n     * @notice Get the final voting result\\n     *\\n     * @param _numFor     Votes for\\n     * @param _numAgainst Votes against\\n     *\\n     * @return result Pass, reject or tied\\n     */\\n    function _getVotingResult(uint256 _numFor, uint256 _numAgainst)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (_numFor > _numAgainst) result = PASS_RESULT;\\n        else if (_numFor < _numAgainst) result = REJECT_RESULT;\\n        else result = TIED_RESULT;\\n    }\\n\\n    /**\\n     * @notice Check whether has passed the voting time period\\n     *\\n     * @param _reportTime Start timestamp of the report\\n     *\\n     * @return hasPassed True for passing\\n     */\\n    function _passedVotingPeriod(uint256 _reportTime)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 endTime = _reportTime + VOTING_PERIOD;\\n\\n        return block.timestamp > endTime;\\n    }\\n\\n    /**\\n     * @notice Check quorum requirement\\n     *         30% of totalSupply is the minimum requirement for participation\\n     *\\n     * @param _totalVotes Total vote numbers\\n     */\\n    function _checkQuorum(uint256 _totalVotes) internal view {\\n        require(\\n            _totalVotes >= (IVeDEG(veDeg).totalSupply() * QUORUM_RATIO) / 100,\\n            \\\"Not reached quorum\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check veDEG to be enough\\n     *\\n     * @param _user   User address\\n     * @param _amount Amount to fulfill\\n     */\\n    function _enoughVeDEG(address _user, uint256 _amount) internal view {\\n        uint256 unlockedBalance = IERC20(veDeg).balanceOf(_user) -\\n            IVeDEG(veDeg).locked(_user);\\n        require(unlockedBalance >= _amount, \\\"Not enough veDEG\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa01726f498eb5a495bc1f21f68d6507352767f921955fdc38bab3ad4fde9f494\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/interfaces/OnboardProposalDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IExecutor.sol\\\";\\nimport \\\"../../interfaces/IInsurancePoolFactory.sol\\\";\\n\\nabstract contract OnboardProposalDependencies {\\n    address public executor;\\n    address public insurancePoolFactory;\\n\\n    function _setExecutor(address _executor) internal virtual {\\n        executor = _executor;\\n    }\\n\\n    function _setInsurancePoolFactory(address _insurancePoolFactory)\\n        internal\\n        virtual\\n    {\\n        insurancePoolFactory = _insurancePoolFactory;\\n    }\\n}\\n\",\"keccak256\":\"0x01446961187de2f3f0ed7eee29e524f15d925750dc5869a69f8a00fb21c5493c\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/interfaces/OnboardProposalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./VotingParameters.sol\\\";\\n\\nabstract contract OnboardProposalParameters is VotingParameters {\\n    // uint256 constant VOTING_PERIOD = 3 days;\\n    uint256 constant VOTING_PERIOD = 2 hours;\\n\\n    // minimum 50% votes\\n    uint256 constant QUORUM_RATIO = 50;\\n\\n    // DEG threshold for starting a report\\n    uint256 constant REPORT_THRESHOLD = 1000 ether;\\n}\\n\",\"keccak256\":\"0x2780613b27cf8b00fe4b2e266fbc4350203a48687e098f30a56fb5207ec1df0e\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/interfaces/VotingParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract VotingParameters {\\n    // Status parameters for a voting\\n    uint256 constant INIT_STATUS = 0;\\n    uint256 constant PENDING_STATUS = 1;\\n    uint256 constant VOTING_STATUS = 2;\\n    uint256 constant SETTLED_STATUS = 3;\\n    uint256 constant CLOSE_STATUS = 404;\\n\\n    // Result parameters for a voting\\n    uint256 constant INIT_RESULT = 0;\\n    uint256 constant PASS_RESULT = 1;\\n    uint256 constant REJECT_RESULT = 2;\\n    uint256 constant TIED_RESULT = 3;\\n}\\n\",\"keccak256\":\"0xee54f6c7ecf6b46e3b04c29213587d77138369682f7e68737a9624d8a4f0514b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806370d39cff116100b85780638df828001161007c5780638df8280014610337578063c34c08e51461034a578063c3a593b31461035d578063c7f758a814610384578063eced5526146103a4578063f2fde38b146103b057600080fd5b806370d39cff146102b1578063715018a6146102d85780638610cd9c146102e05780638a6655d6146103135780638da5cb5b1461032657600080fd5b8063250c4dc61161010a578063250c4dc6146101cc578063379607f5146101f75780633d2f5bda1461020a5780634858b3001461021d5780634b5cecaf146102445780634d658ef01461029e57600080fd5b8063013cf08b146101475780630386a0161461017a5780630c0512e91461018f578063164bfde5146101a65780631c3c0ea8146101b9575b600080fd5b61015a6101553660046113b0565b6103c3565b6040516101719b9a99989796959493929190611416565b60405180910390f35b61018d6101883660046113b0565b6104af565b005b61019860035481565b604051908152602001610171565b61018d6101b436600461149e565b6105d6565b61018d6101c7366004611531565b61085c565b6001546101df906001600160a01b031681565b6040516001600160a01b039091168152602001610171565b61018d6102053660046113b0565b610885565b61018d6102183660046113b0565b610994565b6101df7f000000000000000000000000000000000000000000000000000000000000000081565b610281610252366004611553565b600660209081526000928352604080842090915290825290208054600182015460029092015490919060ff1683565b604080519384526020840192909252151590820152606001610171565b61018d6102ac366004611531565b610a4f565b6101df7f000000000000000000000000000000000000000000000000000000000000000081565b61018d610a75565b6103036102ee366004611531565b60056020526000908152604090205460ff1681565b6040519015158152602001610171565b61018d61032136600461157d565b610a89565b6002546001600160a01b03166101df565b61018d6103453660046113b0565b610ccc565b6000546101df906001600160a01b031681565b6101df7f000000000000000000000000000000000000000000000000000000000000000081565b6103976103923660046113b0565b610e5c565b60405161017191906115a9565b61019864e8d4a5100081565b61018d6103be366004611531565b610ff0565b6004602052600090815260409020805481906103de90611662565b80601f016020809104026020016040519081016040528092919081815260200182805461040a90611662565b80156104575780601f1061042c57610100808354040283529160200191610457565b820191906000526020600020905b81548152906001019060200180831161043a57829003601f168201915b50505060018401546002850154600386015460048701546005880154600689015460078a015460088b015460098c0154600a909c01549a9b6001600160a01b039889169b97909816995094975092959194909391908b565b6000546001600160a01b0316331461050e5760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79206578656375746f722063616e20636c6f73652070726f706f73616c60448201526064015b60405180910390fd5b600081815260046020526040902060098101546001146105705760405162461bcd60e51b815260206004820152601d60248201527f4e6f742070656e64696e67206f7220736574746c6564207374617475730000006044820152606401610505565b61057d8160030154611066565b156105ca5760405162461bcd60e51b815260206004820152601d60248201527f416c7265616479207061737365642070656e64696e6720706572696f640000006044820152606401610505565b61019460099091015550565b600154604051635170e73160e11b81526001600160a01b0385811660048301529091169063a2e1ce6290602401602060405180830381865afa158015610620573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610644919061169c565b156106915760405162461bcd60e51b815260206004820152601a60248201527f50726f746f636f6c20616c72656164792070726f7465637465640000000000006044820152606401610505565b6001600160a01b03831660009081526005602052604090205460ff16156106fa5760405162461bcd60e51b815260206004820152601960248201527f50726f746f636f6c20616c72656164792070726f706f736564000000000000006044820152606401610505565b60405163342c6d4d60e11b8152336004820152683635c9adc5dea0000060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636858da9a90604401600060405180830381600087803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b505050506001600160a01b0383166000908152600560205260408120805460ff191660011790556003805482906107b4906116d4565b918290555060008181526004602052604090819020600180820180546001600160a01b038a166001600160a01b03199182161790915560028301805490911633179055426003830155600982015560068101869055600781018590559051919250907f4ed1074f927c379b0feb9b015cee3ab1c83f6c6b10269879558a35b49caba6af9061084b90899089908990899089906116ed565b60405180910390a150505050505050565b61086461107e565b600080546001600160a01b0319166001600160a01b03831617905550565b50565b600081815260046020526040902060098101546003146108dc5760405162461bcd60e51b81526020600482015260126024820152714e6f7420736574746c65642073746174757360701b6044820152606401610505565b3360008181526006602090815260408083208684529091529081902060018101549151634bdc2db560e11b815260048101939093526024830191909152906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906397b85b6a90604401600060405180830381600087803b15801561096857600080fd5b505af115801561097c573d6000803e3d6000fd5b5050506002909101805460ff19166001179055505050565b600081815260046020526040902060098101546001146109eb5760405162461bcd60e51b81526020600482015260126024820152714e6f742070656e64696e672073746174757360701b6044820152606401610505565b6109f88160030154611066565b610a445760405162461bcd60e51b815260206004820152601960248201527f4e6f74207265616368656420766f74696e6720706572696f64000000000000006044820152606401610505565b600260099091015550565b610a5761107e565b600180546001600160a01b0319166001600160a01b03831617905550565b610a7d61107e565b610a8760006110e7565b565b600083815260046020526040902060090154600214610ade5760405162461bcd60e51b81526020600482015260116024820152704e6f7420766f74696e672073746174757360781b6044820152606401610505565b8160011480610aed5750816002145b610b285760405162461bcd60e51b815260206004820152600c60248201526b57726f6e672063686f69636560a01b6044820152606401610505565b610b323382611139565b604051633c56aa6160e11b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906378ad54c290604401600060405180830381600087803b158015610b9a57600080fd5b505af1158015610bae573d6000803e3d6000fd5b505033600090815260066020908152604080832088845290915290206001810154909250159050610c2e5780548314610c295760405162461bcd60e51b815260206004820152601960248201527f43616e206e6f742063686f6f736520626f7468207369646573000000000000006044820152606401610505565b610c32565b8281555b60008481526004602052604090206001849003610c685782816004016000828254610c5d919061173b565b90915550610c829050565b82816005016000828254610c7c919061173b565b90915550505b604080518681526020810186905290810184905233907ff3709dc32cf1356da6b8a12a5be1401aeb00989556be7b16ae566e65fef7a9df9060600160405180910390a25050505050565b60008181526004602052604090206009810154600214610d225760405162461bcd60e51b81526020600482015260116024820152704e6f7420766f74696e672073746174757360781b6044820152606401610505565b610d2f8160030154611066565b610d745760405162461bcd60e51b8152602060048201526016602482015275139bdd081c995858da1959081cd95d1d1b195b595b9d60521b6044820152606401610505565b600a81015415610db85760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e481cd95d1d1b1959608a1b6044820152606401610505565b610dd481600501548260040154610dcf919061173b565b6112a6565b6000610de882600401548360050154611384565b600a83018190556003600984015560018301546001600160a01b0316600090815260056020908152604091829020805460ff1916905581518681529081018390529192507fc3e9e56c21ecd9fd3bcbaf6dd404f67ff375a520220a8edc72194dc096ef1c50910160405180910390a1505050565b610ecb6040518061016001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000828152600460205260409081902081516101608101909252805482908290610ef490611662565b80601f0160208091040260200160405190810160405280929190818152602001828054610f2090611662565b8015610f6d5780601f10610f4257610100808354040283529160200191610f6d565b820191906000526020600020905b815481529060010190602001808311610f5057829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a909101546101409091015292915050565b610ff861107e565b6001600160a01b03811661105d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610505565b610882816110e7565b600080611075611c208461173b565b42119392505050565b336110916002546001600160a01b031690565b6001600160a01b031614610a875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610505565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405163cbf9fe5f60e01b81526001600160a01b0383811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063cbf9fe5f90602401602060405180830381865afa1580156111a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c89190611753565b6040516370a0823160e01b81526001600160a01b0385811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561122e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112529190611753565b61125c919061176c565b9050818110156112a15760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f75676820766544454760801b6044820152606401610505565b505050565b606460327f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190611753565b6113369190611783565b61134091906117a2565b8110156108825760405162461bcd60e51b81526020600482015260126024820152714e6f7420726561636865642071756f72756d60701b6044820152606401610505565b600081831115611396575060016113aa565b818310156113a6575060026113aa565b5060035b92915050565b6000602082840312156113c257600080fd5b5035919050565b6000815180845260005b818110156113ef576020818501810151868301820152016113d3565b81811115611401576000602083870101525b50601f01601f19169290920160200192915050565b600061016080835261142a8184018f6113c9565b6001600160a01b039d8e1660208501529b909c166040830152506060810198909852608088019690965260a087019490945260c086019290925260e08501526101008401526101208301526101409091015292915050565b80356001600160a01b038116811461149957600080fd5b919050565b6000806000806000608086880312156114b657600080fd5b853567ffffffffffffffff808211156114ce57600080fd5b818801915088601f8301126114e257600080fd5b8135818111156114f157600080fd5b89602082850101111561150357600080fd5b6020928301975095506115199188019050611482565b94979396509394604081013594506060013592915050565b60006020828403121561154357600080fd5b61154c82611482565b9392505050565b6000806040838503121561156657600080fd5b61156f83611482565b946020939093013593505050565b60008060006060848603121561159257600080fd5b505081359360208301359350604090920135919050565b60208152600082516101608060208501526115c86101808501836113c9565b915060208501516115e460408601826001600160a01b03169052565b5060408501516001600160a01b03811660608601525060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151915050610140818187015280870151838701525050508091505092915050565b600181811c9082168061167657607f821691505b60208210810361169657634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156116ae57600080fd5b8151801515811461154c57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016116e6576116e66116be565b5060010190565b60808152846080820152848660a0830137600060a08683018101919091526001600160a01b0394909416602082015260408101929092526060820152601f909201601f191690910101919050565b6000821982111561174e5761174e6116be565b500190565b60006020828403121561176557600080fd5b5051919050565b60008282101561177e5761177e6116be565b500390565b600081600019048311821515161561179d5761179d6116be565b500290565b6000826117bf57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a526dc9d5b00c525aa77bebd20db3ac59a640531b8e549783d43b81c8a1e3bd164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "propose(string,address,uint256,uint256)": {
        "params": {
          "_maxCapacity": "Max capacity for the project pool",
          "_name": "New project name",
          "_priceRatio": "Price ratio of the premium",
          "_token": "Native token address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "settle(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "startVoting(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vote(uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount to vote",
          "_isFor": "Voting choice",
          "_proposalId": "Proposal id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256)": {
        "notice": "Claim back veDEG after voting result settled"
      },
      "propose(string,address,uint256,uint256)": {
        "notice": "Start a new proposal"
      },
      "settle(uint256)": {
        "notice": "Settle the proposal"
      },
      "startVoting(uint256)": {
        "notice": "Check if the proposal is settled"
      },
      "vote(uint256,uint256,uint256)": {
        "notice": "Vote for a proposal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20276,
        "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
        "label": "executor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20278,
        "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
        "label": "insurancePoolFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16272,
        "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 18038,
        "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
        "label": "proposalCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 18066,
        "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Proposal)18061_storage)"
      },
      {
        "astId": 18070,
        "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
        "label": "poolProposed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18084,
        "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
        "label": "userProposalVotes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)18077_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)18077_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct OnboardProposal.UserVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserVote)18077_storage)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)18061_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OnboardProposal.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)18061_storage"
      },
      "t_mapping(t_uint256,t_struct(UserVote)18077_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OnboardProposal.UserVote)",
        "numberOfBytes": "32",
        "value": "t_struct(UserVote)18077_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)18061_storage": {
        "encoding": "inplace",
        "label": "struct OnboardProposal.Proposal",
        "members": [
          {
            "astId": 18040,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 18042,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "protocolToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18044,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "proposer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18046,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "proposeTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18048,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "numFor",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18050,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "numAgainst",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18052,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "maxCapacity",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 18054,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "priceRatio",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 18056,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "poolId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 18058,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "status",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 18060,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "result",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(UserVote)18077_storage": {
        "encoding": "inplace",
        "label": "struct OnboardProposal.UserVote",
        "members": [
          {
            "astId": 18072,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "choice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18074,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18076,
            "contract": "src/voting/OnboardProposal.sol:OnboardProposal",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}