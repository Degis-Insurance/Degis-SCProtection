{
  "address": "0x0A363f03789F966602BE67218CF8761451C1e5De",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__AlreadyProposed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__AlreadyProtected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__AlreadySettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__ChooseBothSides",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__NotEnoughVeDEG",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__NotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__NotWrongChoice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__ProposeNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongChoice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongPremium",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__WrongStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnboardProposal__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceRatio",
          "type": "uint256"
        }
      ],
      "name": "NewProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProposalClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "name": "ProposalSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "voteFor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProposalVoted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProposalVotingStart",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "closeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "protocolToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "proposeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numFor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numAgainst",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePremiumRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "status",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            }
          ],
          "internalType": "struct OnboardProposal.Proposal[]",
          "name": "allProposals",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "protocolToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "proposeTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "voteTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numFor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numAgainst",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePremiumRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "status",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "result",
              "type": "uint256"
            }
          ],
          "internalType": "struct OnboardProposal.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "getUserProposalVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "choice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct OnboardProposal.UserVote",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "contract IPriorityPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "protocolToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "proposeTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "voteTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numAgainst",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basePremiumRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basePremiumRatio",
          "type": "uint256"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "startVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_isFor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "choice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2115ee0ebe9e4ed828972b95216795dce61c5daaf818c832ef4e866868e04ac9",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x0A363f03789F966602BE67218CF8761451C1e5De",
    "transactionIndex": 1,
    "gasUsed": "1292169",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x633b2fc463f4bb1eab0ffeaafa8d33c7af33724a3c272be2d15730571de30fd3",
    "transactionHash": "0x2115ee0ebe9e4ed828972b95216795dce61c5daaf818c832ef4e866868e04ac9",
    "logs": [],
    "blockNumber": 12985474,
    "cumulativeGasUsed": "1422947",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Efd5a9269a328b1bf8873dC6d9EB5fF321aba09",
    "0xF98f0dE58c9a78B8e42def3cc49f02C2B35b81C9",
    "0x2afE704De753dDD32DC39f41C5F9D5df4bFc71F0"
  ],
  "numDeployments": 1,
  "solcInputHash": "4c1ea26067abcc0a57f41a2f186a228d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnboardProposal__AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__AlreadyProposed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__AlreadyProtected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__AlreadySettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__ChooseBothSides\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__NotEnoughVeDEG\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__NotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__NotWrongChoice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__ProposeNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongChoice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongPremium\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__WrongStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnboardProposal__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceRatio\",\"type\":\"uint256\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"ProposalSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProposalVoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProposalVotingStart\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"closeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"internalType\":\"struct OnboardProposal.Proposal[]\",\"name\":\"allProposals\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"internalType\":\"struct OnboardProposal.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"getUserProposalVote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct OnboardProposal.UserVote\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"contract IPriorityPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposeTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numAgainst\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePremiumRatio\",\"type\":\"uint256\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"startVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_isFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"choice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256)\":{\"params\":{\"_id\":\"Proposal id\"}},\"closeProposal(uint256)\":{\"params\":{\"_id\":\"Proposal id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"propose(string,address,uint256,uint256)\":{\"params\":{\"_basePremiumRatio\":\"Base annual ratio of the premium\",\"_maxCapacity\":\"Max capacity ratio for the project pool\",\"_name\":\"New project name\",\"_token\":\"Native token address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"settle(uint256)\":{\"params\":{\"_id\":\"Proposal id\"}},\"startVoting(uint256)\":{\"params\":{\"_id\":\"Proposal id to start voting\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"vote(uint256,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of veDEG to vote\",\"_id\":\"Proposal id\",\"_isFor\":\"Voting choice\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256)\":{\"notice\":\"Claim back veDEG after voting result settled\"},\"closeProposal(uint256)\":{\"notice\":\"Close a pending proposal         Need the approval of dev team (onlyOwner)\"},\"propose(string,address,uint256,uint256)\":{\"notice\":\"Start a new proposal\"},\"settle(uint256)\":{\"notice\":\"Settle the proposal result\"},\"startVoting(uint256)\":{\"notice\":\"Start the voting process         Need the approval of dev team (onlyOwner)\"},\"vote(uint256,uint256,uint256)\":{\"notice\":\"Vote for a proposal         Voting power is decided by the (unlocked) balance of veDEG         Once voted, those veDEG will be locked\"}},\"notice\":\"Onboard Proposal\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/voting/onboardProposal/OnboardProposal.sol\":\"OnboardProposal\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363631383234383130353130\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IShield.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\n\\nabstract contract ExternalTokenDependencies is CommonDependencies {\\n    IDegisToken immutable deg;\\n    IVeDEG immutable veDeg;\\n    IShield immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n        shield = IShield(_shield);\\n    }\\n}\\n\",\"keccak256\":\"0x9131de9b8c5ffa6cdc0e52501c778a6452fe5c70e69fd448a8fa661dcbc80e8b\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xc2d17e329f02f1f34aacd39729db66b45f8b40e0175a772830ff92419fe5252e\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\ninterface IExecutor {\\n    function deg() external view returns (address);\\n\\n    function executeProposal(uint256 _proposalId) external returns (address);\\n\\n    function executeReport(uint256 _reportId) external;\\n\\n    function executor() external view returns (address);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function proposalBuffer() external view returns (uint256);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setDeg(address _deg) external;\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function shield() external view returns (address);\\n\\n    function veDeg() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe27949272afd0a1c2a2782dcdd16e70367b1b369d55d8676a73bbaa2dd85b7b0\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n}\\n\",\"keccak256\":\"0x8c988f1fbeea64eede1c093a62bb6523f0f3e35a5d1807fc1909060cad38928f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IShield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IShield is SimpleIERC20 {\\n    function deposit(\\n        uint256 _type,\\n        address _stablecoin,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22e4fc4218ad0df35d3a7c982296a7fdae6c502d5cf77a7e8d26155e7061cbe1\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x105e977446b6560631149337a4c53822e06e1d38b89036e5cf2f9c89b3a8b19b\",\"license\":\"MIT\"},\"src/pools/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x93ccdbce4fcd2d86096e6ad8b10a06757d600a70a4eb660281238a4ef1d6be7f\",\"license\":\"MIT\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _owner = _initOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x78b93f32b25ad2184a4fbc44160870a5a81f567186c99923ecbc54329c57f88b\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/interfaces/VotingParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract VotingParameters {\\n    // Status parameters for a voting\\n    uint256 constant INIT_STATUS = 0;\\n    uint256 constant PENDING_STATUS = 1;\\n    uint256 constant VOTING_STATUS = 2;\\n    uint256 constant SETTLED_STATUS = 3;\\n    uint256 constant CLOSE_STATUS = 404;\\n\\n    // Result parameters for a voting\\n    uint256 constant INIT_RESULT = 0;\\n    uint256 constant PASS_RESULT = 1;\\n    uint256 constant REJECT_RESULT = 2;\\n    uint256 constant TIED_RESULT = 3;\\n    uint256 constant FAILED_RESULT = 4;\\n\\n}\\n\",\"keccak256\":\"0x318df2539060dd22bde2a636710f7722af833333a794bd1c54e53d6341d394ba\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposal.sol\":{\"content\":\" // SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"./OnboardProposalParameters.sol\\\";\\nimport \\\"./OnboardProposalDependencies.sol\\\";\\nimport \\\"./OnboardProposalEventError.sol\\\";\\n\\nimport \\\"../../interfaces/ExternalTokenDependencies.sol\\\";\\n\\n/**\\n * @notice Onboard Proposal\\n */\\ncontract OnboardProposal is\\n    OnboardProposalParameters,\\n    OnboardProposalEventError,\\n    ExternalTokenDependencies,\\n    OwnableWithoutContext,\\n    OnboardProposalDependencies\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Total number of reports\\n    uint256 public proposalCounter;\\n\\n    struct Proposal {\\n        string name; // Pool name (\\\"JOE\\\", \\\"GMX\\\")\\n        address protocolToken; // Protocol native token address\\n        address proposer; // Proposer address\\n        uint256 proposeTimestamp; // Timestamp when proposing\\n        uint256 voteTimestamp; // Timestamp when start voting\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 maxCapacity; // Max capacity ratio\\n        uint256 basePremiumRatio; // Base annual premium ratio\\n        uint256 poolId; // Priority pool id\\n        uint256 status; // Current status (PENDING, VOTING, SETTLED, CLOSED)\\n        uint256 result; // Final result (PASSED, REJECTED, TIED)\\n    }\\n    // Proposal ID => Proposal\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    // Protocol token => Whether proposed\\n    // A protocol can only have one pool\\n    mapping(address => bool) public proposed;\\n\\n    struct UserVote {\\n        uint256 choice; // 1: vote for, 2: vote against\\n        uint256 amount; // veDEG amount for voting\\n        bool claimed; // Voting reward already claimed\\n    }\\n    // User address => report id => user's voting info\\n    mapping(address => mapping(uint256 => UserVote)) public votes;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    )\\n        ExternalTokenDependencies(_deg, _veDeg, _shield)\\n        OwnableWithoutContext(msg.sender)\\n    {}\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function getProposal(uint256 _proposalId)\\n        external\\n        view\\n        returns (Proposal memory)\\n    {\\n        return proposals[_proposalId];\\n    }\\n\\n    function getUserProposalVote(address _user, uint256 _proposalId)\\n        external\\n        view\\n        returns (UserVote memory)\\n    {\\n        return votes[_user][_proposalId];\\n    }\\n\\n    function getAllProposals()\\n        external\\n        view\\n        returns (Proposal[] memory allProposals)\\n    {\\n        uint256 totalProposal = proposalCounter;\\n\\n        allProposals = new Proposal[](totalProposal);\\n\\n        for (uint256 i; i < totalProposal; ) {\\n            allProposals[i] = proposals[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new proposal\\n     *\\n     * @param _name             New project name\\n     * @param _token            Native token address\\n     * @param _maxCapacity      Max capacity ratio for the project pool\\n     * @param _basePremiumRatio Base annual ratio of the premium\\n     */\\n    function propose(\\n        string calldata _name,\\n        address _token,\\n        uint256 _maxCapacity,\\n        uint256 _basePremiumRatio // 10000 == 100% premium annual cost\\n    ) external {\\n        _propose(_name, _token, _maxCapacity, _basePremiumRatio, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Start the voting process\\n     *         Need the approval of dev team (onlyOwner)\\n     *\\n     * @param _id Proposal id to start voting\\n     */\\n    function startVoting(uint256 _id) external onlyOwner {\\n        Proposal storage proposal = proposals[_id];\\n\\n        if(proposal.status != PENDING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        proposal.status = VOTING_STATUS;\\n        proposal.voteTimestamp = block.timestamp;\\n\\n        emit ProposalVotingStart(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Close a pending proposal\\n     *         Need the approval of dev team (onlyOwner)\\n     *\\n     * @param _id Proposal id\\n     */\\n    function closeProposal(uint256 _id) external onlyOwner {\\n        Proposal storage proposal = proposals[_id];\\n\\n        // require current proposal to be settled\\n        if (proposal.status != PENDING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        proposal.status = CLOSE_STATUS;\\n\\n        proposed[proposal.protocolToken] = false;        \\n\\n        emit ProposalClosed(_id, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Vote for a proposal\\n     *\\n     *         Voting power is decided by the (unlocked) balance of veDEG\\n     *         Once voted, those veDEG will be locked\\n     *\\n     * @param _id     Proposal id\\n     * @param _isFor  Voting choice\\n     * @param _amount Amount of veDEG to vote\\n     */\\n    function vote(\\n        uint256 _id,\\n        uint256 _isFor,\\n        uint256 _amount\\n    ) external {\\n        _vote(_id, _isFor, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Settle the proposal result\\n     *\\n     * @param _id Proposal id\\n     */\\n    function settle(uint256 _id) external {\\n        Proposal storage proposal = proposals[_id];\\n\\n        if (proposal.status != VOTING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        if (!_passedVotingPeriod(proposal.voteTimestamp))\\n            revert OnboardProposal__WrongPeriod();\\n\\n        if (proposal.result > 0) revert OnboardProposal__AlreadySettled();\\n\\n        // If reached quorum, settle the result\\n        if (_checkQuorum(proposal.numFor + proposal.numAgainst)) {\\n            uint256 res = _getVotingResult(\\n                proposal.numFor,\\n                proposal.numAgainst\\n            );\\n\\n            proposal.result = res;\\n            proposal.status = SETTLED_STATUS;\\n\\n            emit ProposalSettled(_id, res);\\n        }\\n        // Else, set the result as \\\"FAILED\\\"\\n        else {\\n            proposal.result = FAILED_RESULT;\\n            proposal.status = SETTLED_STATUS;\\n\\n            emit ProposalFailed(_id);\\n        }\\n\\n        // Allow for new proposals to be proposed for this protocol\\n        proposed[proposal.protocolToken] = false;\\n    }\\n\\n    /**\\n     * @notice Claim back veDEG after voting result settled\\n     *\\n     * @param _id Proposal id\\n     */\\n    function claim(uint256 _id) external {\\n        _claim(_id, msg.sender);\\n    }\\n    \\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Start a new proposal\\n     *\\n     * @param _name             New project name\\n     * @param _token            Native token address\\n     * @param _maxCapacity      Max capacity ratio for the project pool\\n     * @param _basePremiumRatio Base annual ratio of the premium\\n     */\\n    function _propose(\\n        string calldata _name,\\n        address _token,\\n        uint256 _maxCapacity,\\n        uint256 _basePremiumRatio, // 10000 == 100% premium annual cost\\n        address _user\\n    ) internal {\\n        if (priorityPoolFactory.tokenRegistered(_token))\\n            revert OnboardProposal__AlreadyProtected();\\n\\n        if (_maxCapacity == 0 || _maxCapacity > MAX_CAPACITY_RATIO)\\n                revert OnboardProposal__WrongCapacity();\\n\\n        if (_basePremiumRatio >= 10000 || _basePremiumRatio == 0)\\n            revert OnboardProposal__WrongPremium();\\n\\n        if (proposed[_token])\\n            revert OnboardProposal__AlreadyProposed();\\n\\n        // Burn degis tokens to start a proposal\\n        deg.burnDegis(_user, PROPOSE_THRESHOLD);\\n\\n        proposed[_token] = true;\\n\\n        uint256 currentCounter = ++proposalCounter;\\n        // Record the proposal info\\n        Proposal storage proposal = proposals[currentCounter];\\n        proposal.name = _name;\\n        proposal.protocolToken = _token;\\n        proposal.proposer = _user;\\n        proposal.proposeTimestamp = block.timestamp;\\n        proposal.status = PENDING_STATUS;\\n        proposal.maxCapacity = _maxCapacity;\\n        proposal.basePremiumRatio = _basePremiumRatio;\\n\\n        emit NewProposal(_name, _token, _user, _maxCapacity, _basePremiumRatio);\\n    }\\n\\n    /**\\n     * @notice Vote for a proposal\\n     *\\n     * @param _id     Proposal id\\n     * @param _isFor  Voting choice\\n     * @param _amount Amount of veDEG to vote\\n     */\\n    function _vote(\\n        uint256 _id,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        Proposal storage proposal = proposals[_id];\\n\\n        // Should be manually switched on the voting process\\n        if (proposal.status != VOTING_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n        if (_isFor != 1 && _isFor != 2)\\n            revert OnboardProposal__WrongChoice();\\n        if (_passedVotingPeriod(proposal.voteTimestamp))\\n            revert OnboardProposal__WrongPeriod();\\n        if (_amount == 0)\\n            revert OnboardProposal__ZeroAmount();\\n\\n        _enoughVeDEG(_user, _amount);\\n\\n        // Lock vedeg until this report is settled\\n        veDeg.lockVeDEG(_user, _amount);\\n\\n        // Record the user's choice\\n        UserVote storage userVote = votes[_user][_id];\\n        if (userVote.amount > 0) {\\n           if (userVote.choice != _isFor)\\n                revert OnboardProposal__ChooseBothSides();\\n        } else {\\n            userVote.choice = _isFor;\\n        }\\n        userVote.amount += _amount;\\n\\n        // Record the vote for this report\\n        if (_isFor == 1) {\\n            proposal.numFor += _amount;\\n        } else {\\n            proposal.numAgainst += _amount;\\n        }\\n\\n        emit ProposalVoted(_id, _user, _isFor, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim back veDEG after voting result settled\\n     *\\n     * @param _id Proposal id\\n     */\\n    function _claim(uint256 _id, address _user) internal {\\n        Proposal storage proposal = proposals[_id];\\n\\n        if (proposal.status != SETTLED_STATUS)\\n            revert OnboardProposal__WrongStatus();\\n\\n        UserVote storage userVote = votes[_user][_id];\\n        // Unlock the veDEG used for voting\\n        // No reward / punishment\\n        veDeg.unlockVeDEG(_user, userVote.amount);\\n\\n        userVote.claimed = true;\\n\\n        emit Claimed(_id, _user, userVote.amount);\\n    }\\n\\n    /**\\n     * @notice Get the final voting result\\n     *\\n     * @param _numFor     Votes for\\n     * @param _numAgainst Votes against\\n     *\\n     * @return result Pass, reject or tied\\n     */\\n    function _getVotingResult(uint256 _numFor, uint256 _numAgainst)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        if (_numFor > _numAgainst) result = PASS_RESULT;\\n        else if (_numFor < _numAgainst) result = REJECT_RESULT;\\n        else result = TIED_RESULT;\\n    }\\n\\n    /**\\n     * @notice Check whether has passed the voting time period\\n     *\\n     * @param _voteTimestamp Start timestamp of the voting\\n     *\\n     * @return hasPassed True for passing\\n     */\\n    function _passedVotingPeriod(uint256 _voteTimestamp)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        uint256 endTime = _voteTimestamp + PROPOSAL_VOTING_PERIOD;\\n        return block.timestamp > endTime;\\n    }\\n\\n    /**\\n     * @notice Check quorum requirement\\n     *         30% of totalSupply is the minimum requirement for participation\\n     *\\n     * @param _totalVotes Total vote numbers\\n     */\\n    function _checkQuorum(uint256 _totalVotes) internal view returns (bool) {\\n        return _totalVotes >= (veDeg.totalSupply() * PROPOSAL_QUORUM_RATIO) / 100;\\n    }\\n\\n    /**\\n     * @notice Check veDEG to be enough\\n     *         Only unlocked veDEG will be counted\\n     *\\n     * @param _user   User address\\n     * @param _amount Amount to fulfill\\n     */\\n    function _enoughVeDEG(address _user, uint256 _amount) internal view {\\n        uint256 unlockedBalance = veDeg.balanceOf(_user) - veDeg.locked(_user);\\n        if (unlockedBalance < _amount)\\n            revert OnboardProposal__NotEnoughVeDEG();\\n    }\\n}\\n\",\"keccak256\":\"0x605ad0143f7997eed4d42dc4657f3a0117e1e9d43b6b9c35cad7cb28750e9b45\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposalDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IExecutor.sol\\\";\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\n\\nabstract contract OnboardProposalDependencies {\\n    IPriorityPoolFactory public priorityPoolFactory;\\n\\n    function _setPriorityPoolFactory(address _priorityPoolFactory)\\n        internal\\n        virtual\\n    {\\n        priorityPoolFactory = IPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n}\\n\",\"keccak256\":\"0xbf068e3a9fd97583a260c719a4121f84cda210d6f7983b16757a1605d902e439\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposalEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface OnboardProposalEventError {\\n    event NewProposal(\\n        string name,\\n        address token,\\n        address proposer,\\n        uint256 maxCapacity,\\n        uint256 priceRatio\\n    );\\n\\n    event ProposalVotingStart(uint256 proposalId, uint256 timestamp);\\n\\n    event ProposalClosed(uint256 proposalId, uint256 timestamp);\\n\\n    event ProposalVoted(\\n        uint256 proposalId,\\n        address indexed user,\\n        uint256 voteFor,\\n        uint256 amount\\n    );\\n\\n    event ProposalSettled(uint256 proposalId, uint256 result);\\n\\n    event ProposalFailed(uint256 proposalId);\\n\\n    event Claimed(uint256 proposalId, address user, uint256 amount);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error OnboardProposal__WrongStatus();\\n    error OnboardProposal__WrongPeriod();\\n    error OnboardProposal__WrongChoice();\\n    error OnboardProposal__ChooseBothSides();\\n    error OnboardProposal__NotEnoughVeDEG();\\n    error OnboardProposal__AlreadySettled();\\n    error OnboardProposal__NotSettled();\\n    error OnboardProposal__NotWrongChoice();\\n    error OnboardProposal__AlreadyClaimed();\\n    error OnboardProposal__ProposeNotExist();\\n    error OnboardProposal__AlreadyProposed();\\n    error OnboardProposal__AlreadyProtected();\\n    error OnboardProposal__WrongCapacity();\\n    error OnboardProposal__WrongPremium();\\n    error OnboardProposal__ZeroAmount();\\n}\\n\",\"keccak256\":\"0x0888f6939a630bcc5d80d26a571610b1c380db6f8dce11b59fe0537e73c1926c\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/onboardProposal/OnboardProposalParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/VotingParameters.sol\\\";\\n\\nabstract contract OnboardProposalParameters is VotingParameters {\\n\\n    uint256 constant PROPOSAL_VOTING_PERIOD = 3 days;\\n\\n    // minimum 50% votes\\n    uint256 constant PROPOSAL_QUORUM_RATIO = 50;\\n\\n    // DEG threshold for starting a report\\n    uint256 constant PROPOSE_THRESHOLD = 10000 ether;\\n\\n    // 100 = 100%\\n    uint256 constant MAX_CAPACITY_RATIO = 100;\\n\\n}\\n\",\"keccak256\":\"0xe4fe40ba0ce7e1cd6a7aa537d9e6ebc06a6833016ecfa554b2596a8ab5c74f21\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e0346100c057601f620016de38819003918201601f19168301916001600160401b038311848410176100c5578084926060946040528339810103126100c057610048816100db565b6100606040610059602085016100db565b93016100db565b6001600160a01b0391821660805291811660a0521660c052600080546001600160a01b031916331790556040516115ee9081620000f0823960805181610d14015260a0518181816105780152818161079a0152610b61015260c051815050f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100c05756fe6040608081526004908136101561001557600080fd5b60009160e08335811c908163013cf08b146111825781630386a016146110e15781630c0512e9146110c15781630def04021461102d578163164bfde514610c47578163379607f514610b185781633d2f5bda14610a8a5781636f8a6e4314610a60578163715018a6146109f85781638a6655d6146107295781638da5cb5b146107005781638df82800146104fb5781639f2524ee1461049b578163ad35e1dc1461044e578163b5e18ce414610411578163c7f758a81461033a578163cceb68f5146101ba575063f2fde38b146100ea57600080fd5b346101b65760203660031901126101b657610103611402565b83546001600160a01b039391849161011e90831633146114ab565b1691821561016557508160005491519382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600086a36001600160a01b03191617600055f35b6020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b84929150346101b657826003193601126101b6576002908154906101dd8261153f565b936101ea875195866112e9565b828552601f196101f98461153f565b01865b818110610323575050855b83811061026b57875160208082528751818301819052899291600582901b83018c0191818b0191848e015b82871061023f5785850386f35b90919293828061025b600193603f198a82030186528851611418565b9601920196019592919092610232565b808752600390602091808352600b8a8a208b5192610288846112cc565b6102918261130b565b845260018060a01b03600196818885015416908601528a830154168d8501528101546060840152858101546080840152600581015460a0840152600681015460c084015260078101548784015260088101546101008401526009810154610120840152600a81015461014084015201546101608201526103118289611557565b5261031c8188611557565b5001610207565b60209061032e6114e4565b82828a010152016101fc565b849391503461040d57602036600319011261040d57600b90826104099561035f6114e4565b508535815260036020522090835194610377866112cc565b6103808361130b565b865260018060a01b0380600185015416602088015260028401541685870152600383015460608701528201546080860152600582015460a0860152600682015460c086015260078201549085015260088101546101008501526009810154610120850152600a810154610140850152015461016083015251918291602083526020830190611418565b0390f35b8380fd5b5050346101b65760203660031901126101b65760209260ff918391906001600160a01b0361043d611402565b168252855220541690519015158152f35b505050346104975760203660031901126104975761046a611402565b82546001600160a01b03919061048390831633146114ab565b1660018060a01b0319600154161760015551f35b5080fd5b5050503461049757806003193601126104975760609181906001600160a01b036104c3611402565b16815260056020528181206024358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b5050346101b65760208060031936011261040d57813580855260038252838520600a81019160028354036106f057610535858301546115a3565b156106e057600b820180546106d0576005830193845461055b6006860191825490611581565b89516318160ddd60e01b81526001600160a01b0397919089818c817f00000000000000000000000000000000000000000000000000000000000000008d165afa9081156106c6578d91610694575b5080600019046032118115151661068157928c95928a8c8e97946064603260019d9c99020411156000146106495750505490547fc3e9e56c21ecd9fd3bcbaf6dd404f67ff375a520220a8edc72194dc096ef1c50965060039291818111156106325750508780935b5555825191825287820152a15b015416845252808220805460ff1916905551f35b10156106415760028093610611565b818093610611565b92509550507fa9257f9d0c375c52bac8f7010bf9ee592a943ac8f8fbad61dea6a8487e283108955060039255558851908152a161061e565b634e487b7160e01b8d5260118b5260248dfd5b90508981813d83116106bf575b6106ab81836112e9565b810103126106ba5751386105a9565b600080fd5b503d6106a1565b8c513d8f823e3d90fd5b86516379618fa360e11b81528690fd5b85516319c4ee9f60e31b81528590fd5b855163200e272960e11b81528590fd5b50505034610497578160031936011261049757905490516001600160a01b039091168152602090f35b5050346101b65760603660031901126101b6578035906024356044359183865260209060038252858720906002600a830154036109ea5760018414908115806109df575b6109d15761077d818401546115a3565b6109c35785156109b55787516370a0823160e01b815233828201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908581602481855afa9081156109ab578b9161097e575b50895163cbf9fe5f60e01b81523384820152908682602481865afa918215610974578c92610945575b508181106109325703871161092357808a913b15610497578951633c56aa6160e11b815233848201908152602081018a90529091839183919082908490829060400103925af1801561091957610901575b505033895260058452878920878a5284528789206001810180549092918791156108fa5754036108ec57505b61088a868254611581565b9055156108d75760050161089f848254611581565b90555b8451938452830152828201527ff3709dc32cf1356da6b8a12a5be1401aeb00989556be7b16ae566e65fef7a9df60603392a251f35b6006016108e5848254611581565b90556108a2565b885163fe5e801760e01b8152fd5b555061087f565b61090a906112b8565b610915578838610853565b8880fd5b8a513d84823e3d90fd5b508751630840c31d60e11b8152fd5b634e487b7160e01b8c526011845260248cfd5b9091508681813d831161096d575b61095d81836112e9565b810103126106ba57519038610802565b503d610953565b8b513d8e823e3d90fd5b90508581813d83116109a4575b61099581836112e9565b810103126106ba5751386107d9565b503d61098b565b8a513d8d823e3d90fd5b87516323f2f57960e11b8152fd5b87516319c4ee9f60e31b8152fd5b8751631cc147e360e31b8152fd5b50600285141561076d565b865163200e272960e11b8152fd5b5050503461049757816003193601126104975781546001600160a01b039190610a2490831633146114ab565b6000805491519282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600055f35b5050503461049757816003193601126104975760015490516001600160a01b039091168152602090f35b5050346101b65760203660031901126101b657803590610ab460018060a01b0385541633146114ab565b818452600360205282842090600a82016001815403610b0957917f7612de03d869f469b9967d2920682d83541e890e1a05daa3de481bf10ff25b7a93916002869455429101558151908152426020820152a151f35b50835163200e272960e11b8152fd5b5050346101b65760203660031901126101b657803580845260036020526003600a848620015403610c385733845260056020528284208185526020528284208460018060a01b037f00000000000000000000000000000000000000000000000000000000000000001660018301948554823b1561040d578751634bdc2db560e11b815233928101928352602083019190915291839183919082908490829060400103925af18015610c2e57610c12575b5050600201805460ff1916600117905590548251918252336020830152818301527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed02690606090a151f35b610c1e909392936112b8565b610c2a57908438610bc8565b8480fd5b86513d84823e3d90fd5b50905163200e272960e11b8152fd5b5050346101b65760803660031901126101b657803567ffffffffffffffff808211610c2a5736602383011215610c2a5781830135908111610c2a5760249236848385010111611029576001600160a01b03843581811690819003611025576044359160643593600182815416928a518094635170e73160e11b82528685830152818c60209788935afa9081156106c6578d91610feb575b50610fdb5785158015610fd1575b610fc1576127108710801590610fb9575b610fa957848c5282845260ff8b8d205416610f99577f0000000000000000000000000000000000000000000000000000000000000000168b813b15610f965769021e19e0c9bab240000060448c838f51958694859363342c6d4d60e11b8552338b8601528401525af1801561097457610f83575b50838b52818352898b20805460ff19168217905560025460001992838214610f7157508101806002558b5260038352898b2091610dae835461124c565b601f8111610f29575b508b8c601f8a11600114610e965793899795938997959360c09b8e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c969560089692610e89575b50508a831b918b60031b1c19161782555b81810180546001600160a01b0319908116881790915560028301805490911633179055426003830155600a820155600781018690550155895160a080825281018690529788968691018888013785850187018b9052850152338885015260608401526080830152601f01601f19168101030190a151f35b8d01013590508d38610e01565b91601f198a16858452868420935b818110610f1257509389979591936008938e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c968e60c09f9d9b9910610ef8575b505050508089811b018255610e12565b60f88d60031b161c19918d01013516905538808d81610ee8565b8c84018e0135855593850193928701928701610ea4565b838d52848d20601f8a0160051c810191868b10610f67575b601f0160051c019083908e5b838210610f5c57505050610db7565b81550183908e610f4d565b9091508190610f41565b634e487b7160e01b8d5260119052898cfd5b610f8f909b919b6112b8565b9938610d71565b80fd5b8a516365bd930960e11b81528390fd5b8a516331b2314b60e01b81528390fd5b508615610cfd565b8a51637c2006d960e11b81528390fd5b5060648611610cec565b8a51634a9caa2b60e01b81528390fd5b90508481813d831161101e575b61100281836112e9565b8101031261101a5751801515810361101a5738610cde565b8c80fd5b503d610ff8565b8780fd5b8580fd5b505050346104975780600319360112610497578060609261104c611402565b8183805161105981611286565b828152826020820152015260018060a01b03168152600560205281812060243582526020522090805161108b81611286565b8254928382528260ff60026001840154936020860194855201541692019115158252825193845251602084015251151590820152f35b505050346104975781600319360112610497576020906002549051908152f35b5050346101b65760203660031901126101b65780359060018060a01b0361110c8186541633146114ab565b8285526003602052838520600a81016001815403611172576101949055600101541684526020908152828420805460ff19169055825191825242908201527fbc54f85bee74832b80104d1b6d31c68eb8065057063a1d23f8ed7ce44a47f302908290a151f35b855163200e272960e11b81528490fd5b90508334610f96576020366003190112610f9657839083358152600360205220906111ac8261130b565b91600160a01b6001900393846001830154169460028301541692600383015491830154906005840154906006850154600786015492600887015494600988015496600a89015498600b0154998d519d8e9d8e9d8e6101809081815201611211916113b1565b9d602001528d015260608c015260808b015260a08a015260c08901528701526101008601526101208501526101408401526101608301520390f35b90600182811c9216801561127c575b602083101461126657565b634e487b7160e01b600052602260045260246000fd5b91607f169161125b565b6060810190811067ffffffffffffffff8211176112a257604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116112a257604052565b610180810190811067ffffffffffffffff8211176112a257604052565b90601f8019910116810190811067ffffffffffffffff8211176112a257604052565b906040519182600082549261131f8461124c565b90818452600194858116908160001461138e575060011461134b575b5050611349925003836112e9565b565b9093915060005260209081600020936000915b8183106113765750506113499350820101388061133b565b8554888401850152948501948794509183019161135e565b91505061134994506020925060ff191682840152151560051b820101388061133b565b91908251928382526000905b8482106113ea5750928060209394116113dd575b601f01601f1916010190565b60008382840101526113d1565b906020908180828501015190828601015201906113bd565b600435906001600160a01b03821682036106ba57565b9061142c82516101808084528301906113b1565b9160018060a01b038060208301511660208401526040820151166040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151908301526101608091015191015290565b156114b257565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b604051906114f1826112cc565b81606081526101606000918260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201520152565b67ffffffffffffffff81116112a25760051b60200190565b805182101561156b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b8119811161158d570190565b634e487b7160e01b600052601160045260246000fd5b6203f48019811161158d576203f4800142119056fea26469706673582212202a3ca5ffcd3e04cba3b5f84736155c465ccddf3076e530e0411473d3c12b1dd564736f6c634300080f0033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b60009160e08335811c908163013cf08b146111825781630386a016146110e15781630c0512e9146110c15781630def04021461102d578163164bfde514610c47578163379607f514610b185781633d2f5bda14610a8a5781636f8a6e4314610a60578163715018a6146109f85781638a6655d6146107295781638da5cb5b146107005781638df82800146104fb5781639f2524ee1461049b578163ad35e1dc1461044e578163b5e18ce414610411578163c7f758a81461033a578163cceb68f5146101ba575063f2fde38b146100ea57600080fd5b346101b65760203660031901126101b657610103611402565b83546001600160a01b039391849161011e90831633146114ab565b1691821561016557508160005491519382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600086a36001600160a01b03191617600055f35b6020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b84929150346101b657826003193601126101b6576002908154906101dd8261153f565b936101ea875195866112e9565b828552601f196101f98461153f565b01865b818110610323575050855b83811061026b57875160208082528751818301819052899291600582901b83018c0191818b0191848e015b82871061023f5785850386f35b90919293828061025b600193603f198a82030186528851611418565b9601920196019592919092610232565b808752600390602091808352600b8a8a208b5192610288846112cc565b6102918261130b565b845260018060a01b03600196818885015416908601528a830154168d8501528101546060840152858101546080840152600581015460a0840152600681015460c084015260078101548784015260088101546101008401526009810154610120840152600a81015461014084015201546101608201526103118289611557565b5261031c8188611557565b5001610207565b60209061032e6114e4565b82828a010152016101fc565b849391503461040d57602036600319011261040d57600b90826104099561035f6114e4565b508535815260036020522090835194610377866112cc565b6103808361130b565b865260018060a01b0380600185015416602088015260028401541685870152600383015460608701528201546080860152600582015460a0860152600682015460c086015260078201549085015260088101546101008501526009810154610120850152600a810154610140850152015461016083015251918291602083526020830190611418565b0390f35b8380fd5b5050346101b65760203660031901126101b65760209260ff918391906001600160a01b0361043d611402565b168252855220541690519015158152f35b505050346104975760203660031901126104975761046a611402565b82546001600160a01b03919061048390831633146114ab565b1660018060a01b0319600154161760015551f35b5080fd5b5050503461049757806003193601126104975760609181906001600160a01b036104c3611402565b16815260056020528181206024358252602052209081549160ff60026001830154920154169082519384526020840152151590820152f35b5050346101b65760208060031936011261040d57813580855260038252838520600a81019160028354036106f057610535858301546115a3565b156106e057600b820180546106d0576005830193845461055b6006860191825490611581565b89516318160ddd60e01b81526001600160a01b0397919089818c817f00000000000000000000000000000000000000000000000000000000000000008d165afa9081156106c6578d91610694575b5080600019046032118115151661068157928c95928a8c8e97946064603260019d9c99020411156000146106495750505490547fc3e9e56c21ecd9fd3bcbaf6dd404f67ff375a520220a8edc72194dc096ef1c50965060039291818111156106325750508780935b5555825191825287820152a15b015416845252808220805460ff1916905551f35b10156106415760028093610611565b818093610611565b92509550507fa9257f9d0c375c52bac8f7010bf9ee592a943ac8f8fbad61dea6a8487e283108955060039255558851908152a161061e565b634e487b7160e01b8d5260118b5260248dfd5b90508981813d83116106bf575b6106ab81836112e9565b810103126106ba5751386105a9565b600080fd5b503d6106a1565b8c513d8f823e3d90fd5b86516379618fa360e11b81528690fd5b85516319c4ee9f60e31b81528590fd5b855163200e272960e11b81528590fd5b50505034610497578160031936011261049757905490516001600160a01b039091168152602090f35b5050346101b65760603660031901126101b6578035906024356044359183865260209060038252858720906002600a830154036109ea5760018414908115806109df575b6109d15761077d818401546115a3565b6109c35785156109b55787516370a0823160e01b815233828201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908581602481855afa9081156109ab578b9161097e575b50895163cbf9fe5f60e01b81523384820152908682602481865afa918215610974578c92610945575b508181106109325703871161092357808a913b15610497578951633c56aa6160e11b815233848201908152602081018a90529091839183919082908490829060400103925af1801561091957610901575b505033895260058452878920878a5284528789206001810180549092918791156108fa5754036108ec57505b61088a868254611581565b9055156108d75760050161089f848254611581565b90555b8451938452830152828201527ff3709dc32cf1356da6b8a12a5be1401aeb00989556be7b16ae566e65fef7a9df60603392a251f35b6006016108e5848254611581565b90556108a2565b885163fe5e801760e01b8152fd5b555061087f565b61090a906112b8565b610915578838610853565b8880fd5b8a513d84823e3d90fd5b508751630840c31d60e11b8152fd5b634e487b7160e01b8c526011845260248cfd5b9091508681813d831161096d575b61095d81836112e9565b810103126106ba57519038610802565b503d610953565b8b513d8e823e3d90fd5b90508581813d83116109a4575b61099581836112e9565b810103126106ba5751386107d9565b503d61098b565b8a513d8d823e3d90fd5b87516323f2f57960e11b8152fd5b87516319c4ee9f60e31b8152fd5b8751631cc147e360e31b8152fd5b50600285141561076d565b865163200e272960e11b8152fd5b5050503461049757816003193601126104975781546001600160a01b039190610a2490831633146114ab565b6000805491519282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600055f35b5050503461049757816003193601126104975760015490516001600160a01b039091168152602090f35b5050346101b65760203660031901126101b657803590610ab460018060a01b0385541633146114ab565b818452600360205282842090600a82016001815403610b0957917f7612de03d869f469b9967d2920682d83541e890e1a05daa3de481bf10ff25b7a93916002869455429101558151908152426020820152a151f35b50835163200e272960e11b8152fd5b5050346101b65760203660031901126101b657803580845260036020526003600a848620015403610c385733845260056020528284208185526020528284208460018060a01b037f00000000000000000000000000000000000000000000000000000000000000001660018301948554823b1561040d578751634bdc2db560e11b815233928101928352602083019190915291839183919082908490829060400103925af18015610c2e57610c12575b5050600201805460ff1916600117905590548251918252336020830152818301527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed02690606090a151f35b610c1e909392936112b8565b610c2a57908438610bc8565b8480fd5b86513d84823e3d90fd5b50905163200e272960e11b8152fd5b5050346101b65760803660031901126101b657803567ffffffffffffffff808211610c2a5736602383011215610c2a5781830135908111610c2a5760249236848385010111611029576001600160a01b03843581811690819003611025576044359160643593600182815416928a518094635170e73160e11b82528685830152818c60209788935afa9081156106c6578d91610feb575b50610fdb5785158015610fd1575b610fc1576127108710801590610fb9575b610fa957848c5282845260ff8b8d205416610f99577f0000000000000000000000000000000000000000000000000000000000000000168b813b15610f965769021e19e0c9bab240000060448c838f51958694859363342c6d4d60e11b8552338b8601528401525af1801561097457610f83575b50838b52818352898b20805460ff19168217905560025460001992838214610f7157508101806002558b5260038352898b2091610dae835461124c565b601f8111610f29575b508b8c601f8a11600114610e965793899795938997959360c09b8e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c969560089692610e89575b50508a831b918b60031b1c19161782555b81810180546001600160a01b0319908116881790915560028301805490911633179055426003830155600a820155600781018690550155895160a080825281018690529788968691018888013785850187018b9052850152338885015260608401526080830152601f01601f19168101030190a151f35b8d01013590508d38610e01565b91601f198a16858452868420935b818110610f1257509389979591936008938e7f67633902245d09131a2e6d9529b8a71b17851176469cb4cbc512174e3fe7c0379f9e9c968e60c09f9d9b9910610ef8575b505050508089811b018255610e12565b60f88d60031b161c19918d01013516905538808d81610ee8565b8c84018e0135855593850193928701928701610ea4565b838d52848d20601f8a0160051c810191868b10610f67575b601f0160051c019083908e5b838210610f5c57505050610db7565b81550183908e610f4d565b9091508190610f41565b634e487b7160e01b8d5260119052898cfd5b610f8f909b919b6112b8565b9938610d71565b80fd5b8a516365bd930960e11b81528390fd5b8a516331b2314b60e01b81528390fd5b508615610cfd565b8a51637c2006d960e11b81528390fd5b5060648611610cec565b8a51634a9caa2b60e01b81528390fd5b90508481813d831161101e575b61100281836112e9565b8101031261101a5751801515810361101a5738610cde565b8c80fd5b503d610ff8565b8780fd5b8580fd5b505050346104975780600319360112610497578060609261104c611402565b8183805161105981611286565b828152826020820152015260018060a01b03168152600560205281812060243582526020522090805161108b81611286565b8254928382528260ff60026001840154936020860194855201541692019115158252825193845251602084015251151590820152f35b505050346104975781600319360112610497576020906002549051908152f35b5050346101b65760203660031901126101b65780359060018060a01b0361110c8186541633146114ab565b8285526003602052838520600a81016001815403611172576101949055600101541684526020908152828420805460ff19169055825191825242908201527fbc54f85bee74832b80104d1b6d31c68eb8065057063a1d23f8ed7ce44a47f302908290a151f35b855163200e272960e11b81528490fd5b90508334610f96576020366003190112610f9657839083358152600360205220906111ac8261130b565b91600160a01b6001900393846001830154169460028301541692600383015491830154906005840154906006850154600786015492600887015494600988015496600a89015498600b0154998d519d8e9d8e9d8e6101809081815201611211916113b1565b9d602001528d015260608c015260808b015260a08a015260c08901528701526101008601526101208501526101408401526101608301520390f35b90600182811c9216801561127c575b602083101461126657565b634e487b7160e01b600052602260045260246000fd5b91607f169161125b565b6060810190811067ffffffffffffffff8211176112a257604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116112a257604052565b610180810190811067ffffffffffffffff8211176112a257604052565b90601f8019910116810190811067ffffffffffffffff8211176112a257604052565b906040519182600082549261131f8461124c565b90818452600194858116908160001461138e575060011461134b575b5050611349925003836112e9565b565b9093915060005260209081600020936000915b8183106113765750506113499350820101388061133b565b8554888401850152948501948794509183019161135e565b91505061134994506020925060ff191682840152151560051b820101388061133b565b91908251928382526000905b8482106113ea5750928060209394116113dd575b601f01601f1916010190565b60008382840101526113d1565b906020908180828501015190828601015201906113bd565b600435906001600160a01b03821682036106ba57565b9061142c82516101808084528301906113b1565b9160018060a01b038060208301511660208401526040820151166040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015190830152610120808201519083015261014080820151908301526101608091015191015290565b156114b257565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b604051906114f1826112cc565b81606081526101606000918260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201520152565b67ffffffffffffffff81116112a25760051b60200190565b805182101561156b5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b8119811161158d570190565b634e487b7160e01b600052601160045260246000fd5b6203f48019811161158d576203f4800142119056fea26469706673582212202a3ca5ffcd3e04cba3b5f84736155c465ccddf3076e530e0411473d3c12b1dd564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256)": {
        "params": {
          "_id": "Proposal id"
        }
      },
      "closeProposal(uint256)": {
        "params": {
          "_id": "Proposal id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "propose(string,address,uint256,uint256)": {
        "params": {
          "_basePremiumRatio": "Base annual ratio of the premium",
          "_maxCapacity": "Max capacity ratio for the project pool",
          "_name": "New project name",
          "_token": "Native token address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "settle(uint256)": {
        "params": {
          "_id": "Proposal id"
        }
      },
      "startVoting(uint256)": {
        "params": {
          "_id": "Proposal id to start voting"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "vote(uint256,uint256,uint256)": {
        "params": {
          "_amount": "Amount of veDEG to vote",
          "_id": "Proposal id",
          "_isFor": "Voting choice"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256)": {
        "notice": "Claim back veDEG after voting result settled"
      },
      "closeProposal(uint256)": {
        "notice": "Close a pending proposal         Need the approval of dev team (onlyOwner)"
      },
      "propose(string,address,uint256,uint256)": {
        "notice": "Start a new proposal"
      },
      "settle(uint256)": {
        "notice": "Settle the proposal result"
      },
      "startVoting(uint256)": {
        "notice": "Start the voting process         Need the approval of dev team (onlyOwner)"
      },
      "vote(uint256,uint256,uint256)": {
        "notice": "Vote for a proposal         Voting power is decided by the (unlocked) balance of veDEG         Once voted, those veDEG will be locked"
      }
    },
    "notice": "Onboard Proposal",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21667,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 24351,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPriorityPoolFactory)14366"
      },
      {
        "astId": 23547,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "proposalCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23577,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)23572_storage)"
      },
      {
        "astId": 23581,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "proposed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23595,
        "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
        "label": "votes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)23588_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPriorityPoolFactory)14366": {
        "encoding": "inplace",
        "label": "contract IPriorityPoolFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(UserVote)23588_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct OnboardProposal.UserVote))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UserVote)23588_storage)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)23572_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OnboardProposal.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)23572_storage"
      },
      "t_mapping(t_uint256,t_struct(UserVote)23588_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OnboardProposal.UserVote)",
        "numberOfBytes": "32",
        "value": "t_struct(UserVote)23588_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)23572_storage": {
        "encoding": "inplace",
        "label": "struct OnboardProposal.Proposal",
        "members": [
          {
            "astId": 23549,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 23551,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "protocolToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23553,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "proposer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 23555,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "proposeTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23557,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "voteTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23559,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "numFor",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23561,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "numAgainst",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23563,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "maxCapacity",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 23565,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "basePremiumRatio",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 23567,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "poolId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 23569,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "status",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 23571,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "result",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(UserVote)23588_storage": {
        "encoding": "inplace",
        "label": "struct OnboardProposal.UserVote",
        "members": [
          {
            "astId": 23583,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "choice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23585,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23587,
            "contract": "src/voting/onboardProposal/OnboardProposal.sol:OnboardProposal",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}