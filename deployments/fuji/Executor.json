{
  "address": "0xD2E326C7C7C95a37A55A5063881c085b9a0c56E2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Executor__AlreadyExecuted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ProposalNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ProposalNotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ReportNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Executor__ReportNotSettled",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "NewPoolExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reportId",
          "type": "uint256"
        }
      ],
      "name": "ReportExecuted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "newPriorityPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_reportId",
          "type": "uint256"
        }
      ],
      "name": "executeReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incidentReport",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onboardProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reportExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "name": "setIncidentReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_onboardProposal",
          "type": "address"
        }
      ],
      "name": "setOnboardProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fe4d828b9f251d2fcecbf7c55381b11967706ca56f93ea58e431760b47da33a",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xD2E326C7C7C95a37A55A5063881c085b9a0c56E2",
    "transactionIndex": 0,
    "gasUsed": "751452",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xb10962cce885b8e246e42737c3410885cfcda6abe11d411cd43f5aa207f0486d",
    "transactionHash": "0x1fe4d828b9f251d2fcecbf7c55381b11967706ca56f93ea58e431760b47da33a",
    "logs": [],
    "blockNumber": 13153404,
    "cumulativeGasUsed": "751452",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "d6f70685e5c080d9f6eca2c22a23d723",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Executor__AlreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ProposalNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ProposalNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ReportNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Executor__ReportNotSettled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"NewPoolExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reportId\",\"type\":\"uint256\"}],\"name\":\"ReportExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPriorityPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reportId\",\"type\":\"uint256\"}],\"name\":\"executeReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incidentReport\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onboardProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reportExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"name\":\"setIncidentReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_onboardProposal\",\"type\":\"address\"}],\"name\":\"setOnboardProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"executeProposal(uint256)\":{\"params\":{\"_proposalId\":\"Proposal id\"}},\"executeReport(uint256)\":{\"params\":{\"_reportId\":\"Id of the report to be executed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Executor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeProposal(uint256)\":{\"notice\":\"Execute the proposal         The proposal must already been settled and the result is PASSED         New priority pool will be deployed with parameters\"},\"executeReport(uint256)\":{\"notice\":\"Execute a report         The report must already been settled and the result is PASSED         Execution means:             1) Give 10% of protocol income to reporter (SHIELD)             2) Move the total payout amount out of the priority pool (to payout pool)             3) Deploy new generations of CRTokens and PRI-LP tokens         Can not execute a report before the previous liquidation ended\"}},\"notice\":\"This is the executor for degis Protocol Protection         The executor is responsible for the execution of the reports and pool proposals         Both administrators or users can execute proposals and reports\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/Executor.sol\":\"Executor\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632323732373836343035\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/core/Executor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\nimport \\\"./interfaces/ExecutorDependencies.sol\\\";\\nimport \\\"../voting/interfaces/VotingParameters.sol\\\";\\nimport \\\"./interfaces/ExecutorEventError.sol\\\";\\n\\n/**\\n * @title Executor\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the executor for degis Protocol Protection\\n *         The executor is responsible for the execution of the reports and pool proposals\\n *         Both administrators or users can execute proposals and reports\\n *\\n */\\ncontract Executor is\\n    VotingParameters,\\n    ExecutorEventError,\\n    OwnableWithoutContext,\\n    ExecutorDependencies\\n{\\n    mapping(uint256 => bool) public reportExecuted;\\n    mapping(uint256 => bool) public proposalExecuted;\\n\\n    constructor() OwnableWithoutContext(msg.sender) {}\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    function setIncidentReport(address _incidentReport) external onlyOwner {\\n        _setIncidentReport(_incidentReport);\\n    }\\n\\n    function setOnboardProposal(address _onboardProposal) external onlyOwner {\\n        _setOnboardProposal(_onboardProposal);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Execute a report\\n     *         The report must already been settled and the result is PASSED\\n     *         Execution means:\\n     *             1) Give 10% of protocol income to reporter (SHIELD)\\n     *             2) Move the total payout amount out of the priority pool (to payout pool)\\n     *             3) Deploy new generations of CRTokens and PRI-LP tokens\\n     *\\n     *         Can not execute a report before the previous liquidation ended\\n     *\\n     * @param _reportId Id of the report to be executed\\n     */\\n    function executeReport(uint256 _reportId) public {\\n        // Check and mark the report as \\\"executed\\\"\\n        if (reportExecuted[_reportId]) revert Executor__AlreadyExecuted();\\n        reportExecuted[_reportId] = true;\\n\\n        // Get the report\\n        IIncidentReport.Report memory report = IIncidentReport(incidentReport)\\n            .getReport(_reportId);\\n\\n        if (report.status != SETTLED_STATUS)\\n            revert Executor__ReportNotSettled();\\n        if (report.result != 1) revert Executor__ReportNotPassed();\\n\\n        // Give 10% of treasury to the reporter\\n        ITreasury(treasury).rewardReporter(report.poolId, report.reporter);\\n\\n        IPriorityPoolFactory factory = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        );\\n\\n        // Unpause the priority pool and protection pool\\n        factory.pausePriorityPool(report.poolId, false);\\n\\n        // Liquidate the pool\\n        (, address poolAddress, , , ) = factory.pools(report.poolId);\\n        IPriorityPool(poolAddress).liquidatePool(report.payout);\\n\\n        emit ReportExecuted(poolAddress, report.poolId, _reportId);\\n    }\\n\\n    /**\\n     * @notice Execute the proposal\\n     *         The proposal must already been settled and the result is PASSED\\n     *         New priority pool will be deployed with parameters\\n     *\\n     * @param _proposalId Proposal id\\n     */\\n    function executeProposal(uint256 _proposalId)\\n        external\\n        returns (address newPriorityPool)\\n    {\\n        // Check and mark the proposal as \\\"executed\\\"\\n        if (proposalExecuted[_proposalId]) revert Executor__AlreadyExecuted();\\n        proposalExecuted[_proposalId] = true;\\n\\n        IOnboardProposal.Proposal memory proposal = IOnboardProposal(\\n            onboardProposal\\n        ).getProposal(_proposalId);\\n\\n        if (proposal.status != SETTLED_STATUS)\\n            revert Executor__ProposalNotSettled();\\n        if (proposal.result != 1) revert Executor__ProposalNotPassed();\\n\\n        // Execute the proposal\\n        newPriorityPool = IPriorityPoolFactory(priorityPoolFactory).deployPool(\\n            proposal.name,\\n            proposal.protocolToken,\\n            proposal.maxCapacity,\\n            proposal.basePremiumRatio\\n        );\\n\\n        emit NewPoolExecuted(\\n            newPriorityPool,\\n            _proposalId,\\n            proposal.protocolToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbdb75fd49346264467b86256821b6e6299ee560a01b27092e5c2e45d707a9c91\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/ExecutorDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\nimport \\\"../../interfaces/IOnboardProposal.sol\\\";\\nimport \\\"../../interfaces/IIncidentReport.sol\\\";\\nimport \\\"../../interfaces/ITreasury.sol\\\";\\n\\nabstract contract ExecutorDependencies {\\n    address public priorityPoolFactory;\\n    address public incidentReport;\\n    address public onboardProposal;\\n    address public treasury;\\n\\n    function _setPriorityPoolFactory(address _priorityPoolFactory)\\n        internal\\n        virtual\\n    {\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    function _setIncidentReport(address _incidentReport) internal virtual {\\n        incidentReport = _incidentReport;\\n    }\\n\\n    function _setOnboardProposal(address _onboardProposal) internal virtual {\\n        onboardProposal = _onboardProposal;\\n    }\\n\\n    function _setTreasury(address _treasury) internal virtual {\\n        treasury = _treasury;\\n    }\\n}\\n\",\"keccak256\":\"0x88fe6bfc307b22f1718be43d2e5183f64df0895c952e3c3762c31ac6318ab8a2\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/ExecutorEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ExecutorEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event ReportExecuted(address pool, uint256 poolId, uint256 reportId);\\n\\n    event NewPoolExecuted(\\n        address poolAddress,\\n        uint256 proposalId,\\n        address protocol\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error Executor__ReportNotSettled();\\n    error Executor__ReportNotPassed();\\n    error Executor__ProposalNotSettled();\\n    error Executor__ProposalNotPassed();\\n    error Executor__AlreadyExecuted();\\n}\\n\",\"keccak256\":\"0x11a38d92c0f1f3af8a348b84907a9bc86600337c013223f161b9d7aa193541c1\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IIncidentReport.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IIncidentReport {\\n    struct Report {\\n        uint256 poolId; // Project pool id\\n        uint256 reportTimestamp; // Time of starting report\\n        address reporter; // Reporter address\\n        uint256 voteTimestamp; // Voting start timestamp\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 round; // 0: Initial round 3 days, 1: Extended round 1 day, 2: Double extended 1 day\\n        uint256 status;\\n        uint256 result; // 1: Pass, 2: Reject, 3: Tied\\n        uint256 votingReward; // Voting reward per veDEG if the report passed\\n        uint256 payout;\\n    }\\n    struct TempResult {\\n        uint256 a;\\n        uint256 b;\\n        bool c;\\n    }\\n    struct UserVote {\\n        uint256 choice;\\n        uint256 amount;\\n        bool claimed;\\n    }\\n\\n    function COOLDOWN_WRONG_REPORT() external view returns (uint256);\\n\\n    function claimReward(uint256 _reportId) external;\\n\\n    function claimReward(uint256 _reportId, address _user) external;\\n\\n    function closeReport(uint256 _reportId) external;\\n\\n    function deg() external view returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getReport(uint256 _id) external view returns (Report memory);\\n\\n    function getTempResult(uint256 _id)\\n        external\\n        view\\n        returns (TempResult memory);\\n\\n    function getUserVote(address _user, uint256 _id)\\n        external\\n        view\\n        returns (UserVote memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function payDebt(uint256 _reportId, address _user) external;\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolReported(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function report(\\n        uint256 _poolId,\\n        uint256 _payout,\\n        address _user\\n    ) external;\\n\\n    function reportCounter() external view returns (uint256);\\n\\n    function reportTempResults(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 result,\\n            uint256 sampleTimestamp,\\n            bool hasChanged\\n        );\\n\\n    function reports(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 poolId,\\n            uint256 reportTimestamp,\\n            address reporter,\\n            uint256 voteTimestamp,\\n            uint256 numFor,\\n            uint256 numAgainst,\\n            uint256 round,\\n            uint256 status,\\n            uint256 result,\\n            uint256 votingReward,\\n            uint256 payout\\n        );\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function settle(uint256 _reportId) external;\\n\\n    function shield() external view returns (address);\\n\\n    function startVoting(uint256 _reportId) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function unpausePools(uint256 _poolId) external;\\n\\n    function userCoolDownUntil(address) external view returns (uint256);\\n\\n    function votes(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint256 choice,\\n            uint256 amount,\\n            bool claimed\\n        );\\n\\n    function veDeg() external view returns (address);\\n\\n    function vote(\\n        uint256 _reportId,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function poolReports(uint256 _poolId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolReportsAmount(uint256 _poolId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x1141563f18f506bfa2f9c7bbcbe4094d0b3cbe45fc913579c2b42823f4c801f6\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IOnboardProposal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IOnboardProposal {\\n    struct Proposal {\\n        string name; // Pool name (\\\"JOE\\\", \\\"GMX\\\")\\n        address protocolToken; // Protocol native token address\\n        address proposer; // Proposer address\\n        uint256 proposeTimestamp; // Timestamp when proposing\\n        uint256 voteTimestamp; // Timestamp when start voting\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 maxCapacity; // Max capacity ratio\\n        uint256 basePremiumRatio; // Base annual premium ratio\\n        uint256 poolId; // Priority pool id\\n        uint256 status; // Current status (PENDING, VOTING, SETTLED, CLOSED)\\n        uint256 result; // Final result (PASSED, REJECTED, TIED)\\n    }\\n\\n    struct UserVote {\\n        uint256 choice; // 1: vote for, 2: vote against\\n        uint256 amount; // veDEG amount for voting\\n        bool claimed; // Voting reward already claimed\\n    }\\n\\n    event NewProposal(\\n        string name,\\n        address token,\\n        uint256 maxCapacity,\\n        uint256 priceRatio\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event ProposalSettled(uint256 proposalId, uint256 result);\\n    event ProposalVoted(\\n        uint256 proposalId,\\n        address indexed user,\\n        uint256 voteFor,\\n        uint256 amount\\n    );\\n\\n    function claim(uint256 _proposalId, address _user) external;\\n\\n    function closeProposal(uint256 _proposalId) external;\\n\\n    function deg() external view returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getProposal(uint256 _proposalId)\\n        external\\n        view\\n        returns (Proposal memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolProposed(address) external view returns (bool);\\n\\n    function proposalCounter() external view returns (uint256);\\n\\n    function proposals(uint256)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address protocolToken,\\n            address proposer,\\n            uint256 proposeTimestamp,\\n            uint256 numFor,\\n            uint256 numAgainst,\\n            uint256 maxCapacity,\\n            uint256 priceRatio,\\n            uint256 poolId,\\n            uint256 status,\\n            uint256 result\\n        );\\n\\n    function propose(\\n        string memory _name,\\n        address _token,\\n        uint256 _maxCapacity,\\n        uint256 _priceRatio,\\n        address _user\\n    ) external;\\n\\n    function protectionPool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function settle(uint256 _proposalId) external;\\n\\n    function shield() external view returns (address);\\n\\n    function startVoting(uint256 _proposalId) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function getUserProposalVote(address user, uint256 proposalId)\\n        external\\n        view\\n        returns (UserVote memory);\\n\\n    function veDeg() external view returns (address);\\n\\n    function vote(\\n        uint256 _reportId,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n}\\n\",\"keccak256\":\"0x56d162d7db635f0d51ba6be4fc3dff534922f1f06c32aae59507658bef9ceb86\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function crTokenAddress(uint256 generation) external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external returns (address);\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x3342ca65a6e798e720880732994f6b2d22e9189edcd5263de30c7d66425218ff\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n}\\n\",\"keccak256\":\"0x8c988f1fbeea64eede1c093a62bb6523f0f3e35a5d1807fc1909060cad38928f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ITreasury {\\n    function rewardReporter(uint256 _poolId, address _reporter) external;\\n\\n    function premiumIncome(uint256 _poolId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2ef53813a74f1e7de1168f57dde2972cc51fc4a1cc4b4e885e5adc896045d4c7\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _owner = _initOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x78b93f32b25ad2184a4fbc44160870a5a81f567186c99923ecbc54329c57f88b\",\"license\":\"GPL-3.0-or-later\"},\"src/voting/interfaces/VotingParameters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract VotingParameters {\\n    // Status parameters for a voting\\n    uint256 constant INIT_STATUS = 0;\\n    uint256 constant PENDING_STATUS = 1;\\n    uint256 constant VOTING_STATUS = 2;\\n    uint256 constant SETTLED_STATUS = 3;\\n    uint256 constant CLOSE_STATUS = 404;\\n\\n    // Result parameters for a voting\\n    uint256 constant INIT_RESULT = 0;\\n    uint256 constant PASS_RESULT = 1;\\n    uint256 constant REJECT_RESULT = 2;\\n    uint256 constant TIED_RESULT = 3;\\n    uint256 constant FAILED_RESULT = 4;\\n\\n}\\n\",\"keccak256\":\"0x318df2539060dd22bde2a636710f7722af833333a794bd1c54e53d6341d394ba\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080806040523461002857600080546001600160a01b03191633179055610c36908161002e8239f35b600080fdfe608060408181526004908136101561001657600080fd5b60009260e08435811c918263084b976314610ab3575081630d61b519146107ba5781630f89b77d14610791578163103616e81461076357816345ac7890146107165781635e0403e1146103955750806361d027b31461036d5780636f8a6e4314610344578063715018a6146102dd5780638da5cb5b146102b1578063ad35e1dc14610265578063d4fe01c514610238578063e3356ccf146101e8578063f0f44260146101a05763f2fde38b146100cb57600080fd5b3461019c57602036600319011261019c576001600160a01b0391803583811692919083900361019857610102848654163314610ad8565b821561014757508160005491519382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600086a36001600160a01b03191617600055f35b6020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461019c57602036600319011261019c5780356001600160a01b0381811691829003610198576101d6908554163314610ad8565b81546001600160a01b03191617905551f35b50903461019c57602036600319011261019c57356001600160a01b03818116918290036102345761021d908454163314610ad8565b600280546001600160a01b03191691909117905551f35b8380fd5b50903461019c57602036600319011261019c578160209360ff923581526005855220541690519015158152f35b50903461019c57602036600319011261019c57356001600160a01b03818116918290036102345761029a908454163314610ad8565b600180546001600160a01b03191691909117905551f35b8382346102d957816003193601126102d957905490516001600160a01b039091168152602090f35b5080fd5b8382346102d957816003193601126102d95781546001600160a01b0391906103089083163314610ad8565b6000805491519282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600055f35b8382346102d957816003193601126102d95760015490516001600160a01b039091168152602090f35b50903461019c578260031936011261019c575490516001600160a01b03909116815260209150f35b84939150346102345760209182600319360112610198578035908186526005845260ff85872054166107085781865260058452848620805460ff191660011790556002548551634e7f9b1960e01b81528083018490526024949092916001600160a01b03919061016090819086908990829087165afa9485156106fe578a9561062e575b50508301516002190161061f576001610100840151036106105780825416888451838a8701511690833b1561019c57604490838c519586948593630627c88b60e01b85528a8501528c8401525af18015610606576105f1575b5090818892600154168451813b1561019857895190631b35278960e01b8252848201528488820152848160448183865af19081156105e75785916105d3575b508551888b51809481936315895f4760e31b8352888301525afa9081156105c9578491610571575b50169461014084015191863b156102345783918951938492630216e5ad60e31b84528301528183895af1801561056757610549575b5050907f8fa9381fba721fd6948edce4a010404fc0032dc4dc0c1602636306c4965f5cf693606093925190865193845283015284820152a151f35b6105569094939294610b11565b610563579091858761050e565b8580fd5b87513d84823e3d90fd5b90503d8085833e6105828183610b3b565b810160a0828203126101985781519067ffffffffffffffff8211610563576105ab918301610bab565b506105c2896105bb8a8401610b5d565b9201610b5d565b508a6104d9565b89513d86823e3d90fd5b6105dc90610b11565b61023457838b6104b1565b8a513d87823e3d90fd5b6105fe9098919298610b11565b969088610472565b88513d8b823e3d90fd5b5085516354b3680560e11b8152fd5b5085516317dbbab560e11b8152fd5b908092955081813d83116106f7575b6106478183610b3b565b810103126106f357885191820182811067ffffffffffffffff8211176106e1578952805182528781015188830152600391906106848a8201610b5d565b8a830152606081015160608301526080810151608083015260a081015160a083015260c081015160c0830152858101518683015261010080820151908301526101208082015190830152610140809101519082015293908a610419565b634e487b7160e01b8b5260418552878bfd5b8980fd5b503d61063d565b89513d8c823e3d90fd5b8451638a59351b60e01b8152fd5b5050903461019c57602036600319011261019c57356001600160a01b03818116918290036102345761074c908454163314610ad8565b600380546001600160a01b03191691909117905551f35b5050903461019c57602036600319011261019c578160209360ff923581526006855220541690519015158152f35b8483346102d957816003193601126102d95760025490516001600160a01b039091168152602090f35b9390503461096657602093846003193601126102d9578335938483526006865260ff8484205416610aa55784835260068652838320805460ff1916600117905560035484516318feeb1560e31b81528281018790526001600160a01b0393909185908390602490829088165afa918215610a9b57859261099b575b5060036101408301510361098b5760016101608301510361097b578790846001541660808760a4865197868801986101008b8b5116978a01519901518d51998a988997889563bb9febaf60e01b875286015261089f845180958160848901528d8989019101610b76565b602485015260448401526064830152601f01601f191681010301925af193841561097057809461090d575b505091816060927f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f103749451169085519216958683528783015284820152a151908152f35b909193508682813d8311610969575b6109268183610b3b565b810103126109665750918160609261095e7f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f1037495610b5d565b9450926108ca565b80fd5b503d61091c565b8551903d90823e3d90fd5b855163057c9ceb60e01b81528390fd5b855163c0e8dfe360e01b81528390fd5b9091503d8086833e6109ad8183610b3b565b8101888282031261056357815167ffffffffffffffff92838211610a84570190610180928383830312610a8457885193840184811082821117610a885789528251908111610a845790610a01918301610bab565b8252610a0e898201610b5d565b89830152610a1d878201610b5d565b87830152606081015160608301526080810151608083015260a081015160a083015260c081015160c0830152828101518383015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201529038610835565b8780fd5b634e487b7160e01b895260418752602489fd5b86513d87823e3d90fd5b8351638a59351b60e01b8152fd5b8590346102d957816003193601126102d9576003546001600160a01b03168152602090f35b15610adf57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b67ffffffffffffffff8111610b2557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610b2557604052565b51906001600160a01b0382168203610b7157565b600080fd5b918091926000905b828210610b96575011610b8f575050565b6000910152565b91508060209183015181860152018291610b7e565b81601f82011215610b7157805167ffffffffffffffff8111610b255760405192610bdf601f8301601f191660200185610b3b565b81845260208284010111610b7157610bfd9160208085019101610b76565b9056fea2646970667358221220aed38fbcb6c0792c57402eb4599b5c1f47807c921c4b8e857ff3380565d210fe64736f6c634300080f0033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b60009260e08435811c918263084b976314610ab3575081630d61b519146107ba5781630f89b77d14610791578163103616e81461076357816345ac7890146107165781635e0403e1146103955750806361d027b31461036d5780636f8a6e4314610344578063715018a6146102dd5780638da5cb5b146102b1578063ad35e1dc14610265578063d4fe01c514610238578063e3356ccf146101e8578063f0f44260146101a05763f2fde38b146100cb57600080fd5b3461019c57602036600319011261019c576001600160a01b0391803583811692919083900361019857610102848654163314610ad8565b821561014757508160005491519382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600086a36001600160a01b03191617600055f35b6020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461019c57602036600319011261019c5780356001600160a01b0381811691829003610198576101d6908554163314610ad8565b81546001600160a01b03191617905551f35b50903461019c57602036600319011261019c57356001600160a01b03818116918290036102345761021d908454163314610ad8565b600280546001600160a01b03191691909117905551f35b8380fd5b50903461019c57602036600319011261019c578160209360ff923581526005855220541690519015158152f35b50903461019c57602036600319011261019c57356001600160a01b03818116918290036102345761029a908454163314610ad8565b600180546001600160a01b03191691909117905551f35b8382346102d957816003193601126102d957905490516001600160a01b039091168152602090f35b5080fd5b8382346102d957816003193601126102d95781546001600160a01b0391906103089083163314610ad8565b6000805491519282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600055f35b8382346102d957816003193601126102d95760015490516001600160a01b039091168152602090f35b50903461019c578260031936011261019c575490516001600160a01b03909116815260209150f35b84939150346102345760209182600319360112610198578035908186526005845260ff85872054166107085781865260058452848620805460ff191660011790556002548551634e7f9b1960e01b81528083018490526024949092916001600160a01b03919061016090819086908990829087165afa9485156106fe578a9561062e575b50508301516002190161061f576001610100840151036106105780825416888451838a8701511690833b1561019c57604490838c519586948593630627c88b60e01b85528a8501528c8401525af18015610606576105f1575b5090818892600154168451813b1561019857895190631b35278960e01b8252848201528488820152848160448183865af19081156105e75785916105d3575b508551888b51809481936315895f4760e31b8352888301525afa9081156105c9578491610571575b50169461014084015191863b156102345783918951938492630216e5ad60e31b84528301528183895af1801561056757610549575b5050907f8fa9381fba721fd6948edce4a010404fc0032dc4dc0c1602636306c4965f5cf693606093925190865193845283015284820152a151f35b6105569094939294610b11565b610563579091858761050e565b8580fd5b87513d84823e3d90fd5b90503d8085833e6105828183610b3b565b810160a0828203126101985781519067ffffffffffffffff8211610563576105ab918301610bab565b506105c2896105bb8a8401610b5d565b9201610b5d565b508a6104d9565b89513d86823e3d90fd5b6105dc90610b11565b61023457838b6104b1565b8a513d87823e3d90fd5b6105fe9098919298610b11565b969088610472565b88513d8b823e3d90fd5b5085516354b3680560e11b8152fd5b5085516317dbbab560e11b8152fd5b908092955081813d83116106f7575b6106478183610b3b565b810103126106f357885191820182811067ffffffffffffffff8211176106e1578952805182528781015188830152600391906106848a8201610b5d565b8a830152606081015160608301526080810151608083015260a081015160a083015260c081015160c0830152858101518683015261010080820151908301526101208082015190830152610140809101519082015293908a610419565b634e487b7160e01b8b5260418552878bfd5b8980fd5b503d61063d565b89513d8c823e3d90fd5b8451638a59351b60e01b8152fd5b5050903461019c57602036600319011261019c57356001600160a01b03818116918290036102345761074c908454163314610ad8565b600380546001600160a01b03191691909117905551f35b5050903461019c57602036600319011261019c578160209360ff923581526006855220541690519015158152f35b8483346102d957816003193601126102d95760025490516001600160a01b039091168152602090f35b9390503461096657602093846003193601126102d9578335938483526006865260ff8484205416610aa55784835260068652838320805460ff1916600117905560035484516318feeb1560e31b81528281018790526001600160a01b0393909185908390602490829088165afa918215610a9b57859261099b575b5060036101408301510361098b5760016101608301510361097b578790846001541660808760a4865197868801986101008b8b5116978a01519901518d51998a988997889563bb9febaf60e01b875286015261089f845180958160848901528d8989019101610b76565b602485015260448401526064830152601f01601f191681010301925af193841561097057809461090d575b505091816060927f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f103749451169085519216958683528783015284820152a151908152f35b909193508682813d8311610969575b6109268183610b3b565b810103126109665750918160609261095e7f72dad87e42def859d57ce9b5e0ad99cc0b3c3e13ef9147ee80afa2b5a9f1037495610b5d565b9450926108ca565b80fd5b503d61091c565b8551903d90823e3d90fd5b855163057c9ceb60e01b81528390fd5b855163c0e8dfe360e01b81528390fd5b9091503d8086833e6109ad8183610b3b565b8101888282031261056357815167ffffffffffffffff92838211610a84570190610180928383830312610a8457885193840184811082821117610a885789528251908111610a845790610a01918301610bab565b8252610a0e898201610b5d565b89830152610a1d878201610b5d565b87830152606081015160608301526080810151608083015260a081015160a083015260c081015160c0830152828101518383015261010080820151908301526101208082015190830152610140808201519083015261016080910151908201529038610835565b8780fd5b634e487b7160e01b895260418752602489fd5b86513d87823e3d90fd5b8351638a59351b60e01b8152fd5b8590346102d957816003193601126102d9576003546001600160a01b03168152602090f35b15610adf57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b67ffffffffffffffff8111610b2557604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610b2557604052565b51906001600160a01b0382168203610b7157565b600080fd5b918091926000905b828210610b96575011610b8f575050565b6000910152565b91508060209183015181860152018291610b7e565b81601f82011215610b7157805167ffffffffffffffff8111610b255760405192610bdf601f8301601f191660200185610b3b565b81845260208284010111610b7157610bfd9160208085019101610b76565b9056fea2646970667358221220aed38fbcb6c0792c57402eb4599b5c1f47807c921c4b8e857ff3380565d210fe64736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "executeProposal(uint256)": {
        "params": {
          "_proposalId": "Proposal id"
        }
      },
      "executeReport(uint256)": {
        "params": {
          "_reportId": "Id of the report to be executed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Executor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeProposal(uint256)": {
        "notice": "Execute the proposal         The proposal must already been settled and the result is PASSED         New priority pool will be deployed with parameters"
      },
      "executeReport(uint256)": {
        "notice": "Execute a report         The report must already been settled and the result is PASSED         Execution means:             1) Give 10% of protocol income to reporter (SHIELD)             2) Move the total payout amount out of the priority pool (to payout pool)             3) Deploy new generations of CRTokens and PRI-LP tokens         Can not execute a report before the previous liquidation ended"
      }
    },
    "notice": "This is the executor for degis Protocol Protection         The executor is responsible for the execution of the reports and pool proposals         Both administrators or users can execute proposals and reports",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21424,
        "contract": "src/core/Executor.sol:Executor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11983,
        "contract": "src/core/Executor.sol:Executor",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11985,
        "contract": "src/core/Executor.sol:Executor",
        "label": "incidentReport",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11987,
        "contract": "src/core/Executor.sol:Executor",
        "label": "onboardProposal",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11989,
        "contract": "src/core/Executor.sol:Executor",
        "label": "treasury",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10347,
        "contract": "src/core/Executor.sol:Executor",
        "label": "reportExecuted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 10351,
        "contract": "src/core/Executor.sol:Executor",
        "label": "proposalExecuted",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}