{
  "address": "0x92c045b45567888FbA78a946eC67D23D18bF8271",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__ExceededTotalSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__NotAllowedToPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__NotEnoughLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__OnlyPolicyCenter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__OnlyPriorityPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__OnlyPriorityPoolOrPolicyCenter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shieldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shieldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemovedWhenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHIELD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashBorrower",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCovered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "covered",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incidentReport",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pauseProtectionPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "providedLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "removedLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shieldToTransfer",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "removedLiquidityWhenClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "name": "setIncidentReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        }
      ],
      "name": "setPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateIndexCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestampLength",
          "type": "uint256"
        }
      ],
      "name": "updateWhenBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf51d6ca2a0b2703d8b5c72013858e34dce0fd979733069d11c281986ef14022d",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x92c045b45567888FbA78a946eC67D23D18bF8271",
    "transactionIndex": 1,
    "gasUsed": "2657245",
    "logsBloom": "0x
    "blockHash": "0x9227ed1cb3952f578e022531adc65e22a2c28e13c8fe512219fb105fc1c03e05",
    "transactionHash": "0xf51d6ca2a0b2703d8b5c72013858e34dce0fd979733069d11c281986ef14022d",
    "logs": [],
    "blockNumber": 13158058,
    "cumulativeGasUsed": "2709125",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x02acc516ac3Bf3c8E07E2fDF42A4A4F8Dd045EDD",
    "0xE2803140adDc261822DCEb1B28Cca568297197b8",
    "0x5CCC562D1b4ED7c75dFd22B63fe3ab8b8F2001dD"
  ],
  "numDeployments": 6,
  "solcInputHash": "a72266a9511da4ed10aaff2bef53d9af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProtectionPool__ExceededTotalSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__NotAllowedToPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__NotEnoughLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__OnlyPolicyCenter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__OnlyPriorityPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__OnlyPriorityPoolOrPolicyCenter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FlashLoanBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemovedWhenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIELD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCovered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"covered\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incidentReport\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseProtectionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"providedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"removedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shieldToTransfer\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removedLiquidityWhenClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"name\":\"setIncidentReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"}],\"name\":\"setPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateIndexCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestampLength\",\"type\":\"uint256\"}],\"name\":\"updateWhenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getTotalCovered()\":{\"returns\":{\"covered\":\"Covered amount\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseProtectionPool(bool)\":{\"params\":{\"_paused\":\"True for pause, false for unpause\"}},\"providedLiquidity(uint256,address)\":{\"params\":{\"_amount\":\"Liquidity amount (shield)\",\"_provider\":\"Provider address\"}},\"removedLiquidity(uint256,address)\":{\"params\":{\"_amount\":\"Liquidity to remove (LP token amount)\",\"_provider\":\"Provider address\"}},\"removedLiquidityWhenClaimed(uint256,address)\":{\"params\":{\"_amount\":\"Amount of liquidity to remove\",\"_to\":\"Address to transfer the liquidity to\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateWhenBuy(uint256,uint256,uint256)\":{\"params\":{\"_length\":\"Length in month\",\"_premium\":\"Premium of the cover to be distributed to Protection Pool\",\"_timestampLength\":\"Length in seconds\"}}},\"title\":\"Protection Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Updates and retrieves latest price to provide liquidity to Protection Pool\"},\"getTotalCovered()\":{\"notice\":\"Get total active cover amount of all pools         Only calculate those \\\"already dynamic\\\" pools\"},\"pauseProtectionPool(bool)\":{\"notice\":\"Set paused state of the protection pool\"},\"providedLiquidity(uint256,address)\":{\"notice\":\"Finish providing liquidity         Only callable through policyCenter\"},\"removedLiquidity(uint256,address)\":{\"notice\":\"Finish removing liquidity         Only callable through policyCenter\"},\"removedLiquidityWhenClaimed(uint256,address)\":{\"notice\":\"Removes liquidity when a claim is made\"},\"updateIndexCut()\":{\"notice\":\"Update index cut when claim happened\"},\"updateWhenBuy(uint256,uint256,uint256)\":{\"notice\":\"Update when new cover is bought\"}},\"notice\":\"This is the protection pool contract for Degis Protocol Protection         Users can provide liquidity to protection pool and get PRO-LP token         If the priority pool is unable to fulfil the cover amount,         Protection Pool will be able to provide the remaining part\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/protectionPool/ProtectionPool.sol\":\"ProtectionPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632323836333732313938\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"IERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x294520bb88c710bb1d3c21285f9b531acb5cb9950d77eaeef5598c7328afedb4\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0d9159aa6c1a0d8006fb152b0aee46a0f9b8938575ede1a0d7e186b3bc79c8d7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IShield.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\n\\nabstract contract ExternalTokenDependencies is CommonDependencies {\\n    IDegisToken immutable deg;\\n    IVeDEG immutable veDeg;\\n    IShield immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n        shield = IShield(_shield);\\n    }\\n}\\n\",\"keccak256\":\"0x9131de9b8c5ffa6cdc0e52501c778a6452fe5c70e69fd448a8fa661dcbc80e8b\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xc2d17e329f02f1f34aacd39729db66b45f8b40e0175a772830ff92419fe5252e\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IShield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IShield is SimpleIERC20 {\\n    function deposit(\\n        uint256 _type,\\n        address _stablecoin,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22e4fc4218ad0df35d3a7c982296a7fdae6c502d5cf77a7e8d26155e7061cbe1\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x105e977446b6560631149337a4c53822e06e1d38b89036e5cf2f9c89b3a8b19b\",\"license\":\"MIT\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/pools/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x93ccdbce4fcd2d86096e6ad8b10a06757d600a70a4eb660281238a4ef1d6be7f\",\"license\":\"MIT\"},\"src/pools/protectionPool/ProtectionPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport {ERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./ProtectionPoolDependencies.sol\\\";\\nimport \\\"./ProtectionPoolEventError.sol\\\";\\nimport \\\"../../interfaces/ExternalTokenDependencies.sol\\\";\\n\\nimport \\\"../../util/OwnableWithoutContext.sol\\\";\\nimport \\\"../../util/PausableWithoutContext.sol\\\";\\nimport \\\"../../util/FlashLoanPool.sol\\\";\\n\\nimport \\\"../../libraries/DateTime.sol\\\";\\n\\n/**\\n * @title Protection Pool\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the protection pool contract for Degis Protocol Protection\\n *\\n *         Users can provide liquidity to protection pool and get PRO-LP token\\n *\\n *         If the priority pool is unable to fulfil the cover amount,\\n *         Protection Pool will be able to provide the remaining part\\n */\\ncontract ProtectionPool is\\n    ProtectionPoolEventError,\\n    ERC20,\\n    FlashLoanPool,\\n    OwnableWithoutContext,\\n    PausableWithoutContext,\\n    ExternalTokenDependencies,\\n    ProtectionPoolDependencies\\n{\\n    using DateTimeLibrary for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Pool start time\\n    uint256 public startTime;\\n\\n    // Last pool reward distribution\\n    uint256 public lastRewardTimestamp;\\n\\n    // PRO_LP token price\\n    uint256 public price;\\n\\n    // Year => Month => Speed\\n    mapping(uint256 => mapping(uint256 => uint256)) public rewardSpeed;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    )\\n        ERC20(\\\"ProtectionPool\\\", \\\"PRO-LP\\\")\\n        ExternalTokenDependencies(_deg, _veDeg, _shield)\\n        OwnableWithoutContext(msg.sender)\\n    {\\n        // Register time that pool was deployed\\n        startTime = block.timestamp;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    modifier onlyPolicyCenter() {\\n        if (msg.sender != policyCenter)\\n            revert ProtectionPool__OnlyPolicyCenter();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get total active cover amount of all pools\\n     *         Only calculate those \\\"already dynamic\\\" pools\\n     *\\n     * @return covered Covered amount\\n     */\\n    function getTotalCovered() public view returns (uint256 covered) {\\n        IPriorityPoolFactory factory = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        );\\n\\n        uint256 poolAmount = factory.poolCounter();\\n\\n        for (uint256 i; i < poolAmount; ) {\\n            (, address poolAddress, , , ) = factory.pools(i);\\n\\n            if (factory.dynamic(poolAddress)) {\\n                covered += IPriorityPool(poolAddress).activeCovered();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @audit change decimal\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setIncidentReport(address _incidentReport) external onlyOwner {\\n        _setIncidentReport(_incidentReport);\\n    }\\n\\n    function setPolicyCenter(address _policyCenter) external onlyOwner {\\n        _setPolicyCenter(_policyCenter);\\n    }\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update index cut when claim happened\\n     */\\n    function updateIndexCut() public {\\n        IPriorityPoolFactory factory = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        );\\n\\n        uint256 poolAmount = factory.poolCounter();\\n\\n        uint256 currentReserved = IShield(shield).balanceOf(address(this));\\n\\n        uint256 indexToCut;\\n        uint256 minRequirement;\\n\\n        for (uint256 i; i < poolAmount; ) {\\n            (, address poolAddress, , , ) = factory.pools(i);\\n\\n            minRequirement = IPriorityPool(poolAddress).minAssetRequirement();\\n\\n            if (minRequirement > currentReserved) {\\n                indexToCut = (currentReserved * SCALE) / minRequirement;\\n                IPriorityPool(poolAddress).setCoverIndex(indexToCut);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates and retrieves latest price to provide liquidity to Protection Pool\\n     */\\n    function getLatestPrice() external returns (uint256) {\\n        _updatePrice();\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Finish providing liquidity\\n     *         Only callable through policyCenter\\n     *\\n     * @param _amount   Liquidity amount (shield)\\n     * @param _provider Provider address\\n     */\\n    function providedLiquidity(uint256 _amount, address _provider)\\n        external\\n        onlyPolicyCenter\\n    {\\n        _updateReward();\\n        _updatePrice();\\n\\n        // Mint PRO_LP tokens to the user\\n        uint256 amountToMint = (_amount * SCALE) / price;\\n        _mint(_provider, amountToMint);\\n        emit LiquidityProvided(_amount, amountToMint, _provider);\\n    }\\n\\n    /**\\n     * @notice Finish removing liquidity\\n     *         Only callable through policyCenter\\n     *\\n     * @param _amount   Liquidity to remove (LP token amount)\\n     * @param _provider Provider address\\n     */\\n    function removedLiquidity(uint256 _amount, address _provider)\\n        external\\n        whenNotPaused\\n        returns (uint256 shieldToTransfer)\\n    {\\n        if (\\n            msg.sender != policyCenter &&\\n            !IPriorityPoolFactory(priorityPoolFactory).poolRegistered(\\n                msg.sender\\n            )\\n        ) revert ProtectionPool__OnlyPriorityPoolOrPolicyCenter();\\n\\n        if (_amount > totalSupply())\\n            revert ProtectionPool__ExceededTotalSupply();\\n\\n        _updateReward();\\n        _updatePrice();\\n\\n        // Burn PRO_LP tokens to the user\\n        shieldToTransfer = (_amount * price) / SCALE;\\n        if (\\n            SimpleIERC20(shield).balanceOf(address(this)) <\\n            getTotalCovered() + shieldToTransfer\\n        ) revert ProtectionPool__NotEnoughLiquidity();\\n\\n        // @audit Change path\\n        //\\n        address realPayer = msg.sender == policyCenter ? _provider : msg.sender;\\n        _burn(realPayer, _amount);\\n        SimpleIERC20(shield).transfer(_provider, shieldToTransfer);\\n\\n        emit LiquidityRemoved(_amount, shieldToTransfer, _provider);\\n    }\\n\\n    /**\\n     * @notice Removes liquidity when a claim is made\\n     *\\n     * @param _amount Amount of liquidity to remove\\n     * @param _to     Address to transfer the liquidity to\\n     */\\n    function removedLiquidityWhenClaimed(uint256 _amount, address _to)\\n        external\\n    {\\n        if (\\n            !IPriorityPoolFactory(priorityPoolFactory).poolRegistered(\\n                msg.sender\\n            )\\n        ) revert ProtectionPool__OnlyPriorityPool();\\n\\n        if (_amount > SimpleIERC20(shield).balanceOf(address(this)))\\n            revert ProtectionPool__NotEnoughBalance();\\n\\n        SimpleIERC20(shield).transfer(_to, _amount);\\n\\n        _updatePrice();\\n\\n        emit LiquidityRemovedWhenClaimed(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Update when new cover is bought\\n     *\\n     * @param _premium         Premium of the cover to be distributed to Protection Pool\\n     * @param _length          Length in month\\n     * @param _timestampLength Length in seconds\\n     */\\n    function updateWhenBuy(\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external onlyPolicyCenter {\\n        _updateReward();\\n        _updatePrice();\\n\\n        _updateRewardSpeed(_premium, _length, _timestampLength);\\n    }\\n\\n    /**\\n     * @notice Set paused state of the protection pool\\n     *\\n     * @param _paused True for pause, false for unpause\\n     */\\n    function pauseProtectionPool(bool _paused) external {\\n        if (\\n            (msg.sender != owner()) &&\\n            (msg.sender != incidentReport) &&\\n            (msg.sender != priorityPoolFactory)\\n        ) revert ProtectionPool__NotAllowedToPause();\\n        _pause(_paused);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update the price of PRO_LP token\\n     */\\n    function _updatePrice() internal {\\n        if (totalSupply() == 0) {\\n            price = SCALE;\\n            return;\\n        }\\n        price =\\n            ((SimpleIERC20(shield).balanceOf(address(this))) * SCALE) /\\n            totalSupply();\\n\\n        emit PriceUpdated(price);\\n    }\\n\\n    /**\\n     * @notice Update reward status\\n     */\\n    function _updateReward() internal {\\n        uint256 currentTime = block.timestamp;\\n\\n        // Last reward year & month & day\\n        (uint256 lastY, uint256 lastM, uint256 lastD) = lastRewardTimestamp\\n            .timestampToDate();\\n\\n        // Current year & month & day\\n        (uint256 currentY, uint256 currentM, ) = currentTime.timestampToDate();\\n\\n        uint256 monthPassed = currentM - lastM;\\n\\n        uint256 totalReward;\\n\\n        if (monthPassed == 0) {\\n            if (rewardSpeed[currentY][currentM] > 0) {\\n                totalReward +=\\n                    (currentTime - lastRewardTimestamp) *\\n                    rewardSpeed[currentY][currentM];\\n            }\\n        } else {\\n            for (uint256 i; i < monthPassed + 1; ) {\\n                // First month reward\\n                if (i == 0 && rewardSpeed[lastY][lastM] > 0) {\\n                    // End timestamp of the first month\\n                    uint256 endTimestamp = DateTimeLibrary\\n                        .timestampFromDateTime(lastY, lastM, lastD, 23, 59, 59);\\n\\n                    totalReward +=\\n                        (endTimestamp - lastRewardTimestamp) *\\n                        rewardSpeed[lastY][lastM];\\n                }\\n                // Last month reward\\n                else if (i == monthPassed && rewardSpeed[lastY][lastM] > 0) {\\n                    uint256 startTimestamp = DateTimeLibrary\\n                        .timestampFromDateTime(lastY, lastM, 1, 0, 0, 0);\\n\\n                    totalReward +=\\n                        (currentTime - startTimestamp) *\\n                        rewardSpeed[lastY][lastM];\\n                }\\n                // Middle month reward\\n                else {\\n                    uint256 daysInMonth = lastY._getDaysInMonth(lastM);\\n\\n                    if (rewardSpeed[lastY][lastM] > 0) {\\n                        totalReward +=\\n                            (DateTimeLibrary.SECONDS_PER_DAY * daysInMonth) *\\n                            rewardSpeed[lastY][lastM];\\n                    }\\n                }\\n\\n                unchecked {\\n                    if (++lastM > 12) {\\n                        ++lastY;\\n                        lastM = 1;\\n                    }\\n\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        emit RewardUpdated(totalReward);\\n    }\\n\\n    /**\\n     * @notice Update reward speed\\n     *\\n     * @param _premium         New premium received\\n     * @param _length          Cover length in months\\n     * @param _timestampLength Cover length in seconds\\n     */\\n    function _updateRewardSpeed(\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) internal {\\n        // How many premiums need to be distributed in each second\\n        uint256 newSpeed = _premium / _timestampLength;\\n\\n        (uint256 currentYear, uint256 currentMonth, ) = DateTimeLibrary\\n            .timestampToDate(block.timestamp);\\n\\n        for (uint256 i; i < _length; ) {\\n            rewardSpeed[currentYear][currentMonth] += newSpeed;\\n\\n            unchecked {\\n                if (++currentMonth > 12) {\\n                    ++currentYear;\\n                    currentMonth = 1;\\n                }\\n\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9c5b2949442a3a1ff0c64c1b69cebc14aa272080cbec11314405750ca9b97f9\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/protectionPool/ProtectionPoolDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/CommonDependencies.sol\\\";\\n\\ninterface IPriorityPoolFactory {\\n    function poolCounter() external view returns (uint256);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function dynamic(address) external view returns (bool);\\n}\\n\\ninterface IPriorityPool {\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n}\\n\\nabstract contract ProtectionPoolDependencies is CommonDependencies {\\n    uint256 constant UINT256_MAX = type(uint256).max;\\n\\n    address public priorityPoolFactory;\\n    address public policyCenter;\\n    address public incidentReport;\\n\\n    function _setPolicyCenter(address _policyCenter) internal virtual {\\n        policyCenter = _policyCenter;\\n    }\\n\\n    function _setPriorityPoolFactory(address _priorityPoolFactory)\\n        internal\\n        virtual\\n    {\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    function _setIncidentReport(address _incidentReport) internal virtual {\\n        incidentReport = _incidentReport;\\n    }\\n}\\n\",\"keccak256\":\"0x2059a4bb649875452ec21e2a731c06aa4ec7a8ddfdb68cadbfbc7948d7908c1b\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/protectionPool/ProtectionPoolEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ProtectionPoolEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event LiquidityProvided(\\n        uint256 shieldAmount,\\n        uint256 lpAmount,\\n        address sender\\n    );\\n    event LiquidityRemoved(\\n        uint256 lpAmount,\\n        uint256 shieldAmount,\\n        address sender\\n    );\\n\\n    event LiquidityRemovedWhenClaimed(address pool, uint256 amount);\\n\\n    event RewardUpdated(uint256 totalReward);\\n\\n    event PriceUpdated(uint256 price);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error ProtectionPool__OnlyPolicyCenter();\\n    error ProtectionPool__ExceededTotalSupply();\\n    error ProtectionPool__OnlyPriorityPool();\\n    error ProtectionPool__NotEnoughLiquidity();\\n    error ProtectionPool__OnlyPriorityPoolOrPolicyCenter();\\n    error ProtectionPool__NotEnoughBalance();\\n    error ProtectionPool__NotAllowedToPause();\\n\\n}\",\"keccak256\":\"0xbdc66f0e181c1df0cc652ba27f547eb9502c62f06bf47bf07908672f6e60f354\",\"license\":\"GPL-3.0-or-later\"},\"src/util/FlashLoanPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol\\\";\\n\\nabstract contract FlashLoanPool is IERC3156FlashLender {\\n    address constant public SHIELD = address(0x10);\\n    uint256 constant public FEE = 10;\\n\\n    event FlashLoanBorrowed(\\n        address indexed lender,\\n        address indexed borrower,\\n        address indexed stablecoin,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    function flashLoan(\\n        IERC3156FlashBorrower _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external override returns (bool) {\\n        require(_amount > 0, \\\"Zero amount\\\");\\n\\n        uint256 fee = flashFee(_token, _amount);\\n\\n        uint256 previousBalance = IERC20(_token).balanceOf(address(this));\\n\\n        IERC20(_token).transfer(address(_receiver), _amount);\\n        require(\\n            _receiver.onFlashLoan(msg.sender, _token, _amount, fee, _data) ==\\n                keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\"),\\n            \\\"IERC3156: Callback failed\\\"\\n        );\\n        IERC20(_token).transferFrom(\\n            address(_receiver),\\n            address(this),\\n            _amount + fee\\n        );\\n\\n        uint256 finalBalance = IERC20(_token).balanceOf(address(this));\\n        require(finalBalance >= previousBalance + fee, \\\"Not enough pay back\\\");\\n\\n        emit FlashLoanBorrowed(\\n            address(this),\\n            address(_receiver),\\n            _token,\\n            _amount,\\n            fee\\n        );\\n\\n        return true;\\n    }\\n\\n    function flashFee(address _token, uint256 _amount)\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        require(_token == SHIELD, \\\"only shield\\\");\\n        return (_amount * FEE) / 10000;\\n    }\\n\\n    function maxFlashLoan(address _token) external view returns (uint256) {\\n        require(_token == SHIELD, \\\"only shield\\\");\\n        return IERC20(SHIELD).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xe1dd0a5e929658c3df31a6307a83d5949c65e1d8d7c69e02f2e2862e2dc824a9\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _owner = _initOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x78b93f32b25ad2184a4fbc44160870a5a81f567186c99923ecbc54329c57f88b\",\"license\":\"GPL-3.0-or-later\"},\"src/util/PausableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract PausableWithoutContext {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Paused\\\");\\n        _;\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _pause(bool _p) internal virtual {\\n        _paused = _p;\\n    }\\n}\\n\",\"keccak256\":\"0xe610bf149f8aaf333258716ecafc0bdc3e395ad2f7ee6ba38036839ca195d673\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e034620003b357601f601f196001600160401b036200311c3881900384810184168601919083831187841017620002b757808792606094604052833981010312620003b3576200005084620003d8565b916020916200006f604062000067858901620003d8565b9701620003d8565b946200007a620003b8565b600e81526d141c9bdd1958dd1a5bdb941bdbdb60921b858201526200009e620003b8565b916006835265050524f2d4c560d41b86840152815192848411620002b75760039384546001948582811c92168015620003a8575b8a831014620003925781858493116200033c575b508990858311600114620002d957600092620002cd575b505060001982871b1c191690841b1784555b8051948511620002b75760049687548481811c91168015620002ac575b8282101462000297578381116200024c575b5080928611600114620001e0575084955090849291600095620001d4575b50501b92600019911b1c19161790555b600580546001600160a01b031916331790556001600160a01b0390811660805291821660a0521660c05242600955604051612d2e9081620003ee823960805181505060a05181505060c0518181816103f60152818161066701528181610a230152611fe00152f35b0151935038806200015c565b939295859081168860005285600020956000905b8983831062000231575050501062000216575b50505050811b0190556200016c565b01519060f884600019921b161c191690553880808062000207565b858701518955909701969485019488935090810190620001f4565b88600052816000208480890160051c820192848a106200028d575b0160051c019085905b828110620002805750506200013e565b6000815501859062000270565b9250819262000267565b602289634e487b7160e01b6000525260246000fd5b90607f16906200012c565b634e487b7160e01b600052604160045260246000fd5b015190503880620000fd565b908987941691886000528b6000209260005b8d8282106200032557505084116200030c575b505050811b0184556200010f565b015160001983891b60f8161c19169055388080620002fe565b8385015186558a97909501949384019301620002eb565b90915086600052896000208580850160051c8201928c861062000388575b918891869594930160051c01915b82811062000378575050620000e6565b6000815585945088910162000368565b925081926200035a565b634e487b7160e01b600052602260045260246000fd5b91607f1691620000d2565b600080fd5b60408051919082016001600160401b03811183821017620002b757604052565b51906001600160a01b0382168203620003b35756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461189157508163095ea7b3146118675781630f89b77d1461183e57816318160ddd1461181f57816323b872dd146117555781632dd57bb01461170c578163313ce567146116f057816339509351146116a057816344abf1a9146115645781635b2725ed146115485781635c975abb146115215781635cffe9de14611120578163613255ab146110815781636f8a6e431461105857816370a0823114611021578163715018a614610fbf57816378e9792514610fa05781638da5cb5b14610f775781638e15f47314610f5057816395d89b4114610e6a578163a035b1fe14610e4b578163a457c2d714610da3578163a8a2b43114610d12578163a9059cbb14610ce1578163ad35e1dc14610c98578163b1fead0b14610c67578163bf59705914610bb3578163c57981b514610b97578163ca6c6a4c146109c1578163d9d98ce414610998578163da81afae146105f1578163dd5625c314610393578163dd62ed3e1461034a578163e3356ccf14610301578163e8adbf2f146102d8578163f2fde38b1461020b57508063f8077fae146101ed5763fc51843c146101c757600080fd5b346101e957816003193601126101e9576020906101e2611d6d565b9051908152f35b5080fd5b50346101e957816003193601126101e957602090600a549051908152f35b9050346102d45760203660031901126102d4576102266119c5565b6005546001600160a01b03808216949192610242338714611f1e565b169283156102835750829051937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08686a36001600160a01b03191617600555f35b6020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101e957816003193601126101e95760075490516001600160a01b039091168152602090f35b5050346101e95760203660031901126101e95761031c6119c5565b6005546001600160a01b0391906103369083163314611f1e565b1660018060a01b0319600854161760085551f35b5050346101e957806003193601126101e957806020926103686119c5565b6103706119e0565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b9050346102d457826003193601126102d4576006548251639e3079cb60e01b81526001600160a01b03918216929091602080848481885afa9384156105e75787946105b4575b508551916370a0823160e01b8352308484015260249582848881857f0000000000000000000000000000000000000000000000000000000000000000165afa9384156105aa578994610577575b50885b86811061043557898951f35b8989516315895f4760e31b8152828882015281818b81875afa801561056d5785918391610546575b50168a51631341449360e21b815286818a81855afa90811561053c57839161050f575b50878111610494575b505050600101610429565b6104a6906104a189611f57565b611f9c565b90803b156102d4578a83928d519485938492632440f3e960e01b84528d8401525af18015610505576104db575b808b91610489565b67ffffffffffffffff81116104f357895260016104d3565b634e487b7160e01b8b5260418752888bfd5b8a513d8d823e3d90fd5b90508681813d8311610535575b61052681836119f6565b810103126102d4575138610480565b503d61051c565b8c513d85823e3d90fd5b61056291503d8085833e61055a81836119f6565b810190611cc2565b50505090503861045d565b8b513d84823e3d90fd5b9093508281813d83116105a3575b61058f81836119f6565b8101031261059f57519238610426565b8880fd5b503d610585565b88513d8b823e3d90fd5b9080945081813d83116105e0575b6105cc81836119f6565b810103126105dc575192386103d9565b8680fd5b503d6105c2565b86513d89823e3d90fd5b919050346102d457806003193601126102d457813561060e6119e0565b60ff60055460a01c1661096c576007546001600160a01b03959086163314158061090e575b6108fe5760025483116108ee576106486120ad565b610650611fbc565b64e8d4a51000610662600b5485611f89565b0494867f000000000000000000000000000000000000000000000000000000000000000016908551976370a0823160e01b895230828a01526020988981602481875afa9081156108e45785916108b3575b506106c5896106c0611d6d565b611a2e565b116108a4578060075416331460001461089e57845b1680156108515780845283895286842054868110610803579285858b948185600080516020612cd9833981519152888f988f8f869d6107609f938294528785520381872055816002540360025551908152a38a5163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290958693849291839160400190565b03925af19081156107f8575085927f0c54fc223ffd1a8f36652b5e83db4fff50f5ae151b11ceb56d5499b9f6e1fa1894926107c2926107cb575b50855192835260208301939093526001600160a01b0390921660408201529081906060820190565b0390a151908152f35b6107ea90893d8b116107f1575b6107e281836119f6565b810190611d55565b503861079a565b503d6107d8565b8551903d90823e3d90fd5b875162461bcd60e51b81528084018b9052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b865162461bcd60e51b81528083018a9052602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b336106da565b50855163ed9d9d3360e01b8152fd5b90508981813d83116108dd575b6108ca81836119f6565b810103126108d95751386106b3565b8480fd5b503d6108c0565b88513d87823e3d90fd5b5050505163d6e1271b60e01b8152fd5b5050505163acfbdf9160e01b8152fd5b50602460208760065416865192838092633a31bb7760e11b8252338b8301525afa908115610962578291610944575b5015610633565b61095c915060203d81116107f1576107e281836119f6565b3861093d565b85513d84823e3d90fd5b825162461bcd60e51b8152602081860152600660248201526514185d5cd95960d21b6044820152606490fd5b5050346101e957806003193601126101e9576020906101e26109b86119c5565b60243590612ca8565b8383346101e957806003193601126101e95782356109dd6119e0565b6006548351633a31bb7760e11b8152338782015260209392916001600160a01b03919085908290602490829086165afa9081156105e7578791610b7a575b5015610b6a577f0000000000000000000000000000000000000000000000000000000000000000169084516370a0823160e01b815230888201528481602481865afa9081156105e7578791610b3d575b508311610b2d57845163a9059cbb60e01b81526001600160a01b039091169681019687526020870183905294959394938391859182908990829060400103925af1918215610b23577f9c125d89aedad0c6838010bd5646efbf0d93daa2dcc78e414b4daee16abb6c7d93610aff93610b05575b5050610ae8611fbc565b835133815260208101919091529081906040820190565b0390a151f35b81610b1b92903d106107f1576107e281836119f6565b508580610ade565b84513d87823e3d90fd5b8451633ced52eb60e11b81528790fd5b90508481813d8311610b63575b610b5481836119f6565b810103126105dc575188610a6b565b503d610b4a565b84516379b0b85160e01b81528790fd5b610b919150853d87116107f1576107e281836119f6565b88610a1b565b5050346101e957816003193601126101e95760209051600a8152f35b9050346102d45760603660031901126102d45760075460243591906001600160a01b03163303610c5957610bfb90610be96120ad565b610bf1611fbc565b6044359035611f9c565b610c0442612886565b509185925b848410610c1557868651f35b828752600c93602085815287892090838a5252868820610c36848254611a2e565b90556001809201948511610c4c575b0192610c09565b9350809201918093610c45565b82516311bee39d60e31b8152fd5b9050346102d457816003193601126102d4576020928291358152600c84528181206024358252845220549051908152f35b5050346101e95760203660031901126101e957610cb36119c5565b6005546001600160a01b039190610ccd9083163314611f1e565b1660018060a01b0319600654161760065551f35b5050346101e957806003193601126101e957602090610d0b610d016119c5565b6024359033611a50565b5160018152f35b9050346102d45760203660031901126102d4578035801515809103610d9f57600554916001600160a01b038084163314159081610d8f575b81610d80575b50610d72575060ff60a01b1990911660a09190911b60ff60a01b161760055551f35b8351631b6a6b5b60e11b8152fd5b90506006541633141538610d50565b8091506008541633141590610d4a565b8380fd5b90508234610e485782600319360112610e4857610dbe6119c5565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610df757602085610d0b8585038733611bac565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b5050346101e957816003193601126101e957602090600b549051908152f35b8383346101e957816003193601126101e957805191809380549160019083821c92828516948515610f46575b6020958686108114610f3357858952908115610f0f5750600114610ed4575b610ed08787610ec6828c03836119f6565b5191829182611999565b0390f35b9080949750528583205b828410610efc5750505082610ed094610ec692820101948680610eb5565b8054868501880152928601928101610ede565b60ff19168887015250505050151560051b8301019250610ec682610ed08680610eb5565b634e487b7160e01b845260228352602484fd5b93607f1693610e96565b5050346101e957816003193601126101e957602090610f6d611fbc565b600b549051908152f35b5050346101e957816003193601126101e95760055490516001600160a01b039091168152602090f35b5050346101e957816003193601126101e9576020906009549051908152f35b5050346101e957816003193601126101e9576005546001600160a01b038116918390610fec338514611f1e565b51927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600555f35b5050346101e95760203660031901126101e95760209181906001600160a01b036110496119c5565b16815280845220549051908152f35b5050346101e957816003193601126101e95760065490516001600160a01b039091168152602090f35b8383346101e957602092836003193601126102d4576110b260106001600160a01b036110ab6119c5565b1614612c6e565b8151906370a0823160e01b82523090820152838160248160105afa9283156111155780936110e3575b505051908152f35b909192508382813d831161110e575b6110fc81836119f6565b81010312610e485750519083806110db565b503d6110f2565b8251903d90823e3d90fd5b828434610e48576080366003190112610e48576001600160a01b0392803584811691908290036102d4576111526119e0565b604435916064359667ffffffffffffffff908189116105dc573660238a0112156105dc57888301359182116105dc57366024838b0101116105dc5784156114f05761119d8585612ca8565b9316958751916370a0823160e01b90818452308585015260209a8b856024818d5afa9485156114e657888b8b8f938f8b918a9b6114a5575b505163a9059cbb60e01b81526001600160a01b03909216908201908152602081019390935292918391908290899082906040015b03925af1801561149b5787848f94958f8f95976024918f9960c49761147e575b505198899788966323e30c8b60e01b885233908801528387015260448601528d606486015260a060848601528260a486015201848401378181018301889052601f01601f19168101030181868c5af180156113e8578390611431575b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99150036113f2576112b78587611a2e565b8951906323b872dd60e01b8252888683015230602483015260448201528a81606481868d5af180156113e8576113cb575b508851908152308482015289816024818b5afa9182156113c057908186929361138c575b50506113189192611a2e565b1161135357508451918252858201527f2640247c2a780a1283695dd939b212be6c2e62a7182ef366efa28aa696f23d4c843092a45160018152f35b855162461bcd60e51b815290810187905260136024820152724e6f7420656e6f75676820706179206261636b60681b6044820152606490fd5b915091508982813d83116113b9575b6113a581836119f6565b81010312610e48575051836113188b61130c565b503d61139b565b8951903d90823e3d90fd5b6113e1908b3d8d116107f1576107e281836119f6565b508a6112e8565b8a513d85823e3d90fd5b885162461bcd60e51b81528085018b9052601960248201527812515490cccc4d4d8e8810d85b1b189858dac819985a5b1959603a1b6044820152606490fd5b508a81813d8311611477575b61144781836119f6565b810103126102d4577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99051611285565b503d61143d565b611494908a3d8c116107f1576107e281836119f6565b5038611229565b8c513d87823e3d90fd5b969798999a50505050505081813d83116114df575b6114c481836119f6565b810103126108d95751939291908b888b8b898f6112096111d5565b503d6114ba565b8b513d86823e3d90fd5b875162461bcd60e51b8152602081850152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b5050346101e957816003193601126101e95760209060ff60055460a01c1690519015158152f35b5050346101e957816003193601126101e9576020905160108152f35b8383346101e957806003193601126101e9578235926115816119e0565b60075490946001600160a01b0392909183163303611692576115a16120ad565b6115a9611fbc565b6115be6115b583611f57565b600b5490611f9c565b92861690811561164f57507fe198de8e85cdfd7f4510617c4cd12de7263b31eef6cb83924c620d8a080144a9939495610aff916115fd85600254611a2e565b6002558088528760205286882085815401905587600080516020612cd983398151915260208951888152a3855192835260208301939093526001600160a01b0390921660408201529081906060820190565b606490602086519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b83516311bee39d60e31b8152fd5b5050346101e957806003193601126101e957610d0b6020926116e96116c36119c5565b338352600186528483206001600160a01b03821684528652918490205460243590611a2e565b9033611bac565b5050346101e957816003193601126101e9576020905160068152f35b5050346101e95760203660031901126101e9576117276119c5565b6005546001600160a01b0391906117419083163314611f1e565b1660018060a01b0319600754161760075551f35b839150346101e95760603660031901126101e9576117716119c5565b6117796119e0565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036117b3575b602086610d0b878787611a50565b8482106117dc57509183916117d160209695610d0b95033383611bac565b9193948193506117a5565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346101e957816003193601126101e9576020906002549051908152f35b5050346101e957816003193601126101e95760085490516001600160a01b039091168152602090f35b5050346101e957806003193601126101e957602090610d0b6118876119c5565b6024359033611bac565b92915034610d9f5783600319360112610d9f57600354600181811c918690828116801561195a575b6020958686108214611947575084885290811561192557506001146118ea575b610ed08686610ec6828b03836119f6565b929550600383528583205b8284106119125750505082610ed094610ec69282010194386118d9565b80548685018801529286019281016118f5565b60ff191687860152505050151560051b8301019250610ec682610ed0386118d9565b634e487b7160e01b845260229052602483fd5b93607f16936118b9565b918091926000905b82821061198457501161197d575050565b6000910152565b9150806020918301518186015201829161196c565b604091602082526119b98151809281602086015260208686019101611964565b601f01601f1916010190565b600435906001600160a01b03821682036119db57565b600080fd5b602435906001600160a01b03821682036119db57565b90601f8019910116810190811067ffffffffffffffff821117611a1857604052565b634e487b7160e01b600052604160045260246000fd5b81198111611a3a570190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215611b595716918215611b0857600082815280602052604081205491808310611ab45760408282600080516020612cd9833981519152958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215611c5d5716918215611c0d5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b51906001600160a01b03821682036119db57565b9060a0828203126119db57815167ffffffffffffffff908181116119db5783019082601f830112156119db578151908111611a185760405192611d0f601f8301601f1916602001856119f6565b818452602082840101116119db57611d2d9160208085019101611964565b91611d3a60208301611cae565b91611d4760408201611cae565b916080606083015192015190565b908160209103126119db575180151581036119db5790565b60065460408051639e3079cb60e01b81526000939290919060049085906020906001600160a01b039081169082878681855afa968715611f14578497611ee5575b50835b878110611dc2575050505050505050565b86516315895f4760e31b815286810182905260249086818381885afa908115611ebc57849187918991611ec6575b508a51634124974560e01b8152921689830181905292829081885afa908115611ebc578791611e9f575b50611e29575b50600101611db1565b848791899c939c5192838092636835185f60e11b82525afa908115611e95578691611e63575b50611e5c90600192611a2e565b9990611e20565b90508481813d8311611e8e575b611e7a81836119f6565b81010312611e8a57516001611e4f565b8580fd5b503d611e70565b88513d88823e3d90fd5b611eb69150863d88116107f1576107e281836119f6565b38611e1a565b89513d89823e3d90fd5b611eda91503d808b833e61055a81836119f6565b505050905038611df0565b9096508281813d8311611f0d575b611efd81836119f6565b81010312610d9f57519538611dae565b503d611ef3565b86513d86823e3d90fd5b15611f2557565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b64e8d4a51000908060001904821181151516611a3a570290565b62015180908060001904821181151516611a3a570290565b8060001904821181151516611a3a570290565b8115611fa6570490565b634e487b7160e01b600052601260045260246000fd5b6002548015612096576040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561208a57600091612057575b5061204a7f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe0926104a1602093611f57565b80600b55604051908152a1565b906020823d8211612082575b81612070602093836119f6565b81010312610e4857505161204a612019565b3d9150612063565b6040513d6000823e3d90fd5b5064e8d4a51000600b55565b818110611a3a570390565b600a8054906120d96120be83612886565b94919390939084916120cf42612886565b50959096866120a2565b92600097841560001461217d575050505050917fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f6939160209382600052600c8552604060002082600052855260406000205461213d575b5050505b604051908152a1565b9161216f916121506121759594426120a2565b91600052600c8652604060002090600052855260406000205490611f89565b90611a2e565b388080612130565b929395509550928697969260011986119560018097818301915b6121d0575b505050505050505050509060207fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f691612134565b80611a3a578187101561261a578615806125f7575b1561236b576107b288106119db57617d4b600160ff1b0186128916611a3a578961220e89612694565b89600480938193600c958691826122248561261f565b0561222e916126f2565b6122379061271d565b612248919005617d4a198e016126f2565b8161225284612637565b8161225c8661261f565b0561226690612781565b61226f9161266b565b612278906127e6565b05612282916126f2565b9361228c906126c3565b916122969061261f565b056122a0916126f2565b606490056122ad90612836565b056122b79161266b565b6122c09061264f565b6122c990611f71565b906201437019821161235657610dd4196201437083011161235657603b196201514483011161235657506123318c9d9e61216f8c8e9f958f966123128d6201517f8a99016120a2565b9260005260209182526040918260002091600052526000205490611f89565b9c5b0197600c8911612349575b0196999b9a9b612197565b980197899750879061233e565b601190634e487b7160e01b6000525260246000fd5b828714806125d4575b15612472576107b288106119db576123a461238e89612694565b8b6123b06123ab6004938493600c96879161261f565b05906126f2565b61271d565b05617d4a600160ff1b0181128c1661245d578c9d9e61216f8c8e9f958f9661231261245161244c6124478b9a61241e6124579b8861241261240d8a612407846124016123fb84612637565b9361261f565b05612781565b9061266b565b6127e6565b0590617d4919016126f2565b90612440606461243a6124308c6126c3565b8b6123a48c61261f565b05612836565b059061266b565b61264f565b611f71565b426120a2565b9c612333565b601182634e487b7160e01b6000525260246000fd5b60009b999a9b898c1480156125ca575b80156125c0575b80156125b6575b80156125ac575b80156125a3575b8015612599575b156125425750601f5b88600052600c908c60208381526040918260002090600052815281600020546124e0575b505050508880809b9c612333565b9091929b9c8d7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab851116611a3a5761216f8f948f9e948f968f95889761253b97600052815282600020916000525260002054906201518002611f89565b9b386124d2565b60028c146125525750601e6124ae565b6003891615908161258c575b811561257f575b50156125765760ff601d5b166124ae565b60ff601c612570565b6101908a06159150612565565b60648a061515915061255e565b50600c8c146124a5565b50848c1461249e565b5060088c14612497565b5060078c14612490565b5060058c14612489565b5060038c14612482565b50876000526020600c815260409081600020908c60005252600020541515612374565b50876000526020600c815260409081600020908c600052526000205415156121e5565b61219c565b600e600160ff1b018112600116611a3a57600d190190565b6002600160ff1b018112600116611a3a576001190190565b62253d8c600160ff1b018112600116611a3a5762253d8b190190565b600082128015600160ff1b8401831216611a3a576001600160ff1b038301821316611a3a570390565b6112c0906000811280156001600160ff1b03839003841316611a3a57600160ff1b829003831216611a3a570190565b611324906000811280156001600160ff1b03839003841316611a3a57600160ff1b829003831216611a3a570190565b6000811280156001600160ff1b03839003841316611a3a57600160ff1b829003831216611a3a570190565b6105b560008083136001600160ff1b0384900483111660011661276d5760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa88412828512161661276d57500290565b634e487b7160e01b81526011600452602490fd5b600060017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8311828413161661276d5760017ff5555555555555555555555555555555555555555555555555555555555555568312828412161661276d5750600c0290565b61016f60008083136001600160ff1b0384900483111660011661276d5760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318412828512161661276d57500290565b60008082136001600160ff1b038390046003111660011661276d5760017fd5555555555555555555555555555555555555555555555555555555555555568312828412161661276d575060030290565b6001600160ff1b039060009062010bd990620151809004828112818503811581851316612c5a57600160ff1b938385039283821216612c465785908401129162010bd819908162253d8c93018313841516612c3257011316612c1e576226496501916001936004918585830484118287131616612c0b57808512600760fd1b8612168616612c0b5762023ab194858160021b05958787850482118489131616612be557877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce288128489121616612be5578602828112818503600313811516612bf85781870360031216612be557908460036129839301059061266b565b928184128484038813811516612b9957848603881216612b8657868401610fa08882860482118584131616612bac57887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616612bac576129f59162164b0991020594826124408761271d565b828112818503601f13811516612bac57818703601f1216612b9957601f019680888504605011848a131616612b9957807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616612b995761098f9788816050020590828287048b118684131616612bd25784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616612bbf5790605083612aaa9302059061266b565b98600b820597828703600213821516612bbf5782900360021216612bac5781878604600c118589131616612bac57817ff55555555555555555555555555555555555555555555555555555555555555688128589121616612bac57612b1690600288600c02910161266b565b966031600160ff1b0181128216612bac578190603019018095046064118486131616612b99577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616612b86575050612b809291612b7b916064026126f2565b6126f2565b91909192565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b15612c7557565b60405162461bcd60e51b815260206004820152600b60248201526a1bdb9b1e481cda1a595b1960aa1b6044820152606490fd5b612cbd906001600160a01b0316601014612c6e565b8060001904600a1181151516611a3a57600a6127109102049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212207d5b2b41ca97bb439e1a4fa9c22fd4a4cf3b74f3c0caf130dc6d2b3f579c2c7b64736f6c634300080f0033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461189157508163095ea7b3146118675781630f89b77d1461183e57816318160ddd1461181f57816323b872dd146117555781632dd57bb01461170c578163313ce567146116f057816339509351146116a057816344abf1a9146115645781635b2725ed146115485781635c975abb146115215781635cffe9de14611120578163613255ab146110815781636f8a6e431461105857816370a0823114611021578163715018a614610fbf57816378e9792514610fa05781638da5cb5b14610f775781638e15f47314610f5057816395d89b4114610e6a578163a035b1fe14610e4b578163a457c2d714610da3578163a8a2b43114610d12578163a9059cbb14610ce1578163ad35e1dc14610c98578163b1fead0b14610c67578163bf59705914610bb3578163c57981b514610b97578163ca6c6a4c146109c1578163d9d98ce414610998578163da81afae146105f1578163dd5625c314610393578163dd62ed3e1461034a578163e3356ccf14610301578163e8adbf2f146102d8578163f2fde38b1461020b57508063f8077fae146101ed5763fc51843c146101c757600080fd5b346101e957816003193601126101e9576020906101e2611d6d565b9051908152f35b5080fd5b50346101e957816003193601126101e957602090600a549051908152f35b9050346102d45760203660031901126102d4576102266119c5565b6005546001600160a01b03808216949192610242338714611f1e565b169283156102835750829051937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08686a36001600160a01b03191617600555f35b6020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101e957816003193601126101e95760075490516001600160a01b039091168152602090f35b5050346101e95760203660031901126101e95761031c6119c5565b6005546001600160a01b0391906103369083163314611f1e565b1660018060a01b0319600854161760085551f35b5050346101e957806003193601126101e957806020926103686119c5565b6103706119e0565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b9050346102d457826003193601126102d4576006548251639e3079cb60e01b81526001600160a01b03918216929091602080848481885afa9384156105e75787946105b4575b508551916370a0823160e01b8352308484015260249582848881857f0000000000000000000000000000000000000000000000000000000000000000165afa9384156105aa578994610577575b50885b86811061043557898951f35b8989516315895f4760e31b8152828882015281818b81875afa801561056d5785918391610546575b50168a51631341449360e21b815286818a81855afa90811561053c57839161050f575b50878111610494575b505050600101610429565b6104a6906104a189611f57565b611f9c565b90803b156102d4578a83928d519485938492632440f3e960e01b84528d8401525af18015610505576104db575b808b91610489565b67ffffffffffffffff81116104f357895260016104d3565b634e487b7160e01b8b5260418752888bfd5b8a513d8d823e3d90fd5b90508681813d8311610535575b61052681836119f6565b810103126102d4575138610480565b503d61051c565b8c513d85823e3d90fd5b61056291503d8085833e61055a81836119f6565b810190611cc2565b50505090503861045d565b8b513d84823e3d90fd5b9093508281813d83116105a3575b61058f81836119f6565b8101031261059f57519238610426565b8880fd5b503d610585565b88513d8b823e3d90fd5b9080945081813d83116105e0575b6105cc81836119f6565b810103126105dc575192386103d9565b8680fd5b503d6105c2565b86513d89823e3d90fd5b919050346102d457806003193601126102d457813561060e6119e0565b60ff60055460a01c1661096c576007546001600160a01b03959086163314158061090e575b6108fe5760025483116108ee576106486120ad565b610650611fbc565b64e8d4a51000610662600b5485611f89565b0494867f000000000000000000000000000000000000000000000000000000000000000016908551976370a0823160e01b895230828a01526020988981602481875afa9081156108e45785916108b3575b506106c5896106c0611d6d565b611a2e565b116108a4578060075416331460001461089e57845b1680156108515780845283895286842054868110610803579285858b948185600080516020612cd9833981519152888f988f8f869d6107609f938294528785520381872055816002540360025551908152a38a5163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290958693849291839160400190565b03925af19081156107f8575085927f0c54fc223ffd1a8f36652b5e83db4fff50f5ae151b11ceb56d5499b9f6e1fa1894926107c2926107cb575b50855192835260208301939093526001600160a01b0390921660408201529081906060820190565b0390a151908152f35b6107ea90893d8b116107f1575b6107e281836119f6565b810190611d55565b503861079a565b503d6107d8565b8551903d90823e3d90fd5b875162461bcd60e51b81528084018b9052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b865162461bcd60e51b81528083018a9052602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b336106da565b50855163ed9d9d3360e01b8152fd5b90508981813d83116108dd575b6108ca81836119f6565b810103126108d95751386106b3565b8480fd5b503d6108c0565b88513d87823e3d90fd5b5050505163d6e1271b60e01b8152fd5b5050505163acfbdf9160e01b8152fd5b50602460208760065416865192838092633a31bb7760e11b8252338b8301525afa908115610962578291610944575b5015610633565b61095c915060203d81116107f1576107e281836119f6565b3861093d565b85513d84823e3d90fd5b825162461bcd60e51b8152602081860152600660248201526514185d5cd95960d21b6044820152606490fd5b5050346101e957806003193601126101e9576020906101e26109b86119c5565b60243590612ca8565b8383346101e957806003193601126101e95782356109dd6119e0565b6006548351633a31bb7760e11b8152338782015260209392916001600160a01b03919085908290602490829086165afa9081156105e7578791610b7a575b5015610b6a577f0000000000000000000000000000000000000000000000000000000000000000169084516370a0823160e01b815230888201528481602481865afa9081156105e7578791610b3d575b508311610b2d57845163a9059cbb60e01b81526001600160a01b039091169681019687526020870183905294959394938391859182908990829060400103925af1918215610b23577f9c125d89aedad0c6838010bd5646efbf0d93daa2dcc78e414b4daee16abb6c7d93610aff93610b05575b5050610ae8611fbc565b835133815260208101919091529081906040820190565b0390a151f35b81610b1b92903d106107f1576107e281836119f6565b508580610ade565b84513d87823e3d90fd5b8451633ced52eb60e11b81528790fd5b90508481813d8311610b63575b610b5481836119f6565b810103126105dc575188610a6b565b503d610b4a565b84516379b0b85160e01b81528790fd5b610b919150853d87116107f1576107e281836119f6565b88610a1b565b5050346101e957816003193601126101e95760209051600a8152f35b9050346102d45760603660031901126102d45760075460243591906001600160a01b03163303610c5957610bfb90610be96120ad565b610bf1611fbc565b6044359035611f9c565b610c0442612886565b509185925b848410610c1557868651f35b828752600c93602085815287892090838a5252868820610c36848254611a2e565b90556001809201948511610c4c575b0192610c09565b9350809201918093610c45565b82516311bee39d60e31b8152fd5b9050346102d457816003193601126102d4576020928291358152600c84528181206024358252845220549051908152f35b5050346101e95760203660031901126101e957610cb36119c5565b6005546001600160a01b039190610ccd9083163314611f1e565b1660018060a01b0319600654161760065551f35b5050346101e957806003193601126101e957602090610d0b610d016119c5565b6024359033611a50565b5160018152f35b9050346102d45760203660031901126102d4578035801515809103610d9f57600554916001600160a01b038084163314159081610d8f575b81610d80575b50610d72575060ff60a01b1990911660a09190911b60ff60a01b161760055551f35b8351631b6a6b5b60e11b8152fd5b90506006541633141538610d50565b8091506008541633141590610d4a565b8380fd5b90508234610e485782600319360112610e4857610dbe6119c5565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610df757602085610d0b8585038733611bac565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b5050346101e957816003193601126101e957602090600b549051908152f35b8383346101e957816003193601126101e957805191809380549160019083821c92828516948515610f46575b6020958686108114610f3357858952908115610f0f5750600114610ed4575b610ed08787610ec6828c03836119f6565b5191829182611999565b0390f35b9080949750528583205b828410610efc5750505082610ed094610ec692820101948680610eb5565b8054868501880152928601928101610ede565b60ff19168887015250505050151560051b8301019250610ec682610ed08680610eb5565b634e487b7160e01b845260228352602484fd5b93607f1693610e96565b5050346101e957816003193601126101e957602090610f6d611fbc565b600b549051908152f35b5050346101e957816003193601126101e95760055490516001600160a01b039091168152602090f35b5050346101e957816003193601126101e9576020906009549051908152f35b5050346101e957816003193601126101e9576005546001600160a01b038116918390610fec338514611f1e565b51927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600555f35b5050346101e95760203660031901126101e95760209181906001600160a01b036110496119c5565b16815280845220549051908152f35b5050346101e957816003193601126101e95760065490516001600160a01b039091168152602090f35b8383346101e957602092836003193601126102d4576110b260106001600160a01b036110ab6119c5565b1614612c6e565b8151906370a0823160e01b82523090820152838160248160105afa9283156111155780936110e3575b505051908152f35b909192508382813d831161110e575b6110fc81836119f6565b81010312610e485750519083806110db565b503d6110f2565b8251903d90823e3d90fd5b828434610e48576080366003190112610e48576001600160a01b0392803584811691908290036102d4576111526119e0565b604435916064359667ffffffffffffffff908189116105dc573660238a0112156105dc57888301359182116105dc57366024838b0101116105dc5784156114f05761119d8585612ca8565b9316958751916370a0823160e01b90818452308585015260209a8b856024818d5afa9485156114e657888b8b8f938f8b918a9b6114a5575b505163a9059cbb60e01b81526001600160a01b03909216908201908152602081019390935292918391908290899082906040015b03925af1801561149b5787848f94958f8f95976024918f9960c49761147e575b505198899788966323e30c8b60e01b885233908801528387015260448601528d606486015260a060848601528260a486015201848401378181018301889052601f01601f19168101030181868c5af180156113e8578390611431575b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99150036113f2576112b78587611a2e565b8951906323b872dd60e01b8252888683015230602483015260448201528a81606481868d5af180156113e8576113cb575b508851908152308482015289816024818b5afa9182156113c057908186929361138c575b50506113189192611a2e565b1161135357508451918252858201527f2640247c2a780a1283695dd939b212be6c2e62a7182ef366efa28aa696f23d4c843092a45160018152f35b855162461bcd60e51b815290810187905260136024820152724e6f7420656e6f75676820706179206261636b60681b6044820152606490fd5b915091508982813d83116113b9575b6113a581836119f6565b81010312610e48575051836113188b61130c565b503d61139b565b8951903d90823e3d90fd5b6113e1908b3d8d116107f1576107e281836119f6565b508a6112e8565b8a513d85823e3d90fd5b885162461bcd60e51b81528085018b9052601960248201527812515490cccc4d4d8e8810d85b1b189858dac819985a5b1959603a1b6044820152606490fd5b508a81813d8311611477575b61144781836119f6565b810103126102d4577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99051611285565b503d61143d565b611494908a3d8c116107f1576107e281836119f6565b5038611229565b8c513d87823e3d90fd5b969798999a50505050505081813d83116114df575b6114c481836119f6565b810103126108d95751939291908b888b8b898f6112096111d5565b503d6114ba565b8b513d86823e3d90fd5b875162461bcd60e51b8152602081850152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b5050346101e957816003193601126101e95760209060ff60055460a01c1690519015158152f35b5050346101e957816003193601126101e9576020905160108152f35b8383346101e957806003193601126101e9578235926115816119e0565b60075490946001600160a01b0392909183163303611692576115a16120ad565b6115a9611fbc565b6115be6115b583611f57565b600b5490611f9c565b92861690811561164f57507fe198de8e85cdfd7f4510617c4cd12de7263b31eef6cb83924c620d8a080144a9939495610aff916115fd85600254611a2e565b6002558088528760205286882085815401905587600080516020612cd983398151915260208951888152a3855192835260208301939093526001600160a01b0390921660408201529081906060820190565b606490602086519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b83516311bee39d60e31b8152fd5b5050346101e957806003193601126101e957610d0b6020926116e96116c36119c5565b338352600186528483206001600160a01b03821684528652918490205460243590611a2e565b9033611bac565b5050346101e957816003193601126101e9576020905160068152f35b5050346101e95760203660031901126101e9576117276119c5565b6005546001600160a01b0391906117419083163314611f1e565b1660018060a01b0319600754161760075551f35b839150346101e95760603660031901126101e9576117716119c5565b6117796119e0565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036117b3575b602086610d0b878787611a50565b8482106117dc57509183916117d160209695610d0b95033383611bac565b9193948193506117a5565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346101e957816003193601126101e9576020906002549051908152f35b5050346101e957816003193601126101e95760085490516001600160a01b039091168152602090f35b5050346101e957806003193601126101e957602090610d0b6118876119c5565b6024359033611bac565b92915034610d9f5783600319360112610d9f57600354600181811c918690828116801561195a575b6020958686108214611947575084885290811561192557506001146118ea575b610ed08686610ec6828b03836119f6565b929550600383528583205b8284106119125750505082610ed094610ec69282010194386118d9565b80548685018801529286019281016118f5565b60ff191687860152505050151560051b8301019250610ec682610ed0386118d9565b634e487b7160e01b845260229052602483fd5b93607f16936118b9565b918091926000905b82821061198457501161197d575050565b6000910152565b9150806020918301518186015201829161196c565b604091602082526119b98151809281602086015260208686019101611964565b601f01601f1916010190565b600435906001600160a01b03821682036119db57565b600080fd5b602435906001600160a01b03821682036119db57565b90601f8019910116810190811067ffffffffffffffff821117611a1857604052565b634e487b7160e01b600052604160045260246000fd5b81198111611a3a570190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215611b595716918215611b0857600082815280602052604081205491808310611ab45760408282600080516020612cd9833981519152958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215611c5d5716918215611c0d5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b51906001600160a01b03821682036119db57565b9060a0828203126119db57815167ffffffffffffffff908181116119db5783019082601f830112156119db578151908111611a185760405192611d0f601f8301601f1916602001856119f6565b818452602082840101116119db57611d2d9160208085019101611964565b91611d3a60208301611cae565b91611d4760408201611cae565b916080606083015192015190565b908160209103126119db575180151581036119db5790565b60065460408051639e3079cb60e01b81526000939290919060049085906020906001600160a01b039081169082878681855afa968715611f14578497611ee5575b50835b878110611dc2575050505050505050565b86516315895f4760e31b815286810182905260249086818381885afa908115611ebc57849187918991611ec6575b508a51634124974560e01b8152921689830181905292829081885afa908115611ebc578791611e9f575b50611e29575b50600101611db1565b848791899c939c5192838092636835185f60e11b82525afa908115611e95578691611e63575b50611e5c90600192611a2e565b9990611e20565b90508481813d8311611e8e575b611e7a81836119f6565b81010312611e8a57516001611e4f565b8580fd5b503d611e70565b88513d88823e3d90fd5b611eb69150863d88116107f1576107e281836119f6565b38611e1a565b89513d89823e3d90fd5b611eda91503d808b833e61055a81836119f6565b505050905038611df0565b9096508281813d8311611f0d575b611efd81836119f6565b81010312610d9f57519538611dae565b503d611ef3565b86513d86823e3d90fd5b15611f2557565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b64e8d4a51000908060001904821181151516611a3a570290565b62015180908060001904821181151516611a3a570290565b8060001904821181151516611a3a570290565b8115611fa6570490565b634e487b7160e01b600052601260045260246000fd5b6002548015612096576040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561208a57600091612057575b5061204a7f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe0926104a1602093611f57565b80600b55604051908152a1565b906020823d8211612082575b81612070602093836119f6565b81010312610e4857505161204a612019565b3d9150612063565b6040513d6000823e3d90fd5b5064e8d4a51000600b55565b818110611a3a570390565b600a8054906120d96120be83612886565b94919390939084916120cf42612886565b50959096866120a2565b92600097841560001461217d575050505050917fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f6939160209382600052600c8552604060002082600052855260406000205461213d575b5050505b604051908152a1565b9161216f916121506121759594426120a2565b91600052600c8652604060002090600052855260406000205490611f89565b90611a2e565b388080612130565b929395509550928697969260011986119560018097818301915b6121d0575b505050505050505050509060207fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f691612134565b80611a3a578187101561261a578615806125f7575b1561236b576107b288106119db57617d4b600160ff1b0186128916611a3a578961220e89612694565b89600480938193600c958691826122248561261f565b0561222e916126f2565b6122379061271d565b612248919005617d4a198e016126f2565b8161225284612637565b8161225c8661261f565b0561226690612781565b61226f9161266b565b612278906127e6565b05612282916126f2565b9361228c906126c3565b916122969061261f565b056122a0916126f2565b606490056122ad90612836565b056122b79161266b565b6122c09061264f565b6122c990611f71565b906201437019821161235657610dd4196201437083011161235657603b196201514483011161235657506123318c9d9e61216f8c8e9f958f966123128d6201517f8a99016120a2565b9260005260209182526040918260002091600052526000205490611f89565b9c5b0197600c8911612349575b0196999b9a9b612197565b980197899750879061233e565b601190634e487b7160e01b6000525260246000fd5b828714806125d4575b15612472576107b288106119db576123a461238e89612694565b8b6123b06123ab6004938493600c96879161261f565b05906126f2565b61271d565b05617d4a600160ff1b0181128c1661245d578c9d9e61216f8c8e9f958f9661231261245161244c6124478b9a61241e6124579b8861241261240d8a612407846124016123fb84612637565b9361261f565b05612781565b9061266b565b6127e6565b0590617d4919016126f2565b90612440606461243a6124308c6126c3565b8b6123a48c61261f565b05612836565b059061266b565b61264f565b611f71565b426120a2565b9c612333565b601182634e487b7160e01b6000525260246000fd5b60009b999a9b898c1480156125ca575b80156125c0575b80156125b6575b80156125ac575b80156125a3575b8015612599575b156125425750601f5b88600052600c908c60208381526040918260002090600052815281600020546124e0575b505050508880809b9c612333565b9091929b9c8d7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab851116611a3a5761216f8f948f9e948f968f95889761253b97600052815282600020916000525260002054906201518002611f89565b9b386124d2565b60028c146125525750601e6124ae565b6003891615908161258c575b811561257f575b50156125765760ff601d5b166124ae565b60ff601c612570565b6101908a06159150612565565b60648a061515915061255e565b50600c8c146124a5565b50848c1461249e565b5060088c14612497565b5060078c14612490565b5060058c14612489565b5060038c14612482565b50876000526020600c815260409081600020908c60005252600020541515612374565b50876000526020600c815260409081600020908c600052526000205415156121e5565b61219c565b600e600160ff1b018112600116611a3a57600d190190565b6002600160ff1b018112600116611a3a576001190190565b62253d8c600160ff1b018112600116611a3a5762253d8b190190565b600082128015600160ff1b8401831216611a3a576001600160ff1b038301821316611a3a570390565b6112c0906000811280156001600160ff1b03839003841316611a3a57600160ff1b829003831216611a3a570190565b611324906000811280156001600160ff1b03839003841316611a3a57600160ff1b829003831216611a3a570190565b6000811280156001600160ff1b03839003841316611a3a57600160ff1b829003831216611a3a570190565b6105b560008083136001600160ff1b0384900483111660011661276d5760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa88412828512161661276d57500290565b634e487b7160e01b81526011600452602490fd5b600060017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8311828413161661276d5760017ff5555555555555555555555555555555555555555555555555555555555555568312828412161661276d5750600c0290565b61016f60008083136001600160ff1b0384900483111660011661276d5760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318412828512161661276d57500290565b60008082136001600160ff1b038390046003111660011661276d5760017fd5555555555555555555555555555555555555555555555555555555555555568312828412161661276d575060030290565b6001600160ff1b039060009062010bd990620151809004828112818503811581851316612c5a57600160ff1b938385039283821216612c465785908401129162010bd819908162253d8c93018313841516612c3257011316612c1e576226496501916001936004918585830484118287131616612c0b57808512600760fd1b8612168616612c0b5762023ab194858160021b05958787850482118489131616612be557877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce288128489121616612be5578602828112818503600313811516612bf85781870360031216612be557908460036129839301059061266b565b928184128484038813811516612b9957848603881216612b8657868401610fa08882860482118584131616612bac57887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616612bac576129f59162164b0991020594826124408761271d565b828112818503601f13811516612bac57818703601f1216612b9957601f019680888504605011848a131616612b9957807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616612b995761098f9788816050020590828287048b118684131616612bd25784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616612bbf5790605083612aaa9302059061266b565b98600b820597828703600213821516612bbf5782900360021216612bac5781878604600c118589131616612bac57817ff55555555555555555555555555555555555555555555555555555555555555688128589121616612bac57612b1690600288600c02910161266b565b966031600160ff1b0181128216612bac578190603019018095046064118486131616612b99577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616612b86575050612b809291612b7b916064026126f2565b6126f2565b91909192565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b15612c7557565b60405162461bcd60e51b815260206004820152600b60248201526a1bdb9b1e481cda1a595b1960aa1b6044820152606490fd5b612cbd906001600160a01b0316601014612c6e565b8060001904600a1181151516611a3a57600a6127109102049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212207d5b2b41ca97bb439e1a4fa9c22fd4a4cf3b74f3c0caf130dc6d2b3f579c2c7b64736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getTotalCovered()": {
        "returns": {
          "covered": "Covered amount"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseProtectionPool(bool)": {
        "params": {
          "_paused": "True for pause, false for unpause"
        }
      },
      "providedLiquidity(uint256,address)": {
        "params": {
          "_amount": "Liquidity amount (shield)",
          "_provider": "Provider address"
        }
      },
      "removedLiquidity(uint256,address)": {
        "params": {
          "_amount": "Liquidity to remove (LP token amount)",
          "_provider": "Provider address"
        }
      },
      "removedLiquidityWhenClaimed(uint256,address)": {
        "params": {
          "_amount": "Amount of liquidity to remove",
          "_to": "Address to transfer the liquidity to"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateWhenBuy(uint256,uint256,uint256)": {
        "params": {
          "_length": "Length in month",
          "_premium": "Premium of the cover to be distributed to Protection Pool",
          "_timestampLength": "Length in seconds"
        }
      }
    },
    "title": "Protection Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Updates and retrieves latest price to provide liquidity to Protection Pool"
      },
      "getTotalCovered()": {
        "notice": "Get total active cover amount of all pools         Only calculate those \"already dynamic\" pools"
      },
      "pauseProtectionPool(bool)": {
        "notice": "Set paused state of the protection pool"
      },
      "providedLiquidity(uint256,address)": {
        "notice": "Finish providing liquidity         Only callable through policyCenter"
      },
      "removedLiquidity(uint256,address)": {
        "notice": "Finish removing liquidity         Only callable through policyCenter"
      },
      "removedLiquidityWhenClaimed(uint256,address)": {
        "notice": "Removes liquidity when a claim is made"
      },
      "updateIndexCut()": {
        "notice": "Update index cut when claim happened"
      },
      "updateWhenBuy(uint256,uint256,uint256)": {
        "notice": "Update when new cover is bought"
      }
    },
    "notice": "This is the protection pool contract for Degis Protocol Protection         Users can provide liquidity to protection pool and get PRO-LP token         If the priority pool is unable to fulfil the cover amount,         Protection Pool will be able to provide the remaining part",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8925,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8931,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8933,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8935,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 8937,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 21429,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 21526,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_paused",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 19649,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 19651,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "policyCenter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 19653,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "incidentReport",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 18788,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "startTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 18790,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 18792,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "price",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 18798,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "rewardSpeed",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}