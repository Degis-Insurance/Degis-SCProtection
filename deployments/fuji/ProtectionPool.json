{
  "address": "0x39c0156f420D3Cb8881EEEA9cc40B9065a4ACFB5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__ExceededTotalSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__NotAllowedToPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__NotEnoughLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__OnlyPolicyCenter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__OnlyPriorityPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtectionPool__OnlyPriorityPoolOrPolicyCenter",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stablecoin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "FlashLoanBorrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shieldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shieldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemovedWhenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "name": "RewardUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHIELD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deg",
      "outputs": [
        {
          "internalType": "contract IDegisToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "flashFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashBorrower",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCovered",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "covered",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incidentReport",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "maxFlashLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pauseProtectionPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumRewardPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "providedLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "removedLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shieldToTransfer",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "removedLiquidityWhenClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardSpeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "name": "setIncidentReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        }
      ],
      "name": "setPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumRewardPool",
          "type": "address"
        }
      ],
      "name": "setPremiumRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shield",
      "outputs": [
        {
          "internalType": "contract IShield",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateIndexCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_premium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestampLength",
          "type": "uint256"
        }
      ],
      "name": "updateWhenBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDeg",
      "outputs": [
        {
          "internalType": "contract IVeDEG",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa40a22445a29926db73f86363c730caf7bcccb6e3007b8922ebeae5e38bdf389",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x39c0156f420D3Cb8881EEEA9cc40B9065a4ACFB5",
    "transactionIndex": 0,
    "gasUsed": "2766219",
    "logsBloom": "0x
    "blockHash": "0xca18201257c8ae130e9f0cf98e97d132f3399638ca1195c77736ec71e5b8d10f",
    "transactionHash": "0xa40a22445a29926db73f86363c730caf7bcccb6e3007b8922ebeae5e38bdf389",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12972134,
        "transactionHash": "0xa40a22445a29926db73f86363c730caf7bcccb6e3007b8922ebeae5e38bdf389",
        "address": "0x39c0156f420D3Cb8881EEEA9cc40B9065a4ACFB5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xca18201257c8ae130e9f0cf98e97d132f3399638ca1195c77736ec71e5b8d10f"
      }
    ],
    "blockNumber": 12972134,
    "cumulativeGasUsed": "2766219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Efd5a9269a328b1bf8873dC6d9EB5fF321aba09",
    "0xF98f0dE58c9a78B8e42def3cc49f02C2B35b81C9",
    "0x2afE704De753dDD32DC39f41C5F9D5df4bFc71F0"
  ],
  "numDeployments": 1,
  "solcInputHash": "16d356017fcf7ccebd1e8c716a50ed04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProtectionPool__ExceededTotalSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__NotAllowedToPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__NotEnoughLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__OnlyPolicyCenter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__OnlyPriorityPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtectionPool__OnlyPriorityPoolOrPolicyCenter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stablecoin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FlashLoanBorrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemovedWhenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIELD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deg\",\"outputs\":[{\"internalType\":\"contract IDegisToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCovered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"covered\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incidentReport\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseProtectionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumRewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"providedLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"removedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shieldToTransfer\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"removedLiquidityWhenClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"name\":\"setIncidentReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"}],\"name\":\"setPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumRewardPool\",\"type\":\"address\"}],\"name\":\"setPremiumRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shield\",\"outputs\":[{\"internalType\":\"contract IShield\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateIndexCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestampLength\",\"type\":\"uint256\"}],\"name\":\"updateWhenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDeg\",\"outputs\":[{\"internalType\":\"contract IVeDEG\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getTotalCovered()\":{\"returns\":{\"covered\":\"Covered amount\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseProtectionPool(bool)\":{\"params\":{\"_paused\":\"True for pause, false for unpause\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"providedLiquidity(uint256,address)\":{\"params\":{\"_amount\":\"Liquidity amount (shield)\",\"_provider\":\"Provider address\"}},\"removedLiquidity(uint256,address)\":{\"params\":{\"_amount\":\"Liquidity to remove (LP token amount)\",\"_provider\":\"Provider address\"}},\"removedLiquidityWhenClaimed(uint256,address)\":{\"params\":{\"_amount\":\"Amount of liquidity to remove\",\"_to\":\"Address to transfer the liquidity to\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateWhenBuy(uint256,uint256,uint256)\":{\"params\":{\"_length\":\"Length in month\",\"_premium\":\"Premium of the cover to be distributed to Protection Pool\",\"_timestampLength\":\"Length in seconds\"}}},\"title\":\"Protection Pool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLatestPrice()\":{\"notice\":\"Updates and retrieves latest price to provide liquidity to Protection Pool\"},\"getTotalCovered()\":{\"notice\":\"Get total active cover amount of all pools         Only calculate those \\\"already dynamic\\\" pools\"},\"pauseProtectionPool(bool)\":{\"notice\":\"Set paused state of the protection pool\"},\"providedLiquidity(uint256,address)\":{\"notice\":\"Finish providing liquidity         Only callable through policyCenter\"},\"removedLiquidity(uint256,address)\":{\"notice\":\"Finish removing liquidity         Only callable through policyCenter\"},\"removedLiquidityWhenClaimed(uint256,address)\":{\"notice\":\"Removes liquidity when a claim is made\"},\"updateIndexCut()\":{\"notice\":\"Update index cut when claim happened\"},\"updateWhenBuy(uint256,uint256,uint256)\":{\"notice\":\"Update when new cover is bought\"}},\"notice\":\"This is the protection pool contract for Degis Protocol Protection         Users can provide liquidity to protection pool and get PRO-LP token         If the priority pool is unable to fulfil the cover amount,         Protection Pool will be able to provide the remaining part\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/protectionPool/ProtectionPool.sol\":\"ProtectionPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363631373833343338343231\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC3156FlashBorrower.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"IERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x294520bb88c710bb1d3c21285f9b531acb5cb9950d77eaeef5598c7328afedb4\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC3156FlashLender.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC3156 FlashLender, as defined in\\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lended.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0d9159aa6c1a0d8006fb152b0aee46a0f9b8938575ede1a0d7e186b3bc79c8d7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IShield.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\n\\nabstract contract ExternalTokenDependencies {\\n    uint256 public constant SCALE = 1e12;\\n\\n    IDegisToken public immutable deg;\\n    IVeDEG public immutable veDeg;\\n    IShield public immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n        shield = IShield(_shield);\\n    }\\n}\\n\",\"keccak256\":\"0x51e96226565de825f0cf9fd430e2f169b2a92415977c8506f217495add19ced5\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x7fc061fdc39f52163a849ab85a3fc59b148e16f6eeb72dc6a3e7dd393d3ab5b3\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPolicyCenter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPolicyCenter {\\n    event CoverageBought(\\n        uint256 paid,\\n        address buyer,\\n        uint256 poolId,\\n        uint256 length,\\n        uint256 amount\\n    );\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event Payout(uint256 _amount, address _address);\\n    event Reward(uint256 _amount, address _address);\\n\\n    function approvePoolToken(address _token) external;\\n\\n    function buyCover(\\n        uint256 _poolId,\\n        uint256 _coverAmount,\\n        uint256 _length,\\n        uint256 _maxPayment\\n    ) external returns (address);\\n\\n    function claimPayout(uint256 _poolId) external;\\n\\n    function coverages(uint256, address)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 buyDate,\\n            uint256 length\\n        );\\n\\n    function deg() external view returns (address);\\n\\n    function exchange() external view returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function rewardsByPoolId(uint256) external view returns (uint256);\\n\\n    function getPoolInfo(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getPremiumSplits() external view returns (uint256, uint256);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function insurancePools(uint256) external view returns (address);\\n\\n    function liquidityByPoolId(uint256) external view returns (uint256);\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function premiumSplits(uint256) external view returns (uint256);\\n\\n    function provideLiquidity(uint256 _amount) external;\\n\\n    function protectionPool() external view returns (address);\\n\\n    function removeLiquidity(uint256 _amount) external;\\n\\n    function renounceOwnership() external;\\n\\n    function rewardTreasuryToReporter(address _reporter) external;\\n\\n    function setExchange(address _exchange) external;\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setWeightedFarmingPool(address _weightedFarmingPool) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setPriceGetter(address _priceGetter) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setPremiumSplit(uint256 _insurance, uint256 _reinsurance) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function storeCoverTokenInformation(address _coverToken, uint256 _poolId)\\n        external;\\n\\n    function shield() external view returns (address);\\n\\n    function storePoolInformation(\\n        address _pool,\\n        address _token,\\n        uint256 _poolId\\n    ) external;\\n\\n    function tokenByPoolId(uint256) external view returns (address);\\n\\n    function totalRewardsByPoolId(uint256) external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function treasury() external view returns (uint256);\\n\\n    function veDeg() external view returns (address);\\n}\\n\",\"keccak256\":\"0xed2fc0db73fa8e08294d4c3e097de2b9ff04e5972036f86b0c8988ba8b687d44\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPremiumRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPremiumRewardPool {\\n    function distributeShield(uint256 _amount) external;\\n\\n    function distributeToken(address _token, uint256 _amount) external;\\n\\n    function register(address _pool, address _token) external;\\n}\\n\",\"keccak256\":\"0xbcf138972a0a7e45b6db742d511465807a1471229a0a35bdde83047289360b67\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external returns (address);\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x75384fa2ca1a32c72b651991ce9571048caab38ec8bf356405da47898c143265\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deregisterAddress(address _tokenAddress) external;\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setPremiumRewardPool(address _premiumRewardPool) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setWeightedFarmingPool(address _weightedFarmingPool) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n}\\n\",\"keccak256\":\"0xe9efdf32d2b7ef158d8f4a629165c01fe2e5204c168d74c2a0faca1694432bcf\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IShield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IShield is IERC20 {\\n    function deposit(\\n        uint256 _type,\\n        address _stablecoin,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2b2fb2512dbbdb45428670d077c428692d81b9786b3c762bb313fc118f44ac40\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is IERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x308d0b62cb1afd51be98e100ec1a8cefcb1fe9d50e6fd49564ec3a97e7f40841\",\"license\":\"MIT\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (uint256 endTimestamp, uint256 year, uint256 month)\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (uint256 endTimestamp, uint256 year, uint256 month)\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp,_monthsToAdd);\\n\\n        return  _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (uint256 endTimestamp, uint256 year, uint256 month)\\n    {\\n        // Get the year and month from the date\\n        ( year,  month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\",\"keccak256\":\"0x027b7b9788d561dbd941a53dc43439fbab5a09cdf4c348c64a61de1c6b4f75cf\",\"license\":\"MIT\"},\"src/pools/protectionPool/ProtectionPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport {ERC20} from \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./ProtectionPoolDependencies.sol\\\";\\nimport \\\"./ProtectionPoolEventError.sol\\\";\\nimport \\\"../../interfaces/ExternalTokenDependencies.sol\\\";\\n\\nimport \\\"../../util/OwnableWithoutContext.sol\\\";\\nimport \\\"../../util/PausableWithoutContext.sol\\\";\\nimport \\\"../../util/FlashLoanPool.sol\\\";\\n\\nimport \\\"../../libraries/DateTime.sol\\\";\\n\\n/**\\n * @title Protection Pool\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the protection pool contract for Degis Protocol Protection\\n *\\n *         Users can provide liquidity to protection pool and get PRO-LP token\\n *\\n *         If the priority pool is unable to fulfil the cover amount,\\n *         Protection Pool will be able to provide the remaining part\\n */\\ncontract ProtectionPool is\\n    ProtectionPoolEventError,\\n    ERC20,\\n    FlashLoanPool,\\n    OwnableWithoutContext,\\n    PausableWithoutContext,\\n    ExternalTokenDependencies,\\n    ProtectionPoolDependencies\\n{\\n    using DateTimeLibrary for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Pool start time\\n    uint256 public startTime;\\n\\n    // Last pool reward distribution\\n    uint256 public lastRewardTimestamp;\\n\\n    // PRO_LP token price\\n    uint256 public price;\\n\\n    // Year => Month => Speed\\n    mapping(uint256 => mapping(uint256 => uint256)) public rewardSpeed;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    )\\n        ERC20(\\\"ProtectionPool\\\", \\\"PRO-LP\\\")\\n        ExternalTokenDependencies(_deg, _veDeg, _shield)\\n        OwnableWithoutContext(msg.sender)\\n    {\\n        // Register time that pool was deployed\\n        startTime = block.timestamp;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    modifier onlyPolicyCenter() {\\n        if (msg.sender != policyCenter)\\n            revert ProtectionPool__OnlyPolicyCenter();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get total active cover amount of all pools\\n     *         Only calculate those \\\"already dynamic\\\" pools\\n     *\\n     * @return covered Covered amount\\n     */\\n    function getTotalCovered() public view returns (uint256 covered) {\\n        IPriorityPoolFactory factory = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        );\\n\\n        uint256 poolAmount = factory.poolCounter();\\n\\n        for (uint256 i; i < poolAmount; ) {\\n            (, address poolAddress, , , ) = factory.pools(i);\\n\\n            if (factory.dynamic(poolAddress)) {\\n                covered += IPriorityPool(poolAddress).activeCovered();\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setIncidentReport(address _incidentReport) external onlyOwner {\\n        _setIncidentReport(_incidentReport);\\n    }\\n\\n    function setPolicyCenter(address _policyCenter) external onlyOwner {\\n        _setPolicyCenter(_policyCenter);\\n    }\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    function setPremiumRewardPool(address _premiumRewardPool)\\n        external\\n        onlyOwner\\n    {\\n        _setPremiumRewardPool(_premiumRewardPool);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update index cut when claim happened\\n     */\\n    function updateIndexCut() public {\\n        IPriorityPoolFactory factory = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        );\\n\\n        uint256 poolAmount = factory.poolCounter();\\n\\n        uint256 currentReserved = IShield(shield).balanceOf(address(this));\\n\\n        uint256 indexToCut;\\n        uint256 minRequirement;\\n\\n        for (uint256 i; i < poolAmount; ) {\\n            (, address poolAddress, , , ) = factory.pools(i);\\n\\n            minRequirement = IPriorityPool(poolAddress).minAssetRequirement();\\n\\n            if (minRequirement > currentReserved) {\\n                indexToCut = (currentReserved * SCALE) / minRequirement;\\n                IPriorityPool(poolAddress).setCoverIndex(indexToCut);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates and retrieves latest price to provide liquidity to Protection Pool\\n     */\\n    function getLatestPrice() external returns (uint256) {\\n        _updatePrice();\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Finish providing liquidity\\n     *         Only callable through policyCenter\\n     *\\n     * @param _amount   Liquidity amount (shield)\\n     * @param _provider Provider address\\n     */\\n    function providedLiquidity(uint256 _amount, address _provider)\\n        external\\n        onlyPolicyCenter\\n    {\\n        _updateReward();\\n        _updatePrice();\\n\\n        // Mint PRO_LP tokens to the user\\n        uint256 amountToMint = (_amount * SCALE) / price;\\n        _mint(_provider, amountToMint);\\n        emit LiquidityProvided(_amount, amountToMint, _provider);\\n    }\\n\\n    /**\\n     * @notice Finish removing liquidity\\n     *         Only callable through policyCenter\\n     *\\n     * @param _amount   Liquidity to remove (LP token amount)\\n     * @param _provider Provider address\\n     */\\n    function removedLiquidity(uint256 _amount, address _provider)\\n        external\\n        whenNotPaused\\n        returns (uint256 shieldToTransfer)\\n    {\\n        if (\\n            msg.sender != policyCenter &&\\n            !IPriorityPoolFactory(priorityPoolFactory).poolRegistered(\\n                msg.sender\\n            )\\n        ) revert ProtectionPool__OnlyPriorityPoolOrPolicyCenter();\\n\\n        if (_amount > totalSupply())\\n            revert ProtectionPool__ExceededTotalSupply();\\n\\n        _updateReward();\\n        _updatePrice();\\n\\n        // Burn PRO_LP tokens to the user\\n        shieldToTransfer = (_amount * price) / SCALE;\\n        if (\\n            IERC20(shield).balanceOf(address(this)) <\\n            getTotalCovered() + shieldToTransfer\\n        ) revert ProtectionPool__NotEnoughLiquidity();\\n\\n        _burn(_provider, _amount);\\n        IERC20(shield).transfer(_provider, shieldToTransfer);\\n\\n        emit LiquidityRemoved(_amount, shieldToTransfer, _provider);\\n    }\\n\\n    /**\\n     * @notice Removes liquidity when a claim is made\\n     * @param _amount        Amount of liquidity to remove\\n     * @param _to            Address to transfer the liquidity to\\n     */\\n    function removedLiquidityWhenClaimed(uint256 _amount, address _to)\\n        external\\n    {\\n        if (\\n            !IPriorityPoolFactory(priorityPoolFactory).poolRegistered(\\n                msg.sender\\n            )\\n        ) revert ProtectionPool__OnlyPriorityPool();\\n\\n        if (_amount > IERC20(shield).balanceOf(address(this)))\\n            revert ProtectionPool__NotEnoughBalance();\\n\\n        IERC20(shield).transfer(_to, _amount);\\n\\n        _updatePrice();\\n\\n        emit LiquidityRemovedWhenClaimed(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Update when new cover is bought\\n     *\\n     * @param _premium         Premium of the cover to be distributed to Protection Pool\\n     * @param _length          Length in month\\n     * @param _timestampLength Length in seconds\\n     */\\n    function updateWhenBuy(\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external onlyPolicyCenter {\\n        _updateReward();\\n        _updatePrice();\\n\\n        _updateRewardSpeed(_premium, _length, _timestampLength);\\n    }\\n\\n    /**\\n     * @notice Set paused state of the protection pool\\n     *\\n     * @param _paused True for pause, false for unpause\\n     */\\n    function pauseProtectionPool(bool _paused) external {\\n        if (\\n            (msg.sender != owner()) &&\\n            (msg.sender != incidentReport) &&\\n            (msg.sender != priorityPoolFactory)\\n        ) revert ProtectionPool__NotAllowedToPause();\\n        _pause(_paused);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update the price of PRO_LP token\\n     */\\n    function _updatePrice() internal {\\n        if (totalSupply() == 0) {\\n            price = SCALE;\\n            return;\\n        }\\n        price =\\n            ((IERC20(shield).balanceOf(address(this))) * SCALE) /\\n            totalSupply();\\n\\n        emit PriceUpdated(price);\\n    }\\n\\n    /**\\n     * @notice Update reward status\\n     */\\n    function _updateReward() internal {\\n        uint256 currentTime = block.timestamp;\\n\\n        // Last reward year & month & day\\n        (uint256 lastY, uint256 lastM, uint256 lastD) = lastRewardTimestamp\\n            .timestampToDate();\\n\\n        // Current year & month & day\\n        (uint256 currentY, uint256 currentM, ) = currentTime.timestampToDate();\\n\\n        uint256 monthPassed = currentM - lastM;\\n\\n        uint256 totalReward;\\n\\n        if (monthPassed == 0) {\\n            if (rewardSpeed[currentY][currentM] > 0) {\\n                totalReward +=\\n                    (currentTime - lastRewardTimestamp) *\\n                    rewardSpeed[currentY][currentM];\\n            }\\n        } else {\\n            for (uint256 i; i < monthPassed + 1; ) {\\n                // First month reward\\n                if (i == 0 && rewardSpeed[lastY][lastM] > 0) {\\n                    // End timestamp of the first month\\n                    uint256 endTimestamp = DateTimeLibrary\\n                        .timestampFromDateTime(lastY, lastM, lastD, 23, 59, 59);\\n\\n                    totalReward +=\\n                        (endTimestamp - lastRewardTimestamp) *\\n                        rewardSpeed[lastY][lastM];\\n                }\\n                // Last month reward\\n                else if (i == monthPassed && rewardSpeed[lastY][lastM] > 0) {\\n                    uint256 startTimestamp = DateTimeLibrary\\n                        .timestampFromDateTime(lastY, lastM, 1, 0, 0, 0);\\n\\n                    totalReward +=\\n                        (currentTime - startTimestamp) *\\n                        rewardSpeed[lastY][lastM];\\n                }\\n                // Middle month reward\\n                else {\\n                    uint256 daysInMonth = lastY._getDaysInMonth(lastM);\\n\\n                    if (rewardSpeed[lastY][lastM] > 0) {\\n                        totalReward +=\\n                            (DateTimeLibrary.SECONDS_PER_DAY * daysInMonth) *\\n                            rewardSpeed[lastY][lastM];\\n                    }\\n                }\\n\\n                unchecked {\\n                    if (++lastM > 12) {\\n                        ++lastY;\\n                        lastM = 1;\\n                    }\\n\\n                    ++i;\\n                }\\n            }\\n        }\\n\\n        emit RewardUpdated(totalReward);\\n    }\\n\\n    /**\\n     * @notice Update reward speed\\n     *\\n     * @param _premium         New premium received\\n     * @param _length          Cover length in months\\n     * @param _timestampLength Cover length in seconds\\n     */\\n    function _updateRewardSpeed(\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) internal {\\n        // How many premiums need to be distributed in each second\\n        uint256 newSpeed = _premium / _timestampLength;\\n\\n        (uint256 currentYear, uint256 currentMonth, ) = DateTimeLibrary\\n            .timestampToDate(block.timestamp);\\n\\n        for (uint256 i; i < _length; ) {\\n            rewardSpeed[currentYear][currentMonth] += newSpeed;\\n\\n            unchecked {\\n                if (++currentMonth > 12) {\\n                    ++currentYear;\\n                    currentMonth = 1;\\n                }\\n\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29515242b94df124f64460832095662cade1dbe9d9a3b6b78aca1494a0957f16\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/protectionPool/ProtectionPoolDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\nimport \\\"../../interfaces/IPolicyCenter.sol\\\";\\nimport \\\"../../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../../interfaces/IPremiumRewardPool.sol\\\";\\n\\nabstract contract ProtectionPoolDependencies {\\n    uint256 constant UINT256_MAX = type(uint256).max;\\n\\n    address public priorityPoolFactory;\\n    address public policyCenter;\\n    address public incidentReport;\\n    address public premiumRewardPool;\\n\\n    function _setPolicyCenter(address _policyCenter) internal virtual {\\n        policyCenter = _policyCenter;\\n    }\\n\\n    function _setPriorityPoolFactory(address _priorityPoolFactory)\\n        internal\\n        virtual\\n    {\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    function _setIncidentReport(address _incidentReport) internal virtual {\\n        incidentReport = _incidentReport;\\n    }\\n\\n    function _setPremiumRewardPool(address _premiumRewardPool)\\n        internal\\n        virtual\\n    {\\n        premiumRewardPool = _premiumRewardPool;\\n    }\\n}\\n\",\"keccak256\":\"0xceae0689bba653551e22a7bb46301c64ed49a8e9c459a22ef95611270a8f4595\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/protectionPool/ProtectionPoolEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ProtectionPoolEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event LiquidityProvided(\\n        uint256 shieldAmount,\\n        uint256 lpAmount,\\n        address sender\\n    );\\n    event LiquidityRemoved(\\n        uint256 lpAmount,\\n        uint256 shieldAmount,\\n        address sender\\n    );\\n\\n    event LiquidityRemovedWhenClaimed(address pool, uint256 amount);\\n\\n    event RewardUpdated(uint256 totalReward);\\n\\n    event PriceUpdated(uint256 price);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error ProtectionPool__OnlyPolicyCenter();\\n    error ProtectionPool__ExceededTotalSupply();\\n    error ProtectionPool__OnlyPriorityPool();\\n    error ProtectionPool__NotEnoughLiquidity();\\n    error ProtectionPool__OnlyPriorityPoolOrPolicyCenter();\\n    error ProtectionPool__NotEnoughBalance();\\n    error ProtectionPool__NotAllowedToPause();\\n\\n}\",\"keccak256\":\"0xbdc66f0e181c1df0cc652ba27f547eb9502c62f06bf47bf07908672f6e60f354\",\"license\":\"GPL-3.0-or-later\"},\"src/util/FlashLoanPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol\\\";\\n\\nabstract contract FlashLoanPool is IERC3156FlashLender {\\n    address constant public SHIELD = address(0x10);\\n    uint256 constant public FEE = 10;\\n\\n    event FlashLoanBorrowed(\\n        address indexed lender,\\n        address indexed borrower,\\n        address indexed stablecoin,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    function flashLoan(\\n        IERC3156FlashBorrower _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external override returns (bool) {\\n        require(_amount > 0, \\\"Zero amount\\\");\\n\\n        uint256 fee = flashFee(_token, _amount);\\n\\n        uint256 previousBalance = IERC20(_token).balanceOf(address(this));\\n\\n        IERC20(_token).transfer(address(_receiver), _amount);\\n        require(\\n            _receiver.onFlashLoan(msg.sender, _token, _amount, fee, _data) ==\\n                keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\"),\\n            \\\"IERC3156: Callback failed\\\"\\n        );\\n        IERC20(_token).transferFrom(\\n            address(_receiver),\\n            address(this),\\n            _amount + fee\\n        );\\n\\n        uint256 finalBalance = IERC20(_token).balanceOf(address(this));\\n        require(finalBalance >= previousBalance + fee, \\\"Not enough pay back\\\");\\n\\n        emit FlashLoanBorrowed(\\n            address(this),\\n            address(_receiver),\\n            _token,\\n            _amount,\\n            fee\\n        );\\n\\n        return true;\\n    }\\n\\n    function flashFee(address _token, uint256 _amount)\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        require(_token == SHIELD, \\\"only shield\\\");\\n        return (_amount * FEE) / 10000;\\n    }\\n\\n    function maxFlashLoan(address _token) external view returns (uint256) {\\n        require(_token == SHIELD, \\\"only shield\\\");\\n        return IERC20(SHIELD).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xe1dd0a5e929658c3df31a6307a83d5949c65e1d8d7c69e02f2e2862e2dc824a9\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _transferOwnership(_initOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0cf3a1968613bb036219db76df7643df085878ed42beb669c9803037c0396c75\",\"license\":\"MIT\"},\"src/util/PausableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.13;\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableWithoutContext {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    function _pause(bool _p) internal virtual {\\n        _paused = _p;\\n\\n        if (_p) emit Paused(msg.sender);\\n        else emit Unpaused(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x514fbbf17e04ff4e77c9b394b57744e80c4d389fec785d898afe3d49d54197c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e034620003f357601f19601f6001600160401b036200334e3881900383810185168601919083831187841017620002f757808792606094604052833981010312620003f357620000508462000418565b926020916200006f60406200006785890162000418565b970162000418565b936200007a620003f8565b600e81526d141c9bdd1958dd1a5bdb941bdbdb60921b858201526200009e620003f8565b916006835265050524f2d4c560d41b86840152815192848411620002f75760039384546001948582811c92168015620003e8575b8a831014620003d25781858493116200037c575b50899085831160011462000319576000926200030d575b505060001982871b1c191690841b1784555b8051948511620002f75760049687548481811c91168015620002ec575b82821014620002d7578381116200028c575b50809286116001146200022057508495509084929160009562000214575b50501b92600019911b1c19161790555b600554604051936001600160a01b03938492839190338382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060008ba36001600160a81b0319163360ff60a01b191617600555166080521660a0521660c05242600a55612f2090816200042e823960805181611738015260a05181610c68015260c05181818161048f0152818161070001528181610ac3015281816111ad01526121e80152f35b0151935038806200015c565b939295859081168860005285600020956000905b8983831062000271575050501062000256575b50505050811b0190556200016c565b01519060f884600019921b161c191690553880808062000247565b85870151895590970196948501948893509081019062000234565b88600052816000208480890160051c820192848a10620002cd575b0160051c019085905b828110620002c05750506200013e565b60008155018590620002b0565b92508192620002a7565b602289634e487b7160e01b6000525260246000fd5b90607f16906200012c565b634e487b7160e01b600052604160045260246000fd5b015190503880620000fd565b908987941691886000528b6000209260005b8d8282106200036557505084116200034c575b505050811b0184556200010f565b015160001983891b60f8161c191690553880806200033e565b8385015186558a979095019493840193016200032b565b90915086600052896000208580850160051c8201928c8610620003c8575b918891869594930160051c01915b828110620003b8575050620000e6565b60008155859450889101620003a8565b925081926200039a565b634e487b7160e01b600052602260045260246000fd5b91607f1691620000d2565b600080fd5b60408051919082016001600160401b03811183821017620002f757604052565b51906001600160a01b0382168203620003f35756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde0314611a9e57508163095ea7b314611a745781630f89b77d14611a4b57816318160ddd14611a2c57816323b872dd146119625781632dd57bb014611921578163313ce5671461190557816339509351146118b557816344abf1a9146117675781634858b300146117235781635b2725ed146117075781635c975abb146116e05781635cffe9de146112db578163613255ab1461123c5781636f8a6e431461121357816370a08231146111dc57816370d39cff14611198578163715018a61461113857816378e97925146111195781638da5cb5b146110f05781638e15f473146110c957816395d89b4114610fc6578163a035b1fe14610fa7578163a457c2d714610eff578163a606a60714610ed6578163a8a2b43114610dee578163a9059cbb14610dbd578163ad35e1dc14610d7c578163b1fead0b14610d4b578163bf59705914610c97578163c3a593b314610c53578163c57981b514610c37578163ca6c6a4c14610a61578163d9d98ce414610a38578163da81afae1461068a578163dd5625c31461042c578163dd62ed3e146103e3578163e3356ccf146103a2578163e5249a1014610361578163e8adbf2f14610338578163eced552614610318578163f2fde38b1461024d57508063f8077fae1461022f5763fc51843c1461020957600080fd5b3461022b578160031936011261022b57602090610224611fae565b9051908152f35b5080fd5b503461022b578160031936011261022b57602090600b549051908152f35b90503461031457602036600319011261031457610268611bf4565b610270612e92565b6001600160a01b039081169182156102c2575060055492826001600160601b0360a01b8516176005555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461022b578160031936011261022b576020905164e8d4a510008152f35b50503461022b578160031936011261022b5760075490516001600160a01b039091168152602090f35b50503461022b57602036600319011261022b5761037c611bf4565b610384612e92565b60018060a01b03166001600160601b0360a01b600954161760095551f35b50503461022b57602036600319011261022b576103bd611bf4565b6103c5612e92565b60018060a01b03166001600160601b0360a01b600854161760085551f35b50503461022b578060031936011261022b5780602092610401611bf4565b610409611c0f565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b9050346103145782600319360112610314576006548251639e3079cb60e01b81526001600160a01b03918216929091602080848481885afa93841561068057879461064d575b508551916370a0823160e01b8352308484015260249582848881857f0000000000000000000000000000000000000000000000000000000000000000165afa938415610643578994610610575b50885b8681106104ce57898951f35b8989516315895f4760e31b8152828882015281818b81875afa801561060657859183916105df575b50168a51631341449360e21b815286818a81855afa9081156105d55783916105a8575b5087811161052d575b5050506001016104c2565b61053f9061053a8961215f565b6121a4565b90803b15610314578a83928d519485938492632440f3e960e01b84528d8401525af1801561059e57610574575b808b91610522565b67ffffffffffffffff811161058c578952600161056c565b634e487b7160e01b8b5260418752888bfd5b8a513d8d823e3d90fd5b90508681813d83116105ce575b6105bf8183611c25565b81010312610314575138610519565b503d6105b5565b8c513d85823e3d90fd5b6105fb91503d8085833e6105f38183611c25565b810190611f03565b5050509050386104f6565b8b513d84823e3d90fd5b9093508281813d831161063c575b6106288183611c25565b81010312610638575192386104bf565b8880fd5b503d61061e565b88513d8b823e3d90fd5b9080945081813d8311610679575b6106658183611c25565b8101031261067557519238610472565b8680fd5b503d61065b565b86513d89823e3d90fd5b9190503461031457806003193601126103145781356106a7611c0f565b60ff60055460a01c16610a02576007546001600160a01b0395908616331415806109a4575b610994576002548311610984576106e16122b5565b6106e96121c4565b64e8d4a510006106fb600c5485612191565b0494867f000000000000000000000000000000000000000000000000000000000000000016908551976370a0823160e01b895230828a01526020988981602481875afa90811561097a578591610949575b5061075e89610759611fae565b611c5d565b1161093a57841680156108ed578084528389528684205486811061089f579285858b9481857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef888f988f8f869d6107fc9f938294528785520381872055816002540360025551908152a38a5163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290958693849291839160400190565b03925af1908115610894575085927f0c54fc223ffd1a8f36652b5e83db4fff50f5ae151b11ceb56d5499b9f6e1fa18949261085e92610867575b50855192835260208301939093526001600160a01b0390921660408201529081906060820190565b0390a151908152f35b61088690893d8b1161088d575b61087e8183611c25565b810190611f96565b5038610836565b503d610874565b8551903d90823e3d90fd5b875162461bcd60e51b81528084018b9052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b865162461bcd60e51b81528083018a9052602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b50855163ed9d9d3360e01b8152fd5b90508981813d8311610973575b6109608183611c25565b8101031261096f57513861074c565b8480fd5b503d610956565b88513d87823e3d90fd5b5050505163d6e1271b60e01b8152fd5b5050505163acfbdf9160e01b8152fd5b50602460208760065416865192838092633a31bb7760e11b8252338b8301525afa9081156109f85782916109da575b50156106cc565b6109f2915060203d811161088d5761087e8183611c25565b386109d3565b85513d84823e3d90fd5b825162461bcd60e51b8152602081860152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b50503461022b578060031936011261022b57602090610224610a58611bf4565b60243590612e62565b83833461022b578060031936011261022b578235610a7d611c0f565b6006548351633a31bb7760e11b8152338782015260209392916001600160a01b03919085908290602490829086165afa908115610680578791610c1a575b5015610c0a577f0000000000000000000000000000000000000000000000000000000000000000169084516370a0823160e01b815230888201528481602481865afa908115610680578791610bdd575b508311610bcd57845163a9059cbb60e01b81526001600160a01b039091169681019687526020870183905294959394938391859182908990829060400103925af1918215610bc3577f9c125d89aedad0c6838010bd5646efbf0d93daa2dcc78e414b4daee16abb6c7d93610b9f93610ba5575b5050610b886121c4565b835133815260208101919091529081906040820190565b0390a151f35b81610bbb92903d1061088d5761087e8183611c25565b508580610b7e565b84513d87823e3d90fd5b8451633ced52eb60e11b81528790fd5b90508481813d8311610c03575b610bf48183611c25565b81010312610675575188610b0b565b503d610bea565b84516379b0b85160e01b81528790fd5b610c319150853d871161088d5761087e8183611c25565b88610abb565b50503461022b578160031936011261022b5760209051600a8152f35b50503461022b578160031936011261022b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346103145760603660031901126103145760075460243591906001600160a01b03163303610d3d57610cdf90610ccd6122b5565b610cd56121c4565b60443590356121a4565b610ce842612a40565b509185925b848410610cf957868651f35b8287526020600d81528688209082895252858720610d18838254611c5d565b9055600180910193600c8511610d30575b0192610ced565b9350809201918093610d29565b82516311bee39d60e31b8152fd5b9050346103145781600319360112610314576020928291358152600d84528181206024358252845220549051908152f35b50503461022b57602036600319011261022b57610d97611bf4565b610d9f612e92565b60018060a01b03166001600160601b0360a01b600654161760065551f35b50503461022b578060031936011261022b57602090610de7610ddd611bf4565b6024359033611c7f565b5160018152f35b9050346103145760203660031901126103145780359081151580830361096f57600554916001600160a01b038084163314159081610ec6575b81610eb7575b50610ea9575060ff60a01b1990911660a09190911b60ff60a01b161760055515610e7d577f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25860208251338152a151f35b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa60208251338152a151f35b8451631b6a6b5b60e11b8152fd5b90506006541633141538610e2d565b8091506008541633141590610e27565b50503461022b578160031936011261022b5760095490516001600160a01b039091168152602090f35b90508234610fa45782600319360112610fa457610f1a611bf4565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610f5357602085610de78585038733611ded565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50503461022b578160031936011261022b57602090600c549051908152f35b83833461022b578160031936011261022b57805191809380549160019083821c928285169485156110bf575b60209586861081146110ac578589529081156110885750600114611030575b61102c8787611022828c0383611c25565b5191829182611bc8565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410611075575050508261102c9461102292820101948680611011565b8054868501880152928601928101611057565b60ff19168887015250505050151560051b83010192506110228261102c8680611011565b634e487b7160e01b845260228352602484fd5b93607f1693610ff2565b50503461022b578160031936011261022b576020906110e66121c4565b600c549051908152f35b50503461022b578160031936011261022b5760055490516001600160a01b039091168152602090f35b50503461022b578160031936011261022b57602090600a549051908152f35b50503461022b578160031936011261022b57611152612e92565b600580546001600160a01b0319811690915590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50503461022b578160031936011261022b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461022b57602036600319011261022b5760209181906001600160a01b03611204611bf4565b16815280845220549051908152f35b50503461022b578160031936011261022b5760065490516001600160a01b039091168152602090f35b83833461022b57602092836003193601126103145761126d60106001600160a01b03611266611bf4565b1614612e28565b8151906370a0823160e01b82523090820152838160248160105afa9283156112d057809361129e575b505051908152f35b909192508382813d83116112c9575b6112b78183611c25565b81010312610fa4575051908380611296565b503d6112ad565b8251903d90823e3d90fd5b828434610fa4576080366003190112610fa4576001600160a01b0392803584811691908290036103145761130d611c0f565b604435916064359667ffffffffffffffff90818911610675573660238a011215610675578883013591821161067557366024838b0101116106755784156116af576113588585612e62565b9316958751916370a0823160e01b90818452308585015260209a8b856024818d5afa9485156116a557888b8b8f938f8b918a9b611664575b505163a9059cbb60e01b81526001600160a01b03909216908201908152602081019390935292918391908290899082906040015b03925af1801561165a5787848f94958f8f95976024918f9960c49761163d575b505198899788966323e30c8b60e01b885233908801528387015260448601528d606486015260a060848601528260a486015201848401378181018301889052601f01601f19168101030181868c5af180156115a35783906115f0575b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99150036115ad576114728587611c5d565b8951906323b872dd60e01b8252888683015230602483015260448201528a81606481868d5af180156115a357611586575b508851908152308482015289816024818b5afa91821561157b579081869293611547575b50506114d39192611c5d565b1161150e57508451918252858201527f2640247c2a780a1283695dd939b212be6c2e62a7182ef366efa28aa696f23d4c843092a45160018152f35b855162461bcd60e51b815290810187905260136024820152724e6f7420656e6f75676820706179206261636b60681b6044820152606490fd5b915091508982813d8311611574575b6115608183611c25565b81010312610fa4575051836114d38b6114c7565b503d611556565b8951903d90823e3d90fd5b61159c908b3d8d1161088d5761087e8183611c25565b508a6114a3565b8a513d85823e3d90fd5b885162461bcd60e51b81528085018b9052601960248201527f49455243333135363a2043616c6c6261636b206661696c6564000000000000006044820152606490fd5b508a81813d8311611636575b6116068183611c25565b81010312610314577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99051611440565b503d6115fc565b611653908a3d8c1161088d5761087e8183611c25565b50386113e4565b8c513d87823e3d90fd5b969798999a50505050505081813d831161169e575b6116838183611c25565b8101031261096f5751939291908b888b8b898f6113c4611390565b503d611679565b8b513d86823e3d90fd5b875162461bcd60e51b8152602081850152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b50503461022b578160031936011261022b5760209060ff60055460a01c1690519015158152f35b50503461022b578160031936011261022b576020905160108152f35b50503461022b578160031936011261022b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b83833461022b578060031936011261022b57823592611784611c0f565b60075490946001600160a01b03929091831633036118a7576117a46122b5565b6117ac6121c4565b6117c16117b88361215f565b600c54906121a4565b92861690811561186457507fe198de8e85cdfd7f4510617c4cd12de7263b31eef6cb83924c620d8a080144a9939495610b9f9161180085600254611c5d565b60025580885287602052868820858154019055877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208951888152a3855192835260208301939093526001600160a01b0390921660408201529081906060820190565b606490602086519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b83516311bee39d60e31b8152fd5b50503461022b578060031936011261022b57610de76020926118fe6118d8611bf4565b338352600186528483206001600160a01b03821684528652918490205460243590611c5d565b9033611ded565b50503461022b578160031936011261022b576020905160128152f35b50503461022b57602036600319011261022b5761193c611bf4565b611944612e92565b60018060a01b03166001600160601b0360a01b600754161760075551f35b8391503461022b57606036600319011261022b5761197e611bf4565b611986611c0f565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036119c0575b602086610de7878787611c7f565b8482106119e957509183916119de60209695610de795033383611ded565b9193948193506119b2565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50503461022b578160031936011261022b576020906002549051908152f35b50503461022b578160031936011261022b5760085490516001600160a01b039091168152602090f35b50503461022b578060031936011261022b57602090610de7611a94611bf4565b6024359033611ded565b92915034611b8f5783600319360112611b8f57600354600181811c9186908281168015611b85575b6020958686108214611b725750848852908115611b505750600114611af7575b61102c8686611022828b0383611c25565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410611b3d575050508261102c94611022928201019438611ae6565b8054868501880152928601928101611b20565b60ff191687860152505050151560051b83010192506110228261102c38611ae6565b634e487b7160e01b845260229052602483fd5b93607f1693611ac6565b8380fd5b918091926000905b828210611bb3575011611bac575050565b6000910152565b91508060209183015181860152018291611b9b565b60409160208252611be88151809281602086015260208686019101611b93565b601f01601f1916010190565b600435906001600160a01b0382168203611c0a57565b600080fd5b602435906001600160a01b0382168203611c0a57565b90601f8019910116810190811067ffffffffffffffff821117611c4757604052565b634e487b7160e01b600052604160045260246000fd5b81198111611c69570190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215611d9a5716918215611d4957600082815280602052604081205491808310611cf557604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215611e9e5716918215611e4e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b51906001600160a01b0382168203611c0a57565b9060a082820312611c0a57815167ffffffffffffffff90818111611c0a5783019082601f83011215611c0a578151908111611c475760405192611f50601f8301601f191660200185611c25565b81845260208284010111611c0a57611f6e9160208085019101611b93565b91611f7b60208301611eef565b91611f8860408201611eef565b916080606083015192015190565b90816020910312611c0a57518015158103611c0a5790565b60065460408051639e3079cb60e01b81526000939290919060049085906020906001600160a01b039081169082878681855afa968715612155578497612126575b50835b878110612003575050505050505050565b86516315895f4760e31b815286810182905260249086818381885afa9081156120fd57849187918991612107575b508a51634124974560e01b8152921689830181905292829081885afa9081156120fd5787916120e0575b5061206a575b50600101611ff2565b848791899c939c5192838092636835185f60e11b82525afa9081156120d65786916120a4575b5061209d90600192611c5d565b9990612061565b90508481813d83116120cf575b6120bb8183611c25565b810103126120cb57516001612090565b8580fd5b503d6120b1565b88513d88823e3d90fd5b6120f79150863d881161088d5761087e8183611c25565b3861205b565b89513d89823e3d90fd5b61211b91503d808b833e6105f38183611c25565b505050905038612031565b9096508281813d831161214e575b61213e8183611c25565b81010312611b8f57519538611fef565b503d612134565b86513d86823e3d90fd5b64e8d4a51000908060001904821181151516611c69570290565b62015180908060001904821181151516611c69570290565b8060001904821181151516611c69570290565b81156121ae570490565b634e487b7160e01b600052601260045260246000fd5b600254801561229e576040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156122925760009161225f575b506122527f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe09261053a60209361215f565b80600c55604051908152a1565b906020823d821161228a575b8161227860209383611c25565b81010312610fa4575051612252612221565b3d915061226b565b6040513d6000823e3d90fd5b5064e8d4a51000600c55565b818110611c69570390565b6122de600b546122c481612a40565b939192909283946122d442612a40565b50949095856122aa565b9160009683156000146123815750505050917fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f6939160209382600052600d85526040600020826000528552604060002054612341575b5050505b604051908152a1565b91612373916123546123799594426122aa565b91600052600d8652604060002090600052855260406000205490612191565b90611c5d565b388080612334565b9697969550600194509287929091908581016001198211875b6123d2575b5050505050505050509060207fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f691612338565b80611c6957818610156127d4578515806127b1575b15612554576107b28710611c0a57617d4b600160ff1b0184128816611c69576124616124b26124ad6124a88a886124a18f61249b6064916124278661284e565b61244961249561248f60049d8e998a612455612450600c98896124498c6127d9565b05906128ac565b6128d7565b0590617d4a19016128ac565b8461244961248a612471896127f1565b6124848461247e8c6127d9565b0561293b565b90612825565b6129a0565b9861287d565b926127d9565b056129f0565b0590612825565b612809565b612179565b906201437019821161253f57610dd4196201437083011161253f57603b196201514483011161253f57508861251a8b9c9d612373839d6124f88b6201517f8798016122aa565b908d600052602090600d82526040918260002091600052526000205490612191565b9b5b0196600c8811612532575b0195989a999a61239a565b9701968896508690612527565b601190634e487b7160e01b6000525260246000fd5b8286148061278e575b1561262a576107b28710611c0a576125748761284e565b6124498a61258d6124506004948593600c9586916127d9565b05617d4a600160ff1b0181128b16612615578b9c9d6123738d6124f88e9f8f978f6124a8906124ad926124a1606461249b8d8f9e6125f961260f9f826125ed61248a8e6126099f6125ff9761247e6125e7612484936127f1565b936127d9565b0590617d4919016128ac565b9661287d565b906124498c6127d9565b426122aa565b9b61251c565b601183634e487b7160e01b6000525260246000fd5b60009a98999a888b148015612784575b801561277a575b8015612770575b8015612766575b801561275c575b8015612752575b156126fb5750601f5b87600052600d9060208281526040908d826000209060005281528160002054612698575b505050508780809a9b61251c565b9091929a9b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab84118d16611c69576123738d9c948f948e96956126f4958f978998600052815282600020916000525260002054906201518002612191565b9a3861268a565b60028b1461270b5750601e612666565b60038816159081612745575b8115612738575b501561272f5760ff601d5b16612666565b60ff601c612729565b610190890615915061271e565b6064890615159150612717565b50600c8b1461265d565b50600a8b14612656565b5060088b1461264f565b5060078b14612648565b5060058b14612641565b5060038b1461263a565b50866000526020600d815260409081600020908b6000525260002054151561255d565b50866000526020600d815260409081600020908b600052526000205415156123e7565b61239f565b600e600160ff1b018112600116611c6957600d190190565b6002600160ff1b018112600116611c69576001190190565b62253d8c600160ff1b018112600116611c695762253d8b190190565b600082128015600160ff1b8401831216611c69576001600160ff1b038301821316611c69570390565b6112c0906000811280156001600160ff1b03839003841316611c6957600160ff1b829003831216611c69570190565b611324906000811280156001600160ff1b03839003841316611c6957600160ff1b829003831216611c69570190565b6000811280156001600160ff1b03839003841316611c6957600160ff1b829003831216611c69570190565b6105b560008083136001600160ff1b038490048311166001166129275760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa88412828512161661292757500290565b634e487b7160e01b81526011600452602490fd5b600060017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa831182841316166129275760017ff555555555555555555555555555555555555555555555555555555555555556831282841216166129275750600c0290565b61016f60008083136001600160ff1b038490048311166001166129275760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318412828512161661292757500290565b60008082136001600160ff1b03839004600311166001166129275760017fd55555555555555555555555555555555555555555555555555555555555555683128284121616612927575060030290565b6001600160ff1b039060009062010bd990620151809004828112818503811581851316612e1457600160ff1b938385039283821216612e005785908401129162010bd819908162253d8c93018313841516612dec57011316612dd8576226496501916001936004918585830484118287131616612dc557808512600760fd1b8612168616612dc55762023ab194858160021b05958787850482118489131616612d9f57877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce288128489121616612d9f578602828112818503600313811516612db25781870360031216612d9f5790846003612b3d93010590612825565b928184128484038813811516612d5357848603881216612d4057868401610fa08882860482118584131616612d6657887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616612d6657612baf9162164b0991020594826124a1876128d7565b828112818503601f13811516612d6657818703601f1216612d5357601f019680888504605011848a131616612d5357807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616612d535761098f9788816050020590828287048b118684131616612d8c5784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616612d795790605083612c6493020590612825565b98600b820597828703600213821516612d795782900360021216612d665781878604600c118589131616612d6657817ff55555555555555555555555555555555555555555555555555555555555555688128589121616612d6657612cd090600288600c029101612825565b966031600160ff1b0181128216612d66578190603019018095046064118486131616612d53577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616612d40575050612d3a9291612d35916064026128ac565b6128ac565b91909192565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b15612e2f57565b60405162461bcd60e51b815260206004820152600b60248201526a1bdb9b1e481cda1a595b1960aa1b6044820152606490fd5b612e77906001600160a01b0316601014612e28565b8060001904600a1181151516611c6957600a61271091020490565b6005546001600160a01b03163303612ea657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220a8a0c6cd2ff53f848adbf0b386b27b66cf986d8d9e904116f27297f7ff9f3f0a64736f6c634300080f0033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde0314611a9e57508163095ea7b314611a745781630f89b77d14611a4b57816318160ddd14611a2c57816323b872dd146119625781632dd57bb014611921578163313ce5671461190557816339509351146118b557816344abf1a9146117675781634858b300146117235781635b2725ed146117075781635c975abb146116e05781635cffe9de146112db578163613255ab1461123c5781636f8a6e431461121357816370a08231146111dc57816370d39cff14611198578163715018a61461113857816378e97925146111195781638da5cb5b146110f05781638e15f473146110c957816395d89b4114610fc6578163a035b1fe14610fa7578163a457c2d714610eff578163a606a60714610ed6578163a8a2b43114610dee578163a9059cbb14610dbd578163ad35e1dc14610d7c578163b1fead0b14610d4b578163bf59705914610c97578163c3a593b314610c53578163c57981b514610c37578163ca6c6a4c14610a61578163d9d98ce414610a38578163da81afae1461068a578163dd5625c31461042c578163dd62ed3e146103e3578163e3356ccf146103a2578163e5249a1014610361578163e8adbf2f14610338578163eced552614610318578163f2fde38b1461024d57508063f8077fae1461022f5763fc51843c1461020957600080fd5b3461022b578160031936011261022b57602090610224611fae565b9051908152f35b5080fd5b503461022b578160031936011261022b57602090600b549051908152f35b90503461031457602036600319011261031457610268611bf4565b610270612e92565b6001600160a01b039081169182156102c2575060055492826001600160601b0360a01b8516176005555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50503461022b578160031936011261022b576020905164e8d4a510008152f35b50503461022b578160031936011261022b5760075490516001600160a01b039091168152602090f35b50503461022b57602036600319011261022b5761037c611bf4565b610384612e92565b60018060a01b03166001600160601b0360a01b600954161760095551f35b50503461022b57602036600319011261022b576103bd611bf4565b6103c5612e92565b60018060a01b03166001600160601b0360a01b600854161760085551f35b50503461022b578060031936011261022b5780602092610401611bf4565b610409611c0f565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b9050346103145782600319360112610314576006548251639e3079cb60e01b81526001600160a01b03918216929091602080848481885afa93841561068057879461064d575b508551916370a0823160e01b8352308484015260249582848881857f0000000000000000000000000000000000000000000000000000000000000000165afa938415610643578994610610575b50885b8681106104ce57898951f35b8989516315895f4760e31b8152828882015281818b81875afa801561060657859183916105df575b50168a51631341449360e21b815286818a81855afa9081156105d55783916105a8575b5087811161052d575b5050506001016104c2565b61053f9061053a8961215f565b6121a4565b90803b15610314578a83928d519485938492632440f3e960e01b84528d8401525af1801561059e57610574575b808b91610522565b67ffffffffffffffff811161058c578952600161056c565b634e487b7160e01b8b5260418752888bfd5b8a513d8d823e3d90fd5b90508681813d83116105ce575b6105bf8183611c25565b81010312610314575138610519565b503d6105b5565b8c513d85823e3d90fd5b6105fb91503d8085833e6105f38183611c25565b810190611f03565b5050509050386104f6565b8b513d84823e3d90fd5b9093508281813d831161063c575b6106288183611c25565b81010312610638575192386104bf565b8880fd5b503d61061e565b88513d8b823e3d90fd5b9080945081813d8311610679575b6106658183611c25565b8101031261067557519238610472565b8680fd5b503d61065b565b86513d89823e3d90fd5b9190503461031457806003193601126103145781356106a7611c0f565b60ff60055460a01c16610a02576007546001600160a01b0395908616331415806109a4575b610994576002548311610984576106e16122b5565b6106e96121c4565b64e8d4a510006106fb600c5485612191565b0494867f000000000000000000000000000000000000000000000000000000000000000016908551976370a0823160e01b895230828a01526020988981602481875afa90811561097a578591610949575b5061075e89610759611fae565b611c5d565b1161093a57841680156108ed578084528389528684205486811061089f579285858b9481857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef888f988f8f869d6107fc9f938294528785520381872055816002540360025551908152a38a5163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290958693849291839160400190565b03925af1908115610894575085927f0c54fc223ffd1a8f36652b5e83db4fff50f5ae151b11ceb56d5499b9f6e1fa18949261085e92610867575b50855192835260208301939093526001600160a01b0390921660408201529081906060820190565b0390a151908152f35b61088690893d8b1161088d575b61087e8183611c25565b810190611f96565b5038610836565b503d610874565b8551903d90823e3d90fd5b875162461bcd60e51b81528084018b9052602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b865162461bcd60e51b81528083018a9052602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b50855163ed9d9d3360e01b8152fd5b90508981813d8311610973575b6109608183611c25565b8101031261096f57513861074c565b8480fd5b503d610956565b88513d87823e3d90fd5b5050505163d6e1271b60e01b8152fd5b5050505163acfbdf9160e01b8152fd5b50602460208760065416865192838092633a31bb7760e11b8252338b8301525afa9081156109f85782916109da575b50156106cc565b6109f2915060203d811161088d5761087e8183611c25565b386109d3565b85513d84823e3d90fd5b825162461bcd60e51b8152602081860152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b50503461022b578060031936011261022b57602090610224610a58611bf4565b60243590612e62565b83833461022b578060031936011261022b578235610a7d611c0f565b6006548351633a31bb7760e11b8152338782015260209392916001600160a01b03919085908290602490829086165afa908115610680578791610c1a575b5015610c0a577f0000000000000000000000000000000000000000000000000000000000000000169084516370a0823160e01b815230888201528481602481865afa908115610680578791610bdd575b508311610bcd57845163a9059cbb60e01b81526001600160a01b039091169681019687526020870183905294959394938391859182908990829060400103925af1918215610bc3577f9c125d89aedad0c6838010bd5646efbf0d93daa2dcc78e414b4daee16abb6c7d93610b9f93610ba5575b5050610b886121c4565b835133815260208101919091529081906040820190565b0390a151f35b81610bbb92903d1061088d5761087e8183611c25565b508580610b7e565b84513d87823e3d90fd5b8451633ced52eb60e11b81528790fd5b90508481813d8311610c03575b610bf48183611c25565b81010312610675575188610b0b565b503d610bea565b84516379b0b85160e01b81528790fd5b610c319150853d871161088d5761087e8183611c25565b88610abb565b50503461022b578160031936011261022b5760209051600a8152f35b50503461022b578160031936011261022b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346103145760603660031901126103145760075460243591906001600160a01b03163303610d3d57610cdf90610ccd6122b5565b610cd56121c4565b60443590356121a4565b610ce842612a40565b509185925b848410610cf957868651f35b8287526020600d81528688209082895252858720610d18838254611c5d565b9055600180910193600c8511610d30575b0192610ced565b9350809201918093610d29565b82516311bee39d60e31b8152fd5b9050346103145781600319360112610314576020928291358152600d84528181206024358252845220549051908152f35b50503461022b57602036600319011261022b57610d97611bf4565b610d9f612e92565b60018060a01b03166001600160601b0360a01b600654161760065551f35b50503461022b578060031936011261022b57602090610de7610ddd611bf4565b6024359033611c7f565b5160018152f35b9050346103145760203660031901126103145780359081151580830361096f57600554916001600160a01b038084163314159081610ec6575b81610eb7575b50610ea9575060ff60a01b1990911660a09190911b60ff60a01b161760055515610e7d577f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25860208251338152a151f35b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa60208251338152a151f35b8451631b6a6b5b60e11b8152fd5b90506006541633141538610e2d565b8091506008541633141590610e27565b50503461022b578160031936011261022b5760095490516001600160a01b039091168152602090f35b90508234610fa45782600319360112610fa457610f1a611bf4565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610f5357602085610de78585038733611ded565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50503461022b578160031936011261022b57602090600c549051908152f35b83833461022b578160031936011261022b57805191809380549160019083821c928285169485156110bf575b60209586861081146110ac578589529081156110885750600114611030575b61102c8787611022828c0383611c25565b5191829182611bc8565b0390f35b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410611075575050508261102c9461102292820101948680611011565b8054868501880152928601928101611057565b60ff19168887015250505050151560051b83010192506110228261102c8680611011565b634e487b7160e01b845260228352602484fd5b93607f1693610ff2565b50503461022b578160031936011261022b576020906110e66121c4565b600c549051908152f35b50503461022b578160031936011261022b5760055490516001600160a01b039091168152602090f35b50503461022b578160031936011261022b57602090600a549051908152f35b50503461022b578160031936011261022b57611152612e92565b600580546001600160a01b0319811690915590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50503461022b578160031936011261022b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50503461022b57602036600319011261022b5760209181906001600160a01b03611204611bf4565b16815280845220549051908152f35b50503461022b578160031936011261022b5760065490516001600160a01b039091168152602090f35b83833461022b57602092836003193601126103145761126d60106001600160a01b03611266611bf4565b1614612e28565b8151906370a0823160e01b82523090820152838160248160105afa9283156112d057809361129e575b505051908152f35b909192508382813d83116112c9575b6112b78183611c25565b81010312610fa4575051908380611296565b503d6112ad565b8251903d90823e3d90fd5b828434610fa4576080366003190112610fa4576001600160a01b0392803584811691908290036103145761130d611c0f565b604435916064359667ffffffffffffffff90818911610675573660238a011215610675578883013591821161067557366024838b0101116106755784156116af576113588585612e62565b9316958751916370a0823160e01b90818452308585015260209a8b856024818d5afa9485156116a557888b8b8f938f8b918a9b611664575b505163a9059cbb60e01b81526001600160a01b03909216908201908152602081019390935292918391908290899082906040015b03925af1801561165a5787848f94958f8f95976024918f9960c49761163d575b505198899788966323e30c8b60e01b885233908801528387015260448601528d606486015260a060848601528260a486015201848401378181018301889052601f01601f19168101030181868c5af180156115a35783906115f0575b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99150036115ad576114728587611c5d565b8951906323b872dd60e01b8252888683015230602483015260448201528a81606481868d5af180156115a357611586575b508851908152308482015289816024818b5afa91821561157b579081869293611547575b50506114d39192611c5d565b1161150e57508451918252858201527f2640247c2a780a1283695dd939b212be6c2e62a7182ef366efa28aa696f23d4c843092a45160018152f35b855162461bcd60e51b815290810187905260136024820152724e6f7420656e6f75676820706179206261636b60681b6044820152606490fd5b915091508982813d8311611574575b6115608183611c25565b81010312610fa4575051836114d38b6114c7565b503d611556565b8951903d90823e3d90fd5b61159c908b3d8d1161088d5761087e8183611c25565b508a6114a3565b8a513d85823e3d90fd5b885162461bcd60e51b81528085018b9052601960248201527f49455243333135363a2043616c6c6261636b206661696c6564000000000000006044820152606490fd5b508a81813d8311611636575b6116068183611c25565b81010312610314577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99051611440565b503d6115fc565b611653908a3d8c1161088d5761087e8183611c25565b50386113e4565b8c513d87823e3d90fd5b969798999a50505050505081813d831161169e575b6116838183611c25565b8101031261096f5751939291908b888b8b898f6113c4611390565b503d611679565b8b513d86823e3d90fd5b875162461bcd60e51b8152602081850152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b50503461022b578160031936011261022b5760209060ff60055460a01c1690519015158152f35b50503461022b578160031936011261022b576020905160108152f35b50503461022b578160031936011261022b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b83833461022b578060031936011261022b57823592611784611c0f565b60075490946001600160a01b03929091831633036118a7576117a46122b5565b6117ac6121c4565b6117c16117b88361215f565b600c54906121a4565b92861690811561186457507fe198de8e85cdfd7f4510617c4cd12de7263b31eef6cb83924c620d8a080144a9939495610b9f9161180085600254611c5d565b60025580885287602052868820858154019055877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208951888152a3855192835260208301939093526001600160a01b0390921660408201529081906060820190565b606490602086519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b83516311bee39d60e31b8152fd5b50503461022b578060031936011261022b57610de76020926118fe6118d8611bf4565b338352600186528483206001600160a01b03821684528652918490205460243590611c5d565b9033611ded565b50503461022b578160031936011261022b576020905160128152f35b50503461022b57602036600319011261022b5761193c611bf4565b611944612e92565b60018060a01b03166001600160601b0360a01b600754161760075551f35b8391503461022b57606036600319011261022b5761197e611bf4565b611986611c0f565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036119c0575b602086610de7878787611c7f565b8482106119e957509183916119de60209695610de795033383611ded565b9193948193506119b2565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b50503461022b578160031936011261022b576020906002549051908152f35b50503461022b578160031936011261022b5760085490516001600160a01b039091168152602090f35b50503461022b578060031936011261022b57602090610de7611a94611bf4565b6024359033611ded565b92915034611b8f5783600319360112611b8f57600354600181811c9186908281168015611b85575b6020958686108214611b725750848852908115611b505750600114611af7575b61102c8686611022828b0383611c25565b929550600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410611b3d575050508261102c94611022928201019438611ae6565b8054868501880152928601928101611b20565b60ff191687860152505050151560051b83010192506110228261102c38611ae6565b634e487b7160e01b845260229052602483fd5b93607f1693611ac6565b8380fd5b918091926000905b828210611bb3575011611bac575050565b6000910152565b91508060209183015181860152018291611b9b565b60409160208252611be88151809281602086015260208686019101611b93565b601f01601f1916010190565b600435906001600160a01b0382168203611c0a57565b600080fd5b602435906001600160a01b0382168203611c0a57565b90601f8019910116810190811067ffffffffffffffff821117611c4757604052565b634e487b7160e01b600052604160045260246000fd5b81198111611c69570190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03908116918215611d9a5716918215611d4957600082815280602052604081205491808310611cf557604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215611e9e5716918215611e4e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b51906001600160a01b0382168203611c0a57565b9060a082820312611c0a57815167ffffffffffffffff90818111611c0a5783019082601f83011215611c0a578151908111611c475760405192611f50601f8301601f191660200185611c25565b81845260208284010111611c0a57611f6e9160208085019101611b93565b91611f7b60208301611eef565b91611f8860408201611eef565b916080606083015192015190565b90816020910312611c0a57518015158103611c0a5790565b60065460408051639e3079cb60e01b81526000939290919060049085906020906001600160a01b039081169082878681855afa968715612155578497612126575b50835b878110612003575050505050505050565b86516315895f4760e31b815286810182905260249086818381885afa9081156120fd57849187918991612107575b508a51634124974560e01b8152921689830181905292829081885afa9081156120fd5787916120e0575b5061206a575b50600101611ff2565b848791899c939c5192838092636835185f60e11b82525afa9081156120d65786916120a4575b5061209d90600192611c5d565b9990612061565b90508481813d83116120cf575b6120bb8183611c25565b810103126120cb57516001612090565b8580fd5b503d6120b1565b88513d88823e3d90fd5b6120f79150863d881161088d5761087e8183611c25565b3861205b565b89513d89823e3d90fd5b61211b91503d808b833e6105f38183611c25565b505050905038612031565b9096508281813d831161214e575b61213e8183611c25565b81010312611b8f57519538611fef565b503d612134565b86513d86823e3d90fd5b64e8d4a51000908060001904821181151516611c69570290565b62015180908060001904821181151516611c69570290565b8060001904821181151516611c69570290565b81156121ae570490565b634e487b7160e01b600052601260045260246000fd5b600254801561229e576040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156122925760009161225f575b506122527f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe09261053a60209361215f565b80600c55604051908152a1565b906020823d821161228a575b8161227860209383611c25565b81010312610fa4575051612252612221565b3d915061226b565b6040513d6000823e3d90fd5b5064e8d4a51000600c55565b818110611c69570390565b6122de600b546122c481612a40565b939192909283946122d442612a40565b50949095856122aa565b9160009683156000146123815750505050917fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f6939160209382600052600d85526040600020826000528552604060002054612341575b5050505b604051908152a1565b91612373916123546123799594426122aa565b91600052600d8652604060002090600052855260406000205490612191565b90611c5d565b388080612334565b9697969550600194509287929091908581016001198211875b6123d2575b5050505050505050509060207fcb94909754d27c309adf4167150f1f7aa04de40b6a0e6bb98b2ae80a2bf438f691612338565b80611c6957818610156127d4578515806127b1575b15612554576107b28710611c0a57617d4b600160ff1b0184128816611c69576124616124b26124ad6124a88a886124a18f61249b6064916124278661284e565b61244961249561248f60049d8e998a612455612450600c98896124498c6127d9565b05906128ac565b6128d7565b0590617d4a19016128ac565b8461244961248a612471896127f1565b6124848461247e8c6127d9565b0561293b565b90612825565b6129a0565b9861287d565b926127d9565b056129f0565b0590612825565b612809565b612179565b906201437019821161253f57610dd4196201437083011161253f57603b196201514483011161253f57508861251a8b9c9d612373839d6124f88b6201517f8798016122aa565b908d600052602090600d82526040918260002091600052526000205490612191565b9b5b0196600c8811612532575b0195989a999a61239a565b9701968896508690612527565b601190634e487b7160e01b6000525260246000fd5b8286148061278e575b1561262a576107b28710611c0a576125748761284e565b6124498a61258d6124506004948593600c9586916127d9565b05617d4a600160ff1b0181128b16612615578b9c9d6123738d6124f88e9f8f978f6124a8906124ad926124a1606461249b8d8f9e6125f961260f9f826125ed61248a8e6126099f6125ff9761247e6125e7612484936127f1565b936127d9565b0590617d4919016128ac565b9661287d565b906124498c6127d9565b426122aa565b9b61251c565b601183634e487b7160e01b6000525260246000fd5b60009a98999a888b148015612784575b801561277a575b8015612770575b8015612766575b801561275c575b8015612752575b156126fb5750601f5b87600052600d9060208281526040908d826000209060005281528160002054612698575b505050508780809a9b61251c565b9091929a9b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab84118d16611c69576123738d9c948f948e96956126f4958f978998600052815282600020916000525260002054906201518002612191565b9a3861268a565b60028b1461270b5750601e612666565b60038816159081612745575b8115612738575b501561272f5760ff601d5b16612666565b60ff601c612729565b610190890615915061271e565b6064890615159150612717565b50600c8b1461265d565b50600a8b14612656565b5060088b1461264f565b5060078b14612648565b5060058b14612641565b5060038b1461263a565b50866000526020600d815260409081600020908b6000525260002054151561255d565b50866000526020600d815260409081600020908b600052526000205415156123e7565b61239f565b600e600160ff1b018112600116611c6957600d190190565b6002600160ff1b018112600116611c69576001190190565b62253d8c600160ff1b018112600116611c695762253d8b190190565b600082128015600160ff1b8401831216611c69576001600160ff1b038301821316611c69570390565b6112c0906000811280156001600160ff1b03839003841316611c6957600160ff1b829003831216611c69570190565b611324906000811280156001600160ff1b03839003841316611c6957600160ff1b829003831216611c69570190565b6000811280156001600160ff1b03839003841316611c6957600160ff1b829003831216611c69570190565b6105b560008083136001600160ff1b038490048311166001166129275760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa88412828512161661292757500290565b634e487b7160e01b81526011600452602490fd5b600060017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa831182841316166129275760017ff555555555555555555555555555555555555555555555555555555555555556831282841216166129275750600c0290565b61016f60008083136001600160ff1b038490048311166001166129275760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318412828512161661292757500290565b60008082136001600160ff1b03839004600311166001166129275760017fd55555555555555555555555555555555555555555555555555555555555555683128284121616612927575060030290565b6001600160ff1b039060009062010bd990620151809004828112818503811581851316612e1457600160ff1b938385039283821216612e005785908401129162010bd819908162253d8c93018313841516612dec57011316612dd8576226496501916001936004918585830484118287131616612dc557808512600760fd1b8612168616612dc55762023ab194858160021b05958787850482118489131616612d9f57877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce288128489121616612d9f578602828112818503600313811516612db25781870360031216612d9f5790846003612b3d93010590612825565b928184128484038813811516612d5357848603881216612d4057868401610fa08882860482118584131616612d6657887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616612d6657612baf9162164b0991020594826124a1876128d7565b828112818503601f13811516612d6657818703601f1216612d5357601f019680888504605011848a131616612d5357807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616612d535761098f9788816050020590828287048b118684131616612d8c5784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616612d795790605083612c6493020590612825565b98600b820597828703600213821516612d795782900360021216612d665781878604600c118589131616612d6657817ff55555555555555555555555555555555555555555555555555555555555555688128589121616612d6657612cd090600288600c029101612825565b966031600160ff1b0181128216612d66578190603019018095046064118486131616612d53577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616612d40575050612d3a9291612d35916064026128ac565b6128ac565b91909192565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b15612e2f57565b60405162461bcd60e51b815260206004820152600b60248201526a1bdb9b1e481cda1a595b1960aa1b6044820152606490fd5b612e77906001600160a01b0316601014612e28565b8060001904600a1181151516611c6957600a61271091020490565b6005546001600160a01b03163303612ea657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220a8a0c6cd2ff53f848adbf0b386b27b66cf986d8d9e904116f27297f7ff9f3f0a64736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getTotalCovered()": {
        "returns": {
          "covered": "Covered amount"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseProtectionPool(bool)": {
        "params": {
          "_paused": "True for pause, false for unpause"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "providedLiquidity(uint256,address)": {
        "params": {
          "_amount": "Liquidity amount (shield)",
          "_provider": "Provider address"
        }
      },
      "removedLiquidity(uint256,address)": {
        "params": {
          "_amount": "Liquidity to remove (LP token amount)",
          "_provider": "Provider address"
        }
      },
      "removedLiquidityWhenClaimed(uint256,address)": {
        "params": {
          "_amount": "Amount of liquidity to remove",
          "_to": "Address to transfer the liquidity to"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateWhenBuy(uint256,uint256,uint256)": {
        "params": {
          "_length": "Length in month",
          "_premium": "Premium of the cover to be distributed to Protection Pool",
          "_timestampLength": "Length in seconds"
        }
      }
    },
    "title": "Protection Pool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLatestPrice()": {
        "notice": "Updates and retrieves latest price to provide liquidity to Protection Pool"
      },
      "getTotalCovered()": {
        "notice": "Get total active cover amount of all pools         Only calculate those \"already dynamic\" pools"
      },
      "pauseProtectionPool(bool)": {
        "notice": "Set paused state of the protection pool"
      },
      "providedLiquidity(uint256,address)": {
        "notice": "Finish providing liquidity         Only callable through policyCenter"
      },
      "removedLiquidity(uint256,address)": {
        "notice": "Finish removing liquidity         Only callable through policyCenter"
      },
      "removedLiquidityWhenClaimed(uint256,address)": {
        "notice": "Removes liquidity when a claim is made"
      },
      "updateIndexCut()": {
        "notice": "Update index cut when claim happened"
      },
      "updateWhenBuy(uint256,uint256,uint256)": {
        "notice": "Update when new cover is bought"
      }
    },
    "notice": "This is the protection pool contract for Degis Protocol Protection         Users can provide liquidity to protection pool and get PRO-LP token         If the priority pool is unable to fulfil the cover amount,         Protection Pool will be able to provide the remaining part",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8925,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8931,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8933,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8935,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 8937,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 21926,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 22047,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "_paused",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 20211,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 20213,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "policyCenter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 20215,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "incidentReport",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 20217,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "premiumRewardPool",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 19408,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "startTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 19410,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "lastRewardTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 19412,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "price",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 19418,
        "contract": "src/pools/protectionPool/ProtectionPool.sol:ProtectionPool",
        "label": "rewardSpeed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}