{
  "address": "0xaD952940f66de94f99B02093F79Bc4CCB8AFD774",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "generation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "NewCRTokenDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_poolName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "deployCRToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "newCRToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "deployed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "generation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "getCRTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "crToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incidentReport",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "saltToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "name": "setIncidentReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutPool",
          "type": "address"
        }
      ],
      "name": "setPayoutPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        }
      ],
      "name": "setPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe699636bff11259298d46e8ee189a4717362cf4157e6d4646103bba7a8a98263",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xaD952940f66de94f99B02093F79Bc4CCB8AFD774",
    "transactionIndex": 3,
    "gasUsed": "2592120",
    "logsBloom": "0x
    "blockHash": "0xddc45f50da8b7c1cbe35f7e605106486930d74f038445eb69163baba9de3bab1",
    "transactionHash": "0xe699636bff11259298d46e8ee189a4717362cf4157e6d4646103bba7a8a98263",
    "logs": [],
    "blockNumber": 13565201,
    "cumulativeGasUsed": "2752235",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x716c41D7578C46824c5C91bA05137871CA05A664",
    "0x0b42B41457b34A458a26b7115b9753eDDba4F063"
  ],
  "numDeployments": 9,
  "solcInputHash": "279f608c4a65608360de1fe1c16a2103",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"NewCRTokenDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"deployCRToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newCRToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"generation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"getCRTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"crToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incidentReport\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"saltToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"name\":\"setIncidentReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutPool\",\"type\":\"address\"}],\"name\":\"setPayoutPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"}],\"name\":\"setPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployCRToken(string,uint256,string,uint256,uint256)\":{\"params\":{\"_expiry\":\"Expiry date of cover right token\",\"_generation\":\"Generation of priority pool (1 if no liquidations occurred)\",\"_poolId\":\"Pool Id\",\"_poolName\":\"Name of Priority Pool\",\"_tokenName\":\"Name of insured token (e.g. DEG)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployCRToken(string,uint256,string,uint256,uint256)\":{\"notice\":\"Deploy Cover Right Token for a given pool\"}},\"notice\":\"Factory for deploying crTokens         Salt as index for cover right tokens:             salt = keccak256(poolId, expiry, genration)         Factory will record whether a crToken has been deployed         Also record the generation of a specific crToken         And find the address of the crToken with its salt\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/crTokens/CoverRightTokenFactory.sol\":\"CoverRightTokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363633333133383634333837\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x6e3ba605a09b2cf6ab80fa9e4159b1e9f0f49bd8927032c3251a099e96ed54bc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x3270d2a7a042dda9cf85dddd16e6106c2c9ad784c0972315630b2a148215fa7d\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/crTokens/CoverRightToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"../interfaces/IIncidentReport.sol\\\";\\n\\nimport \\\"../libraries/DateTime.sol\\\";\\n\\n/**\\n * @notice Cover Right Tokens\\n *\\n *         ERC20 tokens that represent the cover you bought\\n *         It is a special token:\\n *             1) Can not be transferred to other addresses\\n *             2) Has an expiry date\\n *\\n *         A new crToken will be deployed for each month's policies for a pool\\n *         Each crToken will ended at the end timestamp of each month\\n *\\n *         To calculate a user's balance, we use coverFrom to record it.\\n *         E.g.  CRToken CR-JOE-2022-8\\n *               You bought X amount at timestamp t1 (in 2022-6 ~ 2022-8)\\n *               coverStartFrom[yourAddress][t1] += X\\n *\\n *         When used for claiming, check your crTokens\\n *             1) Not expired\\n *             2) Not bought too close to the report timestamp\\n *\\n */\\ncontract CoverRightToken is ERC20, ReentrancyGuard, OwnableWithoutContext {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Generation of crToken\\n    // Same as the generation of the priority pool (when this token was deployed)\\n    uint256 public immutable generation;\\n\\n    // Expiry date (always the last timestamp of a month)\\n    uint256 public immutable expiry;\\n\\n    // Pool id for this crToken\\n    uint256 public immutable poolId;\\n\\n    // Those covers bought within 2 days will be excluded\\n    // TODO: test will set it as 0\\n    uint256 public constant EXCLUDE_DAYS = 0;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Policy center address\\n    address public policyCenter;\\n\\n    // Incident report address\\n    address public incidentReport;\\n\\n    // Payout pool address\\n    address public payoutPool;\\n\\n    // Pool name for this crToken\\n    string public poolName;\\n\\n    // User address => start timestamp => cover amount\\n    mapping(address => mapping(uint256 => uint256)) public coverStartFrom;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        string memory _poolName,\\n        uint256 _poolId,\\n        string memory _name,\\n        uint256 _expiry,\\n        uint256 _generation,\\n        address _policyCenter,\\n        address _incidentReport,\\n        address _payoutPool\\n    ) ERC20(_name, \\\"crToken\\\") OwnableWithoutContext(msg.sender) {\\n        expiry = _expiry;\\n\\n        poolName = _poolName;\\n        poolId = _poolId;\\n        generation = _generation;\\n\\n        policyCenter = _policyCenter;\\n        incidentReport = _incidentReport;\\n        payoutPool = _payoutPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    modifier onlyPolicyCenter() {\\n        if (policyCenter != address(0)) {\\n            require(msg.sender == policyCenter, \\\"Only policy center\\\");\\n        }\\n        _;\\n    }\\n\\n    // TODO: remove this when mainnet\\n    function setPolicyCenter(address _policyCenter) public onlyOwner {\\n        policyCenter = _policyCenter;\\n    }\\n\\n    /**\\n     * @notice Override the decimals funciton\\n     *\\n     *         Cover right token is minted with reference to the cover amount he bought\\n     *         So keep the decimals the same with Shield\\n     */\\n    function decimals() public pure override returns (uint8) {\\n        return 6;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint new crTokens when buying covers\\n     *\\n     * @param _poolId Pool id\\n     * @param _user   User address\\n     * @param _amount Amount to mint\\n     */\\n    function mint(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external onlyPolicyCenter nonReentrant {\\n        require(_amount > 0, \\\"Zero Amount\\\");\\n        require(_poolId == poolId, \\\"Wrong pool id\\\");\\n\\n        uint256 effectiveFrom = _getEOD(\\n            block.timestamp + EXCLUDE_DAYS * 1 days\\n        );\\n\\n        coverStartFrom[_user][effectiveFrom] += _amount;\\n\\n        _mint(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn crTokens to claim\\n     *         Only callable from policyCenter\\n     *\\n     * @param _poolId Pool id\\n     * @param _user   User address\\n     * @param _amount Amount to burn\\n     */\\n    function burn(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external onlyPolicyCenter nonReentrant {\\n        require(_amount > 0, \\\"Zero Amount\\\");\\n        require(_poolId == poolId, \\\"Wrong pool id\\\");\\n\\n        _burn(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Get the claimable amount of a user\\n     *         Claimable means \\\"without those has passed the expiry date\\\"\\n     *\\n     * @param _user User address\\n     *\\n     * @return claimable Claimable balance\\n     */\\n    function getClaimableOf(address _user) external view returns (uint256) {\\n        uint256 exclusion = getExcludedCoverageOf(_user);\\n        uint256 balance = balanceOf(_user);\\n\\n        if (exclusion > balance) return 0;\\n        else return balance - exclusion;\\n    }\\n\\n    /**\\n     * @notice Get the excluded amount of a user\\n     *         Excluded means \\\"without those are bought within a short time before voteTimestamp\\\"\\n     *\\n     *         Only count the corresponding one report (voteTimestamp)\\n     *         Each crToken & priorityPool has a generation\\n     *         And should get the correct report with this \\\"Generation\\\"\\n     *             - poolReports(poolId, generation)\\n     *\\n     * @param _user User address\\n     *\\n     * @return exclusion Amount not able to claim because cover period has ended\\n     */\\n    function getExcludedCoverageOf(address _user)\\n        public\\n        view\\n        returns (uint256 exclusion)\\n    {\\n        IIncidentReport incident = IIncidentReport(incidentReport);\\n\\n        // Get the report amount for this pool\\n        // If report amount is 0, generation should be 1 and no excluded amount\\n        // If report amount > 0, the effective report should be amount - 1\\n        uint256 reportAmount = incident.getPoolReportsAmount(poolId);\\n\\n        if (reportAmount > 0) {\\n            // Only count for the valid report\\n            // E.g. Current report amount is 3, then for generation 1 crToken,\\n            //      its corresponding report index (in the array) is 0\\n            uint256 validReportId = incident.poolReports(\\n                poolId,\\n                generation - 1\\n            );\\n\\n            (, , , uint256 voteTimestamp, , , , , uint256 result, , ) = incident\\n                .reports(validReportId);\\n\\n            // If the result is not PASS, the voteTimestamp should not be counted\\n            if (result == 1) {\\n                // Check those bought within 2 days\\n                for (uint256 i; i < EXCLUDE_DAYS; ) {\\n                    if (voteTimestamp > i * 1 days) {\\n                        // * For local test EXCLUDE_DAYS can be set as 0 to avoid underflow\\n                        // * For mainnet or testnet, will never underflow\\n                        uint256 date = _getEOD(voteTimestamp - (i * 1 days));\\n\\n                        exclusion += coverStartFrom[_user][date];\\n                    }\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the timestamp at the end of the day\\n     *\\n     * @param _timestamp Timestamp to be transformed\\n     *\\n     * @return endTimestamp End timestamp of that day\\n     */\\n    function _getEOD(uint256 _timestamp) private pure returns (uint256) {\\n        (uint256 year, uint256 month, uint256 day) = DateTimeLibrary\\n            .timestampToDate(_timestamp);\\n        return\\n            DateTimeLibrary.timestampFromDateTime(year, month, day, 23, 59, 59);\\n    }\\n\\n    /**\\n     * @notice Hooks before token transfer\\n     *         - Can burn expired crTokens (send to zero address)\\n     *         - Can be minted or used for claim\\n     *         Other transfers are banned\\n     *\\n     * @param from From address\\n     * @param to   To address\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal view override {\\n        if (block.timestamp > expiry) {\\n            require(to == address(0), \\\"Expired crToken\\\");\\n        }\\n\\n        // crTokens can only be used for claim\\n        if (from != address(0) && to != address(0)) {\\n            require(to == policyCenter, \\\"Only to policyCenter\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8344c55b53d34090079b2317b57c088e3777138e3642a47bf728a5a4c62b9d47\",\"license\":\"GPL-3.0-or-later\"},\"src/crTokens/CoverRightTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./CoverRightToken.sol\\\";\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/**\\n * @notice Factory for deploying crTokens\\n *\\n *         Salt as index for cover right tokens:\\n *             salt = keccak256(poolId, expiry, genration)\\n *\\n *         Factory will record whether a crToken has been deployed\\n *         Also record the generation of a specific crToken\\n *         And find the address of the crToken with its salt\\n *\\n */\\ncontract CoverRightTokenFactory is OwnableWithoutContext {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address public policyCenter;\\n\\n    address public incidentReport;\\n\\n    address public payoutPool;\\n\\n    // Salt => Already deployed\\n    mapping(bytes32 => bool) public deployed;\\n\\n    // Salt => CR token address\\n    mapping(bytes32 => address) public saltToAddress;\\n\\n    // Salt => Generation\\n    mapping(bytes32 => uint256) public generation;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event NewCRTokenDeployed(\\n        uint256 poolId,\\n        string tokenName,\\n        uint256 expiry,\\n        uint256 generation,\\n        address tokenAddress\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(address _policyCenter, address _incidentReport)\\n        OwnableWithoutContext(msg.sender)\\n    {\\n        policyCenter = _policyCenter;\\n        incidentReport = _incidentReport;\\n    }\\n\\n    function getCRTokenAddress(\\n        uint256 _poolId,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external view returns (address crToken) {\\n        crToken = saltToAddress[\\n            keccak256(abi.encodePacked(_poolId, _expiry, _generation))\\n        ];\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPolicyCenter(address _policyCenter) external onlyOwner {\\n        policyCenter = _policyCenter;\\n    }\\n\\n    function setIncidentReport(address _incidentReport) external onlyOwner {\\n        incidentReport = _incidentReport;\\n    }\\n\\n    function setPayoutPool(address _payoutPool) external onlyOwner {\\n        payoutPool = _payoutPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Deploy Cover Right Token for a given pool\\n     *\\n     * @param _poolName   Name of Priority Pool\\n     * @param _poolId     Pool Id\\n     * @param _tokenName  Name of insured token (e.g. DEG)\\n     * @param _expiry     Expiry date of cover right token\\n     * @param _generation Generation of priority pool (1 if no liquidations occurred)\\n     */\\n    function deployCRToken(\\n        string calldata _poolName,\\n        uint256 _poolId,\\n        string calldata _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external returns (address newCRToken) {\\n        require(msg.sender == policyCenter, \\\"Only policy center\\\");\\n        require(_expiry > 0, \\\"Zero expiry date\\\");\\n\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_poolId, _expiry, _generation)\\n        );\\n\\n        require(!deployed[salt], \\\"already deployed\\\");\\n        deployed[salt] = true;\\n\\n        bytes memory bytecode = _getCRTokenBytecode(\\n            _poolName,\\n            _poolId,\\n            _tokenName,\\n            _expiry,\\n            _generation\\n        );\\n\\n        newCRToken = _deploy(bytecode, salt);\\n        saltToAddress[salt] = newCRToken;\\n\\n        emit NewCRTokenDeployed(\\n            _poolId,\\n            _tokenName,\\n            _expiry,\\n            _generation,\\n            newCRToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Get cover right token deployment bytecode (with parameters)\\n     *\\n     * @param _poolName   Name of Priority Pool\\n     * @param _poolId     Pool Id\\n     * @param _tokenName  Name of insured token (e.g. DEG)\\n     * @param _expiry     Expiry date of cover right token\\n     * @param _generation Generation of priority pool (1 if no liquidations occurred)\\n     */\\n    function _getCRTokenBytecode(\\n        string memory _poolName,\\n        uint256 _poolId,\\n        string memory _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) internal view returns (bytes memory code) {\\n        bytes memory bytecode = type(CoverRightToken).creationCode;\\n\\n        code = abi.encodePacked(\\n            bytecode,\\n            abi.encode(\\n                _tokenName,\\n                _poolId,\\n                _poolName,\\n                _expiry,\\n                _generation,\\n                policyCenter,\\n                incidentReport,\\n                payoutPool\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Deploy function with create2\\n     *\\n     * @param code Byte code of the contract (creation code)\\n     * @param salt Salt for the deployment\\n     *\\n     * @return addr The deployed contract address\\n     */\\n    function _deploy(bytes memory code, bytes32 salt)\\n        internal\\n        returns (address addr)\\n    {\\n        assembly {\\n            addr := create2(0, add(code, 0x20), mload(code), salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8736182f7da9cb3492e2584b441865045f297dd6d829ff23cecbae3b1a58c00\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IIncidentReport.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IIncidentReport {\\n    struct Report {\\n        uint256 poolId; // Project pool id\\n        uint256 reportTimestamp; // Time of starting report\\n        address reporter; // Reporter address\\n        uint256 voteTimestamp; // Voting start timestamp\\n        uint256 numFor; // Votes voting for\\n        uint256 numAgainst; // Votes voting against\\n        uint256 round; // 0: Initial round 3 days, 1: Extended round 1 day, 2: Double extended 1 day\\n        uint256 status; // PENDING, VOTING, SETTLED, CLOSED\\n        uint256 result; // 1: Pass, 2: Reject, 3: Tied\\n        uint256 votingReward; // Voting reward per veDEG\\n        uint256 payout; // Payout amount of this report (partial payout)\\n    }\\n    struct TempResult {\\n        uint256 a;\\n        uint256 b;\\n        bool c;\\n    }\\n    struct UserVote {\\n        uint256 choice;\\n        uint256 amount;\\n        bool claimed;\\n    }\\n\\n    /**\\n     * @notice Cool down period when you submit a wrong report\\n     *         Wrong Report: Closed by the Admin team\\n     *\\n     * @return COOLDOWN_WRONG_REPORT Cooldown time in second (before you can submit another report)\\n     */\\n    function COOLDOWN_WRONG_REPORT() external view returns (uint256);\\n\\n    /**\\n     * @notice Claim reward\\n     *         Users can claim reward when they vote correctly\\n     *\\n     * @param _reportId Report id\\n     */\\n    function claimReward(uint256 _reportId) external;\\n\\n    /**\\n     * @notice Close a report\\n     *         Only callable by the owner\\n     *\\n     * @param _reportId Report id\\n     */\\n    function closeReport(uint256 _reportId) external;\\n\\n    function deg() external view returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getReport(uint256 _id) external view returns (Report memory);\\n\\n    function getTempResult(uint256 _id)\\n        external\\n        view\\n        returns (TempResult memory);\\n\\n    function getUserVote(address _user, uint256 _id)\\n        external\\n        view\\n        returns (UserVote memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function payDebt(uint256 _reportId, address _user) external;\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolReported(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function report(\\n        uint256 _poolId,\\n        uint256 _payout,\\n        address _user\\n    ) external;\\n\\n    function reportCounter() external view returns (uint256);\\n\\n    function reportTempResults(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 result,\\n            uint256 sampleTimestamp,\\n            bool hasChanged\\n        );\\n\\n    function reports(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 poolId,\\n            uint256 reportTimestamp,\\n            address reporter,\\n            uint256 voteTimestamp,\\n            uint256 numFor,\\n            uint256 numAgainst,\\n            uint256 round,\\n            uint256 status,\\n            uint256 result,\\n            uint256 votingReward,\\n            uint256 payout\\n        );\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function settle(uint256 _reportId) external;\\n\\n    function shield() external view returns (address);\\n\\n    function startVoting(uint256 _reportId) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function unpausePools(uint256 _poolId) external;\\n\\n    function userCoolDownUntil(address) external view returns (uint256);\\n\\n    function votes(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint256 choice,\\n            uint256 amount,\\n            bool claimed\\n        );\\n\\n    function veDeg() external view returns (address);\\n\\n    function vote(\\n        uint256 _reportId,\\n        uint256 _isFor,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function poolReports(uint256 _poolId, uint256 _index)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPoolReportsAmount(uint256 _poolId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function executed(uint256 _reportId) external;\\n}\\n\",\"keccak256\":\"0x45240e1cd5b98b259f0b7bf9b1933bdf33535267718d195bebf8f9f1a0aee5da\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _owner = _initOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x78b93f32b25ad2184a4fbc44160870a5a81f567186c99923ecbc54329c57f88b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60803461009257601f612d8738819003918201601f19168301916001600160401b0383118484101761009757808492604094855283398101031261009257610052602061004b836100ad565b92016100ad565b9060018060a01b0319913383600054161760005560018060a01b0380921683600154161760015516906002541617600255604051612cc590816100c28239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100925756fe6080604052600436101562000014575b600080fd5b60003560e01c80630f89b77d14620001545780631158c64c146200014957806316209095146200013e5780632dd57bb014620001335780633f07b28214620001285780633f81ff26146200011d5780636273106a14620001125780636a6cc25814620001075780636c1020a114620000fc578063715018a614620000f15780638da5cb5b14620000e6578063e3356ccf14620000db578063e8adbf2f14620000d05763f2fde38b14620000c657600080fd5b6200000f62000687565b506200000f6200065b565b506200000f62000614565b506200000f620005e8565b506200000f6200057f565b506200000f620003a3565b506200000f62000343565b506200000f62000317565b506200000f620002d0565b506200000f6200025a565b506200000f62000213565b506200000f620001bd565b506200000f62000193565b50346200000f5760003660031901126200000f576002546040516001600160a01b039091168152602090f35b60209060031901126200000f5760043590565b50346200000f57620001a53662000180565b60005260066020526020604060002054604051908152f35b50346200000f57620001cf3662000180565b6000526005602052602060018060a01b0360406000205416604051908152f35b60209060031901126200000f576004356001600160a01b03811681036200000f5790565b50346200000f576200022536620001ef565b6000546001600160a01b03919062000241908316331462000796565b60018054919092166001600160a01b0319909116179055005b50346200000f5760603660031901126200000f576040516020810190620002ad816200029e6044356024356004358791606093918352602083015260408201520190565b03601f19810183528262000764565b5190206000526005602052602060018060a01b0360406000205416604051908152f35b50346200000f57620002e236620001ef565b6000546001600160a01b039190620002fe908316331462000796565b60038054919092166001600160a01b0319909116179055005b50346200000f5760003660031901126200000f576003546040516001600160a01b039091168152602090f35b50346200000f57620003553662000180565b6000526004602052602060ff604060002054166040519015158152f35b9181601f840112156200000f5782359167ffffffffffffffff83116200000f57602083818601950101116200000f57565b50346200000f5760a03660031901126200000f5767ffffffffffffffff6004358181116200000f57620003db90369060040162000372565b9190602435926044359283116200000f576200057b936200055e7f30aea988271444d9893c99d63b763479d038c4b2756b3ede0182f293d5beda91936200042b6200053296369060040162000372565b600154919560843592606435929162000551916200051e91906200045a906001600160a01b03163314620007d0565b6200046785151562000812565b6200051886868c8c62000511620005076040516020810190620004a1816200029e8a8a898791606093918352602083015260408201520190565b5190209d8e98620004d9620004d3620004cf620004c88d6000526004602052604060002090565b5460ff1690565b1590565b62000852565b620004ff620004f28b6000526004602052604060002090565b805460ff19166001179055565b369162000892565b928a369162000892565b91620009b0565b62000a8a565b809a81966000526005602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b60405196879687620008ee565b0390a16040516001600160a01b0390911681529081906020820190565b0390f35b50346200000f57600080600319360112620005e55780546001600160a01b03811690620005ae33831462000796565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b0319168255f35b80fd5b50346200000f5760003660031901126200000f576000546040516001600160a01b039091168152602090f35b50346200000f576200062636620001ef565b6000546001600160a01b03919062000642908316331462000796565b60028054919092166001600160a01b0319909116179055005b50346200000f5760003660031901126200000f576001546040516001600160a01b039091168152602090f35b50346200000f576200069936620001ef565b600054906001600160a01b0380831691620006b633841462000796565b168015620006f95760009281604051937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08686a36001600160a01b031916178255f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176200078757604052565b620007916200074d565b604052565b156200079e57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b15620007d857565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903837b634b1bc9031b2b73a32b960711b6044820152606490fd5b156200081a57565b60405162461bcd60e51b815260206004820152601060248201526f5a65726f20657870697279206461746560801b6044820152606490fd5b156200085a57565b60405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e4819195c1b1bde595960821b6044820152606490fd5b92919267ffffffffffffffff8211620008de575b60405191620008c0601f8201601f19166020018462000764565b8294818452818301116200000f578281602093846000960137010152565b620008e86200074d565b620008a6565b9491928060809598979460c093885260a060208901528160a0890152838801376000828288010152601f8019910116850101956040850152606084015260018060a01b0316910152565b918091926000905b8282106200095a57501162000953575050565b6000910152565b9150806020918301518186015201829162000940565b906020916200098b8151809281855285808601910162000938565b601f01601f1916010190565b90620009ac6020928281519485920162000938565b0190565b919062000a3d62000a6262000a7a9262000a879662000a73986121f19660405197620009e0602082018a62000764565b80895262000a9f60208a013960018060a01b038060015416816002541691600354169360405198899762000a23610100968760208c01526101208b019062000970565b9060408a0152601f199d8e8a83030160608b015262000970565b95608088015260a087015260c086015260e08501528301520385810183528262000764565b604051958693602085019062000997565b9062000997565b0390810183528262000764565b90565b6020815191016000f590813b156200000f5756fe604060e08152346200056957620021f1803803806200001e816200056e565b92833981019061010081830312620005695780516001600160401b03908181116200056957836200005191840162000594565b6020918284015194868501519082821162000569576200007391860162000594565b946060850151956080860151926200008e60a0880162000617565b94620000ab60e0620000a360c08b0162000617565b990162000617565b968a51918b83018381108582111762000469578c52600783526631b92a37b5b2b760c91b8284015284519184831162000469576003938454936001978886811c961680156200055e575b8487101462000548578190601f96878111620004f2575b5084908783116001146200048b576000926200047f575b505060001982881b1c191690881b1785555b8051868111620004695760049182548981811c911680156200045e575b858210146200044957908187849311620003f3575b5084908783116001146200038c5760009262000380575b505060001982881b1c191690881b1781555b8660055560018060a01b03199c8d3390600654161760065560a05282519586116200036b57600a54908782811c9216801562000360575b838310146200034b5750838111620002ff575b50809285116001146200028f575093839491849260009562000283575b50501b92600019911b1c191617600a555b60c05260805260018060a01b039283809216856007541617600755168360085416176008551690600954161760095551611bc490816200062d823960805181818161124b0152611954015260a05181818161034e01528181610e280152611477015260c0518181816105220152818161107b01526118f00152f35b015193503880620001f7565b92919084601f198116600a60005285600020956000905b89838310620002e45750505010620002c9575b50505050811b01600a5562000208565b01519060f884600019921b161c1916905538808080620002b9565b858701518955909701969485019488935090810190620002a6565b600a600052816000208480880160051c82019284891062000341575b0160051c019087905b82811062000334575050620001da565b6000815501879062000324565b925081926200031b565b602290634e487b7160e01b6000525260246000fd5b91607f1691620001c7565b604190634e487b7160e01b6000525260246000fd5b0151905038806200017e565b908a9350601f1983169185600052866000209260005b88828210620003dc5750508411620003c3575b505050811b01815562000190565b0151600019838a1b60f8161c19169055388080620003b5565b8385015186558e97909501949384019301620003a2565b90915083600052846000208780850160051c8201928786106200043f575b918c91869594930160051c01915b8281106200042f57505062000167565b600081558594508c91016200041f565b9250819262000411565b602284634e487b7160e01b6000525260246000fd5b90607f169062000152565b634e487b7160e01b600052604160045260246000fd5b01519050388062000123565b908a9350601f1983169189600052866000209260005b88828210620004db5750508411620004c2575b505050811b01855562000135565b0151600019838a1b60f8161c19169055388080620004b4565b8385015186558e97909501949384019301620004a1565b90915087600052846000208780850160051c8201928786106200053e575b918c91869594930160051c01915b8281106200052e5750506200010c565b600081558594508c91016200051e565b9250819262000510565b634e487b7160e01b600052602260045260246000fd5b95607f1695620000f5565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200046957604052565b81601f8201121562000569578051906001600160401b0382116200046957602090620005c9601f8401601f191683016200056e565b93838552828483010111620005695782906000905b83838310620005fe57505011620005f457505090565b6000918301015290565b81935082819392010151828288010152018391620005de565b51906001600160a01b0382168203620005695756fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde03146112bd57508063095ea7b3146112975780630f89b77d1461126e578063172195221461123357806318160ddd1461121557806323b872dd146111575780632dd57bb01461110b578063313ce567146110ef578063395093511461109e5780633e0dc34e146110635780636273106a1461103a57806370a0823114611000578063715018a614610f9b5780638253b82614610f5357806382b2ed1314610f30578063836a10401461077b5780638da5cb5b1461075257806395d89b41146106af5780639eea5f66146104e2578063a457c2d71461043b578063a9059cbb1461040a578063b39d2bab146103ee578063d89232da146103c2578063dd62ed3e14610371578063e184c9be14610336578063e8adbf2f1461030d578063f2fde38b146102425763f3466dfa1461015357600080fd5b3461023d57600036600319011261023d57604051600090600a54600181811c90808316928315610233575b602093848410811461021d578386529081156101fd57506001146101bd575b6101b9846101ad8188038261140a565b6040519182918261135d565b0390f35b919350600a60005283600020916000925b8284106101ea57505050816101b9936101ad928201019361019d565b80548585018701529285019281016101ce565b60ff1916858501525050151560051b82010191506101ad816101b961019d565b634e487b7160e01b600052602260045260246000fd5b91607f169161017e565b600080fd5b3461023d57602036600319011261023d5761025b6113b4565b600654906001600160a01b0380831691610276338414611748565b1680156102b95760009281604051937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08686a36001600160a01b03191617600655f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461023d57600036600319011261023d576007546040516001600160a01b039091168152602090f35b3461023d57600036600319011261023d5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461023d57604036600319011261023d5761038a6113b4565b6103926113ca565b9060018060a01b038091166000526001602052604060002091166000526020526020604060002054604051908152f35b3461023d57602036600319011261023d576103db6113b4565b5060206103e66118dd565b604051908152f35b3461023d57600036600319011261023d57602060405160008152f35b3461023d57604036600319011261023d576104306104266113b4565b602435903361144e565b602060405160018152f35b3461023d57604036600319011261023d576104546113b4565b60243590336000526001602052604060002060018060a01b0382166000526020526040600020549180831061048f5761043092039033611646565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461023d576105476104f3366113e0565b60075490936001600160a01b039384939284168061069e575b50610515611838565b6105208615156117c2565b7f0000000000000000000000000000000000000000000000000000000000000000146117fc565b1690811580159061064f5780610647575b6105fd575b50806000526000602052604060002054918083106105ad57602081600080516020611b6f833981519152926000958587528684520360408620558060025403600255604051908152a36001600555005b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b6007541661060b578261055d565b60405162461bcd60e51b815260206004820152601460248201527327b7363c903a37903837b634b1bca1b2b73a32b960611b6044820152606490fd5b506000610558565b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b6106a9903314611781565b8661050c565b3461023d57600036600319011261023d57604051600090600454600181811c90808316928315610748575b602093848410811461021d578386529081156101fd5750600114610708576101b9846101ad8188038261140a565b919350600460005283600020916000925b82841061073557505050816101b9936101ad928201019361019d565b8054858501870152928501928101610719565b91607f16916106da565b3461023d57600036600319011261023d576006546040516001600160a01b039091168152602090f35b3461023d576107b761078c366113e0565b60075490939192906001600160a01b031680610f1f575b506107ac611838565b6105208415156117c2565b620151804204600081126001600160ff1b0382900362010bd9821582821316610f0957600160ff1b8490039283821216610f09576000908401129162010bd819908162253d8c93018313841516610f0957011316610f09576226496501600081136001600160ff1b0382900460041116600116610f095760008112600760fd1b821216600116610f095762023ab16001600283901b8290056001600160ff1b03819004831160009091131616610f095760017fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2828460021b05126000838560021b05121616610f0957600282901b81900581026000811280156001600160ff1b0383900360031316610f0957600160ff1b82900360031216610f0957600460036108e392010583611aca565b906000821280156001600160ff1b0384900360011316610f0957600160ff1b83900360011216610f0957600182810192610fa091600085136001600160ff1b0386900484111616610f095760017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8512600086121616610f095761097a90600461097362164b0987860205611b1e565b0590611aca565b6000811280156001600160ff1b03839003601f1316610f0957600160ff1b829003601f1216610f0957601f0192600084136001600160ff1b0385900460501116600116610f095760017ffe666666666666666666666666666666666666666666666666666666666666678512600086121616610f095761098f605085028190059390600085136001600160ff1b03869004821116600116610f0957600085129560017ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f30702688712881616610f0957605086610a5593020590611aca565b9480156001600160ff1b0386900360021316610f0957600160ff1b85900360021216610f09576001600b85056001600160ff1b03819004600c1160009091131616610f095760017ff555555555555555555555555555555555555555555555555555555555555556600b8605126000600b8705121616610f0957610ae2600b8505600c0260028601611aca565b956031600160ff1b01600282901b83900512600116610f09576001603019600283901b849005016001600160ff1b0381900460641160009091131616610f09576000600282901b839005603019019081127ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb990911216600116610f095762164b09610b8393600b610b889705950205916030199160021b0501606402611af3565b611af3565b906107b2821061023d57617d4b600160ff1b018112600116610f095760008212156001600160ff1b038390036112c01316610f095760008212600160ff1b8390036112c01216610f0957610c05906004610bf9610bf4600c610be988611ab2565b056112c08701611af3565b611b1e565b0590617d4a1901611af3565b6002600160ff1b018312600116610f0957600c610c2184611ab2565b0560017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8211600083131616610f095760017ff5555555555555555555555555555555555555555555555555555555555555568212600083121616610f0957610c9190600c026001198501611aca565b90600082136001600160ff1b0383900461016f1116600116610f095760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318312600084121616610f0957600c610ced9261016f020590611af3565b916113249160008112156001600160ff1b03829003841316610f095760008112600160ff1b829003841216610f0957606492600c610d2d610d3594611ab2565b059101611af3565b0590600082136001600160ff1b0383900460031116600116610f095760017fd5555555555555555555555555555555555555555555555555555555555555568312600084121616610f09576004610d90926003020590611aca565b62253d8c600160ff1b018112600116610f095762253d8b1901801515600019829004620151801116610f095762015180029062014370198211610f0957610dd41962014370830111610f0957603b1962015144830111610f095760018060a01b03169182600052602091600b83526201517f6040600020910160005282526040600020610e1e828254611442565b90558215610ec4577f00000000000000000000000000000000000000000000000000000000000000004211610e8d5760009181610e6c600080516020611b6f83398151915293600254611442565b60025584845283825260408420818154019055604051908152a36001600555005b60405162461bcd60e51b815260048101839052600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b60405162461bcd60e51b815260048101839052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b610f2a903314611781565b846107a3565b3461023d57602036600319011261023d5760206103e6610f4e6113b4565b61188e565b3461023d57604036600319011261023d576001600160a01b03610f746113b4565b16600052600b60205260406000206024356000526020526020604060002054604051908152f35b3461023d57600036600319011261023d576006546000906001600160a01b03811690610fc8338314611748565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600655f35b3461023d57602036600319011261023d576001600160a01b036110216113b4565b1660005260006020526020604060002054604051908152f35b3461023d57600036600319011261023d576009546040516001600160a01b039091168152602090f35b3461023d57600036600319011261023d5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461023d57604036600319011261023d576104306110ba6113b4565b336000526001602052604060002060018060a01b0382166000526020526110e8602435604060002054611442565b9033611646565b3461023d57600036600319011261023d57602060405160068152f35b3461023d57602036600319011261023d576111246113b4565b6006546001600160a01b03919061113e9083163314611748565b60078054919092166001600160a01b0319909116179055005b3461023d57606036600319011261023d576111706113b4565b6111786113ca565b6044359060018060a01b03831660005260016020526040600020336000526020526040600020549260001984036111b4575b610430935061144e565b8284106111d0576111cb8361043095033383611646565b6111aa565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461023d57600036600319011261023d576020600254604051908152f35b3461023d57600036600319011261023d5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461023d57600036600319011261023d576008546040516001600160a01b039091168152602090f35b3461023d57604036600319011261023d576104306112b36113b4565b6024359033611646565b3461023d57600036600319011261023d57600090600354600181811c90808316928315611353575b602093848410811461021d578386529081156101fd5750600114611313576101b9846101ad8188038261140a565b919350600360005283600020916000925b82841061134057505050816101b9936101ad928201019361019d565b8054858501870152928501928101611324565b91607f16916112e5565b919091602080825283519081818401526000945b82861061139e575050806040939411611391575b601f01601f1916010190565b6000838284010152611385565b8581018201518487016040015294810194611371565b600435906001600160a01b038216820361023d57565b602435906001600160a01b038216820361023d57565b606090600319011261023d57600435906024356001600160a01b038116810361023d579060443590565b90601f8019910116810190811067ffffffffffffffff82111761142c57604052565b634e487b7160e01b600052604160045260246000fd5b81198111610f09570190565b6001600160a01b0390811680158015949193919291906115f35781169384158015906115a257807f00000000000000000000000000000000000000000000000000000000000000004211611561575b5081611559575b50611549575b506000828152806020526040812054918083106114f55760408282600080516020611b6f833981519152958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60075416830361060b57386114aa565b9050386114a4565b61156b578061149d565b60405162461bcd60e51b815260206004820152600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b039081169182156116f757169182156116a75760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561174f57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b1561178857565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903837b634b1bc9031b2b73a32b960711b6044820152606490fd5b156117c957565b60405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8105b5bdd5b9d60aa1b6044820152606490fd5b1561180357565b60405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c81c1bdbdb081a59609a1b6044820152606490fd5b600260055414611849576002600555565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6118966118dd565b60009160018060a01b031682528160205260408220548082116000146118bb57505090565b90918282106118c957500390565b634e487b7160e01b81526011600452602490fd5b60085460408051637aaf11c760e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482018190526000949385936001600160a01b03939092918416916020918281602481875afa908115611aa8578791611a77575b50611952575b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000060018110611a63578451632509d07760e11b815260048101929092526000190160248201528181604481865afa918215611a59578692611a27575b5050825191829163c942adf760e01b835260048301528160246101609384935afa8015611a1d576119e0575b8061194a565b81813d8311611a16575b6119f4818361140a565b81010312611a1257015190811603611a0f57808080806119da565b80fd5b8380fd5b503d6119ea565b83513d87823e3d90fd5b90809250813d8311611a52575b611a3e818361140a565b81010312611a4e575138806119ae565b8480fd5b503d611a34565b84513d88823e3d90fd5b634e487b7160e01b87526011600452602487fd5b90508281813d8311611aa1575b611a8e818361140a565b81010312611a9d575138611944565b8680fd5b503d611a84565b85513d89823e3d90fd5b600e600160ff1b018112600116610f0957600d190190565b600082128015600160ff1b8401831216610f09576001600160ff1b038301821316610f09570390565b6000811280156001600160ff1b03839003841316610f0957600160ff1b829003831216610f09570190565b6105b560008083136001600160ff1b038490048311166001166118c95760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166118c95750029056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209d889cbc3302c168b0ad675c27317e591e7240e41838231eae33e27c9045e58e64736f6c634300080f0033a2646970667358221220e1f3be33a2bb6a03bd3d49ce5efc2ed8ae5816eac40b693581a33f933db1cf4e64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b60003560e01c80630f89b77d14620001545780631158c64c146200014957806316209095146200013e5780632dd57bb014620001335780633f07b28214620001285780633f81ff26146200011d5780636273106a14620001125780636a6cc25814620001075780636c1020a114620000fc578063715018a614620000f15780638da5cb5b14620000e6578063e3356ccf14620000db578063e8adbf2f14620000d05763f2fde38b14620000c657600080fd5b6200000f62000687565b506200000f6200065b565b506200000f62000614565b506200000f620005e8565b506200000f6200057f565b506200000f620003a3565b506200000f62000343565b506200000f62000317565b506200000f620002d0565b506200000f6200025a565b506200000f62000213565b506200000f620001bd565b506200000f62000193565b50346200000f5760003660031901126200000f576002546040516001600160a01b039091168152602090f35b60209060031901126200000f5760043590565b50346200000f57620001a53662000180565b60005260066020526020604060002054604051908152f35b50346200000f57620001cf3662000180565b6000526005602052602060018060a01b0360406000205416604051908152f35b60209060031901126200000f576004356001600160a01b03811681036200000f5790565b50346200000f576200022536620001ef565b6000546001600160a01b03919062000241908316331462000796565b60018054919092166001600160a01b0319909116179055005b50346200000f5760603660031901126200000f576040516020810190620002ad816200029e6044356024356004358791606093918352602083015260408201520190565b03601f19810183528262000764565b5190206000526005602052602060018060a01b0360406000205416604051908152f35b50346200000f57620002e236620001ef565b6000546001600160a01b039190620002fe908316331462000796565b60038054919092166001600160a01b0319909116179055005b50346200000f5760003660031901126200000f576003546040516001600160a01b039091168152602090f35b50346200000f57620003553662000180565b6000526004602052602060ff604060002054166040519015158152f35b9181601f840112156200000f5782359167ffffffffffffffff83116200000f57602083818601950101116200000f57565b50346200000f5760a03660031901126200000f5767ffffffffffffffff6004358181116200000f57620003db90369060040162000372565b9190602435926044359283116200000f576200057b936200055e7f30aea988271444d9893c99d63b763479d038c4b2756b3ede0182f293d5beda91936200042b6200053296369060040162000372565b600154919560843592606435929162000551916200051e91906200045a906001600160a01b03163314620007d0565b6200046785151562000812565b6200051886868c8c62000511620005076040516020810190620004a1816200029e8a8a898791606093918352602083015260408201520190565b5190209d8e98620004d9620004d3620004cf620004c88d6000526004602052604060002090565b5460ff1690565b1590565b62000852565b620004ff620004f28b6000526004602052604060002090565b805460ff19166001179055565b369162000892565b928a369162000892565b91620009b0565b62000a8a565b809a81966000526005602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b60405196879687620008ee565b0390a16040516001600160a01b0390911681529081906020820190565b0390f35b50346200000f57600080600319360112620005e55780546001600160a01b03811690620005ae33831462000796565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b0319168255f35b80fd5b50346200000f5760003660031901126200000f576000546040516001600160a01b039091168152602090f35b50346200000f576200062636620001ef565b6000546001600160a01b03919062000642908316331462000796565b60028054919092166001600160a01b0319909116179055005b50346200000f5760003660031901126200000f576001546040516001600160a01b039091168152602090f35b50346200000f576200069936620001ef565b600054906001600160a01b0380831691620006b633841462000796565b168015620006f95760009281604051937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08686a36001600160a01b031916178255f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176200078757604052565b620007916200074d565b604052565b156200079e57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b15620007d857565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903837b634b1bc9031b2b73a32b960711b6044820152606490fd5b156200081a57565b60405162461bcd60e51b815260206004820152601060248201526f5a65726f20657870697279206461746560801b6044820152606490fd5b156200085a57565b60405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e4819195c1b1bde595960821b6044820152606490fd5b92919267ffffffffffffffff8211620008de575b60405191620008c0601f8201601f19166020018462000764565b8294818452818301116200000f578281602093846000960137010152565b620008e86200074d565b620008a6565b9491928060809598979460c093885260a060208901528160a0890152838801376000828288010152601f8019910116850101956040850152606084015260018060a01b0316910152565b918091926000905b8282106200095a57501162000953575050565b6000910152565b9150806020918301518186015201829162000940565b906020916200098b8151809281855285808601910162000938565b601f01601f1916010190565b90620009ac6020928281519485920162000938565b0190565b919062000a3d62000a6262000a7a9262000a879662000a73986121f19660405197620009e0602082018a62000764565b80895262000a9f60208a013960018060a01b038060015416816002541691600354169360405198899762000a23610100968760208c01526101208b019062000970565b9060408a0152601f199d8e8a83030160608b015262000970565b95608088015260a087015260c086015260e08501528301520385810183528262000764565b604051958693602085019062000997565b9062000997565b0390810183528262000764565b90565b6020815191016000f590813b156200000f5756fe604060e08152346200056957620021f1803803806200001e816200056e565b92833981019061010081830312620005695780516001600160401b03908181116200056957836200005191840162000594565b6020918284015194868501519082821162000569576200007391860162000594565b946060850151956080860151926200008e60a0880162000617565b94620000ab60e0620000a360c08b0162000617565b990162000617565b968a51918b83018381108582111762000469578c52600783526631b92a37b5b2b760c91b8284015284519184831162000469576003938454936001978886811c961680156200055e575b8487101462000548578190601f96878111620004f2575b5084908783116001146200048b576000926200047f575b505060001982881b1c191690881b1785555b8051868111620004695760049182548981811c911680156200045e575b858210146200044957908187849311620003f3575b5084908783116001146200038c5760009262000380575b505060001982881b1c191690881b1781555b8660055560018060a01b03199c8d3390600654161760065560a05282519586116200036b57600a54908782811c9216801562000360575b838310146200034b5750838111620002ff575b50809285116001146200028f575093839491849260009562000283575b50501b92600019911b1c191617600a555b60c05260805260018060a01b039283809216856007541617600755168360085416176008551690600954161760095551611bc490816200062d823960805181818161124b0152611954015260a05181818161034e01528181610e280152611477015260c0518181816105220152818161107b01526118f00152f35b015193503880620001f7565b92919084601f198116600a60005285600020956000905b89838310620002e45750505010620002c9575b50505050811b01600a5562000208565b01519060f884600019921b161c1916905538808080620002b9565b858701518955909701969485019488935090810190620002a6565b600a600052816000208480880160051c82019284891062000341575b0160051c019087905b82811062000334575050620001da565b6000815501879062000324565b925081926200031b565b602290634e487b7160e01b6000525260246000fd5b91607f1691620001c7565b604190634e487b7160e01b6000525260246000fd5b0151905038806200017e565b908a9350601f1983169185600052866000209260005b88828210620003dc5750508411620003c3575b505050811b01815562000190565b0151600019838a1b60f8161c19169055388080620003b5565b8385015186558e97909501949384019301620003a2565b90915083600052846000208780850160051c8201928786106200043f575b918c91869594930160051c01915b8281106200042f57505062000167565b600081558594508c91016200041f565b9250819262000411565b602284634e487b7160e01b6000525260246000fd5b90607f169062000152565b634e487b7160e01b600052604160045260246000fd5b01519050388062000123565b908a9350601f1983169189600052866000209260005b88828210620004db5750508411620004c2575b505050811b01855562000135565b0151600019838a1b60f8161c19169055388080620004b4565b8385015186558e97909501949384019301620004a1565b90915087600052846000208780850160051c8201928786106200053e575b918c91869594930160051c01915b8281106200052e5750506200010c565b600081558594508c91016200051e565b9250819262000510565b634e487b7160e01b600052602260045260246000fd5b95607f1695620000f5565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200046957604052565b81601f8201121562000569578051906001600160401b0382116200046957602090620005c9601f8401601f191683016200056e565b93838552828483010111620005695782906000905b83838310620005fe57505011620005f457505090565b6000918301015290565b81935082819392010151828288010152018391620005de565b51906001600160a01b0382168203620005695756fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde03146112bd57508063095ea7b3146112975780630f89b77d1461126e578063172195221461123357806318160ddd1461121557806323b872dd146111575780632dd57bb01461110b578063313ce567146110ef578063395093511461109e5780633e0dc34e146110635780636273106a1461103a57806370a0823114611000578063715018a614610f9b5780638253b82614610f5357806382b2ed1314610f30578063836a10401461077b5780638da5cb5b1461075257806395d89b41146106af5780639eea5f66146104e2578063a457c2d71461043b578063a9059cbb1461040a578063b39d2bab146103ee578063d89232da146103c2578063dd62ed3e14610371578063e184c9be14610336578063e8adbf2f1461030d578063f2fde38b146102425763f3466dfa1461015357600080fd5b3461023d57600036600319011261023d57604051600090600a54600181811c90808316928315610233575b602093848410811461021d578386529081156101fd57506001146101bd575b6101b9846101ad8188038261140a565b6040519182918261135d565b0390f35b919350600a60005283600020916000925b8284106101ea57505050816101b9936101ad928201019361019d565b80548585018701529285019281016101ce565b60ff1916858501525050151560051b82010191506101ad816101b961019d565b634e487b7160e01b600052602260045260246000fd5b91607f169161017e565b600080fd5b3461023d57602036600319011261023d5761025b6113b4565b600654906001600160a01b0380831691610276338414611748565b1680156102b95760009281604051937f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08686a36001600160a01b03191617600655f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461023d57600036600319011261023d576007546040516001600160a01b039091168152602090f35b3461023d57600036600319011261023d5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461023d57604036600319011261023d5761038a6113b4565b6103926113ca565b9060018060a01b038091166000526001602052604060002091166000526020526020604060002054604051908152f35b3461023d57602036600319011261023d576103db6113b4565b5060206103e66118dd565b604051908152f35b3461023d57600036600319011261023d57602060405160008152f35b3461023d57604036600319011261023d576104306104266113b4565b602435903361144e565b602060405160018152f35b3461023d57604036600319011261023d576104546113b4565b60243590336000526001602052604060002060018060a01b0382166000526020526040600020549180831061048f5761043092039033611646565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b3461023d576105476104f3366113e0565b60075490936001600160a01b039384939284168061069e575b50610515611838565b6105208615156117c2565b7f0000000000000000000000000000000000000000000000000000000000000000146117fc565b1690811580159061064f5780610647575b6105fd575b50806000526000602052604060002054918083106105ad57602081600080516020611b6f833981519152926000958587528684520360408620558060025403600255604051908152a36001600555005b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b6007541661060b578261055d565b60405162461bcd60e51b815260206004820152601460248201527327b7363c903a37903837b634b1bca1b2b73a32b960611b6044820152606490fd5b506000610558565b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b6106a9903314611781565b8661050c565b3461023d57600036600319011261023d57604051600090600454600181811c90808316928315610748575b602093848410811461021d578386529081156101fd5750600114610708576101b9846101ad8188038261140a565b919350600460005283600020916000925b82841061073557505050816101b9936101ad928201019361019d565b8054858501870152928501928101610719565b91607f16916106da565b3461023d57600036600319011261023d576006546040516001600160a01b039091168152602090f35b3461023d576107b761078c366113e0565b60075490939192906001600160a01b031680610f1f575b506107ac611838565b6105208415156117c2565b620151804204600081126001600160ff1b0382900362010bd9821582821316610f0957600160ff1b8490039283821216610f09576000908401129162010bd819908162253d8c93018313841516610f0957011316610f09576226496501600081136001600160ff1b0382900460041116600116610f095760008112600760fd1b821216600116610f095762023ab16001600283901b8290056001600160ff1b03819004831160009091131616610f095760017fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2828460021b05126000838560021b05121616610f0957600282901b81900581026000811280156001600160ff1b0383900360031316610f0957600160ff1b82900360031216610f0957600460036108e392010583611aca565b906000821280156001600160ff1b0384900360011316610f0957600160ff1b83900360011216610f0957600182810192610fa091600085136001600160ff1b0386900484111616610f095760017ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8512600086121616610f095761097a90600461097362164b0987860205611b1e565b0590611aca565b6000811280156001600160ff1b03839003601f1316610f0957600160ff1b829003601f1216610f0957601f0192600084136001600160ff1b0385900460501116600116610f095760017ffe666666666666666666666666666666666666666666666666666666666666678512600086121616610f095761098f605085028190059390600085136001600160ff1b03869004821116600116610f0957600085129560017ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f30702688712881616610f0957605086610a5593020590611aca565b9480156001600160ff1b0386900360021316610f0957600160ff1b85900360021216610f09576001600b85056001600160ff1b03819004600c1160009091131616610f095760017ff555555555555555555555555555555555555555555555555555555555555556600b8605126000600b8705121616610f0957610ae2600b8505600c0260028601611aca565b956031600160ff1b01600282901b83900512600116610f09576001603019600283901b849005016001600160ff1b0381900460641160009091131616610f09576000600282901b839005603019019081127ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb990911216600116610f095762164b09610b8393600b610b889705950205916030199160021b0501606402611af3565b611af3565b906107b2821061023d57617d4b600160ff1b018112600116610f095760008212156001600160ff1b038390036112c01316610f095760008212600160ff1b8390036112c01216610f0957610c05906004610bf9610bf4600c610be988611ab2565b056112c08701611af3565b611b1e565b0590617d4a1901611af3565b6002600160ff1b018312600116610f0957600c610c2184611ab2565b0560017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8211600083131616610f095760017ff5555555555555555555555555555555555555555555555555555555555555568212600083121616610f0957610c9190600c026001198501611aca565b90600082136001600160ff1b0383900461016f1116600116610f095760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae6318312600084121616610f0957600c610ced9261016f020590611af3565b916113249160008112156001600160ff1b03829003841316610f095760008112600160ff1b829003841216610f0957606492600c610d2d610d3594611ab2565b059101611af3565b0590600082136001600160ff1b0383900460031116600116610f095760017fd5555555555555555555555555555555555555555555555555555555555555568312600084121616610f09576004610d90926003020590611aca565b62253d8c600160ff1b018112600116610f095762253d8b1901801515600019829004620151801116610f095762015180029062014370198211610f0957610dd41962014370830111610f0957603b1962015144830111610f095760018060a01b03169182600052602091600b83526201517f6040600020910160005282526040600020610e1e828254611442565b90558215610ec4577f00000000000000000000000000000000000000000000000000000000000000004211610e8d5760009181610e6c600080516020611b6f83398151915293600254611442565b60025584845283825260408420818154019055604051908152a36001600555005b60405162461bcd60e51b815260048101839052600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b60405162461bcd60e51b815260048101839052601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b610f2a903314611781565b846107a3565b3461023d57602036600319011261023d5760206103e6610f4e6113b4565b61188e565b3461023d57604036600319011261023d576001600160a01b03610f746113b4565b16600052600b60205260406000206024356000526020526020604060002054604051908152f35b3461023d57600036600319011261023d576006546000906001600160a01b03811690610fc8338314611748565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600655f35b3461023d57602036600319011261023d576001600160a01b036110216113b4565b1660005260006020526020604060002054604051908152f35b3461023d57600036600319011261023d576009546040516001600160a01b039091168152602090f35b3461023d57600036600319011261023d5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461023d57604036600319011261023d576104306110ba6113b4565b336000526001602052604060002060018060a01b0382166000526020526110e8602435604060002054611442565b9033611646565b3461023d57600036600319011261023d57602060405160068152f35b3461023d57602036600319011261023d576111246113b4565b6006546001600160a01b03919061113e9083163314611748565b60078054919092166001600160a01b0319909116179055005b3461023d57606036600319011261023d576111706113b4565b6111786113ca565b6044359060018060a01b03831660005260016020526040600020336000526020526040600020549260001984036111b4575b610430935061144e565b8284106111d0576111cb8361043095033383611646565b6111aa565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b3461023d57600036600319011261023d576020600254604051908152f35b3461023d57600036600319011261023d5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461023d57600036600319011261023d576008546040516001600160a01b039091168152602090f35b3461023d57604036600319011261023d576104306112b36113b4565b6024359033611646565b3461023d57600036600319011261023d57600090600354600181811c90808316928315611353575b602093848410811461021d578386529081156101fd5750600114611313576101b9846101ad8188038261140a565b919350600360005283600020916000925b82841061134057505050816101b9936101ad928201019361019d565b8054858501870152928501928101611324565b91607f16916112e5565b919091602080825283519081818401526000945b82861061139e575050806040939411611391575b601f01601f1916010190565b6000838284010152611385565b8581018201518487016040015294810194611371565b600435906001600160a01b038216820361023d57565b602435906001600160a01b038216820361023d57565b606090600319011261023d57600435906024356001600160a01b038116810361023d579060443590565b90601f8019910116810190811067ffffffffffffffff82111761142c57604052565b634e487b7160e01b600052604160045260246000fd5b81198111610f09570190565b6001600160a01b0390811680158015949193919291906115f35781169384158015906115a257807f00000000000000000000000000000000000000000000000000000000000000004211611561575b5081611559575b50611549575b506000828152806020526040812054918083106114f55760408282600080516020611b6f833981519152958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60075416830361060b57386114aa565b9050386114a4565b61156b578061149d565b60405162461bcd60e51b815260206004820152600f60248201526e22bc3834b932b21031b92a37b5b2b760891b6044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b039081169182156116f757169182156116a75760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b1561174f57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b1561178857565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903837b634b1bc9031b2b73a32b960711b6044820152606490fd5b156117c957565b60405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8105b5bdd5b9d60aa1b6044820152606490fd5b1561180357565b60405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c81c1bdbdb081a59609a1b6044820152606490fd5b600260055414611849576002600555565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6118966118dd565b60009160018060a01b031682528160205260408220548082116000146118bb57505090565b90918282106118c957500390565b634e487b7160e01b81526011600452602490fd5b60085460408051637aaf11c760e01b81527f0000000000000000000000000000000000000000000000000000000000000000600482018190526000949385936001600160a01b03939092918416916020918281602481875afa908115611aa8578791611a77575b50611952575b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000060018110611a63578451632509d07760e11b815260048101929092526000190160248201528181604481865afa918215611a59578692611a27575b5050825191829163c942adf760e01b835260048301528160246101609384935afa8015611a1d576119e0575b8061194a565b81813d8311611a16575b6119f4818361140a565b81010312611a1257015190811603611a0f57808080806119da565b80fd5b8380fd5b503d6119ea565b83513d87823e3d90fd5b90809250813d8311611a52575b611a3e818361140a565b81010312611a4e575138806119ae565b8480fd5b503d611a34565b84513d88823e3d90fd5b634e487b7160e01b87526011600452602487fd5b90508281813d8311611aa1575b611a8e818361140a565b81010312611a9d575138611944565b8680fd5b503d611a84565b85513d89823e3d90fd5b600e600160ff1b018112600116610f0957600d190190565b600082128015600160ff1b8401831216610f09576001600160ff1b038301821316610f09570390565b6000811280156001600160ff1b03839003841316610f0957600160ff1b829003831216610f09570190565b6105b560008083136001600160ff1b038490048311166001166118c95760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166118c95750029056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212209d889cbc3302c168b0ad675c27317e591e7240e41838231eae33e27c9045e58e64736f6c634300080f0033a2646970667358221220e1f3be33a2bb6a03bd3d49ce5efc2ed8ae5816eac40b693581a33f933db1cf4e64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployCRToken(string,uint256,string,uint256,uint256)": {
        "params": {
          "_expiry": "Expiry date of cover right token",
          "_generation": "Generation of priority pool (1 if no liquidations occurred)",
          "_poolId": "Pool Id",
          "_poolName": "Name of Priority Pool",
          "_tokenName": "Name of insured token (e.g. DEG)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployCRToken(string,uint256,string,uint256,uint256)": {
        "notice": "Deploy Cover Right Token for a given pool"
      }
    },
    "notice": "Factory for deploying crTokens         Salt as index for cover right tokens:             salt = keccak256(poolId, expiry, genration)         Factory will record whether a crToken has been deployed         Also record the generation of a specific crToken         And find the address of the crToken with its salt",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21730,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12744,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "policyCenter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12746,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "incidentReport",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12748,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "payoutPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12752,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "deployed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 12756,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "saltToAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 12760,
        "contract": "src/crTokens/CoverRightTokenFactory.sol:CoverRightTokenFactory",
        "label": "generation",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}