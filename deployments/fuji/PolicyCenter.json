{
  "address": "0xCDF314D25e17f575C2c2Ee101b0F054A457f9f9f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_reinsurancePool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CoverageBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "approvePoolToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_pay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "buyCoverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_insured",
          "type": "address"
        }
      ],
      "name": "calculatePayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "claimPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "coverages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fundsByPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "length",
              "type": "uint256"
            }
          ],
          "internalType": "struct PolicyCenter.Coverage",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getInsurancePoolById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "accumulatedRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emissionEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emissionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPremiumSplits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insurancePoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insurancePools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaim",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidityByPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "premiumSplits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinsurancePool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reporter",
          "type": "address"
        }
      ],
      "name": "rewardTreasuryToReporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "setExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insurancePoolFactory",
          "type": "address"
        }
      ],
      "name": "setInsurancePoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_insurance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reinsurance",
          "type": "uint256"
        }
      ],
      "name": "setPremiumSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reinsurancePool",
          "type": "address"
        }
      ],
      "name": "setReinsurancePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shield",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "storePoolInformation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenByPoolId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalRewardsByPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDeg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf959c8d740f9bf7964a3db9cba1326484c2e3ad77155bc403e8137d44c98f625",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xCDF314D25e17f575C2c2Ee101b0F054A457f9f9f",
    "transactionIndex": 0,
    "gasUsed": "2748592",
    "logsBloom": "0x
    "blockHash": "0x5b577796fe94e55f56e8901bae13617c01d0896c9e15b7cc050ce9067f5d1c29",
    "transactionHash": "0xf959c8d740f9bf7964a3db9cba1326484c2e3ad77155bc403e8137d44c98f625",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12299678,
        "transactionHash": "0xf959c8d740f9bf7964a3db9cba1326484c2e3ad77155bc403e8137d44c98f625",
        "address": "0xCDF314D25e17f575C2c2Ee101b0F054A457f9f9f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001be1a151ba3d24f594ee971dc9b843f23b5ba80e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5b577796fe94e55f56e8901bae13617c01d0896c9e15b7cc050ce9067f5d1c29"
      }
    ],
    "blockNumber": 12299678,
    "cumulativeGasUsed": "2748592",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4C5fAB0Da4ecB345eb5C52B697970A9236A608a8",
    "0xF3a9BADD378218345FDF9a1bf239f07416eEEc1d",
    "0x4D16BA86A3b4a6aE9EE124bA48BbaD711B26DDfc",
    "0x273d94d4A7650FB55467232De554dC9336011436"
  ],
  "numDeployments": 1,
  "solcInputHash": "7683b877a8e0827e537932e6288221e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_reinsurancePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CoverageBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approvePoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"buyCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_insured\",\"type\":\"address\"}],\"name\":\"calculatePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coverages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundsByPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"internalType\":\"struct PolicyCenter.Coverage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getInsurancePoolById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiumSplits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insurancePoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insurancePools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityByPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumSplits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinsurancePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reporter\",\"type\":\"address\"}],\"name\":\"rewardTreasuryToReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insurancePoolFactory\",\"type\":\"address\"}],\"name\":\"setInsurancePoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_insurance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reinsurance\",\"type\":\"uint256\"}],\"name\":\"setPremiumSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reinsurancePool\",\"type\":\"address\"}],\"name\":\"setReinsurancePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shield\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"storePoolInformation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenByPoolId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalRewardsByPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDeg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"approvePoolToken(address)\":{\"params\":{\"_token\":\"address of the approved token\"}},\"buyCoverage(uint256,uint256,uint256,uint256)\":{\"params\":{\"_coverAmount\":\"amount of tokens to cover\",\"_length\":\"lenght of coverage in days\",\"_pay\":\"amount paid to cover amount of tokens\",\"_poolId\":\"pool id generated on Policy Center\"}},\"calculatePayout(uint256,address)\":{\"params\":{\"_poolId\":\"pool id to claim from. 0 if reinsurance pool\"},\"returns\":{\"_0\":\"uint256 amount of payout\"}},\"calculateReward(uint256,address)\":{\"params\":{\"_poolId\":\"Pool id (0 for reinsurance pool)\"},\"returns\":{\"_0\":\"uint256 Reward\"}},\"claimPayout(uint256)\":{\"params\":{\"_poolId\":\"Pool id\"}},\"claimReward(uint256)\":{\"params\":{\"_poolId\":\"pool id to claim rewards from\"}},\"getCoverage(uint256,address)\":{\"params\":{\"_poolId\":\"Pool id\",\"_user\":\"User address\"},\"returns\":{\"_0\":\"coverage Coverage info\"}},\"getInsurancePoolById(uint256)\":{\"params\":{\"_poolId\":\"pool id generated on Policy Center\"},\"returns\":{\"_0\":\"address of insurance pool\"}},\"getPoolInfo(uint256)\":{\"params\":{\"_poolId\":\"pool id generated by Policy Center\"},\"returns\":{\"accumulatedRewardPerShare\":\" accumulated reward per each share of the pool\",\"emissionEndTime\":\"         time emission ends if no new coverage is bought\",\"emissionRate\":\"            rate of emission if no new coverage is bought\",\"lastRewardTimestamp\":\"     last time reward has been  updated\",\"maxCapacity\":\"             max capacity of the pool in shield\",\"paused\":\"                  true if pool is paused, false otherwise\"}},\"getPremiumSplits()\":{\"returns\":{\"_0\":\"insurancePool premium split in bps\",\"_1\":\"reinsurancePool premium split in bps\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideLiquidity(uint256,uint256)\":{\"params\":{\"_amount\":\"amount of liquidity to provide\",\"_poolId\":\"pool id generated on Policy Center\"}},\"removeLiquidity(uint256,uint256)\":{\"params\":{\"_amount\":\"amount of liquidity to provide\",\"_poolId\":\"pool id generated on Policy Center\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rewardTreasuryToReporter(address)\":{\"params\":{\"_reporter\":\"address of the reporter\"}},\"setExchange(address)\":{\"params\":{\"_exchange\":\"address of traderjoe contract\"}},\"setPremiumSplit(uint256,uint256)\":{\"params\":{\"_insurance\":\"split for insurance\",\"_reinsurance\":\"split for reinsurance\"}},\"storePoolInformation(address,address,uint256)\":{\"params\":{\"_pool\":\"address of the insurance pool\",\"_poolId\":\"id of the pool\",\"_token\":\"address of token that a pool negotiates in\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Policy Center\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvePoolToken(address)\":{\"notice\":\"approves exchange to swap tokens in control of policy center\"},\"buyCoverage(uint256,uint256,uint256,uint256)\":{\"notice\":\"Buy new coverage for a given pool\"},\"calculatePayout(uint256,address)\":{\"notice\":\"returns payout given to coverage buyers when report passes\"},\"calculateReward(uint256,address)\":{\"notice\":\"Reward for liquidity providers\"},\"claimPayout(uint256)\":{\"notice\":\"claims liquidation payout given a pool id\"},\"claimReward(uint256)\":{\"notice\":\"claim rewards from a given pool id\"},\"getCoverage(uint256,address)\":{\"notice\":\"returns information about the coverage of a given user\"},\"getInsurancePoolById(uint256)\":{\"notice\":\"returns insurance pool address given a pool id\"},\"getPoolInfo(uint256)\":{\"notice\":\"returns pool  info for a given pool id\"},\"getPremiumSplits()\":{\"notice\":\"returns premium split used by Policy Center\"},\"provideLiquidity(uint256,uint256)\":{\"notice\":\"provide liquidity to a give pool id\"},\"removeLiquidity(uint256,uint256)\":{\"notice\":\"remove liquidity to a give pool id\"},\"rewardTreasuryToReporter(address)\":{\"notice\":\"rewards reporter when a reported insurance pool is liquidated with treasury callable by contract only\"},\"setExchange(address)\":{\"notice\":\"set exchange address to be used for token swaps\"},\"setPremiumSplit(uint256,uint256)\":{\"notice\":\"sets the premium splits used by Policy Center\"},\"storePoolInformation(address,address,uint256)\":{\"notice\":\"sets the insurance pool factory address\"}},\"notice\":\"This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/PolicyCenter.sol\":\"PolicyCenter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363539383834303436323235\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"src/core/PolicyCenter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"../mock/MockExchange.sol\\\";\\n\\nimport \\\"./interfaces/PolicyCenterDependencies.sol\\\";\\n\\nimport \\\"../interfaces/ExternalTokenDependencies.sol\\\";\\n\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/**\\n * @title Policy Center\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the policy center for degis Protocol Protection\\n *         Users can buy policies and get payoff here\\n *         Sellers can provide liquidity and choose the pools to cover\\n *\\n */\\ncontract PolicyCenter is\\n    PolicyCenterDependencies,\\n    ExternalTokenDependencies,\\n    OwnableWithoutContext\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // poolIds => address, updated once pools are deployed\\n    // ReinsurancePool is pool 0\\n    mapping(uint256 => address) public insurancePools;\\n    mapping(uint256 => address) public tokenByPoolId;\\n\\n    // poolId => user => Coverage info\\n    struct Coverage {\\n        uint256 amount;\\n        uint256 buyDate;\\n        uint256 length;\\n    }\\n    mapping(uint256 => mapping(address => Coverage)) public coverages;\\n\\n    mapping(uint256 => uint256) public fundsByPoolId;\\n    // amount of rewards by pool Id paid by coverage buyers\\n    mapping(uint256 => uint256) public totalRewardsByPoolId;\\n\\n    // poolId => user => Liquidity info\\n    struct Liquidity {\\n        uint256 amount;\\n        uint256 userDebt;\\n        uint256 lastClaim;\\n    }\\n    mapping(uint256 => mapping(address => Liquidity)) public liquidities;\\n    // amount of liquidity by pool id given by liquidity providers\\n    mapping(uint256 => uint256) public liquidityByPoolId;\\n\\n    // bps distribution of premiums 0: insurance pool, 1: reinsurance pool\\n    uint256[2] public premiumSplits;\\n\\n    // amount of degis in treasury\\n    uint256 public treasury;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event Reward(uint256 _amount, address _address);\\n    event Payout(uint256 _amount, address _address);\\n    event CoverageBought(\\n        uint256 paid,\\n        address buyer,\\n        uint256 poolId,\\n        uint256 length,\\n        uint256 amount\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield,\\n        address _reinsurancePool\\n    )\\n        ExternalTokenDependencies(_deg, _veDeg, _shield)\\n        OwnableWithoutContext(msg.sender)\\n    {\\n        // initializes required reinsurance address and degis token as reinsurance token\\n        insurancePools[0] = _reinsurancePool;\\n        tokenByPoolId[0] = _shield;\\n\\n        _setReinsurancePool(_reinsurancePool);\\n\\n        // initializes premium split standard in bps\\n        premiumSplits = [4500, 5000];\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // veirifies if pool exists. used throughout insurance contracts\\n    modifier poolExists(uint256 _poolId) {\\n        require(insurancePools[_poolId] != address(0), \\\"Pool not found\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice returns premium split used by Policy Center\\n     * @return insurancePool premium split in bps\\n     * @return reinsurancePool premium split in bps\\n     */\\n    function getPremiumSplits() public view returns (uint256, uint256) {\\n        return (premiumSplits[0], premiumSplits[1]);\\n    }\\n\\n    /**\\n     * @notice returns pool  info for a given pool id\\n     * @param _poolId                   pool id generated by Policy Center\\n     * @return paused                   true if pool is paused, false otherwise\\n     * @return accumulatedRewardPerShare  accumulated reward per each share of the pool\\n     * @return lastRewardTimestamp      last time reward has been  updated\\n     * @return emissionEndTime          time emission ends if no new coverage is bought\\n     * @return emissionRate             rate of emission if no new coverage is bought\\n     * @return maxCapacity              max capacity of the pool in shield\\n     */\\n    function getPoolInfo(uint256 _poolId)\\n        public\\n        view\\n        poolExists(_poolId)\\n        returns (\\n            bool paused,\\n            uint256 accumulatedRewardPerShare,\\n            uint256 lastRewardTimestamp,\\n            uint256 emissionEndTime,\\n            uint256 emissionRate,\\n            uint256 maxCapacity\\n        )\\n    {\\n        (\\n            paused,\\n            accumulatedRewardPerShare,\\n            lastRewardTimestamp,\\n            emissionEndTime,\\n            emissionRate,\\n            maxCapacity\\n        ) = IInsurancePool(insurancePools[_poolId]).poolInfo();\\n    }\\n\\n    /**\\n     * @notice returns insurance pool address given a pool id\\n     * @param _poolId pool id generated on Policy Center\\n     * @return address of insurance pool\\n     */\\n    function getInsurancePoolById(uint256 _poolId)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return insurancePools[_poolId];\\n    }\\n\\n    /**\\n     * @notice returns information about the coverage of a given user\\n     *\\n     * @param _poolId Pool id\\n     * @param _user   User address\\n     *\\n     * @return coverage Coverage info\\n     */\\n    function getCoverage(uint256 _poolId, address _user)\\n        public\\n        view\\n        poolExists(_poolId)\\n        returns (Coverage memory)\\n    {\\n        return coverages[_poolId][_user];\\n    }\\n\\n    /**\\n     * @notice Reward for liquidity providers\\n     *\\n     * @param _poolId Pool id (0 for reinsurance pool)\\n     *\\n     * @return uint256 Reward\\n     */\\n    function calculateReward(uint256 _poolId, address _provider)\\n        public\\n        view\\n        poolExists(_poolId)\\n        returns (uint256)\\n    {\\n        Liquidity memory liquidity = liquidities[_poolId][_provider];\\n        if (_poolId > 0) {\\n            // gets reward from insurance pool\\n            return\\n                IInsurancePool(insurancePools[_poolId]).calculateReward(\\n                    liquidity.amount,\\n                    liquidity.userDebt\\n                );\\n        } else {\\n            return\\n                // gets reward from reinsurance pool\\n                IReinsurancePool(reinsurancePool).calculateReward(\\n                    liquidity.amount,\\n                    liquidity.userDebt\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice returns payout given to coverage buyers when report passes\\n     * @param _poolId pool id to claim from. 0 if reinsurance pool\\n     * @return uint256 amount of payout\\n     */\\n    function calculatePayout(uint256 _poolId, address _insured)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(_poolId > 0, \\\"Reinsurance pool grants no direct payout\\\");\\n        // returns amount user has paid for coverage\\n        uint256 amount = coverages[_poolId][_insured].amount;\\n        return amount;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice sets the premium splits used by Policy Center\\n     * @param _insurance    split for insurance\\n     * @param _reinsurance  split for reinsurance\\n     */\\n    function setPremiumSplit(uint256 _insurance, uint256 _reinsurance)\\n        external\\n        onlyOwner\\n    {\\n        // up to 1000bps, left over goes to treasury\\n        require(_insurance + _reinsurance <= 10000, \\\"Invalid split\\\");\\n        require(_insurance > 0, \\\"has not given an insurance split\\\");\\n        require(_reinsurance > 0, \\\"has not given a reinsurance split\\\");\\n        //sets insurance and reinsurance splits\\n        premiumSplits = [_insurance, _reinsurance];\\n    }\\n\\n    /**\\n     *  @notice set exchange address to be used for token swaps\\n     *  @param _exchange address of traderjoe contract\\n     */\\n    function setExchange(address _exchange) external onlyOwner {\\n        exchange = _exchange;\\n    }\\n\\n    function setExecutor(address _executor) external onlyOwner {\\n        _setExecutor(_executor);\\n    }\\n\\n    function setReinsurancePool(address _reinsurancePool) external onlyOwner {\\n        _setReinsurancePool(_reinsurancePool);\\n    }\\n\\n    function setInsurancePoolFactory(address _insurancePoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setInsurancePoolFactory(_insurancePoolFactory);\\n    }\\n\\n    /**\\n     * @notice sets the insurance pool factory address\\n     * @param _pool  address of the insurance pool\\n     * @param _token address of token that a pool negotiates in\\n     * @param _poolId id of the pool\\n     */\\n    function storePoolInformation(\\n        address _pool,\\n        address _token,\\n        uint256 _poolId\\n    ) external {\\n        require(\\n            msg.sender == owner() || msg.sender == insurancePoolFactory,\\n            \\\"Only owner or insurancePoolFactory can set tokens\\\"\\n        );\\n        // maps token address to pool id\\n        tokenByPoolId[_poolId] = _token;\\n        // maps pool address to pool id\\n        insurancePools[_poolId] = _pool;\\n        // approve token swapping for internal funds management\\n        _approvePoolToken(_token);\\n    }\\n\\n    /**\\n     * @notice approves exchange to swap tokens in control of policy center\\n     * @param _token        address of the approved token\\n     */\\n    function approvePoolToken(address _token) external {\\n        require(\\n            msg.sender == owner() || msg.sender == insurancePoolFactory,\\n            \\\"Only owner or insurancePoolFactory can set tokens\\\"\\n        );\\n        _approvePoolToken(_token);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Buy new coverage for a given pool\\n     * @param _poolId       pool id generated on Policy Center\\n     * @param _pay          amount paid to cover amount of tokens\\n     * @param _coverAmount  amount of tokens to cover\\n     * @param _length       lenght of coverage in days\\n     */\\n    function buyCoverage(\\n        uint256 _poolId,\\n        uint256 _pay,\\n        uint256 _coverAmount,\\n        uint256 _length\\n    ) external poolExists(_poolId) {\\n        require(_coverAmount > 0, \\\"Amount must be greater than 0\\\");\\n        require(_length > 0, \\\"Length must be greater than 0\\\");\\n        require(_poolId > 0, \\\"PoolId must be greater than 0\\\");\\n        require(_pay > 0, \\\"Pay must be greater than 0\\\");\\n        require(\\n            IInsurancePool(insurancePools[_poolId]).maxCapacity() >=\\n                _coverAmount + fundsByPoolId[_poolId],\\n            \\\"exceeds max capacity\\\"\\n        );\\n        \\n        uint256 price = IInsurancePool(insurancePools[_poolId]).coveragePrice(\\n            _coverAmount,\\n            _length\\n        );\\n        // checks if user is paying just enough to cover the amount of tokens\\n        require(price == _pay, \\\"pay does not correspond to price\\\");\\n        //register coverage\\n\\n        totalRewardsByPoolId[_poolId] += _pay;\\n        Coverage storage coverage = coverages[_poolId][msg.sender];\\n        coverage.amount += _coverAmount;\\n        // initial 7 days buffer so pool cannot be exploited\\n        coverage.buyDate = block.timestamp + 7 days;\\n        coverage.length = _length;\\n\\n        uint256 toTransfer = _pay;\\n\\n        // updates pool distribution based on paid amount\\n        IERC20(tokenByPoolId[_poolId]).transferFrom(\\n            msg.sender,\\n            address(this),\\n            toTransfer\\n        );\\n        emit CoverageBought(\\n            toTransfer,\\n            msg.sender,\\n            _pay,\\n            _length,\\n            _coverAmount\\n        );\\n        _splitPremium(_poolId, toTransfer);\\n    }\\n\\n    /**\\n     * @notice claim rewards from a given pool id\\n     * @param _poolId pool id to claim rewards from\\n     */\\n    function claimReward(uint256 _poolId) public poolExists(_poolId) {\\n        _claimReward(_poolId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice provide liquidity to a give pool id\\n     * @param _poolId pool id generated on Policy Center\\n     * @param _amount amount of liquidity to provide\\n     */\\n    function provideLiquidity(uint256 _poolId, uint256 _amount)\\n        external\\n        poolExists(_poolId)\\n    {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        // claim rewards. user debt is updated in _claimReward\\n        _claimReward(_poolId, msg.sender);\\n        // adds liquidity to insurance or reinsurance pool\\n        liquidityByPoolId[_poolId] += _amount;\\n\\n        Liquidity storage liquidity = liquidities[_poolId][msg.sender];\\n\\n        if (_poolId > 0) {\\n            // emits tokens to user from insurnace pool\\n            IInsurancePool(insurancePools[_poolId]).provideLiquidity(\\n                _amount,\\n                msg.sender\\n            );\\n        } else {\\n            // emits tokens to user from reinsurnace pool\\n            IReinsurancePool(reinsurancePool).provideLiquidity(\\n                _amount,\\n                msg.sender\\n            );\\n        }\\n        // upsates user provided amount and last claim\\n        liquidity.amount += _amount;\\n        liquidity.lastClaim = block.timestamp;\\n\\n        IERC20(shield).transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /**\\n     * @notice remove liquidity to a give pool id\\n     * @param _poolId pool id generated on Policy Center\\n     * @param _amount amount of liquidity to provide\\n     */\\n    function removeLiquidity(uint256 _poolId, uint256 _amount)\\n        external\\n        poolExists(_poolId)\\n    {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        require(\\n            _amount <= liquidities[_poolId][msg.sender].amount,\\n            \\\"Amount must be less than provided liquidity\\\"\\n        );\\n        require(\\n            _amount <= liquidityByPoolId[_poolId],\\n            \\\"Amount must be less than liquidity\\\"\\n        );\\n        require(\\n            block.timestamp >=\\n                liquidities[_poolId][msg.sender].lastClaim + 604800,\\n            \\\"cannot remove liquidity within 7 days of last claim\\\"\\n        );\\n\\n        Liquidity storage liquidity = liquidities[_poolId][msg.sender];\\n        console.log(\\\"Start\\\");\\n        // claim rewards for caller by pool id. user debt is updated in claim reward\\n        _claimReward(_poolId, msg.sender);\\n        console.log(\\\"End\\\");\\n        console.log(\\\"liquidity by pool id\\\", liquidityByPoolId[_poolId]);\\n        // removes liquidity from insurance or reinsurance pool\\n        liquidityByPoolId[_poolId] -= _amount;\\n\\n        if (_poolId > 0) {\\n            // burns liquidity tokens in users account from insurance pool\\n            IInsurancePool(insurancePools[_poolId]).removeLiquidity(\\n                _amount,\\n                msg.sender\\n            );\\n        } else {\\n            // burns liquidity tokens in users account from reinsurance pool\\n            IReinsurancePool(reinsurancePool).removeLiquidity(\\n                _amount,\\n                msg.sender\\n            );\\n        }\\n\\n        // new amount owned by caller\\n        liquidity.amount -= _amount;\\n        liquidity.lastClaim = block.timestamp;\\n\\n        IERC20(shield).transfer(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice claims liquidation payout given a pool id\\n     *\\n     * @param _poolId Pool id\\n     */\\n    function claimPayout(uint256 _poolId) public poolExists(_poolId) {\\n        require(_poolId > 0, \\\"PoolId must be greater than 0\\\");\\n\\n        IInsurancePool pool = IInsurancePool(insurancePools[_poolId]);\\n\\n        Coverage storage coverage = coverages[_poolId][msg.sender];\\n        //the user can only claim a payout 7 days after the coverage was bought\\n\\n        // exploit protection\\n        require(\\n            coverage.buyDate < block.timestamp,\\n            \\\"coverage is not yet active\\\"\\n        );\\n        require(pool.liquidated(), \\\"pool is not claimable\\\");\\n        require(\\n            pool.endLiquidationDate() >= block.timestamp,\\n            \\\"claim period is over\\\"\\n        );\\n\\n        // buy date + length + liquidation date - 5 days buffer\\n        // intended to fullfil valid coverages accounting for voting period\\n        require(\\n            coverage.buyDate + (coverage.length * 1 days) >=\\n                pool.endLiquidationDate() - 20 days,\\n            \\\"coverage has expired\\\"\\n        );\\n\\n        require(coverage.amount > 0, \\\"no coverage to claim\\\");\\n        // gets amount to give as payout\\n        uint256 amount = calculatePayout(_poolId, msg.sender);\\n\\n        // coverage by user is removed\\n        coverage.amount = 0;\\n        if (liquidityByPoolId[_poolId] >= amount) {\\n            // Insurance doesn't need reinsurance\\n            // Registers removal of funds from insurance pool\\n            // if its enough to cover all funds\\n            fundsByPoolId[_poolId] -= coverage.amount;\\n        } else {\\n            // Insurance pool needs reinsurance\\n            // registers removel of funds from insurance and reinsurance pools\\n            // effectively reinsuring insurance pools\\n            liquidityByPoolId[_poolId] -= amount;\\n\\n            // remove from reinsurance pool\\n            liquidityByPoolId[0] -= (amount - liquidityByPoolId[_poolId]);\\n        }\\n        // transfer the totalSupply to user and then ask Reinsurance pool for the remainder\\n        IERC20(tokenByPoolId[_poolId]).transfer(msg.sender, amount);\\n        emit Payout(amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice rewards reporter when a reported insurance pool is liquidated with treasury\\n     * callable by contract only\\n     * @param _reporter address of the reporter\\n     */\\n    function rewardTreasuryToReporter(address _reporter) external {\\n        require(msg.sender == executor, \\\"not requested by Executor\\\");\\n        // 10% of treasury + 2000 DEG\\n        uint256 reward = (treasury * 1000) / 10000;\\n        treasury -= reward;\\n\\n        IDegisToken(deg).transfer(_reporter, reward);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice claims rewards from a given pool id\\n     * @param _poolId   pool id to claim rewards from\\n     * @param _provider address of the claimer\\n     */\\n    function _claimReward(uint256 _poolId, address _provider) internal {\\n        if (_poolId > 0) {\\n            require(\\n                !IInsurancePool(insurancePools[_poolId]).liquidated(),\\n                \\\"Pool has been liquidated, cannot claim stake\\\"\\n            );\\n            IInsurancePool(insurancePools[_poolId]).updateRewards();\\n        } else {\\n            require(\\n                !IReinsurancePool(reinsurancePool).paused(),\\n                \\\"a pool has been liquidated, unable to remove liquidity\\\"\\n            );\\n            IReinsurancePool(reinsurancePool).updateRewards();\\n        }\\n        // retrieve a user's liquidity from a pool\\n        Liquidity storage liquidity = liquidities[_poolId][_provider];\\n        IInsurancePool pool = IInsurancePool(insurancePools[_poolId]);\\n\\n        console.log(\\\"pool acc:\\\", pool.accumulatedRewardPerShare());\\n        console.log(\\\"amount\\\", liquidity.amount);\\n        console.log(\\\"Debt\\\", liquidity.userDebt);\\n        // Calculate reward amount based on user's liquidity and acc reward per share.\\n        uint256 reward = (liquidity.amount * pool.accumulatedRewardPerShare()) -\\n            liquidity.userDebt;\\n\\n        console.log(\\\"funds\\\", fundsByPoolId[_poolId]);\\n        fundsByPoolId[_poolId] -= reward;\\n\\n        liquidity.userDebt =\\n            liquidity.amount *\\n            pool.accumulatedRewardPerShare();\\n\\n        IERC20(tokenByPoolId[_poolId]).transfer(_provider, reward);\\n\\n        emit Reward(reward, _provider);\\n    }\\n\\n    /**\\n     * @notice swaps tokens for deg\\n     *\\n     * @param _amount       amount of liquidity to request\\n     * @param _fromToken    token address to exchange from\\n     * @param _toToken      token address to exchange to\\n     */\\n    function _swapTokens(\\n        uint256 _amount,\\n        address _fromToken,\\n        address _toToken\\n    ) internal returns (uint256 receives) {\\n        address[] memory array = new address[](1);\\n        array[0] = _fromToken;\\n        // exchange tokens for deg and return amount of deg received\\n        receives = IExchange(exchange).swapExactTokensForTokens(\\n            _amount,\\n            ((_amount * 99) / 100),\\n            array,\\n            _toToken,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice swaps tokens for deg\\n     *\\n     * @param _amount       Amount of liquidity to request\\n     * @param _fromToken    Token address to exchange from\\n     * @param _toToken      Token address to exchange to\\n     */\\n    function _swapForExactTokens(\\n        uint256 _amount,\\n        address _fromToken,\\n        address _toToken\\n    ) internal returns (uint256 receives) {\\n        address[] memory array = new address[](1);\\n        array[0] = _fromToken;\\n\\n        // exchange tokens for deg and return amount of deg received\\n        receives = IExchange(exchange).swapTokensForExactTokens(\\n            _amount,\\n            ((_amount * 99) / 100),\\n            array,\\n            _toToken,\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @notice splits received premium given a pool id\\n     * @param _poolId pool id generated on Policy Center\\n     */\\n    function _splitPremium(uint256 _poolId, uint256 _amount)\\n        internal\\n        poolExists(_poolId)\\n    {\\n        require(_amount > 0, \\\"No funds to split\\\");\\n        address fromToken = tokenByPoolId[_poolId];\\n        uint256 totalSplit = _amount;\\n\\n        uint256 toInsurancePool = (totalSplit * premiumSplits[0]) / 10000;\\n        uint256 toReinsurancePool = (totalSplit * premiumSplits[1]) / 10000;\\n\\n        // treasury receives left overs\\n        uint256 toTreasury = totalSplit - toInsurancePool - toReinsurancePool;\\n\\n        // swap native for degis\\n        uint256 treasuryReceives = _swapTokens(toTreasury, fromToken, deg);\\n        uint256 reinsuranceReceives = _swapTokens(\\n            toReinsurancePool,\\n            fromToken,\\n            deg\\n        );\\n        treasury += treasuryReceives;\\n        fundsByPoolId[_poolId] += toInsurancePool;\\n        // reinsurance pool is pool 0\\n        fundsByPoolId[0] += reinsuranceReceives;\\n\\n        console.log(\\\"to insurancepool\\\", toInsurancePool);\\n\\n        IInsurancePool(insurancePools[_poolId]).updateEmissionRate(\\n            toInsurancePool\\n        );\\n        IReinsurancePool(reinsurancePool).updateEmissionRate(\\n            reinsuranceReceives\\n        );\\n    }\\n\\n    function _approvePoolToken(address _token) internal {\\n        require(exchange != address(0), \\\"Exchange address not set\\\");\\n        // approve exchange to swap policy center tokens for deg\\n        IERC20(_token).approve(exchange, type(uint256).max);\\n    }\\n}\\n\",\"keccak256\":\"0xb571277a9970a874a51dcf0f1b204b349f71f98d83d8ca0a1c011fade6784749\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/PolicyCenterDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IInsurancePool.sol\\\";\\nimport \\\"../../interfaces/IReinsurancePool.sol\\\";\\nimport \\\"../../interfaces/IInsurancePoolFactory.sol\\\";\\nimport \\\"../../interfaces/IExchange.sol\\\";\\n\\nabstract contract PolicyCenterDependencies {\\n    address public executor;\\n    address public reinsurancePool;\\n    address public insurancePoolFactory;\\n    address public exchange;\\n\\n    function _setExchange(address _exchange) internal virtual {\\n        exchange = _exchange;\\n    }\\n\\n    function _setExecutor(address _executor) internal virtual {\\n        executor = _executor;\\n    }\\n\\n    function _setReinsurancePool(address _reinsurancePool) internal virtual {\\n        reinsurancePool = _reinsurancePool;\\n    }\\n\\n    function _setInsurancePoolFactory(address _insurancePoolFactory)\\n        internal\\n        virtual\\n    {\\n        insurancePoolFactory = _insurancePoolFactory;\\n    }\\n}\\n\",\"keccak256\":\"0x920b247061b1b1abc6e31bf6097e146f5916f16e64800b7d48e31c65ccf2e389\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IVeDEG.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\n\\nabstract contract ExternalTokenDependencies {\\n    uint256 public constant SCALE = 1e12;\\n\\n    address public immutable deg;\\n    address public immutable veDeg;\\n    address public immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = _deg;\\n        veDeg = _veDeg;\\n        shield = _shield;\\n    }\\n}\\n\",\"keccak256\":\"0xf33ecf76a155608f5d5aec270e42feadd8e8960374a4c25fa27288c79a1fcf9a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDegisToken is IERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x7fc061fdc39f52163a849ab85a3fc59b148e16f6eeb72dc6a3e7dd393d3ab5b3\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n\\ninterface IExchange {\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) view external returns (uint256);\\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline) external returns (uint256);\\n    function swapTokensForExactTokens(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline) external returns (uint256);\\n\\n}\",\"keccak256\":\"0x9cc8d3ea9dd432e107bc394282af8ce98af34025805be793bc22af6ebd02be8c\",\"license\":\"MIT\"},\"src/interfaces/IInsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IInsurancePool {\\n    event AccRewardsPerShareUpdated(uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event EmissionRateUpdated(uint256 newEmissionRate, uint256 newEmissionEndTime);\\n    event Liquidation(uint256 amount, uint256 endDate);\\n    event LiquidationEnded(uint256 timestamp);\\n    event LiquidityProvision(uint256 amount, address sender);\\n    event LiquidityRemoved(uint256 amount, address sender);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event Paused(address account);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Unpaused(address account);\\n\\n    function DISTRIBUTION_PERIOD() view external returns (uint256);\\n    function PAY_COVER_PERIOD() view external returns (uint256);\\n    function accumulatedRewardPerShare() view external returns (uint256);\\n    function administrator() view external returns (address);\\n    function allowance(address owner, address spender) view external returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) view external returns (uint256);\\n    function calculateReward(uint256 _amount, uint256 _userDebt) view external returns (uint256);\\n    function coveragePrice(uint256 _amount, uint256 _length) view external returns (uint256);\\n    function decimals() view external returns (uint8);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function deg() view external returns (address);\\n    function emissionEndTime() view external returns (uint256);\\n    function emissionRate() view external returns (uint256);\\n    function endLiquidationDate() view external returns (uint256);\\n    function executor() view external returns (address);\\n    function incidentReport() view external returns (address);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function insurancePoolFactory() view external returns (address);\\n    function insuredToken() view external returns (address);\\n    function lastRewardTimestamp() view external returns (uint256);\\n    function liquidatePool() external;\\n    function liquidated() view external returns (bool);\\n    function maxCapacity() view external returns (uint256);\\n    function maxLength() view external returns (uint256);\\n    function name() view external returns (string memory);\\n    function onboardProposal() view external returns (address);\\n    function owner() view external returns (address);\\n    function paused() view external returns (bool);\\n    function policyCenter() view external returns (address);\\n\\n    function poolInfo() view external returns (bool, uint256, uint256, uint256, uint256, uint256);\\n\\n    function priceRatio() view external returns (uint256);\\n    function provideLiquidity(uint256 _amount, address _provider) external;\\n    function reinsurancePool() view external returns (address);\\n    function removeLiquidity(uint256 _amount, address _provider) external;\\n    function renounceOwnership() external;\\n   \\n    \\n    function setExecutor(address _executor) external;\\n    function setIncidentReport(address _incidentReport) external;\\n    function setInsurancePoolFactory(address _insurancePoolFactory) external;\\n    function setMaxCapacity(uint256 _maxCapacity) external;\\n    function setMaxLength(uint256 _maxLength) external;\\n    function setOnboardProposal(address _onboardProposal) external;\\n    function pauseInsurancePool(bool _paused) external;\\n    function setPolicyCenter(address _policyCenter) external;\\n    function setReinsurancePool(address _reinsurancePool) external;\\n    \\n    function shield() view external returns (address);\\n    function startTime() view external returns (uint256);\\n    function symbol() view external returns (string memory);\\n    function totalSupply() view external returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function transferOwnership(address newOwner) external;\\n    function updateEmissionRate(uint256 _premium) external;\\n    function updateRewards() external;\\n    function veDeg() view external returns (address);\\n    function verifyLiquidationEnded() external;\\n}\",\"keccak256\":\"0x6ee79cd221cb252e053405300d7adb40509824d509036bde5ecec9f6901a1235\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IInsurancePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IInsurancePoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function administrator() external view returns (address);\\n\\n    function deg() external view returns (address);\\n\\n    function deregisterAddress(address _tokenAddress) external;\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function insurancePoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function proposalCenter() external view returns (address);\\n\\n    function reinsurancePool() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setInsurancePoolFactory(address _insurancePoolFactory) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProposalCenter(address _proposalCenter) external;\\n\\n    function setReinsurancePool(address _reinsurancePool) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n}\\n\",\"keccak256\":\"0x90a2f328cf8124955127c1351288ead9265b760fbcc18915d3922877973ca49a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IReinsurancePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IReinsurancePool {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Deposit(address indexed user, uint256 amount);\\n    event MoveLiquidity(uint256 poolId, uint256 amount);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    function accumulatedRewardPerShare() view external returns (uint256);\\n    function addPremium(uint256 _amount) external;\\n    function allowance(address owner, address spender) view external returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) view external returns (uint256);\\n    function calculateReward(uint256 _amount, uint256 _userDebt) view external returns (uint256);\\n    function claimReward(address _provider) external;\\n    function decimals() view external returns (uint8);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n    function deg() view external returns (address);\\n    function emissionRate() view external returns (uint256);\\n    function endLiquidationPeriod() external;\\n    function executor() view external returns (address);\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function insurancePoolFactory() view external returns (address);\\n    function insurancePoolLiquidated() view external returns (bool);\\n    function liquidities(address) view external returns (uint256 amount, uint256 userDebt, uint256 lastClaim);\\n    function moveLiquidity(uint256 _poolId, uint256 _amount) external;\\n    function name() view external returns (string memory);\\n    function owner() view external returns (address);\\n    function paused() view external returns (bool);\\n    function policyCenter() view external returns (address);\\n    function poolInfo() external view returns (bool,uint256,uint256,uint256,uint256,uint256);\\n    function pools(address) view external returns (address protocolAddress, uint256 proportion);\\n    function proposalCenter() view external returns (address);\\n    function provideLiquidity(uint256 _amount, address _provider) external;\\n    function reinsurancePool() view external returns (address);\\n    function reinsurePool(uint256 _amount, address _address) external;\\n    function removeLiquidity(uint256 _amount, address _provider) external;\\n    function renounceOwnership() external;\\n    \\n    function setExecutor(address _executor) external;\\n    function setInsurancePoolFactory(address _insurancePoolFactory) external;\\n    function pauseReinsurancePool(bool _paused) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n    function setProposalCenter(address _proposalCenter) external;\\n    function setReinsurancePool(address _reinsurancePool) external;\\n    \\n    function shield() view external returns (address);\\n    function symbol() view external returns (string memory);\\n    function totalDistributedReward() view external returns (uint256);\\n    function totalReward() view external returns (uint256);\\n    function totalSupply() view external returns (uint256);\\n    function transfer(address to, uint256 amount) external returns (bool);\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n    function transferOwnership(address newOwner) external;\\n    function updateEmissionRate(uint256 _premium) external;\\n    function updateRewards() external;\\n    function veDeg() view external returns (address);\\n}\\n\",\"keccak256\":\"0x52cb0505c04ccbb2fa5ac187478c3491ad3b37493869fc5ae29467bd180dc215\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is IERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n    \\n    function users(uint256 _pool, address _user) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x52de2840d0927eb6d241ec6bead7e88fcf1c30c4fbe4fa6d5efc77159b6290c1\",\"license\":\"MIT\"},\"src/mock/MockExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Exchange {\\n    string public name;\\n\\n    constructor() {\\n        name = \\\"exchange\\\";\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut) {\\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\n        amountOut = getAmountOut(amountIn, amountOutMin, amountOutMin);\\n        IERC20(to).transfer(msg.sender, amountOut);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount) {\\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountInMax);\\n        amount = getAmountOut(amountInMax, amountOut, amountOut);\\n        IERC20(to).transfer(msg.sender, amountOut);\\n    }\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) public pure returns (uint256) {\\n        return (amountIn * 99) / 100;\\n    }\\n}\\n\",\"keccak256\":\"0xcd7d7fed5ee1f016859dbc4c2584188c4baa8b9533e0f825303e5d3fb82130c0\",\"license\":\"GPL-3.0\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _transferOwnership(_initOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0cf3a1968613bb036219db76df7643df085878ed42beb669c9803037c0396c75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620030b8380380620030b88339810160408190526200003491620001de565b6001600160a01b0380851660805280841660a052821660c0523362000059816200010f565b50600080527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc80546001600160a01b038381166001600160a01b0319928316811790935560066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8805491861691831691909117905560018054909116909117905560408051808201909152611194815261138860208201526200010490600c90600262000161565b50505050506200023b565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b826002810192821562000198579160200282015b8281111562000198578251829061ffff1690559160200191906001019062000175565b50620001a6929150620001aa565b5090565b5b80821115620001a65760008155600101620001ab565b80516001600160a01b0381168114620001d957600080fd5b919050565b60008060008060808587031215620001f557600080fd5b6200020085620001c1565b93506200021060208601620001c1565b92506200022060408601620001c1565b91506200023060608601620001c1565b905092959194509250565b60805160a05160c051612e2a6200028e600039600081816103d30152818161111f0152611a7c0152600061058201526000818161037d01528181610d6c01528181611f830152611fb20152612e2a6000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c80639030b5421161013b578063c34c08e5116100b8578063d765ca161161007c578063d765ca1614610611578063eced55261461063a578063f02bbc5214610646578063f2fde38b1461066f578063f42c2b491461068257600080fd5b8063c34c08e51461056a578063c3a593b31461057d578063ca417473146105a4578063d2f7265a146105c4578063d3a7d808146105d757600080fd5b8063ad02a798116100ff578063ad02a798146104bc578063ae169a50146104dc578063afa493e1146104ef578063b6cccdd014610544578063b726be7f1461055757600080fd5b80639030b542146104475780639d7de6b31461045a578063a05bac421461046d578063a18f07a014610496578063a8bf604d146104a957600080fd5b80634858b300116101c9578063715018a61161018d578063715018a6146103f557806372306c7c146103fd5780637a16af7f146104105780638a69614e146104235780638da5cb5b1461043657600080fd5b80634858b300146103785780634d658ef01461039f57806361d027b3146103b257806367b1f5df146103bb57806370d39cff146103ce57600080fd5b8063250c4dc611610210578063250c4dc6146102b05780632f380b35146102db5780632fbac6d71461031d578063345223c814610330578063353d46981461036557600080fd5b806309767c9f146102425780630a2c433d146102755780631418e9ce1461028a5780631c3c0ea81461029d575b600080fd5b610262610250366004612a0d565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b610288610283366004612a42565b61069d565b005b610288610298366004612a64565b6106c6565b6102886102ab366004612a42565b610b16565b6002546102c3906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b6102ee6102e9366004612a0d565b610b3c565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c00161026c565b6001546102c3906001600160a01b031681565b61034361033e366004612a96565b610c0a565b604080518251815260208084015190820152918101519082015260600161026c565b610288610373366004612a42565b610cb4565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102886103ad366004612a42565b610dde565b610262600e5481565b6102886103c9366004612a42565b610e04565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b610288610e2e565b61028861040b366004612ac2565b610e42565b61028861041e366004612ac2565b610f61565b610288610431366004612a0d565b61119c565b6004546001600160a01b03166102c3565b610262610455366004612a0d565b61169e565b610288610468366004612ac2565b6116b5565b6102c361047b366004612a0d565b6000908152600560205260409020546001600160a01b031690565b6102626104a4366004612a96565b611ab3565b6102886104b7366004612a42565b611c0b565b6102626104ca366004612a0d565b60096020526000908152604090205481565b6102886104ea366004612a0d565b611c53565b6105296104fd366004612a96565b600760209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161026c565b610288610552366004612ae4565b611c97565b610262610565366004612a96565b611d23565b6000546102c3906001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102626105b2366004612a0d565b60086020526000908152604090205481565b6003546102c3906001600160a01b031681565b6105296105e5366004612a96565b600a60209081526000928352604080842090915290825290208054600182015460029092015490919083565b6102c361061f366004612a0d565b6005602052600090815260409020546001600160a01b031681565b61026264e8d4a5100081565b6102c3610654366004612a0d565b6006602052600090815260409020546001600160a01b031681565b61028861067d366004612a42565b611dae565b600c54600d546040805192835260208301919091520161026c565b6106a5611e24565b600180546001600160a01b0319166001600160a01b03831617905550565b50565b60008481526005602052604090205484906001600160a01b03166107055760405162461bcd60e51b81526004016106fc90612b20565b60405180910390fd5b600083116107255760405162461bcd60e51b81526004016106fc90612b48565b600082116107755760405162461bcd60e51b815260206004820152601d60248201527f4c656e677468206d7573742062652067726561746572207468616e203000000060448201526064016106fc565b600085116107c55760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c4964206d7573742062652067726561746572207468616e203000000060448201526064016106fc565b600084116108155760405162461bcd60e51b815260206004820152601a60248201527f506179206d7573742062652067726561746572207468616e203000000000000060448201526064016106fc565b60008581526008602052604090205461082e9084612b95565b6000868152600560209081526040918290205482516359b6a0c960e01b815292516001600160a01b03909116926359b6a0c99260048083019391928290030181865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a69190612bad565b10156108eb5760405162461bcd60e51b815260206004820152601460248201527365786365656473206d617820636170616369747960601b60448201526064016106fc565b6000858152600560205260408082205490516373bae0c960e11b815260048101869052602481018590526001600160a01b039091169063e775c19290604401602060405180830381865afa158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190612bad565b90508481146109bc5760405162461bcd60e51b815260206004820181905260248201527f70617920646f6573206e6f7420636f72726573706f6e6420746f20707269636560448201526064016106fc565b600086815260096020526040812080548792906109da908490612b95565b909155505060008681526007602090815260408083203384529091528120805490918691839190610a0c908490612b95565b90915550610a1f90504262093a80612b95565b600182015560028101849055600087815260066020526040908190205490516323b872dd60e01b81523360048201523060248201526044810188905287916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190612bd6565b506040805182815233602082015290810188905260608101869052608081018790527f9f8dcdc224721f5f52bcf1db83083aae6f2365d2b53b2daf2c00a6ab25bc19d29060a00160405180910390a1610b0c8882611e8d565b5050505050505050565b610b1e611e24565b600080546001600160a01b0319166001600160a01b03831617905550565b6000818152600560205260408120548190819081908190819087906001600160a01b0316610b7c5760405162461bcd60e51b81526004016106fc90612b20565b60008881526005602052604090819020548151635a2f3d0960e01b815291516001600160a01b0390911691635a2f3d099160048083019260c09291908290030181865afa158015610bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf59190612bf1565b949d939c50919a509850965090945092505050565b610c2e60405180606001604052806000815260200160008152602001600081525090565b60008381526005602052604090205483906001600160a01b0316610c645760405162461bcd60e51b81526004016106fc90612b20565b60008481526007602090815260408083206001600160a01b0387168452825291829020825160608101845281548152600182015492810192909252600201549181019190915291505b5092915050565b6000546001600160a01b03163314610d0e5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420726571756573746564206279204578656375746f720000000000000060448201526064016106fc565b6000612710600e546103e8610d239190612c42565b610d2d9190612c61565b905080600e6000828254610d419190612c83565b909155505060405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd99190612bd6565b505050565b610de6611e24565b600280546001600160a01b0319166001600160a01b03831617905550565b610e0c611e24565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610e36611e24565b610e406000612158565b565b610e4a611e24565b612710610e578284612b95565b1115610e955760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081cdc1b1a5d609a1b60448201526064016106fc565b60008211610ee55760405162461bcd60e51b815260206004820181905260248201527f686173206e6f7420676976656e20616e20696e737572616e63652073706c697460448201526064016106fc565b60008111610f3f5760405162461bcd60e51b815260206004820152602160248201527f686173206e6f7420676976656e2061207265696e737572616e63652073706c696044820152601d60fa1b60648201526084016106fc565b6040805180820190915282815260208101829052610dd990600c9060026129ba565b60008281526005602052604090205482906001600160a01b0316610f975760405162461bcd60e51b81526004016106fc90612b20565b60008211610fb75760405162461bcd60e51b81526004016106fc90612b48565b610fc183336121aa565b6000838152600b602052604081208054849290610fdf908490612b95565b90915550506000838152600a602090815260408083203384529091529020831561107957600084815260056020526040908190205490516310c5f8f560e21b8152600481018590523360248201526001600160a01b0390911690634317e3d490604401600060405180830381600087803b15801561105c57600080fd5b505af1158015611070573d6000803e3d6000fd5b505050506110de565b6001546040516310c5f8f560e21b8152600481018590523360248201526001600160a01b0390911690634317e3d490604401600060405180830381600087803b1580156110c557600080fd5b505af11580156110d9573d6000803e3d6000fd5b505050505b828160000160008282546110f29190612b95565b90915550504260028201556040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064015b6020604051808303816000875af1158015611171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111959190612bd6565b5050505050565b60008181526005602052604090205481906001600160a01b03166111d25760405162461bcd60e51b81526004016106fc90612b20565b600082116112225760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c4964206d7573742062652067726561746572207468616e203000000060448201526064016106fc565b6000828152600560209081526040808320546007835281842033855290925290912060018101546001600160a01b039092169142116112a35760405162461bcd60e51b815260206004820152601a60248201527f636f766572616765206973206e6f74207965742061637469766500000000000060448201526064016106fc565b816001600160a01b03166323b98cde6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113059190612bd6565b6113495760405162461bcd60e51b8152602060048201526015602482015274706f6f6c206973206e6f7420636c61696d61626c6560581b60448201526064016106fc565b42826001600160a01b031663064b8cb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190612bad565b10156113f15760405162461bcd60e51b815260206004820152601460248201527331b630b4b6903832b934b7b21034b99037bb32b960611b60448201526064016106fc565b621a5e00826001600160a01b031663064b8cb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114579190612bad565b6114619190612c83565b60028201546114739062015180612c42565b82600101546114829190612b95565b10156114c75760405162461bcd60e51b815260206004820152601460248201527318dbdd995c9859d9481a185cc8195e1c1a5c995960621b60448201526064016106fc565b805461150c5760405162461bcd60e51b81526020600482015260146024820152736e6f20636f76657261676520746f20636c61696d60601b60448201526064016106fc565b60006115188533611d23565b6000808455868152600b6020526040902054909150811161155e57815460008681526008602052604081208054909190611553908490612c83565b909155506115db9050565b6000858152600b60205260408120805483929061157c908490612c83565b90915550506000858152600b602052604090205461159a9082612c83565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7680549091906115d5908490612c83565b90915550505b6000858152600660205260409081902054905163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d9190612bd6565b50604080518281523360208201527f9b5d1a613fa5f0790b36b13103706e31fca06b229d87e9915b29fc20c1d7649091015b60405180910390a15050505050565b600c81600281106116ae57600080fd5b0154905081565b60008281526005602052604090205482906001600160a01b03166116eb5760405162461bcd60e51b81526004016106fc90612b20565b6000821161170b5760405162461bcd60e51b81526004016106fc90612b48565b6000838152600a602090815260408083203384529091529020548211156117885760405162461bcd60e51b815260206004820152602b60248201527f416d6f756e74206d757374206265206c657373207468616e2070726f7669646560448201526a64206c697175696469747960a81b60648201526084016106fc565b6000838152600b60205260409020548211156117f15760405162461bcd60e51b815260206004820152602260248201527f416d6f756e74206d757374206265206c657373207468616e206c697175696469604482015261747960f01b60648201526084016106fc565b6000838152600a6020908152604080832033845290915290206002015461181b9062093a80612b95565b4210156118865760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f742072656d6f7665206c69717569646974792077697468696e20376044820152722064617973206f66206c61737420636c61696d60681b60648201526084016106fc565b6000838152600a602090815260408083203384528252918290208251808401909352600583526414dd185c9d60da1b91830191909152906118c690612761565b6118d084336121aa565b6118f460405180604001604052806003815260200162115b9960ea1b815250612761565b61193d604051806040016040528060148152602001731b1a5c5d5a591a5d1e48189e481c1bdbdb081a5960621b815250600b6000878152602001908152602001600020546127a4565b6000848152600b60205260408120805485929061195b908490612c83565b909155505083156119dc57600084815260056020526040908190205490516305fe138b60e01b8152600481018590523360248201526001600160a01b03909116906305fe138b90604401600060405180830381600087803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b50505050611a41565b6001546040516305fe138b60e01b8152600481018590523360248201526001600160a01b03909116906305fe138b90604401600060405180830381600087803b158015611a2857600080fd5b505af1158015611a3c573d6000803e3d6000fd5b505050505b82816000016000828254611a559190612c83565b909155505042600282015560405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401611152565b60008281526005602052604081205483906001600160a01b0316611ae95760405162461bcd60e51b81526004016106fc90612b20565b6000848152600a602090815260408083206001600160a01b038716845282529182902082516060810184528154815260018201549281019290925260020154918101919091528415611bcd576000858152600560209081526040918290205483519184015192516309f6842360e11b81526001600160a01b03909116926313ed084692611b8492909190600401918252602082015260400190565b602060405180830381865afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190612bad565b925050610cad565b600154815160208301516040516309f6842360e11b8152600481019290925260248201526001600160a01b03909116906313ed084690604401611b84565b6004546001600160a01b0316331480611c2e57506002546001600160a01b031633145b611c4a5760405162461bcd60e51b81526004016106fc90612c9a565b6106c3816127e9565b60008181526005602052604090205481906001600160a01b0316611c895760405162461bcd60e51b81526004016106fc90612b20565b611c9382336121aa565b5050565b6004546001600160a01b0316331480611cba57506002546001600160a01b031633145b611cd65760405162461bcd60e51b81526004016106fc90612c9a565b600081815260066020908152604080832080546001600160a01b038088166001600160a01b03199283161790925560059093529220805492861692909116919091179055610dd9826127e9565b6000808311611d855760405162461bcd60e51b815260206004820152602860248201527f5265696e737572616e636520706f6f6c206772616e7473206e6f2064697265636044820152671d081c185e5bdd5d60c21b60648201526084016106fc565b5060009182526007602090815260408084206001600160a01b0393909316845291905290205490565b611db6611e24565b6001600160a01b038116611e1b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106fc565b6106c381612158565b33611e376004546001600160a01b031690565b6001600160a01b031614610e405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fc565b60008281526005602052604090205482906001600160a01b0316611ec35760405162461bcd60e51b81526004016106fc90612b20565b60008211611f075760405162461bcd60e51b8152602060048201526011602482015270139bc8199d5b991cc81d1bc81cdc1b1a5d607a1b60448201526064016106fc565b6000838152600660205260408120546001600160a01b0316908390612710600c820154611f349084612c42565b611f3e9190612c61565b90506000612710600c60010154611f559085612c42565b611f5f9190612c61565b9050600081611f6e8486612c83565b611f789190612c83565b90506000611fa782877f00000000000000000000000000000000000000000000000000000000000000006128b9565b90506000611fd684887f00000000000000000000000000000000000000000000000000000000000000006128b9565b905081600e6000828254611fea9190612b95565b909155505060008a8152600860205260408120805487929061200d908490612b95565b9091555050600080805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7805483929061204d908490612b95565b909155505060408051808201909152601081526f1d1bc81a5b9cdd5c985b98d95c1bdbdb60821b602082015261208390866127a4565b60008a815260056020526040908190205490516305d4266960e11b8152600481018790526001600160a01b0390911690630ba84cd290602401600060405180830381600087803b1580156120d657600080fd5b505af11580156120ea573d6000803e3d6000fd5b50506001546040516305d4266960e11b8152600481018590526001600160a01b039091169250630ba84cd29150602401600060405180830381600087803b15801561213457600080fd5b505af1158015612148573d6000803e3d6000fd5b5050505050505050505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81156122f3576000828152600560209081526040918290205482516311dcc66f60e11b815292516001600160a01b03909116926323b98cde9260048083019391928290030181865afa158015612204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122289190612bd6565b1561228a5760405162461bcd60e51b815260206004820152602c60248201527f506f6f6c20686173206265656e206c6971756964617465642c2063616e6e6f7460448201526b20636c61696d207374616b6560a01b60648201526084016106fc565b600082815260056020526040808220548151630f8562c360e21b815291516001600160a01b0390911692633e158b0c926004808201939182900301818387803b1580156122d657600080fd5b505af11580156122ea573d6000803e3d6000fd5b5050505061243f565b600160009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a9190612bd6565b156123d65760405162461bcd60e51b815260206004820152603660248201527f6120706f6f6c20686173206265656e206c6971756964617465642c20756e61626044820152756c6520746f2072656d6f7665206c697175696469747960501b60648201526084016106fc565b600160009054906101000a90046001600160a01b03166001600160a01b0316633e158b0c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561242657600080fd5b505af115801561243a573d6000803e3d6000fd5b505050505b6000828152600a602090815260408083206001600160a01b0380861685529083528184208685526005845293829020548251808401845260098152683837b7b61030b1b19d60b91b8186015283516336d4219560e01b8152935191909216936124f59385926336d42195926004808401939192918290030181865afa1580156124cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f09190612bad565b6127a4565b61252160405180604001604052806006815260200165185b5bdd5b9d60d21b81525083600001546127a4565b61254b604051806040016040528060048152602001631119589d60e21b81525083600101546127a4565b60008260010154826001600160a01b03166336d421956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b49190612bad565b84546125c09190612c42565b6125ca9190612c83565b90506126066040518060400160405280600581526020016466756e647360d81b81525060086000888152602001908152602001600020546127a4565b60008581526008602052604081208054839290612624908490612c83565b92505081905550816001600160a01b03166336d421956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268d9190612bad565b83546126999190612c42565b60018401556000858152600660205260409081902054905163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156126fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127229190612bd6565b50604080518281526001600160a01b03861660208201527f87638f9e82f004fbb8720a22ecbe5433f32c8400acf08fd57bb7688e5177c7ab910161168f565b6106c3816040516024016127759190612d4e565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612999565b611c9382826040516024016127ba929190612d61565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052612999565b6003546001600160a01b03166128415760405162461bcd60e51b815260206004820152601860248201527f45786368616e67652061646472657373206e6f7420736574000000000000000060448201526064016106fc565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af1158015612895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c939190612bd6565b6040805160018082528183019092526000918291906020808301908036833701905050905083816000815181106128f2576128f2612ceb565b6001600160a01b039283166020918202929092010152600354166338ed173986606461291f826063612c42565b6129299190612c61565b848760006040518663ffffffff1660e01b815260040161294d959493929190612d83565b6020604051808303816000875af115801561296c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129909190612bad565b95945050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82600281019282156129e8579160200282015b828111156129e85782518255916020019190600101906129cd565b506129f49291506129f8565b5090565b5b808211156129f457600081556001016129f9565b600060208284031215612a1f57600080fd5b5035919050565b80356001600160a01b0381168114612a3d57600080fd5b919050565b600060208284031215612a5457600080fd5b612a5d82612a26565b9392505050565b60008060008060808587031215612a7a57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612aa957600080fd5b82359150612ab960208401612a26565b90509250929050565b60008060408385031215612ad557600080fd5b50508035926020909101359150565b600080600060608486031215612af957600080fd5b612b0284612a26565b9250612b1060208501612a26565b9150604084013590509250925092565b6020808252600e908201526d141bdbdb081b9bdd08199bdd5b9960921b604082015260600190565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612ba857612ba8612b7f565b500190565b600060208284031215612bbf57600080fd5b5051919050565b80518015158114612a3d57600080fd5b600060208284031215612be857600080fd5b612a5d82612bc6565b60008060008060008060c08789031215612c0a57600080fd5b612c1387612bc6565b95506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000816000190483118215151615612c5c57612c5c612b7f565b500290565b600082612c7e57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612c9557612c95612b7f565b500390565b60208082526031908201527f4f6e6c79206f776e6572206f7220696e737572616e6365506f6f6c466163746f60408201527072792063616e2073657420746f6b656e7360781b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612d2757602081850181015186830182015201612d0b565b81811115612d39576000602083870101525b50601f01601f19169290920160200192915050565b602081526000612a5d6020830184612d01565b604081526000612d746040830185612d01565b90508260208301529392505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612dd35784516001600160a01b031683529383019391830191600101612dae565b50506001600160a01b0396909616606085015250505060800152939250505056fea2646970667358221220d47f1f7f10a4d935a89020599c1db2f1f6f139e63a41f416819f7fb67c5cd57e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c80639030b5421161013b578063c34c08e5116100b8578063d765ca161161007c578063d765ca1614610611578063eced55261461063a578063f02bbc5214610646578063f2fde38b1461066f578063f42c2b491461068257600080fd5b8063c34c08e51461056a578063c3a593b31461057d578063ca417473146105a4578063d2f7265a146105c4578063d3a7d808146105d757600080fd5b8063ad02a798116100ff578063ad02a798146104bc578063ae169a50146104dc578063afa493e1146104ef578063b6cccdd014610544578063b726be7f1461055757600080fd5b80639030b542146104475780639d7de6b31461045a578063a05bac421461046d578063a18f07a014610496578063a8bf604d146104a957600080fd5b80634858b300116101c9578063715018a61161018d578063715018a6146103f557806372306c7c146103fd5780637a16af7f146104105780638a69614e146104235780638da5cb5b1461043657600080fd5b80634858b300146103785780634d658ef01461039f57806361d027b3146103b257806367b1f5df146103bb57806370d39cff146103ce57600080fd5b8063250c4dc611610210578063250c4dc6146102b05780632f380b35146102db5780632fbac6d71461031d578063345223c814610330578063353d46981461036557600080fd5b806309767c9f146102425780630a2c433d146102755780631418e9ce1461028a5780631c3c0ea81461029d575b600080fd5b610262610250366004612a0d565b600b6020526000908152604090205481565b6040519081526020015b60405180910390f35b610288610283366004612a42565b61069d565b005b610288610298366004612a64565b6106c6565b6102886102ab366004612a42565b610b16565b6002546102c3906001600160a01b031681565b6040516001600160a01b03909116815260200161026c565b6102ee6102e9366004612a0d565b610b3c565b6040805196151587526020870195909552938501929092526060840152608083015260a082015260c00161026c565b6001546102c3906001600160a01b031681565b61034361033e366004612a96565b610c0a565b604080518251815260208084015190820152918101519082015260600161026c565b610288610373366004612a42565b610cb4565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102886103ad366004612a42565b610dde565b610262600e5481565b6102886103c9366004612a42565b610e04565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b610288610e2e565b61028861040b366004612ac2565b610e42565b61028861041e366004612ac2565b610f61565b610288610431366004612a0d565b61119c565b6004546001600160a01b03166102c3565b610262610455366004612a0d565b61169e565b610288610468366004612ac2565b6116b5565b6102c361047b366004612a0d565b6000908152600560205260409020546001600160a01b031690565b6102626104a4366004612a96565b611ab3565b6102886104b7366004612a42565b611c0b565b6102626104ca366004612a0d565b60096020526000908152604090205481565b6102886104ea366004612a0d565b611c53565b6105296104fd366004612a96565b600760209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161026c565b610288610552366004612ae4565b611c97565b610262610565366004612a96565b611d23565b6000546102c3906001600160a01b031681565b6102c37f000000000000000000000000000000000000000000000000000000000000000081565b6102626105b2366004612a0d565b60086020526000908152604090205481565b6003546102c3906001600160a01b031681565b6105296105e5366004612a96565b600a60209081526000928352604080842090915290825290208054600182015460029092015490919083565b6102c361061f366004612a0d565b6005602052600090815260409020546001600160a01b031681565b61026264e8d4a5100081565b6102c3610654366004612a0d565b6006602052600090815260409020546001600160a01b031681565b61028861067d366004612a42565b611dae565b600c54600d546040805192835260208301919091520161026c565b6106a5611e24565b600180546001600160a01b0319166001600160a01b03831617905550565b50565b60008481526005602052604090205484906001600160a01b03166107055760405162461bcd60e51b81526004016106fc90612b20565b60405180910390fd5b600083116107255760405162461bcd60e51b81526004016106fc90612b48565b600082116107755760405162461bcd60e51b815260206004820152601d60248201527f4c656e677468206d7573742062652067726561746572207468616e203000000060448201526064016106fc565b600085116107c55760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c4964206d7573742062652067726561746572207468616e203000000060448201526064016106fc565b600084116108155760405162461bcd60e51b815260206004820152601a60248201527f506179206d7573742062652067726561746572207468616e203000000000000060448201526064016106fc565b60008581526008602052604090205461082e9084612b95565b6000868152600560209081526040918290205482516359b6a0c960e01b815292516001600160a01b03909116926359b6a0c99260048083019391928290030181865afa158015610882573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a69190612bad565b10156108eb5760405162461bcd60e51b815260206004820152601460248201527365786365656473206d617820636170616369747960601b60448201526064016106fc565b6000858152600560205260408082205490516373bae0c960e11b815260048101869052602481018590526001600160a01b039091169063e775c19290604401602060405180830381865afa158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190612bad565b90508481146109bc5760405162461bcd60e51b815260206004820181905260248201527f70617920646f6573206e6f7420636f72726573706f6e6420746f20707269636560448201526064016106fc565b600086815260096020526040812080548792906109da908490612b95565b909155505060008681526007602090815260408083203384529091528120805490918691839190610a0c908490612b95565b90915550610a1f90504262093a80612b95565b600182015560028101849055600087815260066020526040908190205490516323b872dd60e01b81523360048201523060248201526044810188905287916001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190612bd6565b506040805182815233602082015290810188905260608101869052608081018790527f9f8dcdc224721f5f52bcf1db83083aae6f2365d2b53b2daf2c00a6ab25bc19d29060a00160405180910390a1610b0c8882611e8d565b5050505050505050565b610b1e611e24565b600080546001600160a01b0319166001600160a01b03831617905550565b6000818152600560205260408120548190819081908190819087906001600160a01b0316610b7c5760405162461bcd60e51b81526004016106fc90612b20565b60008881526005602052604090819020548151635a2f3d0960e01b815291516001600160a01b0390911691635a2f3d099160048083019260c09291908290030181865afa158015610bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf59190612bf1565b949d939c50919a509850965090945092505050565b610c2e60405180606001604052806000815260200160008152602001600081525090565b60008381526005602052604090205483906001600160a01b0316610c645760405162461bcd60e51b81526004016106fc90612b20565b60008481526007602090815260408083206001600160a01b0387168452825291829020825160608101845281548152600182015492810192909252600201549181019190915291505b5092915050565b6000546001600160a01b03163314610d0e5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420726571756573746564206279204578656375746f720000000000000060448201526064016106fc565b6000612710600e546103e8610d239190612c42565b610d2d9190612c61565b905080600e6000828254610d419190612c83565b909155505060405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610db5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd99190612bd6565b505050565b610de6611e24565b600280546001600160a01b0319166001600160a01b03831617905550565b610e0c611e24565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610e36611e24565b610e406000612158565b565b610e4a611e24565b612710610e578284612b95565b1115610e955760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081cdc1b1a5d609a1b60448201526064016106fc565b60008211610ee55760405162461bcd60e51b815260206004820181905260248201527f686173206e6f7420676976656e20616e20696e737572616e63652073706c697460448201526064016106fc565b60008111610f3f5760405162461bcd60e51b815260206004820152602160248201527f686173206e6f7420676976656e2061207265696e737572616e63652073706c696044820152601d60fa1b60648201526084016106fc565b6040805180820190915282815260208101829052610dd990600c9060026129ba565b60008281526005602052604090205482906001600160a01b0316610f975760405162461bcd60e51b81526004016106fc90612b20565b60008211610fb75760405162461bcd60e51b81526004016106fc90612b48565b610fc183336121aa565b6000838152600b602052604081208054849290610fdf908490612b95565b90915550506000838152600a602090815260408083203384529091529020831561107957600084815260056020526040908190205490516310c5f8f560e21b8152600481018590523360248201526001600160a01b0390911690634317e3d490604401600060405180830381600087803b15801561105c57600080fd5b505af1158015611070573d6000803e3d6000fd5b505050506110de565b6001546040516310c5f8f560e21b8152600481018590523360248201526001600160a01b0390911690634317e3d490604401600060405180830381600087803b1580156110c557600080fd5b505af11580156110d9573d6000803e3d6000fd5b505050505b828160000160008282546110f29190612b95565b90915550504260028201556040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064015b6020604051808303816000875af1158015611171573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111959190612bd6565b5050505050565b60008181526005602052604090205481906001600160a01b03166111d25760405162461bcd60e51b81526004016106fc90612b20565b600082116112225760405162461bcd60e51b815260206004820152601d60248201527f506f6f6c4964206d7573742062652067726561746572207468616e203000000060448201526064016106fc565b6000828152600560209081526040808320546007835281842033855290925290912060018101546001600160a01b039092169142116112a35760405162461bcd60e51b815260206004820152601a60248201527f636f766572616765206973206e6f74207965742061637469766500000000000060448201526064016106fc565b816001600160a01b03166323b98cde6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113059190612bd6565b6113495760405162461bcd60e51b8152602060048201526015602482015274706f6f6c206973206e6f7420636c61696d61626c6560581b60448201526064016106fc565b42826001600160a01b031663064b8cb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190612bad565b10156113f15760405162461bcd60e51b815260206004820152601460248201527331b630b4b6903832b934b7b21034b99037bb32b960611b60448201526064016106fc565b621a5e00826001600160a01b031663064b8cb36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114579190612bad565b6114619190612c83565b60028201546114739062015180612c42565b82600101546114829190612b95565b10156114c75760405162461bcd60e51b815260206004820152601460248201527318dbdd995c9859d9481a185cc8195e1c1a5c995960621b60448201526064016106fc565b805461150c5760405162461bcd60e51b81526020600482015260146024820152736e6f20636f76657261676520746f20636c61696d60601b60448201526064016106fc565b60006115188533611d23565b6000808455868152600b6020526040902054909150811161155e57815460008681526008602052604081208054909190611553908490612c83565b909155506115db9050565b6000858152600b60205260408120805483929061157c908490612c83565b90915550506000858152600b602052604090205461159a9082612c83565b6000808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7680549091906115d5908490612c83565b90915550505b6000858152600660205260409081902054905163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d9190612bd6565b50604080518281523360208201527f9b5d1a613fa5f0790b36b13103706e31fca06b229d87e9915b29fc20c1d7649091015b60405180910390a15050505050565b600c81600281106116ae57600080fd5b0154905081565b60008281526005602052604090205482906001600160a01b03166116eb5760405162461bcd60e51b81526004016106fc90612b20565b6000821161170b5760405162461bcd60e51b81526004016106fc90612b48565b6000838152600a602090815260408083203384529091529020548211156117885760405162461bcd60e51b815260206004820152602b60248201527f416d6f756e74206d757374206265206c657373207468616e2070726f7669646560448201526a64206c697175696469747960a81b60648201526084016106fc565b6000838152600b60205260409020548211156117f15760405162461bcd60e51b815260206004820152602260248201527f416d6f756e74206d757374206265206c657373207468616e206c697175696469604482015261747960f01b60648201526084016106fc565b6000838152600a6020908152604080832033845290915290206002015461181b9062093a80612b95565b4210156118865760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f742072656d6f7665206c69717569646974792077697468696e20376044820152722064617973206f66206c61737420636c61696d60681b60648201526084016106fc565b6000838152600a602090815260408083203384528252918290208251808401909352600583526414dd185c9d60da1b91830191909152906118c690612761565b6118d084336121aa565b6118f460405180604001604052806003815260200162115b9960ea1b815250612761565b61193d604051806040016040528060148152602001731b1a5c5d5a591a5d1e48189e481c1bdbdb081a5960621b815250600b6000878152602001908152602001600020546127a4565b6000848152600b60205260408120805485929061195b908490612c83565b909155505083156119dc57600084815260056020526040908190205490516305fe138b60e01b8152600481018590523360248201526001600160a01b03909116906305fe138b90604401600060405180830381600087803b1580156119bf57600080fd5b505af11580156119d3573d6000803e3d6000fd5b50505050611a41565b6001546040516305fe138b60e01b8152600481018590523360248201526001600160a01b03909116906305fe138b90604401600060405180830381600087803b158015611a2857600080fd5b505af1158015611a3c573d6000803e3d6000fd5b505050505b82816000016000828254611a559190612c83565b909155505042600282015560405163a9059cbb60e01b8152336004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401611152565b60008281526005602052604081205483906001600160a01b0316611ae95760405162461bcd60e51b81526004016106fc90612b20565b6000848152600a602090815260408083206001600160a01b038716845282529182902082516060810184528154815260018201549281019290925260020154918101919091528415611bcd576000858152600560209081526040918290205483519184015192516309f6842360e11b81526001600160a01b03909116926313ed084692611b8492909190600401918252602082015260400190565b602060405180830381865afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc59190612bad565b925050610cad565b600154815160208301516040516309f6842360e11b8152600481019290925260248201526001600160a01b03909116906313ed084690604401611b84565b6004546001600160a01b0316331480611c2e57506002546001600160a01b031633145b611c4a5760405162461bcd60e51b81526004016106fc90612c9a565b6106c3816127e9565b60008181526005602052604090205481906001600160a01b0316611c895760405162461bcd60e51b81526004016106fc90612b20565b611c9382336121aa565b5050565b6004546001600160a01b0316331480611cba57506002546001600160a01b031633145b611cd65760405162461bcd60e51b81526004016106fc90612c9a565b600081815260066020908152604080832080546001600160a01b038088166001600160a01b03199283161790925560059093529220805492861692909116919091179055610dd9826127e9565b6000808311611d855760405162461bcd60e51b815260206004820152602860248201527f5265696e737572616e636520706f6f6c206772616e7473206e6f2064697265636044820152671d081c185e5bdd5d60c21b60648201526084016106fc565b5060009182526007602090815260408084206001600160a01b0393909316845291905290205490565b611db6611e24565b6001600160a01b038116611e1b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106fc565b6106c381612158565b33611e376004546001600160a01b031690565b6001600160a01b031614610e405760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106fc565b60008281526005602052604090205482906001600160a01b0316611ec35760405162461bcd60e51b81526004016106fc90612b20565b60008211611f075760405162461bcd60e51b8152602060048201526011602482015270139bc8199d5b991cc81d1bc81cdc1b1a5d607a1b60448201526064016106fc565b6000838152600660205260408120546001600160a01b0316908390612710600c820154611f349084612c42565b611f3e9190612c61565b90506000612710600c60010154611f559085612c42565b611f5f9190612c61565b9050600081611f6e8486612c83565b611f789190612c83565b90506000611fa782877f00000000000000000000000000000000000000000000000000000000000000006128b9565b90506000611fd684887f00000000000000000000000000000000000000000000000000000000000000006128b9565b905081600e6000828254611fea9190612b95565b909155505060008a8152600860205260408120805487929061200d908490612b95565b9091555050600080805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7805483929061204d908490612b95565b909155505060408051808201909152601081526f1d1bc81a5b9cdd5c985b98d95c1bdbdb60821b602082015261208390866127a4565b60008a815260056020526040908190205490516305d4266960e11b8152600481018790526001600160a01b0390911690630ba84cd290602401600060405180830381600087803b1580156120d657600080fd5b505af11580156120ea573d6000803e3d6000fd5b50506001546040516305d4266960e11b8152600481018590526001600160a01b039091169250630ba84cd29150602401600060405180830381600087803b15801561213457600080fd5b505af1158015612148573d6000803e3d6000fd5b5050505050505050505050505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b81156122f3576000828152600560209081526040918290205482516311dcc66f60e11b815292516001600160a01b03909116926323b98cde9260048083019391928290030181865afa158015612204573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122289190612bd6565b1561228a5760405162461bcd60e51b815260206004820152602c60248201527f506f6f6c20686173206265656e206c6971756964617465642c2063616e6e6f7460448201526b20636c61696d207374616b6560a01b60648201526084016106fc565b600082815260056020526040808220548151630f8562c360e21b815291516001600160a01b0390911692633e158b0c926004808201939182900301818387803b1580156122d657600080fd5b505af11580156122ea573d6000803e3d6000fd5b5050505061243f565b600160009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612346573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236a9190612bd6565b156123d65760405162461bcd60e51b815260206004820152603660248201527f6120706f6f6c20686173206265656e206c6971756964617465642c20756e61626044820152756c6520746f2072656d6f7665206c697175696469747960501b60648201526084016106fc565b600160009054906101000a90046001600160a01b03166001600160a01b0316633e158b0c6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561242657600080fd5b505af115801561243a573d6000803e3d6000fd5b505050505b6000828152600a602090815260408083206001600160a01b0380861685529083528184208685526005845293829020548251808401845260098152683837b7b61030b1b19d60b91b8186015283516336d4219560e01b8152935191909216936124f59385926336d42195926004808401939192918290030181865afa1580156124cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124f09190612bad565b6127a4565b61252160405180604001604052806006815260200165185b5bdd5b9d60d21b81525083600001546127a4565b61254b604051806040016040528060048152602001631119589d60e21b81525083600101546127a4565b60008260010154826001600160a01b03166336d421956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b49190612bad565b84546125c09190612c42565b6125ca9190612c83565b90506126066040518060400160405280600581526020016466756e647360d81b81525060086000888152602001908152602001600020546127a4565b60008581526008602052604081208054839290612624908490612c83565b92505081905550816001600160a01b03166336d421956040518163ffffffff1660e01b8152600401602060405180830381865afa158015612669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268d9190612bad565b83546126999190612c42565b60018401556000858152600660205260409081902054905163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156126fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127229190612bd6565b50604080518281526001600160a01b03861660208201527f87638f9e82f004fbb8720a22ecbe5433f32c8400acf08fd57bb7688e5177c7ab910161168f565b6106c3816040516024016127759190612d4e565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052612999565b611c9382826040516024016127ba929190612d61565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052612999565b6003546001600160a01b03166128415760405162461bcd60e51b815260206004820152601860248201527f45786368616e67652061646472657373206e6f7420736574000000000000000060448201526064016106fc565b60035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529082169063095ea7b3906044016020604051808303816000875af1158015612895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c939190612bd6565b6040805160018082528183019092526000918291906020808301908036833701905050905083816000815181106128f2576128f2612ceb565b6001600160a01b039283166020918202929092010152600354166338ed173986606461291f826063612c42565b6129299190612c61565b848760006040518663ffffffff1660e01b815260040161294d959493929190612d83565b6020604051808303816000875af115801561296c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129909190612bad565b95945050505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82600281019282156129e8579160200282015b828111156129e85782518255916020019190600101906129cd565b506129f49291506129f8565b5090565b5b808211156129f457600081556001016129f9565b600060208284031215612a1f57600080fd5b5035919050565b80356001600160a01b0381168114612a3d57600080fd5b919050565b600060208284031215612a5457600080fd5b612a5d82612a26565b9392505050565b60008060008060808587031215612a7a57600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612aa957600080fd5b82359150612ab960208401612a26565b90509250929050565b60008060408385031215612ad557600080fd5b50508035926020909101359150565b600080600060608486031215612af957600080fd5b612b0284612a26565b9250612b1060208501612a26565b9150604084013590509250925092565b6020808252600e908201526d141bdbdb081b9bdd08199bdd5b9960921b604082015260600190565b6020808252601d908201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612ba857612ba8612b7f565b500190565b600060208284031215612bbf57600080fd5b5051919050565b80518015158114612a3d57600080fd5b600060208284031215612be857600080fd5b612a5d82612bc6565b60008060008060008060c08789031215612c0a57600080fd5b612c1387612bc6565b95506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000816000190483118215151615612c5c57612c5c612b7f565b500290565b600082612c7e57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612c9557612c95612b7f565b500390565b60208082526031908201527f4f6e6c79206f776e6572206f7220696e737572616e6365506f6f6c466163746f60408201527072792063616e2073657420746f6b656e7360781b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015612d2757602081850181015186830182015201612d0b565b81811115612d39576000602083870101525b50601f01601f19169290920160200192915050565b602081526000612a5d6020830184612d01565b604081526000612d746040830185612d01565b90508260208301529392505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015612dd35784516001600160a01b031683529383019391830191600101612dae565b50506001600160a01b0396909616606085015250505060800152939250505056fea2646970667358221220d47f1f7f10a4d935a89020599c1db2f1f6f139e63a41f416819f7fb67c5cd57e64736f6c634300080d0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "approvePoolToken(address)": {
        "params": {
          "_token": "address of the approved token"
        }
      },
      "buyCoverage(uint256,uint256,uint256,uint256)": {
        "params": {
          "_coverAmount": "amount of tokens to cover",
          "_length": "lenght of coverage in days",
          "_pay": "amount paid to cover amount of tokens",
          "_poolId": "pool id generated on Policy Center"
        }
      },
      "calculatePayout(uint256,address)": {
        "params": {
          "_poolId": "pool id to claim from. 0 if reinsurance pool"
        },
        "returns": {
          "_0": "uint256 amount of payout"
        }
      },
      "calculateReward(uint256,address)": {
        "params": {
          "_poolId": "Pool id (0 for reinsurance pool)"
        },
        "returns": {
          "_0": "uint256 Reward"
        }
      },
      "claimPayout(uint256)": {
        "params": {
          "_poolId": "Pool id"
        }
      },
      "claimReward(uint256)": {
        "params": {
          "_poolId": "pool id to claim rewards from"
        }
      },
      "getCoverage(uint256,address)": {
        "params": {
          "_poolId": "Pool id",
          "_user": "User address"
        },
        "returns": {
          "_0": "coverage Coverage info"
        }
      },
      "getInsurancePoolById(uint256)": {
        "params": {
          "_poolId": "pool id generated on Policy Center"
        },
        "returns": {
          "_0": "address of insurance pool"
        }
      },
      "getPoolInfo(uint256)": {
        "params": {
          "_poolId": "pool id generated by Policy Center"
        },
        "returns": {
          "accumulatedRewardPerShare": " accumulated reward per each share of the pool",
          "emissionEndTime": "         time emission ends if no new coverage is bought",
          "emissionRate": "            rate of emission if no new coverage is bought",
          "lastRewardTimestamp": "     last time reward has been  updated",
          "maxCapacity": "             max capacity of the pool in shield",
          "paused": "                  true if pool is paused, false otherwise"
        }
      },
      "getPremiumSplits()": {
        "returns": {
          "_0": "insurancePool premium split in bps",
          "_1": "reinsurancePool premium split in bps"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideLiquidity(uint256,uint256)": {
        "params": {
          "_amount": "amount of liquidity to provide",
          "_poolId": "pool id generated on Policy Center"
        }
      },
      "removeLiquidity(uint256,uint256)": {
        "params": {
          "_amount": "amount of liquidity to provide",
          "_poolId": "pool id generated on Policy Center"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rewardTreasuryToReporter(address)": {
        "params": {
          "_reporter": "address of the reporter"
        }
      },
      "setExchange(address)": {
        "params": {
          "_exchange": "address of traderjoe contract"
        }
      },
      "setPremiumSplit(uint256,uint256)": {
        "params": {
          "_insurance": "split for insurance",
          "_reinsurance": "split for reinsurance"
        }
      },
      "storePoolInformation(address,address,uint256)": {
        "params": {
          "_pool": "address of the insurance pool",
          "_poolId": "id of the pool",
          "_token": "address of token that a pool negotiates in"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Policy Center",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvePoolToken(address)": {
        "notice": "approves exchange to swap tokens in control of policy center"
      },
      "buyCoverage(uint256,uint256,uint256,uint256)": {
        "notice": "Buy new coverage for a given pool"
      },
      "calculatePayout(uint256,address)": {
        "notice": "returns payout given to coverage buyers when report passes"
      },
      "calculateReward(uint256,address)": {
        "notice": "Reward for liquidity providers"
      },
      "claimPayout(uint256)": {
        "notice": "claims liquidation payout given a pool id"
      },
      "claimReward(uint256)": {
        "notice": "claim rewards from a given pool id"
      },
      "getCoverage(uint256,address)": {
        "notice": "returns information about the coverage of a given user"
      },
      "getInsurancePoolById(uint256)": {
        "notice": "returns insurance pool address given a pool id"
      },
      "getPoolInfo(uint256)": {
        "notice": "returns pool  info for a given pool id"
      },
      "getPremiumSplits()": {
        "notice": "returns premium split used by Policy Center"
      },
      "provideLiquidity(uint256,uint256)": {
        "notice": "provide liquidity to a give pool id"
      },
      "removeLiquidity(uint256,uint256)": {
        "notice": "remove liquidity to a give pool id"
      },
      "rewardTreasuryToReporter(address)": {
        "notice": "rewards reporter when a reported insurance pool is liquidated with treasury callable by contract only"
      },
      "setExchange(address)": {
        "notice": "set exchange address to be used for token swaps"
      },
      "setPremiumSplit(uint256,uint256)": {
        "notice": "sets the premium splits used by Policy Center"
      },
      "storePoolInformation(address,address,uint256)": {
        "notice": "sets the insurance pool factory address"
      }
    },
    "notice": "This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11758,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "executor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11760,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "reinsurancePool",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11762,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "insurancePoolFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11764,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "exchange",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 16364,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10239,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "insurancePools",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10243,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "tokenByPoolId",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10257,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "coverages",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Coverage)10250_storage))"
      },
      {
        "astId": 10261,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "fundsByPoolId",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10265,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "totalRewardsByPoolId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10279,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "liquidities",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Liquidity)10272_storage))"
      },
      {
        "astId": 10283,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "liquidityByPoolId",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10287,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "premiumSplits",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)2_storage"
      },
      {
        "astId": 10289,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "treasury",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_mapping(t_address,t_struct(Coverage)10250_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PolicyCenter.Coverage)",
        "numberOfBytes": "32",
        "value": "t_struct(Coverage)10250_storage"
      },
      "t_mapping(t_address,t_struct(Liquidity)10272_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PolicyCenter.Liquidity)",
        "numberOfBytes": "32",
        "value": "t_struct(Liquidity)10272_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Coverage)10250_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct PolicyCenter.Coverage))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Coverage)10250_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Liquidity)10272_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct PolicyCenter.Liquidity))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Liquidity)10272_storage)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Coverage)10250_storage": {
        "encoding": "inplace",
        "label": "struct PolicyCenter.Coverage",
        "members": [
          {
            "astId": 10245,
            "contract": "src/core/PolicyCenter.sol:PolicyCenter",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10247,
            "contract": "src/core/PolicyCenter.sol:PolicyCenter",
            "label": "buyDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10249,
            "contract": "src/core/PolicyCenter.sol:PolicyCenter",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Liquidity)10272_storage": {
        "encoding": "inplace",
        "label": "struct PolicyCenter.Liquidity",
        "members": [
          {
            "astId": 10267,
            "contract": "src/core/PolicyCenter.sol:PolicyCenter",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10269,
            "contract": "src/core/PolicyCenter.sol:PolicyCenter",
            "label": "userDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10271,
            "contract": "src/core/PolicyCenter.sol:PolicyCenter",
            "label": "lastClaim",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}