{
  "address": "0xC3284aB7960b40b77efc599d1263733055fea77A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__AlreadyClaimedPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__InsufficientCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoExchange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NonExistentPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__WrongPriorityPoolID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__ZeroPremium",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coverDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coverAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumInShield",
          "type": "uint256"
        }
      ],
      "name": "CoverBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityStakedWithoutFarming",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priorityLP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priorityLP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityUnstakedWithoutFarming",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayoutClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toPriority",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toProtection",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTreasury",
          "type": "uint256"
        }
      ],
      "name": "PremiumSplitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "PremiumSwapped",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "approvePoolToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayment",
          "type": "uint256"
        }
      ],
      "name": "buyCover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_crToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "claimPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coverRightTokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "currentLPAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPremiumSplits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "premiumSplits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceGetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priorityPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coverRightTokenFactory",
          "type": "address"
        }
      ],
      "name": "setCoverRightTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "setExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutPool",
          "type": "address"
        }
      ],
      "name": "setPayoutPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_priority",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protection",
          "type": "uint256"
        }
      ],
      "name": "setPremiumSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceGetter",
          "type": "address"
        }
      ],
      "name": "setPriceGetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "name": "setProtectionPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weightedFarmingPool",
          "type": "address"
        }
      ],
      "name": "setWeightedFarmingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLiquidityWithoutFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "storePoolInformation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenByPoolId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priorityLP",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priorityLP",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeLiquidityWithoutFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedFarmingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1f5e4ddb58af4af78e1a601683e3960b94e382d598ec67cbe62b4788d5c6004",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xC3284aB7960b40b77efc599d1263733055fea77A",
    "transactionIndex": 0,
    "gasUsed": "2899684",
    "logsBloom": "0x
    "blockHash": "0xd3f25f6314331ff8e51497227d8041bdcccce1e350fdf0f81c25fbb1afcd3910",
    "transactionHash": "0xd1f5e4ddb58af4af78e1a601683e3960b94e382d598ec67cbe62b4788d5c6004",
    "logs": [],
    "blockNumber": 12985540,
    "cumulativeGasUsed": "2899684",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4Efd5a9269a328b1bf8873dC6d9EB5fF321aba09",
    "0xF98f0dE58c9a78B8e42def3cc49f02C2B35b81C9",
    "0x2afE704De753dDD32DC39f41C5F9D5df4bFc71F0",
    "0x39c0156f420D3Cb8881EEEA9cc40B9065a4ACFB5"
  ],
  "numDeployments": 1,
  "solcInputHash": "2386ce3d155c5ec6e42cfb722b7a311f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PolicyCenter__AlreadyClaimedPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__InsufficientCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoExchange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NonExistentPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__WrongPriorityPoolID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__ZeroPremium\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumInShield\",\"type\":\"uint256\"}],\"name\":\"CoverBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityStakedWithoutFarming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priorityLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priorityLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityUnstakedWithoutFarming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPriority\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toProtection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTreasury\",\"type\":\"uint256\"}],\"name\":\"PremiumSplitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"PremiumSwapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approvePoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayment\",\"type\":\"uint256\"}],\"name\":\"buyCover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_crToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverRightTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"currentLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiumSplits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"premiumSplits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priorityPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverRightTokenFactory\",\"type\":\"address\"}],\"name\":\"setCoverRightTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutPool\",\"type\":\"address\"}],\"name\":\"setPayoutPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priority\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protection\",\"type\":\"uint256\"}],\"name\":\"setPremiumSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceGetter\",\"type\":\"address\"}],\"name\":\"setPriceGetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"name\":\"setProtectionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weightedFarmingPool\",\"type\":\"address\"}],\"name\":\"setWeightedFarmingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLiquidityWithoutFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"storePoolInformation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenByPoolId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priorityLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priorityLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLiquidityWithoutFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedFarmingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"approvePoolToken(address)\":{\"params\":{\"_token\":\"Address of the approved token\"}},\"buyCover(uint256,uint256,uint256,uint256)\":{\"params\":{\"_coverAmount\":\"Amount to cover\",\"_coverDuration\":\"Cover duration in month (1 ~ 3)\",\"_maxPayment\":\"Maximum payment user can accept\",\"_poolId\":\"Pool id\"}},\"claimPayout(uint256,address,uint256)\":{\"params\":{\"_crToken\":\"Cover right token address\",\"_generation\":\"Generation of the priority pool\",\"_poolId\":\"Pool id\"}},\"currentLPAddress(uint256)\":{\"params\":{\"_poolId\":\"Priority Pool ID\"}},\"getPremiumSplits()\":{\"returns\":{\"_0\":\"toPriorityPool   Premium split to priority pool in bps\",\"_1\":\"toProtectionPool Premium split to protection pool in bps\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideLiquidity(uint256)\":{\"params\":{\"_amount\":\"Amount of liquidity(shield) to provide\"}},\"removeLiquidity(uint256)\":{\"params\":{\"_amount\":\"Amount of liquidity to provide\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setExchange(address)\":{\"params\":{\"_exchange\":\"Address of traderjoe contract\"}},\"setPremiumSplit(uint256,uint256)\":{\"params\":{\"_priority\":\"Split for priority pool in bps\",\"_protection\":\"Split for protection pool in bps\"}},\"stakeLiquidity(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of PRO-LP tokens to stake\",\"_poolId\":\"Pool id\"}},\"stakeLiquidityWithoutFarming(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of PRO-LP amount\",\"_poolId\":\"Pool id\"}},\"storePoolInformation(address,address,uint256)\":{\"params\":{\"_pool\":\"Address of the priority pool\",\"_poolId\":\"Pool id\",\"_token\":\"Address of the priority pool's native token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeLiquidity(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Amount of LP(priority lp) tokens to withdraw\",\"_poolId\":\"Pool id\",\"_priorityLP\":\"Priority lp token address to withdraw\"}},\"unstakeLiquidityWithoutFarming(uint256,address,uint256)\":{\"params\":{\"_amount\":\"PRI-LP token amount to remove\",\"_poolId\":\"Pool id\",\"_priorityLP\":\"PRI-LP token address\"}}},\"title\":\"Policy Center\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvePoolToken(address)\":{\"notice\":\"Approve the exchange to swap tokens\"},\"buyCover(uint256,uint256,uint256,uint256)\":{\"notice\":\"Buy new cover for a given pool         Select a pool with parameter \\\"poolId\\\"         Cover amount is in shield and duration is in month         The premium ratio may be dynamic so \\\"maxPayment\\\" is similar to \\\"slippage\\\"\"},\"claimPayout(uint256,address,uint256)\":{\"notice\":\"Claim payout         Need to use a specific crToken address as parameter\"},\"currentLPAddress(uint256)\":{\"notice\":\"Returns the current LP address for a Pool ID\"},\"getPremiumSplits()\":{\"notice\":\"Returns premium split used by Policy Center\"},\"provideLiquidity(uint256)\":{\"notice\":\"Provide liquidity to Protection Pool\"},\"removeLiquidity(uint256)\":{\"notice\":\"Remove liquidity from protection pool\"},\"setExchange(address)\":{\"notice\":\"Set exchange address to be used for token swaps\"},\"setPremiumSplit(uint256,uint256)\":{\"notice\":\"Sets the premium splits used by Policy Center\"},\"stakeLiquidity(uint256,uint256)\":{\"notice\":\"Stake Protection Pool LP (PRO-LP) into priority pools         And automatically stake the PRI-LP tokens into weighted farming pool         With this function, no need for approval of PRI-LP tokens         If you want to hold the PRI-LP tokens for other usage         Call \\\"stakeLiquidityWithoutFarming\\\"\"},\"stakeLiquidityWithoutFarming(uint256,uint256)\":{\"notice\":\"Stake liquidity to priority pool without depositing into farming\"},\"storePoolInformation(address,address,uint256)\":{\"notice\":\"Store new pool information\"},\"unstakeLiquidity(uint256,address,uint256)\":{\"notice\":\"Unstake Protection Pool LP from priority pools         There may be different generations of priority lp tokens         This function will first remove the PRI-LP token from farming pool         Ensure that your PRI-LP tokens are inside the farming pool         If the PRI-LP tokens are in your own wallet, use \\\"unstakeLiquidityWithoutFarming\\\"\"},\"unstakeLiquidityWithoutFarming(uint256,address,uint256)\":{\"notice\":\"Unstake liquidity without removing PRI-LP from farming\"}},\"notice\":\"This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/PolicyCenter.sol\":\"PolicyCenter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363631383234393632393431\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9720545d8ea1f76222f98683f861f919e9c28bd5d5503caa7e3620a21b6aaa24\",\"license\":\"MIT\"},\"src/core/PolicyCenter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ExternalTokenDependencies.sol\\\";\\nimport \\\"./interfaces/PolicyCenterEventError.sol\\\";\\nimport \\\"./interfaces/PolicyCenterDependencies.sol\\\";\\n\\nimport \\\"../util/OwnableWithoutContext.sol\\\";\\n\\nimport \\\"../interfaces/IPriceGetter.sol\\\";\\n\\nimport \\\"../libraries/DateTime.sol\\\";\\nimport \\\"../libraries/StringUtils.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Policy Center\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the policy center for degis Protocol Protection\\n *         Users can buy policies and get payoff here\\n *         Sellers can provide liquidity and choose the pools to cover\\n *\\n */\\ncontract PolicyCenter is\\n    PolicyCenterEventError,\\n    ExternalTokenDependencies,\\n    OwnableWithoutContext,\\n    PolicyCenterDependencies\\n{\\n    using SafeERC20 for IERC20;\\n    using StringUtils for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // poolId => address, updated once pools are deployed\\n    // Protection Pool is pool 0\\n    mapping(uint256 => address) public priorityPools;\\n    mapping(uint256 => address) public tokenByPoolId;\\n\\n    // bps distribution of premiums 0: insurance pool, 1: protection pool\\n    uint256[2] public premiumSplits;\\n\\n    // Year => Month => Total Cover Amount\\n    mapping(uint256 => mapping(uint256 => uint256)) coverInMonth;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield,\\n        address _protectionPool\\n    )\\n        ExternalTokenDependencies(_deg, _veDeg, _shield)\\n        OwnableWithoutContext(msg.sender)\\n    {\\n        // Peotection pool as pool 0 and with shield token\\n        priorityPools[0] = _protectionPool;\\n        tokenByPoolId[0] = _shield;\\n\\n        _setProtectionPool(_protectionPool);\\n\\n        // Initialize premium split standard in bps\\n        // 45% to protectionPool, 50% to insurancePool, 5% to treasury\\n        premiumSplits = [4500, 5000];\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // veirifies if pool exists. used throughout insurance contracts\\n    modifier poolExists(uint256 _poolId) {\\n        if (priorityPools[_poolId] == address(0))\\n            revert PolicyCenter__NonExistentPool();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Returns the current LP address for a Pool ID\\n     * @param _poolId          Priority Pool ID\\n     */\\n    function currentLPAddress(uint256 _poolId)\\n        external\\n        view\\n        returns (address lpAddress)\\n    {\\n        lpAddress = IPriorityPool(priorityPools[_poolId]).currentLPAddress();\\n    }\\n\\n    /**\\n     * @notice Returns premium split used by Policy Center\\n     * @return toPriorityPool   Premium split to priority pool in bps\\n     * @return toProtectionPool Premium split to protection pool in bps\\n     */\\n    function getPremiumSplits() public view returns (uint256, uint256) {\\n        return (premiumSplits[0], premiumSplits[1]);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Sets the premium splits used by Policy Center\\n     * @param _priority    Split for priority pool in bps\\n     * @param _protection  Split for protection pool in bps\\n     */\\n    function setPremiumSplit(uint256 _priority, uint256 _protection)\\n        external\\n        onlyOwner\\n    {\\n        // up to 1000bps, left over goes to treasury\\n        require(_priority + _protection <= 10000, \\\"Invalid split\\\");\\n        require(_priority > 0, \\\"has not given an insurance split\\\");\\n        require(_protection > 0, \\\"has not given a protection split\\\");\\n        //sets insurance and protection splits\\n        premiumSplits = [_priority, _protection];\\n    }\\n\\n    /**\\n     *  @notice Set exchange address to be used for token swaps\\n     *  @param _exchange Address of traderjoe contract\\n     */\\n    function setExchange(address _exchange) external onlyOwner {\\n        exchange = _exchange;\\n    }\\n\\n    function setPriceGetter(address _priceGetter) external onlyOwner {\\n        _setPriceGetter(_priceGetter);\\n    }\\n\\n    function setProtectionPool(address _protectionPool) external onlyOwner {\\n        _setProtectionPool(_protectionPool);\\n    }\\n\\n    function setWeightedFarmingPool(address _weightedFarmingPool)\\n        external\\n        onlyOwner\\n    {\\n        _setWeightedFarmingPool(_weightedFarmingPool);\\n    }\\n\\n    function setCoverRightTokenFactory(address _coverRightTokenFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setCoverRightTokenFactory(_coverRightTokenFactory);\\n    }\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        _setPriorityPoolFactory(_priorityPoolFactory);\\n    }\\n\\n    function setPayoutPool(address _payoutPool) external onlyOwner {\\n        _setPayoutPool(_payoutPool);\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        _setTreausry(_treasury);\\n    }\\n\\n    /**\\n     * @notice Store new pool information\\n     *\\n     * @param _pool   Address of the priority pool\\n     * @param _token  Address of the priority pool's native token\\n     * @param _poolId Pool id\\n     */\\n    function storePoolInformation(\\n        address _pool,\\n        address _token,\\n        uint256 _poolId\\n    ) external {\\n        require(msg.sender == priorityPoolFactory, \\\"Only factory can store\\\");\\n\\n        tokenByPoolId[_poolId] = _token;\\n        priorityPools[_poolId] = _pool;\\n\\n        _approvePoolToken(_token);\\n    }\\n\\n    /**\\n     * @notice Approve the exchange to swap tokens\\n     *\\n     * @param _token Address of the approved token\\n     */\\n    function approvePoolToken(address _token) external onlyOwner {\\n        _approvePoolToken(_token);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Buy new cover for a given pool\\n     *\\n     *         Select a pool with parameter \\\"poolId\\\"\\n     *         Cover amount is in shield and duration is in month\\n     *         The premium ratio may be dynamic so \\\"maxPayment\\\" is similar to \\\"slippage\\\"\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverAmount   Amount to cover\\n     * @param _coverDuration Cover duration in month (1 ~ 3)\\n     * @param _maxPayment    Maximum payment user can accept\\n     */\\n    function buyCover(\\n        uint256 _poolId,\\n        uint256 _coverAmount,\\n        uint256 _coverDuration,\\n        uint256 _maxPayment\\n    ) external poolExists(_poolId) returns (address) {\\n        require(_coverAmount >= MIN_COVER_AMOUNT, \\\"Under minimum cover amount\\\");\\n        require(_withinLength(_coverDuration), \\\"Wrong cover length\\\");\\n        require(_poolId > 0, \\\"Wrong pool id\\\");\\n\\n        _checkCapacity(_poolId, _coverAmount);\\n\\n        // Premium in USD (shield) and duration in second\\n        (uint256 premium, uint256 timestampDuration) = _getCoverPrice(\\n            _poolId,\\n            _coverAmount,\\n            _coverDuration\\n        );\\n        // Check if premium cost is within limits given by user\\n        require(premium <= _maxPayment, \\\"Premium too high\\\");\\n\\n        // Mint cover right tokens to buyer\\n        // CR token has different months and generations\\n        address crToken = _checkCRToken(_poolId, _coverDuration);\\n        ICoverRightToken(crToken).mint(_poolId, msg.sender, _coverAmount);\\n\\n        // Split the premium income and update the pool status\\n        (\\n            uint256 premiumToProtectionPool,\\n            uint256 premiumToPriorityPool,\\n            uint256 premiumToTreasury\\n        ) = _splitPremium(_poolId, premium);\\n\\n        IProtectionPool(protectionPool).updateWhenBuy(\\n            premiumToProtectionPool,\\n            _coverDuration,\\n            timestampDuration\\n        );\\n        IPriorityPool(priorityPools[_poolId]).updateWhenBuy(\\n            _coverAmount,\\n            premiumToPriorityPool,\\n            _coverDuration,\\n            timestampDuration\\n        );\\n        ITreasury(treasury).premiumIncome(_poolId, premiumToTreasury);\\n\\n        emit CoverBought(\\n            msg.sender,\\n            _poolId,\\n            _coverDuration,\\n            _coverAmount,\\n            premium\\n        );\\n\\n        return crToken;\\n    }\\n\\n    /**\\n     * @notice Provide liquidity to Protection Pool\\n     *\\n     * @param _amount Amount of liquidity(shield) to provide\\n     */\\n    function provideLiquidity(uint256 _amount) external {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        // Mint PRO-LP tokens and transfer shield\\n        IProtectionPool(protectionPool).providedLiquidity(_amount, msg.sender);\\n        SimpleIERC20(shield).transferFrom(msg.sender, protectionPool, _amount);\\n\\n        emit LiquidityProvided(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake Protection Pool LP (PRO-LP) into priority pools\\n     *         And automatically stake the PRI-LP tokens into weighted farming pool\\n     *         With this function, no need for approval of PRI-LP tokens\\n     *\\n     *         If you want to hold the PRI-LP tokens for other usage\\n     *         Call \\\"stakeLiquidityWithoutFarming\\\"\\n     *\\n     * @param _poolId Pool id\\n     * @param _amount Amount of PRO-LP tokens to stake\\n     */\\n    function stakeLiquidity(uint256 _poolId, uint256 _amount)\\n        public\\n        poolExists(_poolId)\\n    {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        address pool = priorityPools[_poolId];\\n\\n        // Update status and mint Prority Pool LP tokens\\n        // TODO: Directly mint pri-lp tokens to policy center\\n        // TODO: And send the PRI-LP tokens to weighted farming pool\\n        // TODO: no need for approval\\n        address lpToken = IPriorityPool(pool).stakedLiquidity(\\n            _amount,\\n            address(this)\\n        );\\n        IERC20(protectionPool).transferFrom(msg.sender, pool, _amount);\\n\\n        IWeightedFarmingPool(weightedFarmingPool).depositFromPolicyCenter(\\n            _poolId,\\n            lpToken,\\n            _amount,\\n            msg.sender\\n        );\\n        IERC20(lpToken).transfer(weightedFarmingPool, _amount);\\n\\n        emit LiquidityStaked(msg.sender, _poolId, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake liquidity to priority pool without depositing into farming\\n     *\\n     * @param _poolId Pool id\\n     * @param _amount Amount of PRO-LP amount\\n     */\\n    function stakeLiquidityWithoutFarming(uint256 _poolId, uint256 _amount)\\n        public\\n        poolExists(_poolId)\\n    {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        address pool = priorityPools[_poolId];\\n\\n        // Mint PRI-LP tokens to the user directly\\n        IPriorityPool(pool).stakedLiquidity(_amount, msg.sender);\\n        IERC20(protectionPool).transferFrom(msg.sender, pool, _amount);\\n\\n        emit LiquidityStakedWithoutFarming(msg.sender, _poolId, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake Protection Pool LP from priority pools\\n     *         There may be different generations of priority lp tokens\\n     *\\n     *         This function will first remove the PRI-LP token from farming pool\\n     *         Ensure that your PRI-LP tokens are inside the farming pool\\n     *         If the PRI-LP tokens are in your own wallet, use \\\"unstakeLiquidityWithoutFarming\\\"\\n     *\\n     * @param _poolId     Pool id\\n     * @param _priorityLP Priority lp token address to withdraw\\n     * @param _amount     Amount of LP(priority lp) tokens to withdraw\\n     */\\n    function unstakeLiquidity(\\n        uint256 _poolId,\\n        address _priorityLP,\\n        uint256 _amount\\n    ) external poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        // First remove the PRI-LP token from weighted farming pool\\n        IWeightedFarmingPool(weightedFarmingPool).withdrawFromPolicyCenter(\\n            _poolId,\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        // Burn PRI-LP tokens and give back PRO-LP tokens\\n        IPriorityPool(priorityPools[_poolId]).unstakedLiquidity(\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        emit LiquidityUnstaked(msg.sender, _poolId, _priorityLP, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake liquidity without removing PRI-LP from farming\\n     *\\n     * @param _poolId     Pool id\\n     * @param _priorityLP PRI-LP token address\\n     * @param _amount     PRI-LP token amount to remove\\n     */\\n    function unstakeLiquidityWithoutFarming(\\n        uint256 _poolId,\\n        address _priorityLP,\\n        uint256 _amount\\n    ) external poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        IPriorityPool(priorityPools[_poolId]).unstakedLiquidity(\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        emit LiquidityUnstakedWithoutFarming(\\n            msg.sender,\\n            _poolId,\\n            _priorityLP,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from protection pool\\n     *\\n     * @param _amount Amount of liquidity to provide\\n     */\\n    function removeLiquidity(uint256 _amount) external {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        IProtectionPool(protectionPool).removedLiquidity(_amount, msg.sender);\\n\\n        emit LiquidityRemoved(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim payout\\n     *         Need to use a specific crToken address as parameter\\n     *\\n     * @param _poolId     Pool id\\n     * @param _crToken    Cover right token address\\n     * @param _generation Generation of the priority pool\\n     */\\n    function claimPayout(\\n        uint256 _poolId,\\n        address _crToken,\\n        uint256 _generation\\n    ) public poolExists(_poolId) {\\n        if (_poolId == 0) revert PolicyCenter__WrongPriorityPoolID();\\n\\n        (string memory poolName, , , , ) = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        ).pools(_poolId);\\n\\n        // Claim payout from payout pool\\n        // Get the actual claimed amount and new generation cr token to be minted\\n        (uint256 claimed, uint256 newGenerationCRAmount) = IPayoutPool(\\n            payoutPool\\n        ).claim(msg.sender, _crToken, _poolId, _generation);\\n\\n        emit PayoutClaimed(msg.sender, claimed);\\n\\n        uint256 expiry = ICoverRightToken(_crToken).expiry();\\n\\n        // Check if the new generation crToken has been deployed\\n        // If so, get the address\\n        // If not, deploy the new generation cr token\\n        address newCRToken = _checkNewCRToken(\\n            _poolId,\\n            poolName,\\n            expiry,\\n            _generation++\\n        );\\n        ICoverRightToken(newCRToken).mint(\\n            _poolId,\\n            msg.sender,\\n            newGenerationCRAmount\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Swap tokens to USDC and then to shield\\n     *\\n     * @param _fromToken Token address to swap from\\n     * @param _amount    Amount of token to swap from\\n     */\\n    function _swapTokens(address _fromToken, uint256 _amount)\\n        internal\\n        returns (uint256 received)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = _fromToken;\\n        path[1] = USDC;\\n\\n        // Swap for USDC and return the received amount\\n        received = IExchange(exchange).swapExactTokensForTokens(\\n            _amount,\\n            ((_amount * (10000 - SLIPPAGE)) / 1000),\\n            path,\\n            address(this),\\n            block.timestamp + 1\\n        );\\n\\n        // Deposit USDC and get back shield\\n        shield.deposit(1, USDC, received, received);\\n\\n        emit PremiumSwapped(_fromToken, _amount, received);\\n    }\\n\\n    /**\\n     * @notice Check the cover length\\n     *\\n     * @param _length Length to check (in month)\\n     */\\n    function _withinLength(uint256 _length) internal pure returns (bool) {\\n        return _length > 0 && _length <= MAX_COVER_LENGTH;\\n    }\\n\\n    /**\\n     * @notice Check cover right tokens\\n     *         If the crToken does not exist, it will be deployed here\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverDuration Cover length in month\\n     */\\n    function _checkCRToken(uint256 _poolId, uint256 _coverDuration)\\n        internal\\n        returns (address crToken)\\n    {\\n        // Get the expiry timestamp\\n        (uint256 year, uint256 month, uint256 expiry) = DateTimeLibrary\\n            ._getExpiry(block.timestamp, _coverDuration);\\n\\n        (\\n            string memory poolName,\\n            address poolAddress,\\n            ,\\n            ,\\n\\n        ) = IPriorityPoolFactory(priorityPoolFactory).pools(_poolId);\\n\\n        uint256 generation = IPriorityPool(poolAddress).generation();\\n\\n        crToken = _getCRTokenAddress(_poolId, expiry, generation);\\n        if (crToken == address(0)) {\\n            // CR-JOE-2022-1-G1\\n            string memory tokenName = string.concat(\\n                \\\"CR-\\\",\\n                poolName,\\n                \\\"-\\\",\\n                year._toString(),\\n                \\\"-\\\",\\n                month._toString(),\\n                \\\"-G\\\",\\n                generation._toString()\\n            );\\n\\n            crToken = ICoverRightTokenFactory(coverRightTokenFactory)\\n                .deployCRToken(\\n                    poolName,\\n                    _poolId,\\n                    tokenName,\\n                    expiry,\\n                    generation\\n                );\\n        }\\n    }\\n\\n    function _checkNewCRToken(\\n        uint256 _poolId,\\n        string memory _poolName,\\n        uint256 _expiry,\\n        uint256 _newGeneration\\n    ) internal returns (address newCRToken) {\\n        (uint256 year, uint256 month, ) = DateTimeLibrary.timestampToDate(\\n            _expiry\\n        );\\n\\n        newCRToken = _getCRTokenAddress(_poolId, _expiry, _newGeneration);\\n\\n        if (newCRToken == address(0)) {\\n            // CR-JOE-2022-1-G1\\n            string memory tokenName = string.concat(\\n                \\\"CR-\\\",\\n                _poolName,\\n                \\\"-\\\",\\n                year._toString(),\\n                \\\"-\\\",\\n                month._toString(),\\n                \\\"-G\\\",\\n                _newGeneration._toString()\\n            );\\n\\n            newCRToken = ICoverRightTokenFactory(coverRightTokenFactory)\\n                .deployCRToken(\\n                    _poolName,\\n                    _poolId,\\n                    tokenName,\\n                    _expiry,\\n                    _newGeneration\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cover right token address\\n     *         The address is determined by poolId and expiry (last second of each month)\\n     *         If token not exist, it will return zero address\\n     *\\n     * @param _poolId     Pool id\\n     * @param _expiry     Expiry timestamp\\n     * @param _generation Generation of the priority pool\\n     *\\n     * @return crToken Cover right token address\\n     */\\n    function _getCRTokenAddress(\\n        uint256 _poolId,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) internal view returns (address) {\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_poolId, _expiry, _generation)\\n        );\\n\\n        return\\n            ICoverRightTokenFactory(coverRightTokenFactory).saltToAddress(salt);\\n    }\\n\\n    /**\\n     * @notice Get native token amount to pay\\n     *\\n     * @param _premium Premium in USD\\n     * @param _token   Native token address\\n     */\\n    function _getNativeTokenAmount(uint256 _premium, address _token)\\n        internal\\n        returns (uint256 premiumInNativeToken)\\n    {\\n        // Price in 18 decimals\\n        uint256 price = IPriceGetter(priceGetter).getLatestPrice(_token);\\n\\n        premiumInNativeToken = (_premium * 1e12) / price;\\n\\n        // Pay native tokens\\n        IERC20(_token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            premiumInNativeToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Split premium for a pool\\n     *         To priority pool is paid in native token\\n     *         To protection pool and treasury is paid in shield\\n     *\\n     * @param _poolId       Pool id\\n     * @param _premiumInUSD Premium in USD\\n     *\\n     * @return toPriority   Premium to priority pool\\n     * @return toProtection Premium to protection pool\\n     * @return toTreasury   Premium to treasury\\n     */\\n    function _splitPremium(uint256 _poolId, uint256 _premiumInUSD)\\n        internal\\n        returns (\\n            uint256 toPriority,\\n            uint256 toProtection,\\n            uint256 toTreasury\\n        )\\n    {\\n        if (_premiumInUSD == 0) revert PolicyCenter__ZeroPremium();\\n\\n        address nativeToken = tokenByPoolId[_poolId];\\n        // Premium in project native token (paid in internal function)\\n        uint256 premiumInNativeToken = _getNativeTokenAmount(\\n            _premiumInUSD,\\n            nativeToken\\n        );\\n\\n        // Native tokens to Priority pool\\n        toPriority = (premiumInNativeToken * PREMIUM_TO_PRIORITY) / 10000;\\n\\n        // Swap native tokens to shield\\n        uint256 amountToSwap = premiumInNativeToken - toPriority;\\n        uint256 amountReceived = _swapTokens(nativeToken, amountToSwap);\\n\\n        // Shield to Protection Pool\\n        toProtection =\\n            (amountReceived * PREMIUM_TO_PROTECTION) /\\n            (PREMIUM_TO_PROTECTION + PREMIUM_TO_TREASURY);\\n        // Shield to Treasury\\n        toTreasury = amountReceived - toProtection;\\n\\n        emit PremiumSplitted(toPriority, toProtection, toTreasury);\\n    }\\n\\n    /**\\n     * @notice Approve a pool token for the exchange\\n     *\\n     * @param _token Token address\\n     */\\n    function _approvePoolToken(address _token) internal {\\n        if (exchange == address(0)) revert PolicyCenter__NoExchange();\\n        // approve exchange to swap policy center tokens for deg\\n        IERC20(_token).approve(exchange, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Get cover price from insurance pool\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverAmount   Cover amount (shield)\\n     * @param _coverDuration Cover length in months (1,2,3)\\n     */\\n    function _getCoverPrice(\\n        uint256 _poolId,\\n        uint256 _coverAmount,\\n        uint256 _coverDuration\\n    ) internal view returns (uint256 price, uint256 timestampDuration) {\\n        (price, timestampDuration) = IPriorityPool(priorityPools[_poolId])\\n            .coverPrice(_coverAmount, _coverDuration);\\n    }\\n\\n    /**\\n     * @notice Check priority pool capacity\\n     *\\n     * @param _poolId      Pool id\\n     * @param _coverAmount Amount (shield) to cover\\n     */\\n    function _checkCapacity(uint256 _poolId, uint256 _coverAmount)\\n        internal\\n        view\\n    {\\n        IPriorityPool pool = IPriorityPool(priorityPools[_poolId]);\\n        uint256 maxCapacityAmount = (IShield(shield).balanceOf(\\n            address(protectionPool)\\n        ) * pool.maxCapacity()) / 10000;\\n\\n        if (maxCapacityAmount < _coverAmount + pool.activeCovered())\\n            revert PolicyCenter__InsufficientCapacity();\\n    }\\n}\\n\",\"keccak256\":\"0xf1bf40ad4226e02a007e664249abd302b44e4e90ec72831a3200ea8c2b6d10cb\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/PolicyCenterDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../../interfaces/IProtectionPool.sol\\\";\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\nimport \\\"../../interfaces/ICoverRightToken.sol\\\";\\nimport \\\"../../interfaces/ICoverRightTokenFactory.sol\\\";\\nimport \\\"../../interfaces/IPayoutPool.sol\\\";\\nimport \\\"../../interfaces/IWeightedFarmingPool.sol\\\";\\nimport \\\"../../interfaces/ITreasury.sol\\\";\\nimport \\\"../../interfaces/IExchange.sol\\\";\\n\\nabstract contract PolicyCenterDependencies {\\n    uint256 constant MAX_COVER_LENGTH = 3;\\n    uint256 constant MIN_COVER_AMOUNT = 100e6;\\n\\n    uint256 constant PREMIUM_TO_PRIORITY = 4500;\\n    uint256 constant PREMIUM_TO_PROTECTION = 5000;\\n    uint256 constant PREMIUM_TO_TREASURY = 500;\\n\\n    // TODO: USDC address\\n    address constant USDC = address(0x10);\\n\\n    uint256 constant SLIPPAGE = 10;\\n\\n    address public protectionPool;\\n    address public priceGetter;\\n    address public priorityPoolFactory;\\n    address public coverRightTokenFactory;\\n    address public weightedFarmingPool;\\n    address public exchange;\\n    address public payoutPool;\\n    address public treasury;\\n\\n    function _setProtectionPool(address _protectionPool) internal virtual {\\n        protectionPool = _protectionPool;\\n    }\\n\\n    function _setPriceGetter(address _priceGetter) internal virtual {\\n        priceGetter = _priceGetter;\\n    }\\n\\n    function _setPriorityPoolFactory(address _priorityPoolFactory)\\n        internal\\n        virtual\\n    {\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    function _setCoverRightTokenFactory(address _coverRightTokenFactory)\\n        internal\\n        virtual\\n    {\\n        coverRightTokenFactory = _coverRightTokenFactory;\\n    }\\n\\n    function _setWeightedFarmingPool(address _weightedFarmingPool)\\n        internal\\n        virtual\\n    {\\n        weightedFarmingPool = _weightedFarmingPool;\\n    }\\n\\n    function _setExchange(address _exchange) internal virtual {\\n        exchange = _exchange;\\n    }\\n\\n    function _setPayoutPool(address _payoutPool) internal virtual {\\n        payoutPool = _payoutPool;\\n    }\\n\\n    function _setTreausry(address _treasury) internal virtual {\\n        treasury = _treasury;\\n    }\\n}\\n\",\"keccak256\":\"0xd2e2316b3f1bca8b5dd9cf886ae12bdd43fe7345ddbfa9f3b776530ed9fdf054\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/PolicyCenterEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface PolicyCenterEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event CoverBought(\\n        address indexed buyer,\\n        uint256 indexed poolId,\\n        uint256 coverDuration,\\n        uint256 coverAmount,\\n        uint256 premiumInShield\\n    );\\n\\n    event LiquidityProvided(address indexed user, uint256 amount);\\n\\n    event LiquidityStaked(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount\\n    );\\n\\n    event LiquidityStakedWithoutFarming(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount\\n    );\\n\\n    event LiquidityUnstaked(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        address priorityLP,\\n        uint256 amount\\n    );\\n\\n    event LiquidityUnstakedWithoutFarming(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        address priorityLP,\\n        uint256 amount\\n    );\\n\\n    event LiquidityRemoved(address indexed user, uint256 amount);\\n\\n    event PayoutClaimed(address indexed user, uint256 amount);\\n\\n    event PremiumSplitted(\\n        uint256 toPriority,\\n        uint256 toProtection,\\n        uint256 toTreasury\\n    );\\n\\n    event PremiumSwapped(address fromToken, uint256 amount, uint256 received);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PolicyCenter__AlreadyClaimedPayout();\\n    error PolicyCenter__WrongPriorityPoolID();\\n    error PolicyCenter__InsufficientCapacity();\\n    error PolicyCenter__ZeroPremium();\\n    error PolicyCenter__NoLiquidity();\\n    error PolicyCenter__NoExchange();\\n    error PolicyCenter__ZeroAmount();\\n    error PolicyCenter__NoPayout();\\n    error PolicyCenter__NonExistentPool();\\n}\\n\",\"keccak256\":\"0xa6a6f28beac8c49200d04bc08ffe8dd985c26865cd8122307c92041d369a86a9\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IShield.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\n\\nabstract contract ExternalTokenDependencies is CommonDependencies {\\n    IDegisToken immutable deg;\\n    IVeDEG immutable veDeg;\\n    IShield immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n        shield = IShield(_shield);\\n    }\\n}\\n\",\"keccak256\":\"0x9131de9b8c5ffa6cdc0e52501c778a6452fe5c70e69fd448a8fa661dcbc80e8b\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ICoverRightToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightToken {\\n    function expiry() external view returns (uint256);\\n\\n    function getClaimableOf(address _user) external view returns (uint256);\\n\\n    function mint(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function generation() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd06b45a4cefc10086b3ad76a27e23ff30c32e687856dc47d783698813848c25\",\"license\":\"MIT\"},\"src/interfaces/ICoverRightTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightTokenFactory {\\n    function deployCRToken(\\n        string calldata _poolName,\\n        uint256 _poolId,\\n        string calldata _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external returns (address newCRTokenAddress);\\n\\n    function deployed(bytes32 _salt) external view returns (bool);\\n\\n    function saltToAddress(bytes32 _salt) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf17c79edd1d32f1b61e8bdcdc74262f7935a899d03b9cfd677e4ff438f0814db\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xc2d17e329f02f1f34aacd39729db66b45f8b40e0175a772830ff92419fe5252e\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IExchange {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x201cbdeb17289e1b84dc3dd3a6c1638cc2191d8fb9645dbc04b196c13721b3b1\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPayoutPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPayoutPool {\\n    function CLAIM_PERIOD() external view returns (uint256);\\n\\n    function SCALE() external view returns (uint256);\\n\\n    function claim(\\n        address _user,\\n        address _crToken,\\n        uint256 _poolId,\\n        uint256 _generation\\n    ) external returns (uint256 claimed, uint256 newGenerationCRAmount);\\n\\n    function crFactory() external view returns (address);\\n\\n    function newPayout(\\n        uint256 _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio,\\n        address _poolAddress\\n    ) external;\\n\\n    function payoutCounter() external view returns (uint256);\\n\\n    function payouts(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 remaining,\\n            uint256 endTiemstamp,\\n            uint256 ratio,\\n            address priorityPoolAddress\\n        );\\n\\n    function policyCenter() external view returns (address);\\n\\n    function shield() external view returns (address);\\n}\\n\",\"keccak256\":\"0x95db22078b4a0a96e43bd925474b0c781e9b5199509b19a80b73d87362155a3a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\ninterface IPriceGetter {\\n    function getLatestPrice(string memory _tokenName)\\n        external\\n        returns (uint256 price);\\n\\n    function getLatestPrice(address _token) external returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xc5aafa39687526f14693cfc52febd22b659a7bb7da9a7c3957edb74d77185b2a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external returns (address);\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x75384fa2ca1a32c72b651991ce9571048caab38ec8bf356405da47898c143265\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n}\\n\",\"keccak256\":\"0x8c988f1fbeea64eede1c093a62bb6523f0f3e35a5d1807fc1909060cad38928f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IProtectionPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IProtectionPool {\\n    function deg() external view returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function lastRewardTimestamp() external view returns (uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function moveLiquidity(uint256 _poolId, uint256 _amount) external;\\n\\n    function onboardProposal() external view returns (address);\\n\\n    function pauseProtectionPool(bool _paused) external;\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function providedLiquidity(uint256 _amount, address _provider) external;\\n\\n    function removedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (uint256);\\n\\n    function setExecutor(address _executor) external;\\n\\n    function setIncidentReport(address _incidentReport) external;\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external;\\n\\n    function setOnboardProposal(address _onboardProposal) external;\\n\\n    function setPolicyCenter(address _policyCenter) external;\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function shield() external view returns (address);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function updateRewards() external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function getTotalCovered() external view returns (uint256);\\n\\n    function updateWhenBuy(\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function removedLiquidityWhenClaimed(uint256 _amount, address _to) external;\\n\\n    function getLatestPrice() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe8dc7b31eed173e0e6337c32009bedefc7d08ba9d713233f41f87882303f7c87\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IShield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IShield is SimpleIERC20 {\\n    function deposit(\\n        uint256 _type,\\n        address _stablecoin,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22e4fc4218ad0df35d3a7c982296a7fdae6c502d5cf77a7e8d26155e7061cbe1\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ITreasury {\\n    function rewardReporter(uint256 _poolId, address _reporter) external;\\n\\n    function premiumIncome(uint256 _poolId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2ef53813a74f1e7de1168f57dde2972cc51fc4a1cc4b4e885e5adc896045d4c7\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x105e977446b6560631149337a4c53822e06e1d38b89036e5cf2f9c89b3a8b19b\",\"license\":\"MIT\"},\"src/interfaces/IWeightedFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IWeightedFarmingPool {\\n    function addPool(address _token) external;\\n\\n    function addToken(\\n        uint256 _id,\\n        address _token,\\n        uint256 _weight\\n    ) external;\\n\\n    function updateRewardSpeed(\\n        uint256 _id,\\n        uint256 _newSpeed,\\n        uint256[] memory _years,\\n        uint256[] memory _months\\n    ) external;\\n\\n    function depositFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function withdrawFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateWeight(\\n        uint256 _id,\\n        address _token,\\n        uint256 _newWeight\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7e2c8dc066b4f474ba74068925b007da5871980b24ca9595b1ced1440c789352\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/libraries/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nlibrary StringUtils {\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x3b775a5710bb0d859cecdd99277a789e642853062ceef6dbaa187ca4a7a4164e\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x93ccdbce4fcd2d86096e6ad8b10a06757d600a70a4eb660281238a4ef1d6be7f\",\"license\":\"MIT\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _owner = _initOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x78b93f32b25ad2184a4fbc44160870a5a81f567186c99923ecbc54329c57f88b\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e0346200016d57601f6200328838819003918201601f19168301916001600160401b039182841185851017620001725781608092869260409687528339810103126200016d57620000518362000188565b6020916200006183860162000188565b916200007d60606200007587890162000188565b970162000188565b9560018060a01b038094818094166080521660a05216948560c05260018060a01b0319956000933388865416178555848052600986528685209216918288825416179055600a85528584209087825416179055600195865416178555835190848201908282109082111762000159578452611194815261138881840152600b92905b60028310620001415784516130ea90816200019e823960805181505060a05181505060c0518181816103a7015281816112040152818161172c015261178d0152f35b805161ffff16845592850192918501918101620000ff565b634e487b7160e01b83526041600452602483fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200016d5756fe6080604052600436101561001257600080fd5b6000803560e01c80630121cff5146122f5578063056d7e58146122c2578063298d4dd01461227957806339827304146121d55780633f81ff261461218c5780634ea4c6b314611f8e57806358bf0f2c14611f4557806361d027b314611f1c5780636273106a14611ef35780636549920d1461116f57806367b1f5df1461112657806367c0dd8214610fd757806367e03b5414610fae5780636c1b700f14610f855780636f8a6e4314610f5c578063715018a614610ef557806372306c7c14610d915780638da5cb5b14610d6a5780639030b54214610d3d5780639c8f9f2314610c7b578063a8bf604d14610c45578063aa139d5b14610bfc578063ab07211e14610a65578063ad35e1dc14610a1c578063b567dc6a146109f3578063b6cccdd01461093b578063bef1e50014610618578063c2260f48146104cf578063ceed1b90146104a6578063d2f7265a1461047d578063eb521a4c1461030f578063f02bbc52146102dc578063f0f4426014610293578063f2fde38b146101c55763f42c2b491461019e57600080fd5b346101c257806003193601126101c2576040600b54600c5482519182526020820152f35b80fd5b50346101c25760203660031901126101c2576101df61233e565b81546001600160a01b039182916101f990831633146123f7565b16801561023f57600054816040519382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600086a36001600160a01b03191617600055f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101c25760203660031901126101c2576102ad61233e565b81546001600160a01b0391906102c690831633146123f7565b1660018060a01b03196008541617600855604051f35b50346101c25760203660031901126101c2576020906004358152600a8252604060018060a01b0391205416604051908152f35b50346101c25760203660031901126101c257600435801561046b576001546001600160a01b03908116803b15610467576040516344abf1a960e01b81526004810184905233602482015290849081908390604490829084905af191821561045a57849261043f575b5050602090826103a39360015416866040518096819582946323b872dd60e01b8452336004850161246c565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1801561043457610406575b506040519081527fccb2ae3a2936bf4c94fa4e12cdf0cdad6ed0e4888a044cef89afa60f2e4b92d360203392a2604051f35b6104269060203d811161042d575b61041e81836123c2565b810190612454565b50386103d4565b503d610414565b6040513d85823e3d90fd5b61044a919250612394565b61045657818338610377565b8280fd5b50604051903d90823e3d90fd5b8380fd5b604051631613633b60e01b8152600490fd5b50346101c257806003193601126101c2576006546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576002546040516001600160a01b039091168152602090f35b50346101c2576104de3661236a565b8284526009602090815260408520546001600160a01b039081161561060657821561046b578486526009825260408087205490516301733ea560e41b81526001600160a01b03861660048201526024810185905233604482015292918291849160649183918b91165af180156105fb5761059f575b5050604080516001600160a01b039093168352602083019190915233917fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab091819081015b0390a3604051f35b81813d83116105f4575b6105b381836123c2565b810103126105f0577fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab0916105e9610597926123e3565b5091610553565b8480fd5b503d6105a9565b6040513d88823e3d90fd5b604051635824d49b60e01b8152600490fd5b50346101c2576106273661236a565b909180845260206009815260018060a01b03908160408720541615610606578215610929578594602494868460035416604051978880926315895f4760e31b82528960048301525afa91821561091e57879687936108f6575b50604085608481600754169383519a8b938492631357a41960e11b845233600485015216958660248401528b60448401528760648401525af19687156108ad57889089986108b8575b50600493929185916040519081527fec68461f5d4cc45c89e914cb8826a966c73dd35e5f97815ece0a01ffa4a025a6833392a26040516370c264df60e11b815294859182905afa9283156108ad578893610872575b50908161072c89949361257b565b508661073c620151808504612929565b5061074b848785999499612686565b96898816156107ca575b5050505050505090501691823b156107c55760405163020da84160e61b8152600481019290925233602483015260448201529082908290606490829084905af180156107ba576107a6575b50604051f35b6107af90612394565b6101c25780386107a0565b6040513d84823e3d90fd5b505050fd5b88969750906107e46107de6107f493612ff1565b91612ff1565b6107ed86612ff1565b918761258a565b9361081b89600454169460405198899788968795636c1020a160e01b87526004870161264c565b03925af19182156105fb57869261083c575b50508038808086898280610755565b90809250813d831161086b575b61085381836123c2565b810103126105f057610864906123e3565b388061082d565b503d610849565b8480929399508194503d83116108a6575b61088d81836123c2565b810103126108a1579051879690918761071e565b600080fd5b503d610883565b6040513d8a823e3d90fd5b600494939298508591506108e39060403d6040116108ef575b6108db81836123c2565b810190612565565b989091509192936106c9565b503d6108d1565b6109139193503d8089833e61090b81836123c2565b8101906124de565b505050509138610680565b6040513d89823e3d90fd5b6040516367f304bf60e01b8152600490fd5b50346101c25760603660031901126101c25761095561233e565b6001600160a01b0390602435908282168083036108a157836003541633036109b5576109b0936044358652600a6020526040862060018060a01b031992838254161790556009602052604086209216908254161790556127e2565b604051f35b60405162461bcd60e51b81526020600482015260166024820152754f6e6c7920666163746f72792063616e2073746f726560501b6044820152606490fd5b50346101c257806003193601126101c2576005546040516001600160a01b039091168152602090f35b50346101c25760203660031901126101c257610a3661233e565b81546001600160a01b039190610a4f90831633146123f7565b1660018060a01b03196003541617600355604051f35b50346101c257610a743661236a565b8284526009602090815260408520546001600160a01b039081161561060657821561046b57858160055416803b15610bf8576040516316858d7960e21b8152600481018890526001600160a01b0387166024820152604481018690523360648201529082908290608490829084905af180156107ba57610be0575b508590526009825260408087205490516301733ea560e41b81526001600160a01b03861660048201526024810185905233604482015292918291849160649183918b91165af180156105fb57610b88575b5050604080516001600160a01b039093168352602083019190915233917f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f36751979181908101610597565b81813d8311610bd9575b610b9c81836123c2565b810103126105f0577f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f367519791610bd2610597926123e3565b5091610b40565b503d610b92565b610be990612394565b610bf4578538610aef565b8580fd5b5080fd5b50346101c25760203660031901126101c257610c1661233e565b81546001600160a01b039190610c2f90831633146123f7565b1660018060a01b03196004541617600455604051f35b50346101c25760203660031901126101c2576109b0610c6261233e565b610c7660018060a01b0384541633146123f7565b6127e2565b50346101c257602080600319360112610bf85760043590811561046b57600154604051636d40d7d760e11b8152600481018490523360248201529082908290604490829088906001600160a01b03165af18015610d3257610d08575b507fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719906040519283523392a2604051f35b8190813d8311610d2b575b610d1d81836123c2565b810103126108a15738610cd7565b503d610d13565b6040513d86823e3d90fd5b50346101c25760203660031901126101c2576004356002811015610bf857602090600b0154604051908152f35b50346101c257806003193601126101c257546040516001600160a01b039091168152602090f35b50346101c257610da036612354565b90610db560018060a01b0384541633146123f7565b612710610dc28383612430565b11610ec0578015610e7c578115610e385760405190604082018281106001600160401b03821117610e2257604052815260209182820152600b9183915b60028310610e0d5784604051f35b60018282829351875501940192019192610dff565b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152602060248201527f686173206e6f7420676976656e20612070726f74656374696f6e2073706c69746044820152fd5b606460405162461bcd60e51b815260206004820152602060248201527f686173206e6f7420676976656e20616e20696e737572616e63652073706c69746044820152fd5b60405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081cdc1b1a5d609a1b6044820152606490fd5b50346101c257806003193601126101c25780546001600160a01b0390610f1e90821633146123f7565b60005460006040519282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600055f35b50346101c257806003193601126101c2576003546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576001546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576004546040516001600160a01b039091168152602090f35b50346101c257610fe636612354565b8183526009602090815260408420546001600160a01b03919082161561060657821561046b57838552600981526040808620549051630a43eeed60e11b8152600481018590523360248201529083169282826044818a885af191821561091e5785926110e1575b50906110789383926001541690886040518097819582946323b872dd60e01b8452336004850161246c565b03925af19182156110d6577f6ed71e479f5286ad6192bfdc2b224afa6073276d8f9a0e5028400f589fbb39cc926110b9575b506040519283523392a3604051f35b6110cf90823d841161042d5761041e81836123c2565b50386110aa565b6040513d87823e3d90fd5b9091508281813d831161111f575b6110f981836123c2565b8101031261111b5761107893839261111187936123e3565b509192509361104d565b8680fd5b503d6110ef565b50346101c25760203660031901126101c25761114061233e565b81546001600160a01b03919061115990831633146123f7565b1660018060a01b03196006541617600655604051f35b50346101c25760803660031901126101c2576004358152600960205260408120546001600160a01b031615610606576305f5e10060243510611eae57604435151580611ea1575b15611e675760043515611e32576004803582526009602090815260408084205460015491516370a0823160e01b81526001600160a01b039283169481019490945281169190839060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610434578392611dfe575b506040516359b6a0c960e01b8152602081600481855afa908115610d32578491611dcc575b508260001904811183151516611a2a57602060049260405193848092636835185f60e11b82525afa918215610d32578492611d96575b5061129f61271092602435612430565b92020410611d8457600435815260096020526044604060018060a01b038184205416815192838092638905faeb60e01b82526024356004830152823560248301525afa9081156107ba5782908392611d62575b506064358111611d2a576201518080420461130c81612929565b92915050600160443510611d1657601960001960443501921015611cf0575b61133761134091612929565b93849391612430565b60018110611cdc5761135c600c91600019019282840490612430565b91066001198111611cdc57926113959261139092600161139e9601916113828383612f30565b809111611cd4575b50612cd5565b61243c565b82420690612430565b904282106105f0576113b09104612929565b5092906113ca6113906113c38684612f30565b8684612cd5565b9362014370198511611a2a57610dd41962014370860111611a2a57603b1962015144860111611a2a576003546040516315895f4760e31b81526004803590820152908790829060249082906001600160a01b03165afa92831561091e5760049388928991611cb0575b50604051630b90ca9160e11b81529460209186919082906001600160a01b03165afa9384156108ad578894611c7c575b506114718484600435612686565b966001600160a01b03881615611bc8575b50505050506001600160a01b0383163b156104675760405163020da84160e61b815260048035908201523360248083019190915235604482015284908181606481836001600160a01b038a165af180156107ba57611bb4575b50508115611ba2576004358452600a6020528360018060a01b03604082205416602060018060a01b03600254166024604051809581936302c68be360e31b83528660048401525af19182156105fb578692611b6e575b50836000190464e8d4a5100011600116611a2a578115611b58576115f76040518780602083016323b872dd60e01b815261158b8461157d8964e8d4a510008d020430336024850161246c565b03601f1981018652856123c2565b60405193611598856123a7565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020860152519082875af13d15611b50573d906115d98261248e565b916115e760405193846123c2565b82523d8a602084013e5b84612745565b80519081611adb575b505064e8d4a5100084028290046000198190046111941190151516611a2a576116436127106111948464e8d4a5100088020402048364e8d4a5100087020461273a565b90604051918260608101106001600160401b03606085011117610e225760608301604052600283526040366020850137825115611ac557816020840152825160011015611ac557601060408401526006546001600160a01b03168115156000198390046127061116611a2a576001194211611ab1579260405180946338ed173960e01b82528a60a483018560048501526103e8612706870204602485015260a060448501528451809152602060c48501950190825b818110611a8c5750505082908160209530606483015260014201608483015203925af19283156108ad578893611a58575b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b15611a5457604051636f0372af60e01b81526001600482015260106024820152604481018490526064810184905288908181608481837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156107ba57611a40575b50507f57f3d153693ba34ad2f1603ab743de3caf14b05ffa2fdfae8e9d0947a17c7ca3916060916040519182526020820152836040820152a1611388928160001904841182151516611a2a578361182061157c89968502048461273a565b6040805161271061119464e8d4a510008b028990040204815261157c8487020460208201529081018290529094907fe59d21244ca3bff81515b705214dab78cc9f978c1939e610874429ffa47380b290606090a16001546001600160a01b0316803b1561111b5760405163bf59705960e01b815261271064e8d4a510008a0293909304611194029290920460048301526044803560248401528201849052869082908183816064810103925af19081156105fb578691611a16575b50506004358552600960205260408520546001600160a01b0316803b15610bf45761157c938660849281956040519788968795630aadb77760e01b8752602435600488015202046024850152604435604485015260648401525af1908115610434578391611a02575b50506008546001600160a01b0316803b1561045657604483926040519485938492635b97d36760e01b8452600435600485015260248401525af18015610d32576119ee575b60208383604051907f308dab4150a765534b441eef3367b2732d18bfdcd4b5ffe2a7084e1b1699051560043592806119d93394602435604435846040919493926060820195825260208201520152565b0390a36040516001600160a01b039091168152f35b6119f88491612394565b6104565782611989565b611a0b90612394565b610bf8578138611944565b611a1f90612394565b6105f05784386118db565b634e487b7160e01b600052601160045260246000fd5b611a4990612394565b611a545787386117c2565b8780fd5b9092506020813d602011611a84575b81611a74602093836123c2565b810103126108a157519138611729565b3d9150611a67565b82516001600160a01b031687526020968701968a96508f9450909201916001016116f8565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b600052603260045260246000fd5b602080611aec938301019101612454565b15611af8573880611600565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6060906115f1565b634e487b7160e01b600052601260045260246000fd5b9091506020813d602011611b9a575b81611b8a602093836123c2565b810103126108a157519038611531565b3d9150611b7d565b60405163720794bf60e01b8152600490fd5b611bbd90612394565b6104675783386114db565b60209495975090611be36107de6201517f611bf39401612ff1565b611bec87612ff1565b918461258a565b8760018060a01b036004541692611c2460405197889687958694636c1020a160e01b8652600435906004870161264c565b03925af1908115610d32578491611c42575b50913880808080611482565b90506020813d602011611c74575b81611c5d602093836123c2565b8101031261046757611c6e906123e3565b38611c36565b3d9150611c50565b9093506020813d602011611ca8575b81611c98602093836123c2565b810103126108a157519238611463565b3d9150611c8b565b60209350611cc891503d808b833e61090b81836123c2565b50505092909290611433565b92503861138a565b634e487b7160e01b88526011600452602488fd5b9060011910611d02576044359061132b565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b86526011600452602486fd5b60405162461bcd60e51b815260206004820152601060248201526f0a0e4cadad2eada40e8dede40d0d2ced60831b6044820152606490fd5b9050611d7d915060403d6040116108ef576108db81836123c2565b90386112f2565b604051637730dc0b60e01b8152600490fd5b91506020823d602011611dc4575b81611db1602093836123c2565b810103126108a15790519061129f61128f565b3d9150611da4565b90506020813d602011611df6575b81611de7602093836123c2565b810103126108a1575138611259565b3d9150611dda565b9091506020813d602011611e2a575b81611e1a602093836123c2565b810103126108a157519038611234565b3d9150611e0d565b60405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c81c1bdbdb081a59609a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152710aee4dedcce40c6deeccae440d8cadccee8d60731b6044820152606490fd5b50600360443511156111b6565b60405162461bcd60e51b815260206004820152601a60248201527f556e646572206d696e696d756d20636f76657220616d6f756e740000000000006044820152606490fd5b50346101c257806003193601126101c2576007546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576008546040516001600160a01b039091168152602090f35b50346101c25760203660031901126101c257611f5f61233e565b81546001600160a01b039190611f7890831633146123f7565b1660018060a01b03196005541617600555604051f35b50346101c257611f9d36612354565b8183526009602090815260408420546001600160a01b039081161561060657821561046b57838552600982526040808620549051630a43eeed60e11b8152600481018590523060248201529190811683836044818a855af192831561091e5784918691899561214c575b509061203292918460015416908a6040518096819582946323b872dd60e01b8452336004850161246c565b03925af1801561091e5761212f575b508060055416803b1561111b57604051635a12fc9360e11b8152600481018790526001600160a01b0384166024820152604481018690523360648201529087908290608490829084905af1801561091e57612112575b5060055460405163a9059cbb60e01b81529082166001600160a01b0316600482015260248101859052929182918491908290899082604481015b0393165af19182156110d6577f1e54d7530dad81af38adb8ca9db02add3130668375f37be85396403616fc3d49926110b957506040519283523392a3604051f35b83926120d19492976121248793612394565b979250929350612097565b61214590843d861161042d5761041e81836123c2565b5038612041565b92839195508092503d8311612185575b61216681836123c2565b8101031261111b57838561217c612032936123e3565b94909192612007565b503d61215c565b50346101c25760203660031901126101c2576121a661233e565b81546001600160a01b0391906121bf90831633146123f7565b1660018060a01b03196007541617600755604051f35b50346101c257602090816003193601126101c257600480358252600983526040808320549051634e75827160e01b81526001600160a01b0392909185918391829086165afa92831561226d578093612233575b505060405191168152f35b909192508382813d8311612266575b61224c81836123c2565b810103126101c2575061225e906123e3565b903880612228565b503d612242565b604051903d90823e3d90fd5b50346101c25760203660031901126101c25761229361233e565b81546001600160a01b0391906122ac90831633146123f7565b1660018060a01b03196002541617600255604051f35b50346101c25760203660031901126101c257602090600435815260098252604060018060a01b0391205416604051908152f35b50346101c25760203660031901126101c25761230f61233e565b81546001600160a01b03919061232890831633146123f7565b1660018060a01b03196001541617600155604051f35b600435906001600160a01b03821682036108a157565b60409060031901126108a1576004359060243590565b60609060031901126108a157600435906024356001600160a01b03811681036108a1579060443590565b6001600160401b038111610e2257604052565b604081019081106001600160401b03821117610e2257604052565b90601f801991011681019081106001600160401b03821117610e2257604052565b51906001600160a01b03821682036108a157565b156123fe57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b81198111611a2a570190565b62015180908060001904821181151516611a2a570290565b908160209103126108a1575180151581036108a15790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160401b038111610e2257601f01601f191660200190565b918091926000905b8282106124c95750116124c2575050565b6000910152565b915080602091830151818601520182916124b1565b9060a0828203126108a15781516001600160401b0381116108a157820181601f820112156108a15780516125118161248e565b9261251f60405194856123c2565b818452602082840101116108a15761253d91602080850191016124a9565b9161254a602083016123e3565b91612557604082016123e3565b916080606083015192015190565b91908260409103126108a1576020825192015190565b6000198114611a2a5760010190565b6027919493612625936040519687936243522d60e81b60208601526125b98151809260206023890191016124a9565b840190602d60f81b918260238201526125dc8251809360206024850191016124a9565b019060248201526125f78251809360206025850191016124a9565b01612d4760f01b602582015261261682518093602087850191016124a9565b010360078101855201836123c2565b565b90602091612640815180928185528580860191016124a9565b601f01601f1916010190565b9160809361266961267c939897969860a0865260a0860190612627565b9160208501528382036040850152612627565b9460608201520152565b916040519160208301938452604083015260608201526060815260808101918183106001600160401b03841117610e225782602481602093816040528551902060018060a01b036004541690631620909560e01b835260848701525afa90811561272e576000916126f8575b50905090565b602090813d8111612727575b61270e81866123c2565b810103126101c25750612720906123e3565b80386126f2565b503d612704565b6040513d6000823e3d90fd5b818110611a2a570390565b919290156127a75750815115612759575090565b3b156127625790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156127ba5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906127de906024830190612627565b0390fd5b6006546001600160a01b03919082169081156128475760446020926000604051958694859363095ea7b360e01b8552600485015282196024850152165af1801561272e5761282d5750565b6128449060203d811161042d5761041e81836123c2565b50565b6040516307bb995d60e41b8152600490fd5b6000811280156001600160ff1b03839003841316611a2a57600160ff1b829003831216611a2a570190565b6105b560008083136001600160ff1b038490048311166001166128d45760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166128d457500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b018112600116611a2a57600d190190565b600082128015600160ff1b8401831216611a2a576001600160ff1b038301821316611a2a570390565b6000916001600160ff1b039162010bd990848112818503811581851316612cc157600160ff1b938385039283821216611cdc5787908401129162010bd819908162253d8c93018313841516611ab157011316611d02576226496501936001936004918587830484118289131616612cae57808712600760fd1b8812168616612cae5762023ab196878160021b0597878985048211848b131616612c8857877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b121616612c88578802828112818503600313811516612c9b5781870360031216612c885790846003612a2093010590612900565b928184128484038813811516612c3c57848603881216612c2957868401610fa08882860482118584131616612c4f57887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616612c4f57612a999162164b099102059482612a9287612884565b0590612900565b828112818503601f13811516612c4f57818703601f1216612c3c57601f019680888504605011848a131616612c3c57807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616612c3c5761098f9788816050020590828287048b118684131616612c755784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616612c625790605083612b4e93020590612900565b98600b820597828703600213821516612c625782900360021216612c4f5781878604600c118589131616612c4f57817ff55555555555555555555555555555555555555555555555555555555555555688128589121616612c4f57612bba90600288600c029101612900565b986031600160ff1b0181128216612c4f578190603019018095046064118486131616612c3c577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616612c29575050612c249291612c1f91606402612859565b612859565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b87526011600452602487fd5b9291926107b281106108a157600191617d4b600160ff1b0185128316611a2a576000918281128015926001600160ff1b03929182840391906112c08381138716611cdc57600160ff1b859003908181128316611ab157612d5298999a9b612d6391612d5760049b8c92600c612d498a6128e8565b05908b01612859565b612884565b0590617d4a1901612859565b6002600160ff1b0184128b16612f1d57600c612d7e856128e8565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c83131616612f0a578b7ff55555555555555555555555555555555555555555555555555555555555555682128c83121616612f0a57612dea90600c026001198601612900565b61016f8c828a0482118d84131616612ef7578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d84121616612ef757612e399291600c91020590612859565b9661132494851316612ee457831216612ed1578792606492600c612e5f612e67946128e8565b059101612859565b058092046003118583131616612c4f57847fd55555555555555555555555555555555555555555555555555555555555555682128583121616612c4f579082612eb4926003020590612900565b9262253d8c600160ff1b01841216612c2957505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b90600181148015612fe7575b8015612fdd575b8015612fd3575b8015612fc9575b8015612fbf575b8015612fb5575b15612f6b575050601f90565b600214612f785750601e90565b60038116159081612fa8575b8115612f9b575b5015612f9657601d90565b601c90565b6101909150061538612f8b565b6064810615159150612f84565b50600c8114612f5f565b50600a8114612f58565b5060088114612f51565b5060078114612f4a565b5060058114612f43565b5060038114612f3c565b801561309657600081805b613082575061300a8161248e565b9061301860405192836123c2565b808252601f196130278261248e565b013660208401375b80831561307b5760018110611a2a576000190192600a91828206603081198111611a2a578551871015611ac5570160f81b6001600160f81b03191660001a908401601f0153049161302f565b5050905090565b9061308e600a9161257b565b910480612ffc565b506040516130a3816123a7565b60018152600360fc1b60208201529056fea26469706673582212201f24e4c9a3bf6443e6b65203850250700c0ac84adfabe166ef8bce4406ac7a3b64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c80630121cff5146122f5578063056d7e58146122c2578063298d4dd01461227957806339827304146121d55780633f81ff261461218c5780634ea4c6b314611f8e57806358bf0f2c14611f4557806361d027b314611f1c5780636273106a14611ef35780636549920d1461116f57806367b1f5df1461112657806367c0dd8214610fd757806367e03b5414610fae5780636c1b700f14610f855780636f8a6e4314610f5c578063715018a614610ef557806372306c7c14610d915780638da5cb5b14610d6a5780639030b54214610d3d5780639c8f9f2314610c7b578063a8bf604d14610c45578063aa139d5b14610bfc578063ab07211e14610a65578063ad35e1dc14610a1c578063b567dc6a146109f3578063b6cccdd01461093b578063bef1e50014610618578063c2260f48146104cf578063ceed1b90146104a6578063d2f7265a1461047d578063eb521a4c1461030f578063f02bbc52146102dc578063f0f4426014610293578063f2fde38b146101c55763f42c2b491461019e57600080fd5b346101c257806003193601126101c2576040600b54600c5482519182526020820152f35b80fd5b50346101c25760203660031901126101c2576101df61233e565b81546001600160a01b039182916101f990831633146123f7565b16801561023f57600054816040519382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600086a36001600160a01b03191617600055f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346101c25760203660031901126101c2576102ad61233e565b81546001600160a01b0391906102c690831633146123f7565b1660018060a01b03196008541617600855604051f35b50346101c25760203660031901126101c2576020906004358152600a8252604060018060a01b0391205416604051908152f35b50346101c25760203660031901126101c257600435801561046b576001546001600160a01b03908116803b15610467576040516344abf1a960e01b81526004810184905233602482015290849081908390604490829084905af191821561045a57849261043f575b5050602090826103a39360015416866040518096819582946323b872dd60e01b8452336004850161246c565b03927f0000000000000000000000000000000000000000000000000000000000000000165af1801561043457610406575b506040519081527fccb2ae3a2936bf4c94fa4e12cdf0cdad6ed0e4888a044cef89afa60f2e4b92d360203392a2604051f35b6104269060203d811161042d575b61041e81836123c2565b810190612454565b50386103d4565b503d610414565b6040513d85823e3d90fd5b61044a919250612394565b61045657818338610377565b8280fd5b50604051903d90823e3d90fd5b8380fd5b604051631613633b60e01b8152600490fd5b50346101c257806003193601126101c2576006546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576002546040516001600160a01b039091168152602090f35b50346101c2576104de3661236a565b8284526009602090815260408520546001600160a01b039081161561060657821561046b578486526009825260408087205490516301733ea560e41b81526001600160a01b03861660048201526024810185905233604482015292918291849160649183918b91165af180156105fb5761059f575b5050604080516001600160a01b039093168352602083019190915233917fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab091819081015b0390a3604051f35b81813d83116105f4575b6105b381836123c2565b810103126105f0577fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab0916105e9610597926123e3565b5091610553565b8480fd5b503d6105a9565b6040513d88823e3d90fd5b604051635824d49b60e01b8152600490fd5b50346101c2576106273661236a565b909180845260206009815260018060a01b03908160408720541615610606578215610929578594602494868460035416604051978880926315895f4760e31b82528960048301525afa91821561091e57879687936108f6575b50604085608481600754169383519a8b938492631357a41960e11b845233600485015216958660248401528b60448401528760648401525af19687156108ad57889089986108b8575b50600493929185916040519081527fec68461f5d4cc45c89e914cb8826a966c73dd35e5f97815ece0a01ffa4a025a6833392a26040516370c264df60e11b815294859182905afa9283156108ad578893610872575b50908161072c89949361257b565b508661073c620151808504612929565b5061074b848785999499612686565b96898816156107ca575b5050505050505090501691823b156107c55760405163020da84160e61b8152600481019290925233602483015260448201529082908290606490829084905af180156107ba576107a6575b50604051f35b6107af90612394565b6101c25780386107a0565b6040513d84823e3d90fd5b505050fd5b88969750906107e46107de6107f493612ff1565b91612ff1565b6107ed86612ff1565b918761258a565b9361081b89600454169460405198899788968795636c1020a160e01b87526004870161264c565b03925af19182156105fb57869261083c575b50508038808086898280610755565b90809250813d831161086b575b61085381836123c2565b810103126105f057610864906123e3565b388061082d565b503d610849565b8480929399508194503d83116108a6575b61088d81836123c2565b810103126108a1579051879690918761071e565b600080fd5b503d610883565b6040513d8a823e3d90fd5b600494939298508591506108e39060403d6040116108ef575b6108db81836123c2565b810190612565565b989091509192936106c9565b503d6108d1565b6109139193503d8089833e61090b81836123c2565b8101906124de565b505050509138610680565b6040513d89823e3d90fd5b6040516367f304bf60e01b8152600490fd5b50346101c25760603660031901126101c25761095561233e565b6001600160a01b0390602435908282168083036108a157836003541633036109b5576109b0936044358652600a6020526040862060018060a01b031992838254161790556009602052604086209216908254161790556127e2565b604051f35b60405162461bcd60e51b81526020600482015260166024820152754f6e6c7920666163746f72792063616e2073746f726560501b6044820152606490fd5b50346101c257806003193601126101c2576005546040516001600160a01b039091168152602090f35b50346101c25760203660031901126101c257610a3661233e565b81546001600160a01b039190610a4f90831633146123f7565b1660018060a01b03196003541617600355604051f35b50346101c257610a743661236a565b8284526009602090815260408520546001600160a01b039081161561060657821561046b57858160055416803b15610bf8576040516316858d7960e21b8152600481018890526001600160a01b0387166024820152604481018690523360648201529082908290608490829084905af180156107ba57610be0575b508590526009825260408087205490516301733ea560e41b81526001600160a01b03861660048201526024810185905233604482015292918291849160649183918b91165af180156105fb57610b88575b5050604080516001600160a01b039093168352602083019190915233917f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f36751979181908101610597565b81813d8311610bd9575b610b9c81836123c2565b810103126105f0577f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f367519791610bd2610597926123e3565b5091610b40565b503d610b92565b610be990612394565b610bf4578538610aef565b8580fd5b5080fd5b50346101c25760203660031901126101c257610c1661233e565b81546001600160a01b039190610c2f90831633146123f7565b1660018060a01b03196004541617600455604051f35b50346101c25760203660031901126101c2576109b0610c6261233e565b610c7660018060a01b0384541633146123f7565b6127e2565b50346101c257602080600319360112610bf85760043590811561046b57600154604051636d40d7d760e11b8152600481018490523360248201529082908290604490829088906001600160a01b03165af18015610d3257610d08575b507fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719906040519283523392a2604051f35b8190813d8311610d2b575b610d1d81836123c2565b810103126108a15738610cd7565b503d610d13565b6040513d86823e3d90fd5b50346101c25760203660031901126101c2576004356002811015610bf857602090600b0154604051908152f35b50346101c257806003193601126101c257546040516001600160a01b039091168152602090f35b50346101c257610da036612354565b90610db560018060a01b0384541633146123f7565b612710610dc28383612430565b11610ec0578015610e7c578115610e385760405190604082018281106001600160401b03821117610e2257604052815260209182820152600b9183915b60028310610e0d5784604051f35b60018282829351875501940192019192610dff565b634e487b7160e01b600052604160045260246000fd5b606460405162461bcd60e51b815260206004820152602060248201527f686173206e6f7420676976656e20612070726f74656374696f6e2073706c69746044820152fd5b606460405162461bcd60e51b815260206004820152602060248201527f686173206e6f7420676976656e20616e20696e737572616e63652073706c69746044820152fd5b60405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081cdc1b1a5d609a1b6044820152606490fd5b50346101c257806003193601126101c25780546001600160a01b0390610f1e90821633146123f7565b60005460006040519282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b031916600055f35b50346101c257806003193601126101c2576003546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576001546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576004546040516001600160a01b039091168152602090f35b50346101c257610fe636612354565b8183526009602090815260408420546001600160a01b03919082161561060657821561046b57838552600981526040808620549051630a43eeed60e11b8152600481018590523360248201529083169282826044818a885af191821561091e5785926110e1575b50906110789383926001541690886040518097819582946323b872dd60e01b8452336004850161246c565b03925af19182156110d6577f6ed71e479f5286ad6192bfdc2b224afa6073276d8f9a0e5028400f589fbb39cc926110b9575b506040519283523392a3604051f35b6110cf90823d841161042d5761041e81836123c2565b50386110aa565b6040513d87823e3d90fd5b9091508281813d831161111f575b6110f981836123c2565b8101031261111b5761107893839261111187936123e3565b509192509361104d565b8680fd5b503d6110ef565b50346101c25760203660031901126101c25761114061233e565b81546001600160a01b03919061115990831633146123f7565b1660018060a01b03196006541617600655604051f35b50346101c25760803660031901126101c2576004358152600960205260408120546001600160a01b031615610606576305f5e10060243510611eae57604435151580611ea1575b15611e675760043515611e32576004803582526009602090815260408084205460015491516370a0823160e01b81526001600160a01b039283169481019490945281169190839060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa918215610434578392611dfe575b506040516359b6a0c960e01b8152602081600481855afa908115610d32578491611dcc575b508260001904811183151516611a2a57602060049260405193848092636835185f60e11b82525afa918215610d32578492611d96575b5061129f61271092602435612430565b92020410611d8457600435815260096020526044604060018060a01b038184205416815192838092638905faeb60e01b82526024356004830152823560248301525afa9081156107ba5782908392611d62575b506064358111611d2a576201518080420461130c81612929565b92915050600160443510611d1657601960001960443501921015611cf0575b61133761134091612929565b93849391612430565b60018110611cdc5761135c600c91600019019282840490612430565b91066001198111611cdc57926113959261139092600161139e9601916113828383612f30565b809111611cd4575b50612cd5565b61243c565b82420690612430565b904282106105f0576113b09104612929565b5092906113ca6113906113c38684612f30565b8684612cd5565b9362014370198511611a2a57610dd41962014370860111611a2a57603b1962015144860111611a2a576003546040516315895f4760e31b81526004803590820152908790829060249082906001600160a01b03165afa92831561091e5760049388928991611cb0575b50604051630b90ca9160e11b81529460209186919082906001600160a01b03165afa9384156108ad578894611c7c575b506114718484600435612686565b966001600160a01b03881615611bc8575b50505050506001600160a01b0383163b156104675760405163020da84160e61b815260048035908201523360248083019190915235604482015284908181606481836001600160a01b038a165af180156107ba57611bb4575b50508115611ba2576004358452600a6020528360018060a01b03604082205416602060018060a01b03600254166024604051809581936302c68be360e31b83528660048401525af19182156105fb578692611b6e575b50836000190464e8d4a5100011600116611a2a578115611b58576115f76040518780602083016323b872dd60e01b815261158b8461157d8964e8d4a510008d020430336024850161246c565b03601f1981018652856123c2565b60405193611598856123a7565b602085527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020860152519082875af13d15611b50573d906115d98261248e565b916115e760405193846123c2565b82523d8a602084013e5b84612745565b80519081611adb575b505064e8d4a5100084028290046000198190046111941190151516611a2a576116436127106111948464e8d4a5100088020402048364e8d4a5100087020461273a565b90604051918260608101106001600160401b03606085011117610e225760608301604052600283526040366020850137825115611ac557816020840152825160011015611ac557601060408401526006546001600160a01b03168115156000198390046127061116611a2a576001194211611ab1579260405180946338ed173960e01b82528a60a483018560048501526103e8612706870204602485015260a060448501528451809152602060c48501950190825b818110611a8c5750505082908160209530606483015260014201608483015203925af19283156108ad578893611a58575b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b15611a5457604051636f0372af60e01b81526001600482015260106024820152604481018490526064810184905288908181608481837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156107ba57611a40575b50507f57f3d153693ba34ad2f1603ab743de3caf14b05ffa2fdfae8e9d0947a17c7ca3916060916040519182526020820152836040820152a1611388928160001904841182151516611a2a578361182061157c89968502048461273a565b6040805161271061119464e8d4a510008b028990040204815261157c8487020460208201529081018290529094907fe59d21244ca3bff81515b705214dab78cc9f978c1939e610874429ffa47380b290606090a16001546001600160a01b0316803b1561111b5760405163bf59705960e01b815261271064e8d4a510008a0293909304611194029290920460048301526044803560248401528201849052869082908183816064810103925af19081156105fb578691611a16575b50506004358552600960205260408520546001600160a01b0316803b15610bf45761157c938660849281956040519788968795630aadb77760e01b8752602435600488015202046024850152604435604485015260648401525af1908115610434578391611a02575b50506008546001600160a01b0316803b1561045657604483926040519485938492635b97d36760e01b8452600435600485015260248401525af18015610d32576119ee575b60208383604051907f308dab4150a765534b441eef3367b2732d18bfdcd4b5ffe2a7084e1b1699051560043592806119d93394602435604435846040919493926060820195825260208201520152565b0390a36040516001600160a01b039091168152f35b6119f88491612394565b6104565782611989565b611a0b90612394565b610bf8578138611944565b611a1f90612394565b6105f05784386118db565b634e487b7160e01b600052601160045260246000fd5b611a4990612394565b611a545787386117c2565b8780fd5b9092506020813d602011611a84575b81611a74602093836123c2565b810103126108a157519138611729565b3d9150611a67565b82516001600160a01b031687526020968701968a96508f9450909201916001016116f8565b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b600052603260045260246000fd5b602080611aec938301019101612454565b15611af8573880611600565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6060906115f1565b634e487b7160e01b600052601260045260246000fd5b9091506020813d602011611b9a575b81611b8a602093836123c2565b810103126108a157519038611531565b3d9150611b7d565b60405163720794bf60e01b8152600490fd5b611bbd90612394565b6104675783386114db565b60209495975090611be36107de6201517f611bf39401612ff1565b611bec87612ff1565b918461258a565b8760018060a01b036004541692611c2460405197889687958694636c1020a160e01b8652600435906004870161264c565b03925af1908115610d32578491611c42575b50913880808080611482565b90506020813d602011611c74575b81611c5d602093836123c2565b8101031261046757611c6e906123e3565b38611c36565b3d9150611c50565b9093506020813d602011611ca8575b81611c98602093836123c2565b810103126108a157519238611463565b3d9150611c8b565b60209350611cc891503d808b833e61090b81836123c2565b50505092909290611433565b92503861138a565b634e487b7160e01b88526011600452602488fd5b9060011910611d02576044359061132b565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b86526011600452602486fd5b60405162461bcd60e51b815260206004820152601060248201526f0a0e4cadad2eada40e8dede40d0d2ced60831b6044820152606490fd5b9050611d7d915060403d6040116108ef576108db81836123c2565b90386112f2565b604051637730dc0b60e01b8152600490fd5b91506020823d602011611dc4575b81611db1602093836123c2565b810103126108a15790519061129f61128f565b3d9150611da4565b90506020813d602011611df6575b81611de7602093836123c2565b810103126108a1575138611259565b3d9150611dda565b9091506020813d602011611e2a575b81611e1a602093836123c2565b810103126108a157519038611234565b3d9150611e0d565b60405162461bcd60e51b815260206004820152600d60248201526c15dc9bdb99c81c1bdbdb081a59609a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152710aee4dedcce40c6deeccae440d8cadccee8d60731b6044820152606490fd5b50600360443511156111b6565b60405162461bcd60e51b815260206004820152601a60248201527f556e646572206d696e696d756d20636f76657220616d6f756e740000000000006044820152606490fd5b50346101c257806003193601126101c2576007546040516001600160a01b039091168152602090f35b50346101c257806003193601126101c2576008546040516001600160a01b039091168152602090f35b50346101c25760203660031901126101c257611f5f61233e565b81546001600160a01b039190611f7890831633146123f7565b1660018060a01b03196005541617600555604051f35b50346101c257611f9d36612354565b8183526009602090815260408420546001600160a01b039081161561060657821561046b57838552600982526040808620549051630a43eeed60e11b8152600481018590523060248201529190811683836044818a855af192831561091e5784918691899561214c575b509061203292918460015416908a6040518096819582946323b872dd60e01b8452336004850161246c565b03925af1801561091e5761212f575b508060055416803b1561111b57604051635a12fc9360e11b8152600481018790526001600160a01b0384166024820152604481018690523360648201529087908290608490829084905af1801561091e57612112575b5060055460405163a9059cbb60e01b81529082166001600160a01b0316600482015260248101859052929182918491908290899082604481015b0393165af19182156110d6577f1e54d7530dad81af38adb8ca9db02add3130668375f37be85396403616fc3d49926110b957506040519283523392a3604051f35b83926120d19492976121248793612394565b979250929350612097565b61214590843d861161042d5761041e81836123c2565b5038612041565b92839195508092503d8311612185575b61216681836123c2565b8101031261111b57838561217c612032936123e3565b94909192612007565b503d61215c565b50346101c25760203660031901126101c2576121a661233e565b81546001600160a01b0391906121bf90831633146123f7565b1660018060a01b03196007541617600755604051f35b50346101c257602090816003193601126101c257600480358252600983526040808320549051634e75827160e01b81526001600160a01b0392909185918391829086165afa92831561226d578093612233575b505060405191168152f35b909192508382813d8311612266575b61224c81836123c2565b810103126101c2575061225e906123e3565b903880612228565b503d612242565b604051903d90823e3d90fd5b50346101c25760203660031901126101c25761229361233e565b81546001600160a01b0391906122ac90831633146123f7565b1660018060a01b03196002541617600255604051f35b50346101c25760203660031901126101c257602090600435815260098252604060018060a01b0391205416604051908152f35b50346101c25760203660031901126101c25761230f61233e565b81546001600160a01b03919061232890831633146123f7565b1660018060a01b03196001541617600155604051f35b600435906001600160a01b03821682036108a157565b60409060031901126108a1576004359060243590565b60609060031901126108a157600435906024356001600160a01b03811681036108a1579060443590565b6001600160401b038111610e2257604052565b604081019081106001600160401b03821117610e2257604052565b90601f801991011681019081106001600160401b03821117610e2257604052565b51906001600160a01b03821682036108a157565b156123fe57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b81198111611a2a570190565b62015180908060001904821181151516611a2a570290565b908160209103126108a1575180151581036108a15790565b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160401b038111610e2257601f01601f191660200190565b918091926000905b8282106124c95750116124c2575050565b6000910152565b915080602091830151818601520182916124b1565b9060a0828203126108a15781516001600160401b0381116108a157820181601f820112156108a15780516125118161248e565b9261251f60405194856123c2565b818452602082840101116108a15761253d91602080850191016124a9565b9161254a602083016123e3565b91612557604082016123e3565b916080606083015192015190565b91908260409103126108a1576020825192015190565b6000198114611a2a5760010190565b6027919493612625936040519687936243522d60e81b60208601526125b98151809260206023890191016124a9565b840190602d60f81b918260238201526125dc8251809360206024850191016124a9565b019060248201526125f78251809360206025850191016124a9565b01612d4760f01b602582015261261682518093602087850191016124a9565b010360078101855201836123c2565b565b90602091612640815180928185528580860191016124a9565b601f01601f1916010190565b9160809361266961267c939897969860a0865260a0860190612627565b9160208501528382036040850152612627565b9460608201520152565b916040519160208301938452604083015260608201526060815260808101918183106001600160401b03841117610e225782602481602093816040528551902060018060a01b036004541690631620909560e01b835260848701525afa90811561272e576000916126f8575b50905090565b602090813d8111612727575b61270e81866123c2565b810103126101c25750612720906123e3565b80386126f2565b503d612704565b6040513d6000823e3d90fd5b818110611a2a570390565b919290156127a75750815115612759575090565b3b156127625790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156127ba5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906127de906024830190612627565b0390fd5b6006546001600160a01b03919082169081156128475760446020926000604051958694859363095ea7b360e01b8552600485015282196024850152165af1801561272e5761282d5750565b6128449060203d811161042d5761041e81836123c2565b50565b6040516307bb995d60e41b8152600490fd5b6000811280156001600160ff1b03839003841316611a2a57600160ff1b829003831216611a2a570190565b6105b560008083136001600160ff1b038490048311166001166128d45760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166128d457500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b018112600116611a2a57600d190190565b600082128015600160ff1b8401831216611a2a576001600160ff1b038301821316611a2a570390565b6000916001600160ff1b039162010bd990848112818503811581851316612cc157600160ff1b938385039283821216611cdc5787908401129162010bd819908162253d8c93018313841516611ab157011316611d02576226496501936001936004918587830484118289131616612cae57808712600760fd1b8812168616612cae5762023ab196878160021b0597878985048211848b131616612c8857877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b121616612c88578802828112818503600313811516612c9b5781870360031216612c885790846003612a2093010590612900565b928184128484038813811516612c3c57848603881216612c2957868401610fa08882860482118584131616612c4f57887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616612c4f57612a999162164b099102059482612a9287612884565b0590612900565b828112818503601f13811516612c4f57818703601f1216612c3c57601f019680888504605011848a131616612c3c57807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616612c3c5761098f9788816050020590828287048b118684131616612c755784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616612c625790605083612b4e93020590612900565b98600b820597828703600213821516612c625782900360021216612c4f5781878604600c118589131616612c4f57817ff55555555555555555555555555555555555555555555555555555555555555688128589121616612c4f57612bba90600288600c029101612900565b986031600160ff1b0181128216612c4f578190603019018095046064118486131616612c3c577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616612c29575050612c249291612c1f91606402612859565b612859565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b87526011600452602487fd5b9291926107b281106108a157600191617d4b600160ff1b0185128316611a2a576000918281128015926001600160ff1b03929182840391906112c08381138716611cdc57600160ff1b859003908181128316611ab157612d5298999a9b612d6391612d5760049b8c92600c612d498a6128e8565b05908b01612859565b612884565b0590617d4a1901612859565b6002600160ff1b0184128b16612f1d57600c612d7e856128e8565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c83131616612f0a578b7ff55555555555555555555555555555555555555555555555555555555555555682128c83121616612f0a57612dea90600c026001198601612900565b61016f8c828a0482118d84131616612ef7578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d84121616612ef757612e399291600c91020590612859565b9661132494851316612ee457831216612ed1578792606492600c612e5f612e67946128e8565b059101612859565b058092046003118583131616612c4f57847fd55555555555555555555555555555555555555555555555555555555555555682128583121616612c4f579082612eb4926003020590612900565b9262253d8c600160ff1b01841216612c2957505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b90600181148015612fe7575b8015612fdd575b8015612fd3575b8015612fc9575b8015612fbf575b8015612fb5575b15612f6b575050601f90565b600214612f785750601e90565b60038116159081612fa8575b8115612f9b575b5015612f9657601d90565b601c90565b6101909150061538612f8b565b6064810615159150612f84565b50600c8114612f5f565b50600a8114612f58565b5060088114612f51565b5060078114612f4a565b5060058114612f43565b5060038114612f3c565b801561309657600081805b613082575061300a8161248e565b9061301860405192836123c2565b808252601f196130278261248e565b013660208401375b80831561307b5760018110611a2a576000190192600a91828206603081198111611a2a578551871015611ac5570160f81b6001600160f81b03191660001a908401601f0153049161302f565b5050905090565b9061308e600a9161257b565b910480612ffc565b506040516130a3816123a7565b60018152600360fc1b60208201529056fea26469706673582212201f24e4c9a3bf6443e6b65203850250700c0ac84adfabe166ef8bce4406ac7a3b64736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "approvePoolToken(address)": {
        "params": {
          "_token": "Address of the approved token"
        }
      },
      "buyCover(uint256,uint256,uint256,uint256)": {
        "params": {
          "_coverAmount": "Amount to cover",
          "_coverDuration": "Cover duration in month (1 ~ 3)",
          "_maxPayment": "Maximum payment user can accept",
          "_poolId": "Pool id"
        }
      },
      "claimPayout(uint256,address,uint256)": {
        "params": {
          "_crToken": "Cover right token address",
          "_generation": "Generation of the priority pool",
          "_poolId": "Pool id"
        }
      },
      "currentLPAddress(uint256)": {
        "params": {
          "_poolId": "Priority Pool ID"
        }
      },
      "getPremiumSplits()": {
        "returns": {
          "_0": "toPriorityPool   Premium split to priority pool in bps",
          "_1": "toProtectionPool Premium split to protection pool in bps"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideLiquidity(uint256)": {
        "params": {
          "_amount": "Amount of liquidity(shield) to provide"
        }
      },
      "removeLiquidity(uint256)": {
        "params": {
          "_amount": "Amount of liquidity to provide"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setExchange(address)": {
        "params": {
          "_exchange": "Address of traderjoe contract"
        }
      },
      "setPremiumSplit(uint256,uint256)": {
        "params": {
          "_priority": "Split for priority pool in bps",
          "_protection": "Split for protection pool in bps"
        }
      },
      "stakeLiquidity(uint256,uint256)": {
        "params": {
          "_amount": "Amount of PRO-LP tokens to stake",
          "_poolId": "Pool id"
        }
      },
      "stakeLiquidityWithoutFarming(uint256,uint256)": {
        "params": {
          "_amount": "Amount of PRO-LP amount",
          "_poolId": "Pool id"
        }
      },
      "storePoolInformation(address,address,uint256)": {
        "params": {
          "_pool": "Address of the priority pool",
          "_poolId": "Pool id",
          "_token": "Address of the priority pool's native token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeLiquidity(uint256,address,uint256)": {
        "params": {
          "_amount": "Amount of LP(priority lp) tokens to withdraw",
          "_poolId": "Pool id",
          "_priorityLP": "Priority lp token address to withdraw"
        }
      },
      "unstakeLiquidityWithoutFarming(uint256,address,uint256)": {
        "params": {
          "_amount": "PRI-LP token amount to remove",
          "_poolId": "Pool id",
          "_priorityLP": "PRI-LP token address"
        }
      }
    },
    "title": "Policy Center",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvePoolToken(address)": {
        "notice": "Approve the exchange to swap tokens"
      },
      "buyCover(uint256,uint256,uint256,uint256)": {
        "notice": "Buy new cover for a given pool         Select a pool with parameter \"poolId\"         Cover amount is in shield and duration is in month         The premium ratio may be dynamic so \"maxPayment\" is similar to \"slippage\""
      },
      "claimPayout(uint256,address,uint256)": {
        "notice": "Claim payout         Need to use a specific crToken address as parameter"
      },
      "currentLPAddress(uint256)": {
        "notice": "Returns the current LP address for a Pool ID"
      },
      "getPremiumSplits()": {
        "notice": "Returns premium split used by Policy Center"
      },
      "provideLiquidity(uint256)": {
        "notice": "Provide liquidity to Protection Pool"
      },
      "removeLiquidity(uint256)": {
        "notice": "Remove liquidity from protection pool"
      },
      "setExchange(address)": {
        "notice": "Set exchange address to be used for token swaps"
      },
      "setPremiumSplit(uint256,uint256)": {
        "notice": "Sets the premium splits used by Policy Center"
      },
      "stakeLiquidity(uint256,uint256)": {
        "notice": "Stake Protection Pool LP (PRO-LP) into priority pools         And automatically stake the PRI-LP tokens into weighted farming pool         With this function, no need for approval of PRI-LP tokens         If you want to hold the PRI-LP tokens for other usage         Call \"stakeLiquidityWithoutFarming\""
      },
      "stakeLiquidityWithoutFarming(uint256,uint256)": {
        "notice": "Stake liquidity to priority pool without depositing into farming"
      },
      "storePoolInformation(address,address,uint256)": {
        "notice": "Store new pool information"
      },
      "unstakeLiquidity(uint256,address,uint256)": {
        "notice": "Unstake Protection Pool LP from priority pools         There may be different generations of priority lp tokens         This function will first remove the PRI-LP token from farming pool         Ensure that your PRI-LP tokens are inside the farming pool         If the PRI-LP tokens are in your own wallet, use \"unstakeLiquidityWithoutFarming\""
      },
      "unstakeLiquidityWithoutFarming(uint256,address,uint256)": {
        "notice": "Unstake liquidity without removing PRI-LP from farming"
      }
    },
    "notice": "This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21667,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12040,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "protectionPool",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12042,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priceGetter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12044,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12046,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "coverRightTokenFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12048,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "weightedFarmingPool",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12050,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "exchange",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12052,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "payoutPool",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12054,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "treasury",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 10607,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priorityPools",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10611,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "tokenByPoolId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10615,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "premiumSplits",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)2_storage"
      },
      {
        "astId": 10621,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "coverInMonth",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}