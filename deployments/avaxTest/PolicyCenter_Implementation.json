{
  "address": "0x8248200cFA52c34fba9786A49d4532f19bC4A85D",
  "abi": [
    {
      "inputs": [],
      "name": "PolicyCenter__AlreadyClaimedPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__BadLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__InsufficientCapacity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__InvalidPremiumSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoExchange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NoPayout",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__NonExistentPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__OnlyPriorityPoolFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__OnlyTreasury",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__PoolPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__PremiumTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__WrongPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__WrongPriorityPoolID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PolicyCenter__ZeroPremium",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coverDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coverAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumInShield",
          "type": "uint256"
        }
      ],
      "name": "CoverBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityStakedWithoutFarming",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priorityLP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priorityLP",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityUnstakedWithoutFarming",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PayoutClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toPriority",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toProtection",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTreasury",
          "type": "uint256"
        }
      ],
      "name": "PremiumSplitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "name": "PremiumSwapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "approvePoolToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_coverDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPayment",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "buyCover",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_crToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_generation",
          "type": "uint256"
        }
      ],
      "name": "claimPayout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coverRightTokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "currentLPAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceGetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priorityPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protectionPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "provideLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_coverRightTokenFactory",
          "type": "address"
        }
      ],
      "name": "setCoverRightTokenFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        }
      ],
      "name": "setExchange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutPool",
          "type": "address"
        }
      ],
      "name": "setPayoutPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceGetter",
          "type": "address"
        }
      ],
      "name": "setPriceGetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "name": "setProtectionPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weightedFarmingPool",
          "type": "address"
        }
      ],
      "name": "setWeightedFarmingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeLiquidityWithoutFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "storePoolInformation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenByPoolId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priorityLP",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_priorityLP",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeLiquidityWithoutFarming",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weightedFarmingPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b7cde9f5df5a4219ef733eb209f383f6782d49b667ea023a783ec020fc41708",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x8248200cFA52c34fba9786A49d4532f19bC4A85D",
    "transactionIndex": 3,
    "gasUsed": "3000022",
    "logsBloom": "0x
    "blockHash": "0xa888199111b74366d8aeba96eccec3442997adcb0ce9d904ff3df10cf78053d5",
    "transactionHash": "0x9b7cde9f5df5a4219ef733eb209f383f6782d49b667ea023a783ec020fc41708",
    "logs": [],
    "blockNumber": 20716681,
    "cumulativeGasUsed": "3370066",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4af3889f4809028ef3b90e1b81ad9a59",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PolicyCenter__AlreadyClaimedPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__BadLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__InsufficientCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__InvalidPremiumSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoExchange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NoPayout\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__NonExistentPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__OnlyPriorityPoolFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__OnlyTreasury\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__PoolPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__PremiumTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__WrongPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__WrongPriorityPoolID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PolicyCenter__ZeroPremium\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coverAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumInShield\",\"type\":\"uint256\"}],\"name\":\"CoverBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityStakedWithoutFarming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priorityLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priorityLP\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityUnstakedWithoutFarming\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toPriority\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toProtection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTreasury\",\"type\":\"uint256\"}],\"name\":\"PremiumSplitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"name\":\"PremiumSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approvePoolToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_coverDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPayment\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"buyCover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_crToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_generation\",\"type\":\"uint256\"}],\"name\":\"claimPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coverRightTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"currentLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceGetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priorityPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coverRightTokenFactory\",\"type\":\"address\"}],\"name\":\"setCoverRightTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutPool\",\"type\":\"address\"}],\"name\":\"setPayoutPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceGetter\",\"type\":\"address\"}],\"name\":\"setPriceGetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"name\":\"setProtectionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weightedFarmingPool\",\"type\":\"address\"}],\"name\":\"setWeightedFarmingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeLiquidityWithoutFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"storePoolInformation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenByPoolId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priorityLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_priorityLP\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeLiquidityWithoutFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weightedFarmingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\",\"kind\":\"dev\",\"methods\":{\"approvePoolToken(address)\":{\"params\":{\"_token\":\"Address of the approved token\"}},\"buyCover(uint256,uint256,uint256,uint256,address[])\":{\"params\":{\"_coverAmount\":\"Amount to cover\",\"_coverDuration\":\"Cover duration in month (1 ~ 3)\",\"_maxPayment\":\"Maximum payment user can accept\",\"_poolId\":\"Pool id\"},\"returns\":{\"_0\":\"crToken CR token address\"}},\"claimPayout(uint256,address,uint256)\":{\"params\":{\"_crToken\":\"Cover right token address\",\"_generation\":\"Generation of the priority pool\",\"_poolId\":\"Pool id\"}},\"currentLPAddress(uint256)\":{\"params\":{\"_poolId\":\"Priority Pool ID\"},\"returns\":{\"lpAddress\":\"Current LP token address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideLiquidity(uint256)\":{\"params\":{\"_amount\":\"Amount of liquidity(shield) to provide\"}},\"removeLiquidity(uint256)\":{\"params\":{\"_amount\":\"Amount of liquidity to provide\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stakeLiquidity(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of PRO-LP tokens to stake\",\"_poolId\":\"Pool id\"}},\"stakeLiquidityWithoutFarming(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of PRO-LP amount\",\"_poolId\":\"Pool id\"}},\"storePoolInformation(address,address,uint256)\":{\"params\":{\"_pool\":\"Address of the priority pool\",\"_poolId\":\"Pool id\",\"_token\":\"Address of the priority pool's native token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstakeLiquidity(uint256,address,uint256)\":{\"params\":{\"_amount\":\"Amount of LP(priority lp) tokens to withdraw\",\"_poolId\":\"Pool id\",\"_priorityLP\":\"Priority lp token address to withdraw\"}},\"unstakeLiquidityWithoutFarming(uint256,address,uint256)\":{\"params\":{\"_amount\":\"PRI-LP token amount to remove\",\"_poolId\":\"Pool id\",\"_priorityLP\":\"PRI-LP token address\"}}},\"title\":\"Policy Center\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approvePoolToken(address)\":{\"notice\":\"Approve the exchange to swap tokens\"},\"buyCover(uint256,uint256,uint256,uint256,address[])\":{\"notice\":\"Buy new cover for a given pool         Select a pool with parameter \\\"poolId\\\"         Cover amount is in shield and duration is in month         The premium ratio may be dynamic so \\\"maxPayment\\\" is similar to \\\"slippage\\\"\"},\"claimPayout(uint256,address,uint256)\":{\"notice\":\"Claim payout         Need to use a specific crToken address as parameter\"},\"currentLPAddress(uint256)\":{\"notice\":\"Returns the current LP address for a Pool ID\"},\"provideLiquidity(uint256)\":{\"notice\":\"Provide liquidity to Protection Pool\"},\"removeLiquidity(uint256)\":{\"notice\":\"Remove liquidity from protection pool\"},\"stakeLiquidity(uint256,uint256)\":{\"notice\":\"Stake Protection Pool LP (PRO-LP) into priority pools         And automatically stake the PRI-LP tokens into weighted farming pool         With this function, no need for approval of PRI-LP tokens         If you want to hold the PRI-LP tokens for other usage         Call \\\"stakeLiquidityWithoutFarming\\\"\"},\"stakeLiquidityWithoutFarming(uint256,uint256)\":{\"notice\":\"Stake liquidity to priority pool without depositing into farming\"},\"storePoolInformation(address,address,uint256)\":{\"notice\":\"Store new pool information\"},\"unstakeLiquidity(uint256,address,uint256)\":{\"notice\":\"Unstake Protection Pool LP from priority pools         There may be different generations of priority lp tokens         This function will first remove the PRI-LP token from farming pool         Ensure that your PRI-LP tokens are inside the farming pool         If the PRI-LP tokens are in your own wallet, use \\\"unstakeLiquidityWithoutFarming\\\"\"},\"unstakeLiquidityWithoutFarming(uint256,address,uint256)\":{\"notice\":\"Unstake liquidity without removing PRI-LP from farming\"}},\"notice\":\"This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/core/PolicyCenter.sol\":\"PolicyCenter\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363635303536303335333037\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/core/PolicyCenter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../interfaces/ExternalTokenDependencies.sol\\\";\\nimport \\\"./interfaces/PolicyCenterEventError.sol\\\";\\nimport \\\"./interfaces/PolicyCenterDependencies.sol\\\";\\n\\nimport \\\"../util/OwnableWithoutContextUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IPriceGetter.sol\\\";\\n\\nimport \\\"../libraries/DateTime.sol\\\";\\nimport \\\"../libraries/StringUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Policy Center\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice This is the policy center for degis Protocol Protection\\n *         Users can buy policies and get payoff here\\n *         Sellers can provide liquidity and choose the pools to cover\\n *\\n */\\ncontract PolicyCenter is\\n    PolicyCenterEventError,\\n    OwnableWithoutContextUpgradeable,\\n    ExternalTokenDependencies,\\n    PolicyCenterDependencies\\n{\\n    using SafeERC20 for IERC20;\\n    using StringUtils for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address public constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\\n\\n    // poolId => address, updated once pools are deployed\\n    // Protection Pool is pool 0\\n    mapping(uint256 => address) public priorityPools;\\n    mapping(uint256 => address) public tokenByPoolId;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(\\n        address _deg,\\n        address _veDeg,\\n        address _shield,\\n        address _protectionPool\\n    ) public initializer {\\n        __Ownable_init();\\n        __ExternalToken__Init(_deg, _veDeg, _shield);\\n\\n        // Peotection pool as pool 0 and with shield token\\n        priorityPools[0] = _protectionPool;\\n        tokenByPoolId[0] = _shield;\\n\\n        protectionPool = _protectionPool;\\n\\n        // Approve USDC for later depositing for Shield\\n        // Use parameter rather than storage variable\\n        IERC20(USDC).approve(address(shield), type(uint256).max);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Whether the pool exists\\n     */\\n    modifier poolExists(uint256 _poolId) {\\n        if (_poolId == 0) revert PolicyCenter__NonExistentPool();\\n        if (priorityPools[_poolId] == address(0))\\n            revert PolicyCenter__NonExistentPool();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Returns the current LP address for a Pool ID\\n     *\\n     * @param _poolId Priority Pool ID\\n     *\\n     * @return lpAddress Current LP token address\\n     */\\n    function currentLPAddress(uint256 _poolId)\\n        external\\n        view\\n        returns (address lpAddress)\\n    {\\n        lpAddress = IPriorityPool(priorityPools[_poolId]).currentLPAddress();\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setExchange(address _exchange) external onlyOwner {\\n        exchange = _exchange;\\n    }\\n\\n    function setPriceGetter(address _priceGetter) external onlyOwner {\\n        priceGetter = _priceGetter;\\n    }\\n\\n    function setProtectionPool(address _protectionPool) external onlyOwner {\\n        protectionPool = _protectionPool;\\n    }\\n\\n    function setWeightedFarmingPool(address _weightedFarmingPool)\\n        external\\n        onlyOwner\\n    {\\n        weightedFarmingPool = _weightedFarmingPool;\\n    }\\n\\n    function setCoverRightTokenFactory(address _coverRightTokenFactory)\\n        external\\n        onlyOwner\\n    {\\n        coverRightTokenFactory = _coverRightTokenFactory;\\n    }\\n\\n    function setPriorityPoolFactory(address _priorityPoolFactory)\\n        external\\n        onlyOwner\\n    {\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    function setPayoutPool(address _payoutPool) external onlyOwner {\\n        payoutPool = _payoutPool;\\n    }\\n\\n    function setTreasury(address _treasury) external onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Store new pool information\\n     *\\n     * @param _pool   Address of the priority pool\\n     * @param _token  Address of the priority pool's native token\\n     * @param _poolId Pool id\\n     */\\n    function storePoolInformation(\\n        address _pool,\\n        address _token,\\n        uint256 _poolId\\n    ) external {\\n        if (msg.sender != priorityPoolFactory)\\n            revert PolicyCenter__OnlyPriorityPoolFactory();\\n\\n        // Should never change the protection pool information\\n        assert(_poolId > 0);\\n\\n        tokenByPoolId[_poolId] = _token;\\n        priorityPools[_poolId] = _pool;\\n\\n        _approvePoolToken(_token);\\n    }\\n\\n    /**\\n     * @notice Approve the exchange to swap tokens\\n     *\\n     * @param _token Address of the approved token\\n     */\\n    function approvePoolToken(address _token) external onlyOwner {\\n        _approvePoolToken(_token);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Buy new cover for a given pool\\n     *\\n     *         Select a pool with parameter \\\"poolId\\\"\\n     *         Cover amount is in shield and duration is in month\\n     *         The premium ratio may be dynamic so \\\"maxPayment\\\" is similar to \\\"slippage\\\"\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverAmount   Amount to cover\\n     * @param _coverDuration Cover duration in month (1 ~ 3)\\n     * @param _maxPayment    Maximum payment user can accept\\n     *\\n     * @return crToken CR token address\\n     */\\n    function buyCover(\\n        uint256 _poolId,\\n        uint256 _coverAmount,\\n        uint256 _coverDuration,\\n        uint256 _maxPayment,\\n        address[] memory path\\n    ) external poolExists(_poolId) returns (address) {\\n        if (!_withinLength(_coverDuration)) revert PolicyCenter__BadLength();\\n\\n        _checkCapacity(_poolId, _coverAmount);\\n\\n        // Premium in USD (shield) and duration in second\\n        (uint256 premium, uint256 timestampDuration) = _getCoverPrice(\\n            _poolId,\\n            _coverAmount,\\n            _coverDuration\\n        );\\n        // Check if premium cost is within limits given by user\\n        if (premium > _maxPayment) revert PolicyCenter__PremiumTooHigh();\\n\\n        // Mint cover right tokens to buyer\\n        // CR token has different months and generations\\n        address crToken = _checkCRToken(_poolId, _coverDuration);\\n        ICoverRightToken(crToken).mint(_poolId, msg.sender, _coverAmount);\\n\\n        // Split the premium income and update the pool status\\n        (\\n            uint256 premiumToPriorityPool,\\n            ,\\n            uint256 premiumToTreasury\\n        ) = _splitPremium(_poolId, premium, path);\\n\\n        IProtectionPool(protectionPool).updateWhenBuy();\\n        IPriorityPool(priorityPools[_poolId]).updateWhenBuy(\\n            _coverAmount,\\n            premiumToPriorityPool,\\n            _coverDuration,\\n            timestampDuration\\n        );\\n        ITreasury(treasury).premiumIncome(_poolId, premiumToTreasury);\\n\\n        emit CoverBought(\\n            msg.sender,\\n            _poolId,\\n            _coverDuration,\\n            _coverAmount,\\n            premium\\n        );\\n\\n        return crToken;\\n    }\\n\\n    /**\\n     * @notice Provide liquidity to Protection Pool\\n     *\\n     * @param _amount Amount of liquidity(shield) to provide\\n     */\\n    function provideLiquidity(uint256 _amount) external {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        // Mint PRO-LP tokens and transfer shield\\n        IProtectionPool(protectionPool).providedLiquidity(_amount, msg.sender);\\n        SimpleIERC20(shield).transferFrom(msg.sender, protectionPool, _amount);\\n\\n        emit LiquidityProvided(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake Protection Pool LP (PRO-LP) into priority pools\\n     *         And automatically stake the PRI-LP tokens into weighted farming pool\\n     *         With this function, no need for approval of PRI-LP tokens\\n     *\\n     *         If you want to hold the PRI-LP tokens for other usage\\n     *         Call \\\"stakeLiquidityWithoutFarming\\\"\\n     *\\n     * @param _poolId Pool id\\n     * @param _amount Amount of PRO-LP tokens to stake\\n     */\\n    function stakeLiquidity(uint256 _poolId, uint256 _amount)\\n        public\\n        poolExists(_poolId)\\n    {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        address pool = priorityPools[_poolId];\\n\\n        // Update status and mint Prority Pool LP tokens\\n        // TODO: Directly mint pri-lp tokens to policy center\\n        // TODO: And send the PRI-LP tokens to weighted farming pool\\n        // TODO: no need for approval\\n        address lpToken = IPriorityPool(pool).stakedLiquidity(\\n            _amount,\\n            address(this)\\n        );\\n        IERC20(protectionPool).transferFrom(msg.sender, pool, _amount);\\n        IProtectionPool(protectionPool).updateStakedSupply(true, _amount);\\n\\n        IWeightedFarmingPool(weightedFarmingPool).depositFromPolicyCenter(\\n            _poolId,\\n            lpToken,\\n            _amount,\\n            msg.sender\\n        );\\n        IERC20(lpToken).transfer(weightedFarmingPool, _amount);\\n\\n        emit LiquidityStaked(msg.sender, _poolId, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake liquidity to priority pool without depositing into farming\\n     *\\n     * @param _poolId Pool id\\n     * @param _amount Amount of PRO-LP amount\\n     */\\n    function stakeLiquidityWithoutFarming(uint256 _poolId, uint256 _amount)\\n        public\\n        poolExists(_poolId)\\n    {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        address pool = priorityPools[_poolId];\\n\\n        // Mint PRI-LP tokens to the user directly\\n        IPriorityPool(pool).stakedLiquidity(_amount, msg.sender);\\n        IERC20(protectionPool).transferFrom(msg.sender, pool, _amount);\\n\\n        IProtectionPool(protectionPool).updateStakedSupply(true, _amount);\\n\\n        emit LiquidityStakedWithoutFarming(msg.sender, _poolId, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake Protection Pool LP from priority pools\\n     *         There may be different generations of priority lp tokens\\n     *\\n     *         This function will first remove the PRI-LP token from farming pool\\n     *         Ensure that your PRI-LP tokens are inside the farming pool\\n     *         If the PRI-LP tokens are in your own wallet, use \\\"unstakeLiquidityWithoutFarming\\\"\\n     *\\n     * @param _poolId     Pool id\\n     * @param _priorityLP Priority lp token address to withdraw\\n     * @param _amount     Amount of LP(priority lp) tokens to withdraw\\n     */\\n    function unstakeLiquidity(\\n        uint256 _poolId,\\n        address _priorityLP,\\n        uint256 _amount\\n    ) public poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        // First remove the PRI-LP token from weighted farming pool\\n        IWeightedFarmingPool(weightedFarmingPool).withdrawFromPolicyCenter(\\n            _poolId,\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        // Burn PRI-LP tokens and give back PRO-LP tokens\\n        IPriorityPool(priorityPools[_poolId]).unstakedLiquidity(\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        IProtectionPool(protectionPool).updateStakedSupply(false, _amount);\\n\\n        emit LiquidityUnstaked(msg.sender, _poolId, _priorityLP, _amount);\\n    }\\n\\n    // /**\\n    //  * @notice Unstake all liquidity (all generations)\\n    //  *\\n    //  *         Priority: generation from small to big\\n    //  *\\n    //  * @param _poolId Pool id\\n    //  * @param _amount Total amount\\n    //  */\\n    // function unstakeAllLiquidity(uint256 _poolId, uint256 _amount) external {\\n    //     IPriorityPool priPool = IPriorityPool(priorityPools[_poolId]);\\n\\n    //     uint256 generation = priPool.generation();\\n\\n    //     for (uint256 i; i < generation; ) {\\n    //         address priLP = priPool.lpTokenAddress(++i);\\n    //         uint256 balance = IERC20(priLP).balanceOf(address(this));\\n    //         unstakeLiquidity(_poolId, priPool.lpTokenAddress(++i), _amount);\\n    //     }\\n    // }\\n\\n    /**\\n     * @notice Unstake liquidity without removing PRI-LP from farming\\n     *\\n     * @param _poolId     Pool id\\n     * @param _priorityLP PRI-LP token address\\n     * @param _amount     PRI-LP token amount to remove\\n     */\\n    function unstakeLiquidityWithoutFarming(\\n        uint256 _poolId,\\n        address _priorityLP,\\n        uint256 _amount\\n    ) external poolExists(_poolId) {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        IPriorityPool(priorityPools[_poolId]).unstakedLiquidity(\\n            _priorityLP,\\n            _amount,\\n            msg.sender\\n        );\\n\\n        IProtectionPool(protectionPool).updateStakedSupply(false, _amount);\\n\\n        emit LiquidityUnstakedWithoutFarming(\\n            msg.sender,\\n            _poolId,\\n            _priorityLP,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from protection pool\\n     *\\n     * @param _amount Amount of liquidity to provide\\n     */\\n    function removeLiquidity(uint256 _amount) external {\\n        if (_amount == 0) revert PolicyCenter__ZeroAmount();\\n\\n        IProtectionPool(protectionPool).removedLiquidity(_amount, msg.sender);\\n\\n        emit LiquidityRemoved(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim payout\\n     *         Need to use a specific crToken address as parameter\\n     *\\n     * @param _poolId     Pool id\\n     * @param _crToken    Cover right token address\\n     * @param _generation Generation of the priority pool\\n     */\\n    function claimPayout(\\n        uint256 _poolId,\\n        address _crToken,\\n        uint256 _generation\\n    ) public poolExists(_poolId) {\\n        (string memory poolName, , , , ) = IPriorityPoolFactory(\\n            priorityPoolFactory\\n        ).pools(_poolId);\\n\\n        // Claim payout from payout pool\\n        // Get the actual claimed amount and new generation cr token to be minted\\n        (uint256 claimed, uint256 newGenerationCRAmount) = IPayoutPool(\\n            payoutPool\\n        ).claim(msg.sender, _crToken, _poolId, _generation);\\n\\n        emit PayoutClaimed(msg.sender, claimed);\\n\\n        // Check if the new generation crToken has been deployed\\n        // If so, get the address\\n        // If not, deploy the new generation cr token\\n        if (newGenerationCRAmount > 0) {\\n            uint256 expiry = ICoverRightToken(_crToken).expiry();\\n\\n            address newCRToken = _checkNewCRToken(\\n                _poolId,\\n                poolName,\\n                expiry,\\n                ++_generation\\n            );\\n\\n            ICoverRightToken(newCRToken).mint(\\n                _poolId,\\n                msg.sender,\\n                newGenerationCRAmount\\n            );\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Swap tokens to USDC and then to shield\\n     *\\n     * @param _fromToken Token address to swap from\\n     * @param _amount    Amount of token to swap from\\n     * @param _path      Swap path\\n     *\\n     * @return received Actual shield amount received\\n     */\\n    function _swapTokens(\\n        address _fromToken,\\n        uint256 _amount,\\n        address[] memory _path\\n    ) internal returns (uint256 received) {\\n        uint256 length = _path.length;\\n\\n        if (_path[length - 1] != USDC) revert PolicyCenter__WrongPath();\\n        if (_path[0] != _fromToken) revert PolicyCenter__WrongPath();\\n\\n        // Swap for USDC and return the received amount\\n        uint256[] memory amountsOut = new uint256[](2);\\n\\n        amountsOut = IExchange(exchange).swapExactTokensForTokens(\\n            _amount,\\n            ((_amount * (10000 - SLIPPAGE)) / 10000),\\n            _path,\\n            address(this),\\n            block.timestamp + 1\\n        );\\n\\n        // Received amount is the second element of the return value\\n        received = amountsOut[length - 1];\\n\\n        // Deposit USDC and get back shield\\n        // When depositing USDC, no slippage\\n        shield.deposit(1, USDC, received, received);\\n\\n        emit PremiumSwapped(_fromToken, _amount, received);\\n    }\\n\\n    /**\\n     * @notice Check the cover length\\n     *\\n     * @param _length Length to check (in month)\\n     *\\n     * @return withinLength Whether the cover is within the length\\n     */\\n    function _withinLength(uint256 _length) internal pure returns (bool) {\\n        return _length > 0 && _length <= MAX_COVER_LENGTH;\\n    }\\n\\n    /**\\n     * @notice Check cover right tokens\\n     *         If the crToken does not exist, it will be deployed here\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverDuration Cover length in month\\n     *\\n     * @return crToken Cover right token address\\n     */\\n    function _checkCRToken(uint256 _poolId, uint256 _coverDuration)\\n        internal\\n        returns (address crToken)\\n    {\\n        // Get the expiry timestamp\\n        (uint256 expiry, uint256 year, uint256 month) = DateTimeLibrary\\n            ._getExpiry(block.timestamp, _coverDuration);\\n\\n        (\\n            string memory poolName,\\n            address poolAddress,\\n            ,\\n            ,\\n\\n        ) = IPriorityPoolFactory(priorityPoolFactory).pools(_poolId);\\n\\n        uint256 generation = IPriorityPool(poolAddress).generation();\\n\\n        crToken = _getCRTokenAddress(_poolId, expiry, generation);\\n        if (crToken == address(0)) {\\n            // CR-JOE-2022-1-G1\\n            string memory tokenName = string.concat(\\n                \\\"CR-\\\",\\n                poolName,\\n                \\\"-\\\",\\n                year._toString(),\\n                \\\"-\\\",\\n                month._toString(),\\n                \\\"-G\\\",\\n                generation._toString()\\n            );\\n\\n            crToken = ICoverRightTokenFactory(coverRightTokenFactory)\\n                .deployCRToken(\\n                    poolName,\\n                    _poolId,\\n                    tokenName,\\n                    expiry,\\n                    generation\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Check whether need to deploy new cr token\\n     *\\n     * @param _poolId        Pool id\\n     * @param _poolName      Pool name\\n     * @param _expiry        Expiry timestamp of the cr token\\n     * @param _newGeneration New generation of the cr token\\n     *\\n     * @return newCRToken New cover right token address\\n     */\\n    function _checkNewCRToken(\\n        uint256 _poolId,\\n        string memory _poolName,\\n        uint256 _expiry,\\n        uint256 _newGeneration\\n    ) internal returns (address newCRToken) {\\n        (uint256 year, uint256 month, ) = DateTimeLibrary.timestampToDate(\\n            _expiry\\n        );\\n\\n        // Check the cr token exist\\n        newCRToken = _getCRTokenAddress(_poolId, _expiry, _newGeneration);\\n\\n        // If cr token not exists, deploy it\\n        if (newCRToken == address(0)) {\\n            // CR-JOE-2022-1-G1\\n            string memory tokenName = string.concat(\\n                \\\"CR-\\\",\\n                _poolName,\\n                \\\"-\\\",\\n                year._toString(),\\n                \\\"-\\\",\\n                month._toString(),\\n                \\\"-G\\\",\\n                _newGeneration._toString()\\n            );\\n\\n            newCRToken = ICoverRightTokenFactory(coverRightTokenFactory)\\n                .deployCRToken(\\n                    _poolName,\\n                    _poolId,\\n                    tokenName,\\n                    _expiry,\\n                    _newGeneration\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cover right token address\\n     *         The address is determined by poolId and expiry (last second of each month)\\n     *         If token not exist, it will return zero address\\n     *\\n     * @param _poolId     Pool id\\n     * @param _expiry     Expiry timestamp\\n     * @param _generation Generation of the priority pool\\n     *\\n     * @return crToken Cover right token address\\n     */\\n    function _getCRTokenAddress(\\n        uint256 _poolId,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) internal view returns (address) {\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(_poolId, _expiry, _generation)\\n        );\\n\\n        return\\n            ICoverRightTokenFactory(coverRightTokenFactory).saltToAddress(salt);\\n    }\\n\\n    /**\\n     * @notice Get native token amount to pay\\n     *\\n     * @param _premium Premium in USD\\n     * @param _token   Native token address\\n     *\\n     * @return premiumInNativeToken Premium calculated in native token\\n     */\\n    function _getNativeTokenAmount(uint256 _premium, address _token)\\n        internal\\n        returns (uint256 premiumInNativeToken)\\n    {\\n        // Price in 18 decimals\\n        uint256 price = IPriceGetter(priceGetter).getLatestPrice(_token);\\n\\n        // @audit Fix decimal for native tokens\\n        // Check the real decimal diff\\n        uint256 decimalDiff = IERC20Decimals(_token).decimals() - 6;\\n        premiumInNativeToken = (_premium * 1e18 * (10**decimalDiff)) / price;\\n\\n        // Pay native tokens\\n        IERC20(_token).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            premiumInNativeToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Split premium for a pool\\n     *         To priority pool is paid in native token\\n     *         To protection pool and treasury is paid in shield\\n     *\\n     * @param _poolId       Pool id\\n     * @param _premiumInUSD Premium in USD\\n     * @param _path         Swap path\\n     *\\n     * @return toPriority   Premium to priority pool\\n     * @return toProtection Premium to protection pool\\n     * @return toTreasury   Premium to treasury\\n     */\\n    function _splitPremium(\\n        uint256 _poolId,\\n        uint256 _premiumInUSD,\\n        address[] memory _path\\n    )\\n        internal\\n        returns (\\n            uint256 toPriority,\\n            uint256 toProtection,\\n            uint256 toTreasury\\n        )\\n    {\\n        if (_premiumInUSD == 0) revert PolicyCenter__ZeroPremium();\\n\\n        address nativeToken = tokenByPoolId[_poolId];\\n        // Premium in project native token (paid in internal function)\\n        uint256 premiumInNativeToken = _getNativeTokenAmount(\\n            _premiumInUSD,\\n            nativeToken\\n        );\\n\\n        // Native tokens to Priority pool\\n        toPriority = (premiumInNativeToken * PREMIUM_TO_PRIORITY) / 10000;\\n\\n        // Swap native tokens to shield\\n        // Except for amount to priority pool, remaining is distributed in Shield\\n        uint256 amountToSwap = premiumInNativeToken - toPriority;\\n        // Shield amount received\\n        uint256 amountReceived = _swapTokens(nativeToken, amountToSwap, _path);\\n\\n        // Shield to Protection Pool\\n        toProtection =\\n            (amountReceived * PREMIUM_TO_PROTECTION) /\\n            (PREMIUM_TO_PROTECTION + PREMIUM_TO_TREASURY);\\n        // Shield to Treasury\\n        toTreasury = amountReceived - toProtection;\\n\\n        emit PremiumSplitted(toPriority, toProtection, toTreasury);\\n\\n        // @audit Add real transfer\\n        // Transfer tokens to different pools\\n        IERC20(nativeToken).transfer(weightedFarmingPool, toPriority);\\n        shield.transfer(protectionPool, toProtection);\\n        shield.transfer(treasury, toTreasury);\\n    }\\n\\n    /**\\n     * @notice Approve a pool token for the exchange\\n     *\\n     * @param _token Token address\\n     */\\n    function _approvePoolToken(address _token) internal {\\n        if (exchange == address(0)) revert PolicyCenter__NoExchange();\\n        // approve exchange to swap policy center tokens for deg\\n        IERC20(_token).approve(exchange, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Get cover price from insurance pool\\n     *\\n     * @param _poolId        Pool id\\n     * @param _coverAmount   Cover amount (shield)\\n     * @param _coverDuration Cover length in months (1,2,3)\\n     */\\n    function _getCoverPrice(\\n        uint256 _poolId,\\n        uint256 _coverAmount,\\n        uint256 _coverDuration\\n    ) internal view returns (uint256 price, uint256 timestampDuration) {\\n        (price, timestampDuration) = IPriorityPool(priorityPools[_poolId])\\n            .coverPrice(_coverAmount, _coverDuration);\\n    }\\n\\n    /**\\n     * @notice Check priority pool capacity\\n     *\\n     * @param _poolId      Pool id\\n     * @param _coverAmount Amount (shield) to cover\\n     */\\n    function _checkCapacity(uint256 _poolId, uint256 _coverAmount)\\n        internal\\n        view\\n    {\\n        IPriorityPool pool = IPriorityPool(priorityPools[_poolId]);\\n        uint256 maxCapacityAmount = (IShield(shield).balanceOf(\\n            address(protectionPool)\\n        ) * pool.maxCapacity()) / 10000;\\n\\n        if (maxCapacityAmount < _coverAmount + pool.activeCovered())\\n            revert PolicyCenter__InsufficientCapacity();\\n    }\\n}\\n\",\"keccak256\":\"0x3b528a8160f552657f87d5ae89b656244477b17457106f8d86ebe2abf2c13e95\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/PolicyCenterDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../interfaces/IPriorityPool.sol\\\";\\nimport \\\"../../interfaces/IProtectionPool.sol\\\";\\nimport \\\"../../interfaces/IPriorityPoolFactory.sol\\\";\\nimport \\\"../../interfaces/ICoverRightToken.sol\\\";\\nimport \\\"../../interfaces/ICoverRightTokenFactory.sol\\\";\\nimport \\\"../../interfaces/IPayoutPool.sol\\\";\\nimport \\\"../../interfaces/IWeightedFarmingPool.sol\\\";\\nimport \\\"../../interfaces/ITreasury.sol\\\";\\nimport \\\"../../interfaces/IExchange.sol\\\";\\nimport \\\"../../interfaces/IERC20Decimals.sol\\\";\\n\\nabstract contract PolicyCenterDependencies {\\n    // Max cover length\\n    // Different priority pools have different max lengths\\n    // This max length is the maximum of all pools\\n    // There will also be a check in each pool\\n    uint256 internal constant MAX_COVER_LENGTH = 3;\\n\\n    // 10000 = 100%\\n    uint256 internal constant PREMIUM_TO_PRIORITY = 4500;\\n    uint256 internal constant PREMIUM_TO_PROTECTION = 5000;\\n    uint256 internal constant PREMIUM_TO_TREASURY = 500;\\n\\n    // Swap slippage\\n    // TODO: change\\n    uint256 internal constant SLIPPAGE = 10000;\\n\\n    address public protectionPool;\\n    address public priceGetter;\\n    address public priorityPoolFactory;\\n    address public coverRightTokenFactory;\\n    address public weightedFarmingPool;\\n    address public exchange;\\n    address public payoutPool;\\n    address public treasury;\\n}\\n\",\"keccak256\":\"0xac76bcad0713f50731ec2bf03eee682292a6810c6686ee5eb2f21503f96a72b3\",\"license\":\"GPL-3.0-or-later\"},\"src/core/interfaces/PolicyCenterEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface PolicyCenterEventError {\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event CoverBought(\\n        address indexed buyer,\\n        uint256 indexed poolId,\\n        uint256 coverDuration,\\n        uint256 coverAmount,\\n        uint256 premiumInShield\\n    );\\n\\n    event LiquidityProvided(address indexed user, uint256 amount);\\n\\n    event LiquidityStaked(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount\\n    );\\n\\n    event LiquidityStakedWithoutFarming(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        uint256 amount\\n    );\\n\\n    event LiquidityUnstaked(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        address priorityLP,\\n        uint256 amount\\n    );\\n\\n    event LiquidityUnstakedWithoutFarming(\\n        address indexed user,\\n        uint256 indexed poolId,\\n        address priorityLP,\\n        uint256 amount\\n    );\\n\\n    event LiquidityRemoved(address indexed user, uint256 amount);\\n\\n    event PayoutClaimed(address indexed user, uint256 amount);\\n\\n    event PremiumSplitted(\\n        uint256 toPriority,\\n        uint256 toProtection,\\n        uint256 toTreasury\\n    );\\n\\n    event PremiumSwapped(address fromToken, uint256 amount, uint256 received);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PolicyCenter__AlreadyClaimedPayout(); // a2ded9c1\\n    error PolicyCenter__WrongPriorityPoolID(); // 67f304bf\\n    error PolicyCenter__InsufficientCapacity(); // 7730dc0b\\n    error PolicyCenter__OnlyPriorityPoolFactory(); // aca500b4\\n    error PolicyCenter__ZeroPremium(); // 720794bf\\n    error PolicyCenter__NoLiquidity(); // d5c16599\\n    error PolicyCenter__NoExchange(); // 7bb995d0\\n    error PolicyCenter__ZeroAmount(); // 1613633b\\n    error PolicyCenter__NoPayout(); // 6e472dea\\n    error PolicyCenter__NonExistentPool(); // 5824d49b\\n    error PolicyCenter__BadLength(); //\\n    error PolicyCenter__PremiumTooHigh(); //\\n    error PolicyCenter__InvalidPremiumSplit(); //\\n    error PolicyCenter__PoolPaused(); //\\n    error PolicyCenter__OnlyTreasury(); //\\n    error PolicyCenter__WrongPath();\\n}\\n\",\"keccak256\":\"0xbede2b583c96c3712fa1718f43fefc0c11fe829e4a4ba143c4ffec3ded4c85c4\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IShield.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\nabstract contract ExternalTokenDependencies is\\n    CommonDependencies,\\n    Initializable\\n{\\n    IDegisToken internal deg;\\n    IVeDEG internal veDeg;\\n    IShield internal shield;\\n\\n    function __ExternalToken__Init(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) internal onlyInitializing {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n        shield = IShield(_shield);\\n    }\\n}\\n\",\"keccak256\":\"0x4d420306f09309f1f235437967130000a9303869e1dd051d0ab8dea42972eae0\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ICoverRightToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightToken {\\n    function expiry() external view returns (uint256);\\n\\n    function getClaimableOf(address _user) external view returns (uint256);\\n\\n    function mint(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function burn(\\n        uint256 _poolId,\\n        address _user,\\n        uint256 _amount\\n    ) external;\\n\\n    function generation() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbd06b45a4cefc10086b3ad76a27e23ff30c32e687856dc47d783698813848c25\",\"license\":\"MIT\"},\"src/interfaces/ICoverRightTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICoverRightTokenFactory {\\n    function deployCRToken(\\n        string calldata _poolName,\\n        uint256 _poolId,\\n        string calldata _tokenName,\\n        uint256 _expiry,\\n        uint256 _generation\\n    ) external returns (address newCRTokenAddress);\\n\\n    function deployed(bytes32 _salt) external view returns (bool);\\n\\n    function saltToAddress(bytes32 _salt) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf17c79edd1d32f1b61e8bdcdc74262f7935a899d03b9cfd677e4ff438f0814db\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x926ec7ef1eb5d6178e8cc0e29f12d1853f6ed27ec6b1864697e7a845e4a6294d\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x557bdcf137975d38a1b7104d1c13389324bd6b3ef8713a43b52b41200ce7700b\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IExchange {\\n    // function swapExactTokensForTokens(\\n    //     uint256 amountIn,\\n    //     uint256 amountOutMin,\\n    //     address[] memory path,\\n    //     address to,\\n    //     uint256 deadline\\n    // ) external returns (uint256);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xf8b5e5b5ea97a53b677888c620caa14f62fe9bfff9c57b7be8b6bf1cf761faf2\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPayoutPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPayoutPool {\\n    function CLAIM_PERIOD() external view returns (uint256);\\n\\n    function SCALE() external view returns (uint256);\\n\\n    function claim(\\n        address _user,\\n        address _crToken,\\n        uint256 _poolId,\\n        uint256 _generation\\n    ) external returns (uint256 claimed, uint256 newGenerationCRAmount);\\n\\n    function crFactory() external view returns (address);\\n\\n    function newPayout(\\n        uint256 _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio,\\n        address _poolAddress\\n    ) external;\\n\\n    function payoutCounter() external view returns (uint256);\\n\\n    function payouts(uint256)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 remaining,\\n            uint256 endTiemstamp,\\n            uint256 ratio,\\n            address priorityPoolAddress\\n        );\\n\\n    function policyCenter() external view returns (address);\\n\\n    function shield() external view returns (address);\\n}\\n\",\"keccak256\":\"0x95db22078b4a0a96e43bd925474b0c781e9b5199509b19a80b73d87362155a3a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriceGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\ninterface IPriceGetter {\\n    function getLatestPrice(string memory _tokenName)\\n        external\\n        returns (uint256 price);\\n\\n    function getLatestPrice(address _token) external returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xc5aafa39687526f14693cfc52febd22b659a7bb7da9a7c3957edb74d77185b2a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function lpTokenAddress(uint256 _generation)\\n        external\\n        view\\n        returns (address);\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function crTokenAddress(uint256 generation) external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external;\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n\\n    function updateWhenClaimed(uint256 expiry, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa43d1d0398e9cfaff0258c21e978549777688cc1b5d0d1c9b30c2e6998f14bc4\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n\\n   \\n}\\n\",\"keccak256\":\"0x2a7bd3922df546c472518593b6ee2de563d9d2013d98bd82ee0f587161111e72\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IProtectionPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IProtectionPool {\\n    function pauseProtectionPool(bool _paused) external;\\n\\n    function providedLiquidity(uint256 _amount, address _provider) external;\\n\\n    function removedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (uint256);\\n\\n    function getTotalCovered() external view returns (uint256);\\n\\n    function getTotalActiveCovered() external view returns (uint256);\\n\\n    function updateWhenBuy() external;\\n\\n    function removedLiquidityWhenClaimed(uint256 _amount, address _to) external;\\n\\n    function getLatestPrice() external returns (uint256);\\n\\n    function updateStakedSupply(bool isStake, uint256 amount) external;\\n\\n    function stakedSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6a5a664f2e06ef97482cea7dbb76165ff2881c8e584eb181b903d32462bef02a\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IShield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\ninterface IShield is SimpleIERC20 {\\n    function deposit(\\n        uint256 _type,\\n        address _stablecoin,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xea3edf57ae974302360119e5b648eb85bda72762c996680ef5b7e0b827be0c02\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface ITreasury {\\n    function rewardReporter(uint256 _poolId, address _reporter) external;\\n\\n    function premiumIncome(uint256 _poolId, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2ef53813a74f1e7de1168f57dde2972cc51fc4a1cc4b4e885e5adc896045d4c7\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../util/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x8e86f7b957f4a1d3e5e34a57f051b90c5008f431c00ce2e0a1d47c6c8ad5911d\",\"license\":\"MIT\"},\"src/interfaces/IWeightedFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IWeightedFarmingPool {\\n    function addPool(address _token) external;\\n\\n    function addToken(\\n        uint256 _id,\\n        address _token,\\n        uint256 _weight\\n    ) external;\\n\\n    function updateRewardSpeed(\\n        uint256 _id,\\n        uint256 _newSpeed,\\n        uint256[] memory _years,\\n        uint256[] memory _months\\n    ) external;\\n\\n    function depositFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function withdrawFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateWeight(\\n        uint256 _id,\\n        address _token,\\n        uint256 _newWeight\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7e2c8dc066b4f474ba74068925b007da5871980b24ca9595b1ced1440c789352\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/libraries/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nlibrary StringUtils {\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x3b775a5710bb0d859cecdd99277a789e642853062ceef6dbaa187ca4a7a4164e\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract OwnableWithoutContextUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb7c1bac54d6b38b0ff582113689643e43bdbc9eaf4dcd906373c3f44f7b2eab5\",\"license\":\"MIT\"},\"src/util/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b15e78313a0d5b81dcaaea2e7545aa8688d1e44ef97f607f2405d0c9e7e0df7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613540908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80630121cff514612661578063056d7e581461262e578063298d4dd0146125e557806339827304146125415780633f81ff26146124f85780634ea4c6b31461229a57806358bf0f2c1461225157806361d027b3146122285780636273106a146121ff57806367b1f5df146121b657806367c0dd821461202757806367e03b5414611ffe5780636c1b700f14611fd55780636f8a6e4314611fac578063715018a614611f3d57806389a3027114611f0e5780638da5cb5b14611ee35780639c8f9f2314611e2c578063a8bf604d14611df3578063aa139d5b14611daa578063ab07211e14611c0f578063ad35e1dc14611bc6578063b567dc6a14611b9d578063b6cccdd014611afa578063bee7fd9214610b07578063bef1e500146107f1578063c2260f481461069a578063ceed1b9014610671578063d2f7265a14610648578063eb521a4c14610507578063f02bbc52146104d4578063f0f442601461048b578063f2fde38b146103f05763f8c8765e1461019357600080fd5b346103ed5760803660031901126103ed576101ac6126aa565b6101b46126c0565b6001600160a01b0360443581811693908490036103e857606435908282168092036103e857855460ff8160081c1615948580966103db575b80156103c4575b156103685760ff1982166001178855849186610357575b5061022460ff895460081c1661021f81612bdb565b612bdb565b61022d336134aa565b61023d60ff895460081c16612bdb565b8160018060a01b031993168360325416176032551681603354161760335584816034541617603455858052602094603d8652604087208383825416179055603e86526040872090828254161790556035541617603555603454166040519063095ea7b360e01b82526004820152600019602482015282816044818773b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e5af1801561034c5761031f575b506102e6575b50604051f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061ff0019835416835560405160018152a1386102e0565b61033e90833d8511610345575b6103368183612744565b81019061277c565b50386102da565b503d61032c565b6040513d86823e3d90fd5b61ffff19166101011788553861020a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156101f35750600160ff8316146101f3565b50600160ff8316106101ec565b600080fd5b80fd5b50346103ed5760203660031901126103ed5761040a6126aa565b60018060a01b0361042281845460101c1633146127c3565b81161561043757610432906134aa565b604051f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346103ed5760203660031901126103ed576104a56126aa565b60018060a01b03906104be82845460101c1633146127c3565b1660018060a01b0319603c541617603c55604051f35b50346103ed5760203660031901126103ed576020906004358152603e8252604060018060a01b0391205416604051908152f35b50346103ed5760203660031901126103ed576004358015610636576035546001600160a01b03908116803b15610632576040516344abf1a960e01b81526004810184905233602482015290849081908390604490829084905af191821561062557849261060a575b5050602090826105a093603454169060355416866040518096819582946323b872dd60e01b845233600485016127fc565b03925af180156105ff576105e1575b506040519081527fccb2ae3a2936bf4c94fa4e12cdf0cdad6ed0e4888a044cef89afa60f2e4b92d360203392a2604051f35b6105f89060203d8111610345576103368183612744565b50386105af565b6040513d85823e3d90fd5b610615919250612716565b6106215781833861056f565b8280fd5b50604051903d90823e3d90fd5b8380fd5b604051631613633b60e01b8152600490fd5b50346103ed57806003193601126103ed57603a546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed576036546040516001600160a01b039091168152602090f35b50346103ed576106a9366126ec565b82156107df57828452603d60205260408420546001600160a01b03908116156107df578115610636578490848252603d60205280604083205416803b15610621576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af19081156105ff5783916107cb575b505060355416803b156107c757818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156107bc576107a8575b50506107a07fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab091604051918291339583612794565b0390a3604051f35b6107b190612716565b61063257833861076b565b6040513d84823e3d90fd5b5080fd5b6107d490612716565b6107c757813861072f565b604051635824d49b60e01b8152600490fd5b50346103ed57610800366126ec565b909180156107df57808452603d602090815260408520546001600160a01b0391908216156107df578594602494868460375416604051978880926315895f4760e31b82528960048301525afa908115610afc5787968792610ad4575b50604085608481603b54169583519a8b938492631357a41960e11b845233600485015216978860248401528b60448401528660648401525af1968715610a955788908998610aa0575b506040519081527fec68461f5d4cc45c89e914cb8826a966c73dd35e5f97815ece0a01ffa4a025a6853392a2866108dd575b87604051f35b83600493604051948580926370c264df60e11b82525afa928315610a95578893610a5d575b509061090f88939261290b565b8661091e620151808504612d0b565b5061092d848785999499612a16565b96898816156109a6575b5050505050505090501691823b156109a15760405163020da84160e61b8152600481019290925233602483015260448201529082908290606490829084905af180156107bc5761098d575b8080808080806108d7565b61099690612716565b6103ed578038610982565b505050fd5b88969750906109c06109ba6109d0936133e7565b916133e7565b6109c9866133e7565b918761291a565b936109f789603854169460405198899788968795636c1020a160e01b8752600487016129dc565b03925af1918215610a52578692610a18575b50508038808086898280610937565b90809250813d8311610a4b575b610a2f8183612744565b81010312610a4757610a40906127af565b3880610a09565b8480fd5b503d610a25565b6040513d88823e3d90fd5b8480929399508194503d8311610a8e575b610a788183612744565b810103126103e85790518796909161090f610902565b503d610a6e565b6040513d8a823e3d90fd5b9050610ac591975060403d604011610acd575b610abd8183612744565b8101906128f5565b9690386108a5565b503d610ab3565b610af19192503d8089833e610ae98183612744565b81019061286e565b50505050903861085c565b6040513d89823e3d90fd5b50346103ed5760a03660031901126103ed576084356001600160401b0381116107c757366023820112156107c757806004013590610b4482612765565b90610b526040519283612744565b82825260208201906024829460051b8201019036821161150757602401915b818310611ada57505050600435156107df576004358352603d60205260408320546001600160a01b0316156107df57604435151580611acd575b15611abb57600480358452603d602090815260408086205460345460355492516370a0823160e01b81526001600160a01b039384169581019590955290821693929183916024918391165afa908115611a4a578591611a89575b506040516359b6a0c960e01b8152602081600481865afa908115610a52578691611a55575b50612710610c3c602092600494612ae2565b049260405192838092636835185f60e11b82525afa8015611a4a578590611a16575b610c6b9150602435612b00565b11611a04576044906004358452603d602052604060018060a01b038186205416815193848092638905faeb60e01b82526024356004830152823560248301525afa801561034c57849285916119df575b5060643583116119cd57610cd3620151804204612d0b565b9150506001604435106119b957601960001960443501911015611995575b610d0b610d02620151804204612d0b565b93849391612b00565b600181106117c157610d27600c91600019019282840490612b00565b910660011981116117c15792610d6092610d5b926001610d6c960191610d4d8383613326565b80911161198d575b506130cb565b612aca565b62015180420690612b00565b4281106115075762015180610d819104612d0b565b50610d9b610d5b610d9483859995613326565b83896130cb565b906201437019821161156857610dd4196201437083011161156857603b1962015144830111611568576037546040516315895f4760e31b81526004803590820152908990829060249082906001600160a01b03165afa928315611815576004938a928b91611969575b50604051630b90ca9160e11b81529460209186919082906001600160a01b03165afa93841561195e578a94611927575b506201517f0191610e488484600435612a16565b986001600160a01b038a1615611878575b50505050506001600160a01b0385163b156115075760405163020da84160e61b815260048035908201523360248083019190915235604482015286908181606481836001600160a01b038c165af180156107bc57611864575b50508315611852576004358652603e60205260018060a01b036040872054169186602060018060a01b03603654166024604051809481936302c68be360e31b83528960048401525af1908115610a95578891611820575b5060405163313ce56760e01b8152602081600481885afa9081156118155789916117d5575b50600660ff8216106117c1578660001904670de0b6b3a76400001160011661156857604d60ff8281166005190116116117c157610f829060ff9081166005190116600a0a670de0b6b3a76400008802612ae2565b81156117ab576040516323b872dd60e01b6020820152610fbb81610fad8585043033602485016127fc565b03601f198101835282612744565b604051610fc781612729565b602081527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020820152863b15611766578a8083602061103595519101828b5af13d1561175e573d906110198261281e565b916110276040519384612744565b82523d8d602084013e612b20565b805190816116e9575b5050611194938282046000190485118383041515166115685761106b612710868585040204848404612af5565b96805191600183106116d55773b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e6001600160a01b036110a2600019860185612b0c565b5116036116ad578151156116bf5780516001600160a01b03168890036116ad576040518060608101106001600160401b036060830111176116975780606060409201825260028152602036910137603a546001600160a01b0316906001194211611683576040516338ed173960e01b8152600481018b90526000602482015260a06044820152925160a484018190528d928492909160c484019190855b818110611659575050508383809230606483015260014201608483015203925af190811561164e578b91611596575b5061117d916000190190612b0c565b516034549096908a906001600160a01b0316803b156107c75781809160848b6040519485938492636f0372af60e01b84526001600485015273b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e602485015280604485015260648401525af180156107bc5761157e575b505060607f57f3d153693ba34ad2f1603ab743de3caf14b05ffa2fdfae8e9d0947a17c7ca391604051908882526020820152886040820152a18560001904611388118615151661156857856112cd602061124a61157c6113888e9b020484612af5565b604080516127108888048b0204815261157c61138887020460208201529081018290529098907fe59d21244ca3bff81515b705214dab78cc9f978c1939e610874429ffa47380b290606090a160395460405163a9059cbb60e01b81529384929183918d918391906127108c8c048f0204906001600160a01b031660048401612794565b03925af18015610a9557611549575b50602061157c60018060a01b03603454166113888a60018060a01b0360355416956113206040519788968795869463a9059cbb60e01b865202049060048401612794565b03925af18015610afc5761152a575b50603454603c5460405163a9059cbb60e01b81529160209183916001600160a01b039081169183918c91839161136b918e911660048401612794565b03925af18015610afc5761150b575b506035546001600160a01b0316803b156114ef57868091600460405180948193621e432b60e81b83525af1908115610afc5787916114f3575b50506004358652603d60205260408620546001600160a01b031690813b156114ef578660849281956127106040519889978896630aadb77760e01b885260243560048901520402046024850152604435604485015260648401525af19081156105ff5783916114db575b5050603c546001600160a01b0316803b1561062157604483926040519485938492635b97d36760e01b8452600435600485015260248401525af1801561034c576114c7575b60208383604051907f308dab4150a765534b441eef3367b2732d18bfdcd4b5ffe2a7084e1b1699051560043592806114b23394602435604435846040919493926060820195825260208201520152565b0390a36040516001600160a01b039091168152f35b6114d18491612716565b6106215782611462565b6114e490612716565b6107c757813861141d565b8680fd5b6114fc90612716565b6115075785386113b3565b8580fd5b6115239060203d602011610345576103368183612744565b503861137a565b6115429060203d602011610345576103368183612744565b503861132f565b6115619060203d602011610345576103368183612744565b50386112dc565b634e487b7160e01b600052601160045260246000fd5b61158790612716565b6115925789386111e7565b8980fd5b90503d808c833e6115a78183612744565b602082828101031261164a578151906001600160401b03821161164657808301601f8385010112156116465781830151916115e183612765565b936115ef6040519586612744565b8385526020850192810160208560051b8484010101116116425790602081830101925b60208560051b83850101018410611632575061117d935061116e92505050565b8351815260209384019301611612565b8e80fd5b8c80fd5b8b80fd5b6040513d8d823e3d90fd5b9260209194965060019295508190838060a01b0387511681520194019101908f949286949261113f565b634e487b7160e01b8d52601160045260248dfd5b634e487b7160e01b600052604160045260246000fd5b6040516310bc08dd60e01b8152600490fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b8c52601160045260248cfd5b6020806116fa93830101910161277c565b1561170657388061103e565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b606090612b20565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b89526011600452602489fd5b90506020813d60201161180d575b816117f060209383612744565b81010312611809575160ff811681036118095738610f2e565b8880fd5b3d91506117e3565b6040513d8b823e3d90fd5b90506020813d60201161184a575b8161183b60209383612744565b810103126103e8575138610f09565b3d915061182e565b60405163720794bf60e01b8152600490fd5b61186d90612716565b611507578538610eb2565b6020949599509061188e6109ba61189e936133e7565b611897876133e7565b918461291a565b8960018060a01b0360385416926118cf60405197889687958694636c1020a160e01b865260043590600487016129dc565b03925af1908115610a525786916118ed575b50933880808080610e59565b90506020813d60201161191f575b8161190860209383612744565b8101031261150757611919906127af565b386118e1565b3d91506118fb565b9093506020813d602011611956575b8161194360209383612744565b810103126103e85751926201517f610e34565b3d9150611936565b6040513d8c823e3d90fd5b6020935061198191503d808d833e610ae98183612744565b50505092909290610e04565b925038610d55565b600119106119a557604435610cf1565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b86526011600452602486fd5b60405163855e507b60e01b8152600490fd5b90506119fb91925060403d604011610acd57610abd8183612744565b91909138610cbb565b604051637730dc0b60e01b8152600490fd5b506020813d602011611a42575b81611a3060209383612744565b810103126103e857610c6b9051610c5e565b3d9150611a23565b6040513d87823e3d90fd5b90506020813d602011611a81575b81611a7060209383612744565b810103126103e85751612710610c2a565b3d9150611a63565b90506020813d602011611ab3575b81611aa460209383612744565b810103126103e8575138610c05565b3d9150611a97565b6040516307aaabcb60e21b8152600490fd5b5060036044351115610bab565b82356001600160a01b03811681036103e857815260209283019201610b71565b50346103ed5760603660031901126103ed57611b146126aa565b90611b1d6126c0565b60375460443593906001600160a01b039081163303611b8b578415611b775783946104329452603e602052604085209060018060a01b03199181851683825416179055603d60205260408620921690825416179055612b64565b634e487b7160e01b84526001600452602484fd5b604051632b29402d60e21b8152600490fd5b50346103ed57806003193601126103ed576039546040516001600160a01b039091168152602090f35b50346103ed5760203660031901126103ed57611be06126aa565b60018060a01b0390611bf982845460101c1633146127c3565b1660018060a01b03196037541617603755604051f35b50346103ed57611c1e366126ec565b82156107df57828452603d60205260408420546001600160a01b03908116156107df5781156106365780859160395416803b15610621576040516316858d7960e21b8152600481018790526001600160a01b0386166024820152604481018590523360648201529083908290608490829084905af19081156105ff578391611d96575b50859052603d60205280604083205416803b15610621576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af19081156105ff578391611d82575b505060355416803b156107c757818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156107bc57611d6e575b50506107a07f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f367519791604051918291339583612794565b611d7790612716565b610632578338611d39565b611d8b90612716565b6107c7578138611cfd565b611d9f90612716565b6107c7578138611ca1565b50346103ed5760203660031901126103ed57611dc46126aa565b60018060a01b0390611ddd82845460101c1633146127c3565b1660018060a01b03196038541617603855604051f35b50346103ed5760203660031901126103ed57610432611e106126aa565b611e2760018060a01b03845460101c1633146127c3565b612b64565b50346103ed576020806003193601126107c75760043590811561063657603554604051636d40d7d760e11b8152600481018490523360248201529082908290604490829088906001600160a01b03165af1801561034c57611eb9575b507fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719906040519283523392a2604051f35b8190813d8311611edc575b611ece8183612744565b810103126103e85738611e88565b503d611ec4565b50346103ed57806003193601126103ed575460405160109190911c6001600160a01b03168152602090f35b50346103ed57806003193601126103ed57602060405173b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e8152f35b50346103ed57806003193601126103ed5780546001600160a01b0390611f699060101c821633146127c3565b6000546000604051928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b50346103ed57806003193601126103ed576037546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed576035546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed576038546040516001600160a01b039091168152602090f35b50346103ed57612036366126d6565b81156107df57818352603d602090815260408420546001600160a01b03908116156107df57821561063657838552603d82526040808620549051630a43eeed60e11b8152600481018590523360248201528692918216848260448187855af1801561034c578591879161217b575b6120cd9350846035541690866040518096819582946323b872dd60e01b845233600485016127fc565b03925af180156105ff5761215e575b5060355416803b156107c757818091604460405180948193630dfa376d60e01b8352600160048401528960248401525af180156107bc5761214a575b50507f6ed71e479f5286ad6192bfdc2b224afa6073276d8f9a0e5028400f589fbb39cc906040519283523392a3604051f35b61215390612716565b610632578338612118565b61217490843d8611610345576103368183612744565b50386120dc565b91905082813d83116121af575b6121928183612744565b81010312610632578585916121a96120cd946127af565b506120a4565b503d612188565b50346103ed5760203660031901126103ed576121d06126aa565b60018060a01b03906121e982845460101c1633146127c3565b1660018060a01b0319603a541617603a55604051f35b50346103ed57806003193601126103ed57603b546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed57603c546040516001600160a01b039091168152602090f35b50346103ed5760203660031901126103ed5761226b6126aa565b60018060a01b039061228482845460101c1633146127c3565b1660018060a01b03196039541617603955604051f35b50346103ed576122a9366126d6565b81156107df57818352603d602090815260408420546001600160a01b0391908216156107df57821561063657838552603d81526040808620549051630a43eeed60e11b8152600481018590523060248201529083169082816044818a865af1908115610afc5785849189936124be575b5061234392938660355416908a6040518096819582946323b872dd60e01b845233600485016127fc565b03925af18015610afc576124a1575b50858360355416803b156107c7578190604460405180948193630dfa376d60e01b8352600160048401528a60248401525af18015610afc5761248e575b50826039541692833b156114ef57604051635a12fc9360e11b8152600481018790526001600160a01b03831660248201526044810186905233606482015293879081908690608490829084905af1948515610625578695612475575b50918184936124169693603954169160405180988196829563a9059cbb60e01b845260048401612794565b0393165af1918215611a4a577f1e54d7530dad81af38adb8ca9db02add3130668375f37be85396403616fc3d4992612458575b506040519283523392a3604051f35b61246e90823d8411610345576103368183612744565b5038612449565b61248191929550612716565b61150757839286386123eb565b61249a90969196612716565b943861238f565b6124b790833d8511610345576103368183612744565b5038612352565b92505081813d83116124f1575b6124d58183612744565b810103126114ef5782856124eb612343936127af565b92612319565b503d6124cb565b50346103ed5760203660031901126103ed576125126126aa565b60018060a01b039061252b82845460101c1633146127c3565b1660018060a01b0319603b541617603b55604051f35b50346103ed57602090816003193601126103ed57600480358252603d83526040808320549051634e75827160e01b81526001600160a01b0392909185918391829086165afa9283156125d957809361259f575b505060405191168152f35b909192508382813d83116125d2575b6125b88183612744565b810103126103ed57506125ca906127af565b903880612594565b503d6125ae565b604051903d90823e3d90fd5b50346103ed5760203660031901126103ed576125ff6126aa565b60018060a01b039061261882845460101c1633146127c3565b1660018060a01b03196036541617603655604051f35b50346103ed5760203660031901126103ed576020906004358152603d8252604060018060a01b0391205416604051908152f35b50346103ed5760203660031901126103ed5761267b6126aa565b60018060a01b039061269482845460101c1633146127c3565b1660018060a01b03196035541617603555604051f35b600435906001600160a01b03821682036103e857565b602435906001600160a01b03821682036103e857565b60409060031901126103e8576004359060243590565b60609060031901126103e857600435906024356001600160a01b03811681036103e8579060443590565b6001600160401b03811161169757604052565b604081019081106001600160401b0382111761169757604052565b90601f801991011681019081106001600160401b0382111761169757604052565b6001600160401b0381116116975760051b60200190565b908160209103126103e8575180151581036103e85790565b6001600160a01b039091168152602081019190915260400190565b51906001600160a01b03821682036103e857565b156127ca57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160401b03811161169757601f01601f191660200190565b918091926000905b828210612859575011612852575050565b6000910152565b91508060209183015181860152018291612841565b9060a0828203126103e85781516001600160401b0381116103e857820181601f820112156103e85780516128a18161281e565b926128af6040519485612744565b818452602082840101116103e8576128cd9160208085019101612839565b916128da602083016127af565b916128e7604082016127af565b916080606083015192015190565b91908260409103126103e8576020825192015190565b60001981146115685760010190565b60279194936129b5936040519687936243522d60e81b6020860152612949815180926020602389019101612839565b840190602d60f81b9182602382015261296c825180936020602485019101612839565b01906024820152612987825180936020602585019101612839565b01612d4760f01b60258201526129a68251809360208785019101612839565b01036007810185520183612744565b565b906020916129d081518092818552858086019101612839565b601f01601f1916010190565b916080936129f9612a0c939897969860a0865260a08601906129b7565b91602085015283820360408501526129b7565b9460608201520152565b916040519160208301938452604083015260608201526060815260808101918183106001600160401b038411176116975782602481602093816040528551902060018060a01b036038541690631620909560e01b835260848701525afa908115612abe57600091612a88575b50905090565b602090813d8111612ab7575b612a9e8186612744565b810103126103ed5750612ab0906127af565b8038612a82565b503d612a94565b6040513d6000823e3d90fd5b62015180908060001904821181151516611568570290565b8060001904821181151516611568570290565b818110611568570390565b81198111611568570190565b80518210156116bf5760209160051b010190565b90919015612b2c575090565b815115612b3c5750805190602001fd5b60405162461bcd60e51b815260206004820152908190612b609060248301906129b7565b0390fd5b603a546001600160a01b0391908216908115612bc95760446020926000604051958694859363095ea7b360e01b8552600485015282196024850152165af18015612abe57612baf5750565b612bc69060203d8111610345576103368183612744565b50565b6040516307bb995d60e41b8152600490fd5b15612be257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000811280156001600160ff1b0383900384131661156857600160ff1b829003831216611568570190565b6105b560008083136001600160ff1b03849004831116600116612cb65760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa884128285121616612cb657500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b01811260011661156857600d190190565b600082128015600160ff1b8401831216611568576001600160ff1b038301821316611568570390565b6000916001600160ff1b039162010bd9908481128185038115818513166130b757600160ff1b9383850392838212166130a35787908401129162010bd819908162253d8c930183138415166117c1570113166119a557622649650193600193600491858783048411828913161661309057808712600760fd1b88121686166130905762023ab196878160021b0597878985048211848b13161661306a57877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b12161661306a57880282811281850360031381151661307d578187036003121661306a5790846003612e0293010590612ce2565b92818412848403881381151661301e5784860388121661300b57868401610fa0888286048211858413161661303157887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8312858412161661303157612e7b9162164b099102059482612e7487612c66565b0590612ce2565b828112818503601f1381151661303157818703601f121661301e57601f019680888504605011848a13161661301e57807ffe666666666666666666666666666666666666666666666666666666666666678912848a12161661301e5761098f9788816050020590828287048b1186841316166130575784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c16166130445790605083612f3093020590612ce2565b98600b82059782870360021382151661304457829003600212166130315781878604600c11858913161661303157817ff5555555555555555555555555555555555555555555555555555555555555568812858912161661303157612f9c90600288600c029101612ce2565b986031600160ff1b018112821661303157819060301901809504606411848613161661301e577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98412838512161661300b575050613006929161300191606402612c3b565b612c3b565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b9291926107b281106103e857600191617d4b600160ff1b0185128316611568576000918281128015926001600160ff1b03929182840391906112c083811387166130a357600160ff1b8590039081811283166117c15761314898999a9b6131599161314d60049b8c92600c61313f8a612cca565b05908b01612c3b565b612c66565b0590617d4a1901612c3b565b6002600160ff1b0184128b1661331357600c61317485612cca565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c83131616613300578b7ff55555555555555555555555555555555555555555555555555555555555555682128c83121616613300576131e090600c026001198601612ce2565b61016f8c828a0482118d841316166132ed578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d841216166132ed5761322f9291600c91020590612c3b565b96611324948513166132da578312166132c7578792606492600c61325561325d94612cca565b059101612c3b565b05809204600311858313161661303157847fd555555555555555555555555555555555555555555555555555555555555556821285831216166130315790826132aa926003020590612ce2565b9262253d8c600160ff1b0184121661300b57505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b906001811480156133dd575b80156133d3575b80156133c9575b80156133bf575b80156133b5575b80156133ab575b15613361575050601f90565b60021461336e5750601e90565b6003811615908161339e575b8115613391575b501561338c57601d90565b601c90565b6101909150061538613381565b606481061515915061337a565b50600c8114613355565b50600a811461334e565b5060088114613347565b5060078114613340565b5060058114613339565b5060038114613332565b801561348c57600081805b61347857506134008161281e565b9061340e6040519283612744565b808252601f1961341d8261281e565b013660208401375b8083156134715760018110611568576000190192600a918282066030811981116115685785518710156116bf570160f81b6001600160f81b03191660001a908401601f01530491613425565b5050905090565b90613484600a9161290b565b9104806133f2565b5060405161349981612729565b60018152600360fc1b602082015290565b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea2646970667358221220973768f41b17069b7fd01337affac66c0f4cb9c2e3a995db075f5232f859f03764736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c80630121cff514612661578063056d7e581461262e578063298d4dd0146125e557806339827304146125415780633f81ff26146124f85780634ea4c6b31461229a57806358bf0f2c1461225157806361d027b3146122285780636273106a146121ff57806367b1f5df146121b657806367c0dd821461202757806367e03b5414611ffe5780636c1b700f14611fd55780636f8a6e4314611fac578063715018a614611f3d57806389a3027114611f0e5780638da5cb5b14611ee35780639c8f9f2314611e2c578063a8bf604d14611df3578063aa139d5b14611daa578063ab07211e14611c0f578063ad35e1dc14611bc6578063b567dc6a14611b9d578063b6cccdd014611afa578063bee7fd9214610b07578063bef1e500146107f1578063c2260f481461069a578063ceed1b9014610671578063d2f7265a14610648578063eb521a4c14610507578063f02bbc52146104d4578063f0f442601461048b578063f2fde38b146103f05763f8c8765e1461019357600080fd5b346103ed5760803660031901126103ed576101ac6126aa565b6101b46126c0565b6001600160a01b0360443581811693908490036103e857606435908282168092036103e857855460ff8160081c1615948580966103db575b80156103c4575b156103685760ff1982166001178855849186610357575b5061022460ff895460081c1661021f81612bdb565b612bdb565b61022d336134aa565b61023d60ff895460081c16612bdb565b8160018060a01b031993168360325416176032551681603354161760335584816034541617603455858052602094603d8652604087208383825416179055603e86526040872090828254161790556035541617603555603454166040519063095ea7b360e01b82526004820152600019602482015282816044818773b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e5af1801561034c5761031f575b506102e6575b50604051f35b7f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989061ff0019835416835560405160018152a1386102e0565b61033e90833d8511610345575b6103368183612744565b81019061277c565b50386102da565b503d61032c565b6040513d86823e3d90fd5b61ffff19166101011788553861020a565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156101f35750600160ff8316146101f3565b50600160ff8316106101ec565b600080fd5b80fd5b50346103ed5760203660031901126103ed5761040a6126aa565b60018060a01b0361042281845460101c1633146127c3565b81161561043757610432906134aa565b604051f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346103ed5760203660031901126103ed576104a56126aa565b60018060a01b03906104be82845460101c1633146127c3565b1660018060a01b0319603c541617603c55604051f35b50346103ed5760203660031901126103ed576020906004358152603e8252604060018060a01b0391205416604051908152f35b50346103ed5760203660031901126103ed576004358015610636576035546001600160a01b03908116803b15610632576040516344abf1a960e01b81526004810184905233602482015290849081908390604490829084905af191821561062557849261060a575b5050602090826105a093603454169060355416866040518096819582946323b872dd60e01b845233600485016127fc565b03925af180156105ff576105e1575b506040519081527fccb2ae3a2936bf4c94fa4e12cdf0cdad6ed0e4888a044cef89afa60f2e4b92d360203392a2604051f35b6105f89060203d8111610345576103368183612744565b50386105af565b6040513d85823e3d90fd5b610615919250612716565b6106215781833861056f565b8280fd5b50604051903d90823e3d90fd5b8380fd5b604051631613633b60e01b8152600490fd5b50346103ed57806003193601126103ed57603a546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed576036546040516001600160a01b039091168152602090f35b50346103ed576106a9366126ec565b82156107df57828452603d60205260408420546001600160a01b03908116156107df578115610636578490848252603d60205280604083205416803b15610621576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af19081156105ff5783916107cb575b505060355416803b156107c757818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156107bc576107a8575b50506107a07fe44f6895444d7e27100c9f3a39dbf225380f26b7b7ad7cf0cebff9f7e00d5ab091604051918291339583612794565b0390a3604051f35b6107b190612716565b61063257833861076b565b6040513d84823e3d90fd5b5080fd5b6107d490612716565b6107c757813861072f565b604051635824d49b60e01b8152600490fd5b50346103ed57610800366126ec565b909180156107df57808452603d602090815260408520546001600160a01b0391908216156107df578594602494868460375416604051978880926315895f4760e31b82528960048301525afa908115610afc5787968792610ad4575b50604085608481603b54169583519a8b938492631357a41960e11b845233600485015216978860248401528b60448401528660648401525af1968715610a955788908998610aa0575b506040519081527fec68461f5d4cc45c89e914cb8826a966c73dd35e5f97815ece0a01ffa4a025a6853392a2866108dd575b87604051f35b83600493604051948580926370c264df60e11b82525afa928315610a95578893610a5d575b509061090f88939261290b565b8661091e620151808504612d0b565b5061092d848785999499612a16565b96898816156109a6575b5050505050505090501691823b156109a15760405163020da84160e61b8152600481019290925233602483015260448201529082908290606490829084905af180156107bc5761098d575b8080808080806108d7565b61099690612716565b6103ed578038610982565b505050fd5b88969750906109c06109ba6109d0936133e7565b916133e7565b6109c9866133e7565b918761291a565b936109f789603854169460405198899788968795636c1020a160e01b8752600487016129dc565b03925af1918215610a52578692610a18575b50508038808086898280610937565b90809250813d8311610a4b575b610a2f8183612744565b81010312610a4757610a40906127af565b3880610a09565b8480fd5b503d610a25565b6040513d88823e3d90fd5b8480929399508194503d8311610a8e575b610a788183612744565b810103126103e85790518796909161090f610902565b503d610a6e565b6040513d8a823e3d90fd5b9050610ac591975060403d604011610acd575b610abd8183612744565b8101906128f5565b9690386108a5565b503d610ab3565b610af19192503d8089833e610ae98183612744565b81019061286e565b50505050903861085c565b6040513d89823e3d90fd5b50346103ed5760a03660031901126103ed576084356001600160401b0381116107c757366023820112156107c757806004013590610b4482612765565b90610b526040519283612744565b82825260208201906024829460051b8201019036821161150757602401915b818310611ada57505050600435156107df576004358352603d60205260408320546001600160a01b0316156107df57604435151580611acd575b15611abb57600480358452603d602090815260408086205460345460355492516370a0823160e01b81526001600160a01b039384169581019590955290821693929183916024918391165afa908115611a4a578591611a89575b506040516359b6a0c960e01b8152602081600481865afa908115610a52578691611a55575b50612710610c3c602092600494612ae2565b049260405192838092636835185f60e11b82525afa8015611a4a578590611a16575b610c6b9150602435612b00565b11611a04576044906004358452603d602052604060018060a01b038186205416815193848092638905faeb60e01b82526024356004830152823560248301525afa801561034c57849285916119df575b5060643583116119cd57610cd3620151804204612d0b565b9150506001604435106119b957601960001960443501911015611995575b610d0b610d02620151804204612d0b565b93849391612b00565b600181106117c157610d27600c91600019019282840490612b00565b910660011981116117c15792610d6092610d5b926001610d6c960191610d4d8383613326565b80911161198d575b506130cb565b612aca565b62015180420690612b00565b4281106115075762015180610d819104612d0b565b50610d9b610d5b610d9483859995613326565b83896130cb565b906201437019821161156857610dd4196201437083011161156857603b1962015144830111611568576037546040516315895f4760e31b81526004803590820152908990829060249082906001600160a01b03165afa928315611815576004938a928b91611969575b50604051630b90ca9160e11b81529460209186919082906001600160a01b03165afa93841561195e578a94611927575b506201517f0191610e488484600435612a16565b986001600160a01b038a1615611878575b50505050506001600160a01b0385163b156115075760405163020da84160e61b815260048035908201523360248083019190915235604482015286908181606481836001600160a01b038c165af180156107bc57611864575b50508315611852576004358652603e60205260018060a01b036040872054169186602060018060a01b03603654166024604051809481936302c68be360e31b83528960048401525af1908115610a95578891611820575b5060405163313ce56760e01b8152602081600481885afa9081156118155789916117d5575b50600660ff8216106117c1578660001904670de0b6b3a76400001160011661156857604d60ff8281166005190116116117c157610f829060ff9081166005190116600a0a670de0b6b3a76400008802612ae2565b81156117ab576040516323b872dd60e01b6020820152610fbb81610fad8585043033602485016127fc565b03601f198101835282612744565b604051610fc781612729565b602081527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020820152863b15611766578a8083602061103595519101828b5af13d1561175e573d906110198261281e565b916110276040519384612744565b82523d8d602084013e612b20565b805190816116e9575b5050611194938282046000190485118383041515166115685761106b612710868585040204848404612af5565b96805191600183106116d55773b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e6001600160a01b036110a2600019860185612b0c565b5116036116ad578151156116bf5780516001600160a01b03168890036116ad576040518060608101106001600160401b036060830111176116975780606060409201825260028152602036910137603a546001600160a01b0316906001194211611683576040516338ed173960e01b8152600481018b90526000602482015260a06044820152925160a484018190528d928492909160c484019190855b818110611659575050508383809230606483015260014201608483015203925af190811561164e578b91611596575b5061117d916000190190612b0c565b516034549096908a906001600160a01b0316803b156107c75781809160848b6040519485938492636f0372af60e01b84526001600485015273b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e602485015280604485015260648401525af180156107bc5761157e575b505060607f57f3d153693ba34ad2f1603ab743de3caf14b05ffa2fdfae8e9d0947a17c7ca391604051908882526020820152886040820152a18560001904611388118615151661156857856112cd602061124a61157c6113888e9b020484612af5565b604080516127108888048b0204815261157c61138887020460208201529081018290529098907fe59d21244ca3bff81515b705214dab78cc9f978c1939e610874429ffa47380b290606090a160395460405163a9059cbb60e01b81529384929183918d918391906127108c8c048f0204906001600160a01b031660048401612794565b03925af18015610a9557611549575b50602061157c60018060a01b03603454166113888a60018060a01b0360355416956113206040519788968795869463a9059cbb60e01b865202049060048401612794565b03925af18015610afc5761152a575b50603454603c5460405163a9059cbb60e01b81529160209183916001600160a01b039081169183918c91839161136b918e911660048401612794565b03925af18015610afc5761150b575b506035546001600160a01b0316803b156114ef57868091600460405180948193621e432b60e81b83525af1908115610afc5787916114f3575b50506004358652603d60205260408620546001600160a01b031690813b156114ef578660849281956127106040519889978896630aadb77760e01b885260243560048901520402046024850152604435604485015260648401525af19081156105ff5783916114db575b5050603c546001600160a01b0316803b1561062157604483926040519485938492635b97d36760e01b8452600435600485015260248401525af1801561034c576114c7575b60208383604051907f308dab4150a765534b441eef3367b2732d18bfdcd4b5ffe2a7084e1b1699051560043592806114b23394602435604435846040919493926060820195825260208201520152565b0390a36040516001600160a01b039091168152f35b6114d18491612716565b6106215782611462565b6114e490612716565b6107c757813861141d565b8680fd5b6114fc90612716565b6115075785386113b3565b8580fd5b6115239060203d602011610345576103368183612744565b503861137a565b6115429060203d602011610345576103368183612744565b503861132f565b6115619060203d602011610345576103368183612744565b50386112dc565b634e487b7160e01b600052601160045260246000fd5b61158790612716565b6115925789386111e7565b8980fd5b90503d808c833e6115a78183612744565b602082828101031261164a578151906001600160401b03821161164657808301601f8385010112156116465781830151916115e183612765565b936115ef6040519586612744565b8385526020850192810160208560051b8484010101116116425790602081830101925b60208560051b83850101018410611632575061117d935061116e92505050565b8351815260209384019301611612565b8e80fd5b8c80fd5b8b80fd5b6040513d8d823e3d90fd5b9260209194965060019295508190838060a01b0387511681520194019101908f949286949261113f565b634e487b7160e01b8d52601160045260248dfd5b634e487b7160e01b600052604160045260246000fd5b6040516310bc08dd60e01b8152600490fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b8c52601160045260248cfd5b6020806116fa93830101910161277c565b1561170657388061103e565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b606090612b20565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b89526011600452602489fd5b90506020813d60201161180d575b816117f060209383612744565b81010312611809575160ff811681036118095738610f2e565b8880fd5b3d91506117e3565b6040513d8b823e3d90fd5b90506020813d60201161184a575b8161183b60209383612744565b810103126103e8575138610f09565b3d915061182e565b60405163720794bf60e01b8152600490fd5b61186d90612716565b611507578538610eb2565b6020949599509061188e6109ba61189e936133e7565b611897876133e7565b918461291a565b8960018060a01b0360385416926118cf60405197889687958694636c1020a160e01b865260043590600487016129dc565b03925af1908115610a525786916118ed575b50933880808080610e59565b90506020813d60201161191f575b8161190860209383612744565b8101031261150757611919906127af565b386118e1565b3d91506118fb565b9093506020813d602011611956575b8161194360209383612744565b810103126103e85751926201517f610e34565b3d9150611936565b6040513d8c823e3d90fd5b6020935061198191503d808d833e610ae98183612744565b50505092909290610e04565b925038610d55565b600119106119a557604435610cf1565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b86526011600452602486fd5b60405163855e507b60e01b8152600490fd5b90506119fb91925060403d604011610acd57610abd8183612744565b91909138610cbb565b604051637730dc0b60e01b8152600490fd5b506020813d602011611a42575b81611a3060209383612744565b810103126103e857610c6b9051610c5e565b3d9150611a23565b6040513d87823e3d90fd5b90506020813d602011611a81575b81611a7060209383612744565b810103126103e85751612710610c2a565b3d9150611a63565b90506020813d602011611ab3575b81611aa460209383612744565b810103126103e8575138610c05565b3d9150611a97565b6040516307aaabcb60e21b8152600490fd5b5060036044351115610bab565b82356001600160a01b03811681036103e857815260209283019201610b71565b50346103ed5760603660031901126103ed57611b146126aa565b90611b1d6126c0565b60375460443593906001600160a01b039081163303611b8b578415611b775783946104329452603e602052604085209060018060a01b03199181851683825416179055603d60205260408620921690825416179055612b64565b634e487b7160e01b84526001600452602484fd5b604051632b29402d60e21b8152600490fd5b50346103ed57806003193601126103ed576039546040516001600160a01b039091168152602090f35b50346103ed5760203660031901126103ed57611be06126aa565b60018060a01b0390611bf982845460101c1633146127c3565b1660018060a01b03196037541617603755604051f35b50346103ed57611c1e366126ec565b82156107df57828452603d60205260408420546001600160a01b03908116156107df5781156106365780859160395416803b15610621576040516316858d7960e21b8152600481018790526001600160a01b0386166024820152604481018590523360648201529083908290608490829084905af19081156105ff578391611d96575b50859052603d60205280604083205416803b15610621576040516301733ea560e41b81526001600160a01b0386166004820152602481018590523360448201529083908290606490829084905af19081156105ff578391611d82575b505060355416803b156107c757818091604460405180948193630dfa376d60e01b83528160048401528860248401525af180156107bc57611d6e575b50506107a07f2dbdab27a2d16e827c458789b39587a960ef326f381f784ffa198426f367519791604051918291339583612794565b611d7790612716565b610632578338611d39565b611d8b90612716565b6107c7578138611cfd565b611d9f90612716565b6107c7578138611ca1565b50346103ed5760203660031901126103ed57611dc46126aa565b60018060a01b0390611ddd82845460101c1633146127c3565b1660018060a01b03196038541617603855604051f35b50346103ed5760203660031901126103ed57610432611e106126aa565b611e2760018060a01b03845460101c1633146127c3565b612b64565b50346103ed576020806003193601126107c75760043590811561063657603554604051636d40d7d760e11b8152600481018490523360248201529082908290604490829088906001600160a01b03165af1801561034c57611eb9575b507fc2c3f06e49b9f15e7b4af9055e183b0d73362e033ad82a07dec9bf9840171719906040519283523392a2604051f35b8190813d8311611edc575b611ece8183612744565b810103126103e85738611e88565b503d611ec4565b50346103ed57806003193601126103ed575460405160109190911c6001600160a01b03168152602090f35b50346103ed57806003193601126103ed57602060405173b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e8152f35b50346103ed57806003193601126103ed5780546001600160a01b0390611f699060101c821633146127c3565b6000546000604051928260101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a362010000600160b01b031916600055f35b50346103ed57806003193601126103ed576037546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed576035546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed576038546040516001600160a01b039091168152602090f35b50346103ed57612036366126d6565b81156107df57818352603d602090815260408420546001600160a01b03908116156107df57821561063657838552603d82526040808620549051630a43eeed60e11b8152600481018590523360248201528692918216848260448187855af1801561034c578591879161217b575b6120cd9350846035541690866040518096819582946323b872dd60e01b845233600485016127fc565b03925af180156105ff5761215e575b5060355416803b156107c757818091604460405180948193630dfa376d60e01b8352600160048401528960248401525af180156107bc5761214a575b50507f6ed71e479f5286ad6192bfdc2b224afa6073276d8f9a0e5028400f589fbb39cc906040519283523392a3604051f35b61215390612716565b610632578338612118565b61217490843d8611610345576103368183612744565b50386120dc565b91905082813d83116121af575b6121928183612744565b81010312610632578585916121a96120cd946127af565b506120a4565b503d612188565b50346103ed5760203660031901126103ed576121d06126aa565b60018060a01b03906121e982845460101c1633146127c3565b1660018060a01b0319603a541617603a55604051f35b50346103ed57806003193601126103ed57603b546040516001600160a01b039091168152602090f35b50346103ed57806003193601126103ed57603c546040516001600160a01b039091168152602090f35b50346103ed5760203660031901126103ed5761226b6126aa565b60018060a01b039061228482845460101c1633146127c3565b1660018060a01b03196039541617603955604051f35b50346103ed576122a9366126d6565b81156107df57818352603d602090815260408420546001600160a01b0391908216156107df57821561063657838552603d81526040808620549051630a43eeed60e11b8152600481018590523060248201529083169082816044818a865af1908115610afc5785849189936124be575b5061234392938660355416908a6040518096819582946323b872dd60e01b845233600485016127fc565b03925af18015610afc576124a1575b50858360355416803b156107c7578190604460405180948193630dfa376d60e01b8352600160048401528a60248401525af18015610afc5761248e575b50826039541692833b156114ef57604051635a12fc9360e11b8152600481018790526001600160a01b03831660248201526044810186905233606482015293879081908690608490829084905af1948515610625578695612475575b50918184936124169693603954169160405180988196829563a9059cbb60e01b845260048401612794565b0393165af1918215611a4a577f1e54d7530dad81af38adb8ca9db02add3130668375f37be85396403616fc3d4992612458575b506040519283523392a3604051f35b61246e90823d8411610345576103368183612744565b5038612449565b61248191929550612716565b61150757839286386123eb565b61249a90969196612716565b943861238f565b6124b790833d8511610345576103368183612744565b5038612352565b92505081813d83116124f1575b6124d58183612744565b810103126114ef5782856124eb612343936127af565b92612319565b503d6124cb565b50346103ed5760203660031901126103ed576125126126aa565b60018060a01b039061252b82845460101c1633146127c3565b1660018060a01b0319603b541617603b55604051f35b50346103ed57602090816003193601126103ed57600480358252603d83526040808320549051634e75827160e01b81526001600160a01b0392909185918391829086165afa9283156125d957809361259f575b505060405191168152f35b909192508382813d83116125d2575b6125b88183612744565b810103126103ed57506125ca906127af565b903880612594565b503d6125ae565b604051903d90823e3d90fd5b50346103ed5760203660031901126103ed576125ff6126aa565b60018060a01b039061261882845460101c1633146127c3565b1660018060a01b03196036541617603655604051f35b50346103ed5760203660031901126103ed576020906004358152603d8252604060018060a01b0391205416604051908152f35b50346103ed5760203660031901126103ed5761267b6126aa565b60018060a01b039061269482845460101c1633146127c3565b1660018060a01b03196035541617603555604051f35b600435906001600160a01b03821682036103e857565b602435906001600160a01b03821682036103e857565b60409060031901126103e8576004359060243590565b60609060031901126103e857600435906024356001600160a01b03811681036103e8579060443590565b6001600160401b03811161169757604052565b604081019081106001600160401b0382111761169757604052565b90601f801991011681019081106001600160401b0382111761169757604052565b6001600160401b0381116116975760051b60200190565b908160209103126103e8575180151581036103e85790565b6001600160a01b039091168152602081019190915260400190565b51906001600160a01b03821682036103e857565b156127ca57565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b6001600160a01b03918216815291166020820152604081019190915260600190565b6001600160401b03811161169757601f01601f191660200190565b918091926000905b828210612859575011612852575050565b6000910152565b91508060209183015181860152018291612841565b9060a0828203126103e85781516001600160401b0381116103e857820181601f820112156103e85780516128a18161281e565b926128af6040519485612744565b818452602082840101116103e8576128cd9160208085019101612839565b916128da602083016127af565b916128e7604082016127af565b916080606083015192015190565b91908260409103126103e8576020825192015190565b60001981146115685760010190565b60279194936129b5936040519687936243522d60e81b6020860152612949815180926020602389019101612839565b840190602d60f81b9182602382015261296c825180936020602485019101612839565b01906024820152612987825180936020602585019101612839565b01612d4760f01b60258201526129a68251809360208785019101612839565b01036007810185520183612744565b565b906020916129d081518092818552858086019101612839565b601f01601f1916010190565b916080936129f9612a0c939897969860a0865260a08601906129b7565b91602085015283820360408501526129b7565b9460608201520152565b916040519160208301938452604083015260608201526060815260808101918183106001600160401b038411176116975782602481602093816040528551902060018060a01b036038541690631620909560e01b835260848701525afa908115612abe57600091612a88575b50905090565b602090813d8111612ab7575b612a9e8186612744565b810103126103ed5750612ab0906127af565b8038612a82565b503d612a94565b6040513d6000823e3d90fd5b62015180908060001904821181151516611568570290565b8060001904821181151516611568570290565b818110611568570390565b81198111611568570190565b80518210156116bf5760209160051b010190565b90919015612b2c575090565b815115612b3c5750805190602001fd5b60405162461bcd60e51b815260206004820152908190612b609060248301906129b7565b0390fd5b603a546001600160a01b0391908216908115612bc95760446020926000604051958694859363095ea7b360e01b8552600485015282196024850152165af18015612abe57612baf5750565b612bc69060203d8111610345576103368183612744565b50565b6040516307bb995d60e41b8152600490fd5b15612be257565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6000811280156001600160ff1b0383900384131661156857600160ff1b829003831216611568570190565b6105b560008083136001600160ff1b03849004831116600116612cb65760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa884128285121616612cb657500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b01811260011661156857600d190190565b600082128015600160ff1b8401831216611568576001600160ff1b038301821316611568570390565b6000916001600160ff1b039162010bd9908481128185038115818513166130b757600160ff1b9383850392838212166130a35787908401129162010bd819908162253d8c930183138415166117c1570113166119a557622649650193600193600491858783048411828913161661309057808712600760fd1b88121686166130905762023ab196878160021b0597878985048211848b13161661306a57877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b12161661306a57880282811281850360031381151661307d578187036003121661306a5790846003612e0293010590612ce2565b92818412848403881381151661301e5784860388121661300b57868401610fa0888286048211858413161661303157887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8312858412161661303157612e7b9162164b099102059482612e7487612c66565b0590612ce2565b828112818503601f1381151661303157818703601f121661301e57601f019680888504605011848a13161661301e57807ffe666666666666666666666666666666666666666666666666666666666666678912848a12161661301e5761098f9788816050020590828287048b1186841316166130575784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c16166130445790605083612f3093020590612ce2565b98600b82059782870360021382151661304457829003600212166130315781878604600c11858913161661303157817ff5555555555555555555555555555555555555555555555555555555555555568812858912161661303157612f9c90600288600c029101612ce2565b986031600160ff1b018112821661303157819060301901809504606411848613161661301e577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98412838512161661300b575050613006929161300191606402612c3b565b612c3b565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b9291926107b281106103e857600191617d4b600160ff1b0185128316611568576000918281128015926001600160ff1b03929182840391906112c083811387166130a357600160ff1b8590039081811283166117c15761314898999a9b6131599161314d60049b8c92600c61313f8a612cca565b05908b01612c3b565b612c66565b0590617d4a1901612c3b565b6002600160ff1b0184128b1661331357600c61317485612cca565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c83131616613300578b7ff55555555555555555555555555555555555555555555555555555555555555682128c83121616613300576131e090600c026001198601612ce2565b61016f8c828a0482118d841316166132ed578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d841216166132ed5761322f9291600c91020590612c3b565b96611324948513166132da578312166132c7578792606492600c61325561325d94612cca565b059101612c3b565b05809204600311858313161661303157847fd555555555555555555555555555555555555555555555555555555555555556821285831216166130315790826132aa926003020590612ce2565b9262253d8c600160ff1b0184121661300b57505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b906001811480156133dd575b80156133d3575b80156133c9575b80156133bf575b80156133b5575b80156133ab575b15613361575050601f90565b60021461336e5750601e90565b6003811615908161339e575b8115613391575b501561338c57601d90565b601c90565b6101909150061538613381565b606481061515915061337a565b50600c8114613355565b50600a811461334e565b5060088114613347565b5060078114613340565b5060058114613339565b5060038114613332565b801561348c57600081805b61347857506134008161281e565b9061340e6040519283612744565b808252601f1961341d8261281e565b013660208401375b8083156134715760018110611568576000190192600a918282066030811981116115685785518710156116bf570160f81b6001600160f81b03191660001a908401601f01530491613425565b5050905090565b90613484600a9161290b565b9104806133f2565b5060405161349981612729565b60018152600360fc1b602082015290565b6000549060018060a01b03808216908360101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a362010000600160b01b031990911660109190911b62010000600160b01b03161760005556fea2646970667358221220973768f41b17069b7fd01337affac66c0f4cb9c2e3a995db075f5232f859f03764736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)",
    "kind": "dev",
    "methods": {
      "approvePoolToken(address)": {
        "params": {
          "_token": "Address of the approved token"
        }
      },
      "buyCover(uint256,uint256,uint256,uint256,address[])": {
        "params": {
          "_coverAmount": "Amount to cover",
          "_coverDuration": "Cover duration in month (1 ~ 3)",
          "_maxPayment": "Maximum payment user can accept",
          "_poolId": "Pool id"
        },
        "returns": {
          "_0": "crToken CR token address"
        }
      },
      "claimPayout(uint256,address,uint256)": {
        "params": {
          "_crToken": "Cover right token address",
          "_generation": "Generation of the priority pool",
          "_poolId": "Pool id"
        }
      },
      "currentLPAddress(uint256)": {
        "params": {
          "_poolId": "Priority Pool ID"
        },
        "returns": {
          "lpAddress": "Current LP token address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideLiquidity(uint256)": {
        "params": {
          "_amount": "Amount of liquidity(shield) to provide"
        }
      },
      "removeLiquidity(uint256)": {
        "params": {
          "_amount": "Amount of liquidity to provide"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stakeLiquidity(uint256,uint256)": {
        "params": {
          "_amount": "Amount of PRO-LP tokens to stake",
          "_poolId": "Pool id"
        }
      },
      "stakeLiquidityWithoutFarming(uint256,uint256)": {
        "params": {
          "_amount": "Amount of PRO-LP amount",
          "_poolId": "Pool id"
        }
      },
      "storePoolInformation(address,address,uint256)": {
        "params": {
          "_pool": "Address of the priority pool",
          "_poolId": "Pool id",
          "_token": "Address of the priority pool's native token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstakeLiquidity(uint256,address,uint256)": {
        "params": {
          "_amount": "Amount of LP(priority lp) tokens to withdraw",
          "_poolId": "Pool id",
          "_priorityLP": "Priority lp token address to withdraw"
        }
      },
      "unstakeLiquidityWithoutFarming(uint256,address,uint256)": {
        "params": {
          "_amount": "PRI-LP token amount to remove",
          "_poolId": "Pool id",
          "_priorityLP": "PRI-LP token address"
        }
      }
    },
    "title": "Policy Center",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approvePoolToken(address)": {
        "notice": "Approve the exchange to swap tokens"
      },
      "buyCover(uint256,uint256,uint256,uint256,address[])": {
        "notice": "Buy new cover for a given pool         Select a pool with parameter \"poolId\"         Cover amount is in shield and duration is in month         The premium ratio may be dynamic so \"maxPayment\" is similar to \"slippage\""
      },
      "claimPayout(uint256,address,uint256)": {
        "notice": "Claim payout         Need to use a specific crToken address as parameter"
      },
      "currentLPAddress(uint256)": {
        "notice": "Returns the current LP address for a Pool ID"
      },
      "provideLiquidity(uint256)": {
        "notice": "Provide liquidity to Protection Pool"
      },
      "removeLiquidity(uint256)": {
        "notice": "Remove liquidity from protection pool"
      },
      "stakeLiquidity(uint256,uint256)": {
        "notice": "Stake Protection Pool LP (PRO-LP) into priority pools         And automatically stake the PRI-LP tokens into weighted farming pool         With this function, no need for approval of PRI-LP tokens         If you want to hold the PRI-LP tokens for other usage         Call \"stakeLiquidityWithoutFarming\""
      },
      "stakeLiquidityWithoutFarming(uint256,uint256)": {
        "notice": "Stake liquidity to priority pool without depositing into farming"
      },
      "storePoolInformation(address,address,uint256)": {
        "notice": "Store new pool information"
      },
      "unstakeLiquidity(uint256,address,uint256)": {
        "notice": "Unstake Protection Pool LP from priority pools         There may be different generations of priority lp tokens         This function will first remove the PRI-LP token from farming pool         Ensure that your PRI-LP tokens are inside the farming pool         If the PRI-LP tokens are in your own wallet, use \"unstakeLiquidityWithoutFarming\""
      },
      "unstakeLiquidityWithoutFarming(uint256,address,uint256)": {
        "notice": "Unstake liquidity without removing PRI-LP from farming"
      }
    },
    "notice": "This is the policy center for degis Protocol Protection         Users can buy policies and get payoff here         Sellers can provide liquidity and choose the pools to cover",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 55,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 15695,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15802,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5954,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "deg",
        "offset": 0,
        "slot": "50",
        "type": "t_contract(IDegisToken)6081"
      },
      {
        "astId": 5957,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "veDeg",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IVeDEG)7238"
      },
      {
        "astId": 5960,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "shield",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IShield)7193"
      },
      {
        "astId": 5106,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "protectionPool",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 5108,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priceGetter",
        "offset": 0,
        "slot": "54",
        "type": "t_address"
      },
      {
        "astId": 5110,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 5112,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "coverRightTokenFactory",
        "offset": 0,
        "slot": "56",
        "type": "t_address"
      },
      {
        "astId": 5114,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "weightedFarmingPool",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 5116,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "exchange",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      },
      {
        "astId": 5118,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "payoutPool",
        "offset": 0,
        "slot": "59",
        "type": "t_address"
      },
      {
        "astId": 5120,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "treasury",
        "offset": 0,
        "slot": "60",
        "type": "t_address"
      },
      {
        "astId": 3646,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "priorityPools",
        "offset": 0,
        "slot": "61",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3650,
        "contract": "src/core/PolicyCenter.sol:PolicyCenter",
        "label": "tokenByPoolId",
        "offset": 0,
        "slot": "62",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDegisToken)6081": {
        "encoding": "inplace",
        "label": "contract IDegisToken",
        "numberOfBytes": "20"
      },
      "t_contract(IShield)7193": {
        "encoding": "inplace",
        "label": "contract IShield",
        "numberOfBytes": "20"
      },
      "t_contract(IVeDEG)7238": {
        "encoding": "inplace",
        "label": "contract IVeDEG",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}