{
  "address": "0xa748570D43d061c985864e997a32936880E7e684",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veDeg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_shield",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__AlreadyDynamicPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__NotOwnerOrFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__OnlyExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__OnlyIncidentReportOrExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__OnlyOwnerOrExecutor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__OnlyPolicyCenter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__OnlyPriorityPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__PoolNotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__TokenAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriorityPoolFactory__WrongLPToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dynamicPoolCounter",
          "type": "uint256"
        }
      ],
      "name": "DynamicPoolUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalMaxCapacity",
          "type": "uint256"
        }
      ],
      "name": "MaxCapacityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basePremiumRatio",
          "type": "uint256"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_protocolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_basePremiumRatio",
          "type": "uint256"
        }
      ],
      "name": "deployPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dynamic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dynamicPoolCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolAddressList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "protocolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "basePremiumRatio",
              "type": "uint256"
            }
          ],
          "internalType": "struct PriorityPoolFactory.PoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pausePriorityPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolAddressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "protocolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "protocolToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxCapacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basePremiumRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incidentReport",
          "type": "address"
        }
      ],
      "name": "setIncidentReport",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payoutPool",
          "type": "address"
        }
      ],
      "name": "setPayoutPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        }
      ],
      "name": "setPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_premiumRewardPool",
          "type": "address"
        }
      ],
      "name": "setPremiumRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protectionPool",
          "type": "address"
        }
      ],
      "name": "setProtectionPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weightedFarmingPool",
          "type": "address"
        }
      ],
      "name": "setWeightedFarmingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMaxCapacity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "updateDynamicPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isUp",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_diff",
          "type": "uint256"
        }
      ],
      "name": "updateMaxCapaity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f73bcbef7848b38553dcea373f260a49298d5609d942302e83276a3a04baa6d",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xa748570D43d061c985864e997a32936880E7e684",
    "transactionIndex": 0,
    "gasUsed": "5495590",
    "logsBloom": "0x
    "blockHash": "0x84687690a49e12c73b1002ea7385b1f16c8fe9d51581615cec9fa8ac2197fa0d",
    "transactionHash": "0x3f73bcbef7848b38553dcea373f260a49298d5609d942302e83276a3a04baa6d",
    "logs": [],
    "blockNumber": 13177617,
    "cumulativeGasUsed": "5495590",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA19329481A6f1Bd765e65a1Df5085438657aD15e",
    "0xCe9819C1dD7D315C0B25dF8a38321e33ade9401E",
    "0xd97FC6E67C4a2195be6c54B5a459DaC4DD795Ab3",
    "0x0Aa1BeD84f4B1c60A6C1F7Cb8055cc7F232d4a1E"
  ],
  "numDeployments": 2,
  "solcInputHash": "6f21418f71e57af3298e19e94a630568",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veDeg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__AlreadyDynamicPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__NotOwnerOrFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__OnlyExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__OnlyIncidentReportOrExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__OnlyOwnerOrExecutor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__OnlyPolicyCenter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__OnlyPriorityPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__PoolNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__TokenAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriorityPoolFactory__WrongLPToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dynamicPoolCounter\",\"type\":\"uint256\"}],\"name\":\"DynamicPoolUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMaxCapacity\",\"type\":\"uint256\"}],\"name\":\"MaxCapacityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_protocolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basePremiumRatio\",\"type\":\"uint256\"}],\"name\":\"deployPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dynamic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicPoolCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct PriorityPoolFactory.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pausePriorityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"protocolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePremiumRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incidentReport\",\"type\":\"address\"}],\"name\":\"setIncidentReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payoutPool\",\"type\":\"address\"}],\"name\":\"setPayoutPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"}],\"name\":\"setPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_premiumRewardPool\",\"type\":\"address\"}],\"name\":\"setPremiumRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protectionPool\",\"type\":\"address\"}],\"name\":\"setProtectionPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weightedFarmingPool\",\"type\":\"address\"}],\"name\":\"setWeightedFarmingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMaxCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"updateDynamicPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isUp\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_diff\",\"type\":\"uint256\"}],\"name\":\"updateMaxCapaity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Eric Lee (ylikp.ust@gmail.com)\",\"kind\":\"dev\",\"methods\":{\"deployPool(string,address,uint256,uint256)\":{\"params\":{\"_basePremiumRatio\":\"Initial policy price per shield\",\"_maxCapacity\":\"Maximum capacity of the pool\",\"_name\":\"Name of the protocol\",\"_protocolToken\":\"Address of the token used for the protocol\"},\"returns\":{\"_0\":\"address Address of the new insurance pool\"}},\"getPoolAddressList()\":{\"returns\":{\"_0\":\"List of pool addresses\"}},\"getPoolInfo(uint256)\":{\"params\":{\"_poolId\":\"Pool id\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDynamicPool(uint256)\":{\"params\":{\"_poolId\":\"Pool id\"}}},\"title\":\"Insurance Pool Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployPool(string,address,uint256,uint256)\":{\"notice\":\"Create a new priority pool         Called by executor when an onboard proposal has passed\"},\"getPoolAddressList()\":{\"notice\":\"Get the pool address list\"},\"getPoolInfo(uint256)\":{\"notice\":\"Get the pool information by pool id\"},\"updateDynamicPool(uint256)\":{\"notice\":\"Update a priority pool status to dynamic         Only sent from priority pool         \\\"Dynamic\\\" means:                  The priority pool will be counted in the dynamic premium formula\"}},\"notice\":\"This is the factory contract for deploying new insurance pools         Each pool represents a project that has joined Degis Protocol Protection         Liquidity providers of Protection Pool can stake their LP tokens into priority pools         Benefit:             - Share the 45% part of the premium income (in native token form)         Risk:             - Will be liquidated first to pay for the claim amount\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/pools/priorityPool/PriorityPoolFactory.sol\":\"PriorityPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632333436363131383938\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/interfaces/CommonDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract CommonDependencies {\\n    uint256 internal constant SCALE = 1e12;\\n}\\n\",\"keccak256\":\"0x0b0bd779fda3629bfc0f8123f333bd55fc88972c612cd3b9f035b954b520d69f\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/ExternalTokenDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IVeDEG.sol\\\";\\nimport \\\"./IDegisToken.sol\\\";\\nimport \\\"./IShield.sol\\\";\\nimport \\\"./CommonDependencies.sol\\\";\\n\\n/**\\n * @notice External token dependencies\\n *         Include the tokens that are not deployed by this repo\\n *         DEG, veDEG & SHIELD\\n *         They are set as immutable\\n */\\nabstract contract ExternalTokenDependencies is CommonDependencies {\\n    IDegisToken immutable deg;\\n    IVeDEG immutable veDeg;\\n    IShield immutable shield;\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield\\n    ) {\\n        deg = IDegisToken(_deg);\\n        veDeg = IVeDEG(_veDeg);\\n        shield = IShield(_shield);\\n    }\\n}\\n\",\"keccak256\":\"0xf874fda53458f9b97a9f1bf3b67d154f8b7b0a9e5414f5f304fab5ea8df8c682\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IDegisToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IDegisToken is SimpleIERC20 {\\n    // Mint degis token\\n    function mintDegis(address _account, uint256 _amount) external;\\n\\n    // Burn degis token\\n    function burnDegis(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xc2d17e329f02f1f34aacd39729db66b45f8b40e0175a772830ff92419fe5252e\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IPriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPool {\\n    //\\n\\n    function insuredToken() external view returns (address);\\n\\n    function pausePriorityPool(bool _paused) external;\\n\\n    function setCoverIndex(uint256 _newIndex) external;\\n\\n    function minAssetRequirement() external view returns (uint256);\\n\\n    function activeCovered() external view returns (uint256);\\n\\n    function currentLPAddress() external view returns (address);\\n\\n    function liquidatePool(uint256 amount) external;\\n\\n    function generation() external view returns (uint256);\\n\\n    function crTokenAddress(uint256 generation) external view returns (address);\\n\\n    function poolInfo()\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external;\\n\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (address);\\n\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external;\\n\\n    function coverPrice(uint256 _amount, uint256 _length)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function coverIndex() external view returns (uint256);\\n\\n    function paused() external view returns (bool);\\n\\n    function basePremiumRatio() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x83e5056ae9508747e92dae0a557430c5f187ef4fcb689a8c1ea5c675c0e063cf\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IShield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\ninterface IShield is SimpleIERC20 {\\n    function deposit(\\n        uint256 _type,\\n        address _stablecoin,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x22e4fc4218ad0df35d3a7c982296a7fdae6c502d5cf77a7e8d26155e7061cbe1\",\"license\":\"GPL-3.0-or-later\"},\"src/interfaces/IVeDEG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../pools/SimpleIERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the VeDEG\\n */\\ninterface IVeDEG is SimpleIERC20 {\\n    // Get the locked amount of a user's veDeg\\n    function locked(address _user) external view returns (uint256);\\n\\n    // Lock veDEG\\n    function lockVeDEG(address _to, uint256 _amount) external;\\n\\n    // Unlock veDEG\\n    function unlockVeDEG(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x105e977446b6560631149337a4c53822e06e1d38b89036e5cf2f9c89b3a8b19b\",\"license\":\"MIT\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/libraries/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nlibrary StringUtils {\\n    function _toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x3b775a5710bb0d859cecdd99277a789e642853062ceef6dbaa187ca4a7a4164e\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/SimpleERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract SimpleERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public constant decimals = 6;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max)\\n            allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x243a2a4023d4d37a7a8e66500c0705e6f6f0929d1ef6f813e6d7fe4bdca4dd98\",\"license\":\"MIT\"},\"src/pools/SimpleIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\ninterface SimpleIERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x93ccdbce4fcd2d86096e6ad8b10a06757d600a70a4eb660281238a4ef1d6be7f\",\"license\":\"MIT\"},\"src/pools/priorityPool/PriorityPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../util/PausableWithoutContext.sol\\\";\\n\\nimport \\\"./PriorityPoolDependencies.sol\\\";\\nimport \\\"./PriorityPoolEventError.sol\\\";\\nimport \\\"./PriorityPoolToken.sol\\\";\\n\\nimport \\\"../../libraries/DateTime.sol\\\";\\nimport \\\"../../libraries/StringUtils.sol\\\";\\n\\n/**\\n * @title Insurance Pool (for single project)\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com) & Primata (primata@375labs.org)\\n *\\n * @notice Priority pool is used for protecting a specific project\\n *         Each priority pool has a maxCapacity (0 ~ 10,000 <=> 0 ~ 100%) that it can cover\\n *\\n *         When liquidity providers join a priority pool,\\n *         they need to transfer their RP_LP token to this insurance pool.\\n *\\n *         After that, they can share the 45% percent native token reward of this pool.\\n *         At the same time, that also means these liquidity will be first liquidated,\\n *         when there is an incident happened for this project.\\n *\\n *         For liquidation process, the pool will first redeem Shield from protectionPool with the staked RP_LP tokens.\\n *         If that is enough, no more redeeming.\\n *         If still need some liquidity to cover, it will directly transfer part of the protectionPool assets to users.\\n *\\n *         Most of the functions need to be called through Policy Center:\\n *             1) When buying new covers: updateWhenBuy\\n *             2) When staking liquidity: stakedLiquidity\\n *             3) When unstaking liquidity: unstakedLiquidity\\n *             4)\\n *\\n */\\ncontract PriorityPool is\\n    PriorityPoolEventError,\\n    PausableWithoutContext,\\n    PriorityPoolDependencies\\n{\\n    using StringUtils for uint256;\\n    using DateTimeLibrary for uint256;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constants **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Mininum cover amount 10U\\n    uint256 internal constant MIN_COVER_AMOUNT = 10e6;\\n\\n    // Max time length in months of granted protection\\n    uint256 internal immutable maxLength;\\n\\n    // Min time length in days\\n    uint256 internal immutable minLength;\\n\\n    address internal immutable owner;\\n\\n    // Base premium ratio (max 10000) (260 means 2.6% annually)\\n    uint256 public immutable basePremiumRatio;\\n\\n    // Pool id set when deployed\\n    uint256 public immutable poolId;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Pool name\\n    string public poolName;\\n\\n    // Every time there is a report and liquidation, generation += 1\\n    uint256 public generation;\\n\\n    // Address of insured token\\n    address public insuredToken;\\n\\n    // Max amount of bought protection in shield\\n    uint256 public maxCapacity;\\n\\n    // Timestamp of pool creation\\n    uint256 public startTime;\\n\\n    // Index for cover amount\\n    uint256 public coverIndex;\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) public coverInMonth;\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) public rewardSpeed;\\n\\n    // Has already passed the base premium ratio period\\n    bool internal passedBasePeriod;\\n\\n    // Generation => crToken address\\n    mapping(uint256 => address) public crTokenAddress;\\n\\n    // Generation => lp token address\\n    mapping(uint256 => address) public lpTokenAddress;\\n\\n    // Address => Whether is LP address\\n    mapping(address => bool) internal isLPToken;\\n\\n    // Generation => Price of lp tokens\\n    // PRI-LP token amount * Price Index = PRO-LP token amount\\n    mapping(address => uint256) public priceIndex;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        uint256 _poolId,\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _baseRatio,\\n        address _owner,\\n        address _weightedFarmingPool,\\n        address _protectionPool,\\n        address _policyCenter,\\n        address _payoutPool\\n    ) {\\n        owner = _owner;\\n\\n        poolId = _poolId;\\n        poolName = _name;\\n\\n        insuredToken = _protocolToken;\\n        maxCapacity = _maxCapacity;\\n        startTime = block.timestamp;\\n\\n        basePremiumRatio = _baseRatio;\\n\\n        // TODO: change length\\n        maxLength = 3;\\n        minLength = 1;\\n\\n        // Generation 1, price starts from 1 (SCALE)\\n        priceIndex[_deployNewGenerationLP(_weightedFarmingPool)] = SCALE;\\n\\n        coverIndex = 10000;\\n\\n        priorityPoolFactory = msg.sender;\\n        weightedFarmingPool = _weightedFarmingPool;\\n        protectionPool = _protectionPool;\\n        policyCenter = _policyCenter;\\n        payoutPool = _payoutPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    modifier onlyExecutor() {\\n        if (msg.sender != IPriorityPoolFactory(priorityPoolFactory).executor())\\n            revert PriorityPool__OnlyExecutor();\\n        _;\\n    }\\n\\n    modifier onlyPolicyCenter() {\\n        if (msg.sender != policyCenter) revert PriorityPool__OnlyPolicyCenter();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the current generation PRI-LP token address\\n     *\\n     * @return lpAddress Current pri-lp address\\n     */\\n    function currentLPAddress() public view returns (address) {\\n        return lpTokenAddress[generation];\\n    }\\n\\n    /**\\n     * @notice Cost to buy a cover for a given period of time and amount of tokens\\n     *\\n     * @param _amount        Amount being covered (Shield)\\n     * @param _coverDuration Cover length in month\\n     */\\n    function coverPrice(uint256 _amount, uint256 _coverDuration)\\n        external\\n        view\\n        returns (uint256 price, uint256 length)\\n    {\\n        require(_amount >= MIN_COVER_AMOUNT, \\\"Under minimum cover amount\\\");\\n\\n        // Dynamic premium ratio (annually)\\n        uint256 dynamicRatio = dynamicPremiumRatio(_amount);\\n\\n        //@audit Rerurn value order change\\n        (uint256 endTimestamp, , ) = DateTimeLibrary._getExpiry(\\n            block.timestamp,\\n            _coverDuration\\n        );\\n\\n        // Length in second\\n        length = endTimestamp - block.timestamp;\\n\\n        // Price depends on the real timestamp length\\n        price = (dynamicRatio * _amount * length) / (SECONDS_PER_YEAR * 10000);\\n    }\\n\\n    /**\\n     * @notice Get current active cover amount\\n     *         Active cover amount = sum of the nearest 3 months' covers\\n     *\\n     * @return covered Total active cover amount\\n     */\\n    function activeCovered() public view returns (uint256 covered) {\\n        (uint256 currentYear, uint256 currentMonth, ) = block\\n            .timestamp\\n            .timestampToDate();\\n\\n        // Only count the latest 3 months\\n        for (uint256 i; i < 3; ) {\\n            covered += coverInMonth[currentYear][currentMonth];\\n\\n            unchecked {\\n                if (++currentMonth > 12) {\\n                    ++currentYear;\\n                    currentMonth = 1;\\n                }\\n\\n                ++i;\\n            }\\n        }\\n\\n        covered = (covered * coverIndex) / 10000;\\n    }\\n\\n    /**\\n     * @notice Current minimum asset requirement for Protection Pool\\n     *         Min requirement * capacity ratio = active covered\\n     *\\n     *         Total assets in protection pool should be larger than any of the \\\"minAssetRequirement\\\"\\n     *         Or the cover index would be cut\\n     */\\n    function minAssetRequirement() public view returns (uint256) {\\n        return (activeCovered() * 10000) / maxCapacity;\\n    }\\n\\n    /**\\n     * @notice Get the dynamic premium ratio (annually)\\n     *         Depends on the covers sold and liquidity amount in all dynamic priority pools\\n     *         For the first 7 days, use the base premium ratio\\n     *\\n     * @param _coverAmount New cover amount (shield) being bought\\n     *\\n     * @return ratio The dynamic ratio\\n     */\\n    function dynamicPremiumRatio(uint256 _coverAmount)\\n        public\\n        view\\n        returns (uint256 ratio)\\n    {\\n        // Time passed since this pool started\\n        uint256 fromStart = block.timestamp - startTime;\\n\\n        // First 7 days use base ratio\\n        // Then use dynamic ratio\\n        if (fromStart > 7 days) {\\n            // Covered ratio = Covered amount of this pool / Total covered amount\\n            uint256 coveredRatio = ((activeCovered() + _coverAmount) * SCALE) /\\n                (IProtectionPool(protectionPool).getTotalCovered() +\\n                    _coverAmount);\\n\\n            address lp = currentLPAddress();\\n            // LP Token ratio = LP token in this pool / Total lp token\\n            uint256 tokenRatio = (SimpleERC20(lp).totalSupply() * SCALE) /\\n                SimpleERC20(protectionPool).totalSupply();\\n\\n            // Total dynamic pools\\n            uint256 numofPools = IPriorityPoolFactory(priorityPoolFactory)\\n                .dynamicPoolCounter();\\n\\n            // Dynamic premium ratio\\n            // ( N = total dynamic pools \\u2264 total pools )\\n            //\\n            //                      Covered          1\\n            //                   --------------- + -----\\n            //                    TotalCovered       N\\n            // dynamic ratio =  -------------------------- * base ratio\\n            //                      LP Amount         1\\n            //                  ----------------- + -----\\n            //                   Total LP Amount      N\\n            //\\n            ratio =\\n                (basePremiumRatio * (coveredRatio * numofPools + SCALE)) /\\n                ((tokenRatio * numofPools) + SCALE);\\n        } else {\\n            ratio = basePremiumRatio;\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set the max capacity of this priority pool manually\\n     *         Only owner set this function on a monthly / quaterly base\\n     *\\n     * @param _isUp        Whether it should increase the capacity\\n     * @param _maxCapacity New max capacity of this pool\\n     */\\n    function setMaxCapacity(bool _isUp, uint256 _maxCapacity) external {\\n        require(msg.sender == owner);\\n\\n        maxCapacity = _maxCapacity;\\n\\n        uint256 diff;\\n        if (_isUp) {\\n            diff = _maxCapacity - maxCapacity;\\n        } else {\\n            diff = maxCapacity - _maxCapacity;\\n        }\\n\\n        IPriorityPoolFactory(priorityPoolFactory).updateMaxCapacity(\\n            _isUp,\\n            diff\\n        );\\n    }\\n\\n    /**\\n     * @notice Set the cover index of this priority pool\\n     *         Only called from protection pool\\n     *\\n     * @param _newIndex New cover index\\n     */\\n    function setCoverIndex(uint256 _newIndex) external {\\n        require(msg.sender == protectionPool, \\\"Only protection pool\\\");\\n\\n        emit CoverIndexChanged(coverIndex, _newIndex);\\n        coverIndex = _newIndex;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Provide liquidity to priority pool\\n     *         Only callable through policyCenter\\n     *         Can not provide new liquidity when paused\\n     *\\n     * @param _amount   Amount of liquidity (PRO-LP token) to provide\\n     * @param _provider Liquidity provider adress\\n     */\\n    function stakedLiquidity(uint256 _amount, address _provider)\\n        external\\n        whenNotPaused\\n        onlyPolicyCenter\\n        returns (address)\\n    {\\n        // Check whether this priority pool should be dynamic\\n        // If so, update it\\n        _updateDynamic();\\n\\n        // Mint current generation lp tokens to the provider\\n        // PRI-LP amount always 1:1 to PRO-LP\\n        _mintLP(_provider, _amount);\\n        emit StakedLiquidity(_amount, _provider);\\n\\n        return currentLPAddress();\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from priority pool\\n     *         Only callable through policyCenter\\n     *\\n     * @param _lpToken  Address of PRI-LP token\\n     * @param _amount   Amount of liquidity (PRI-LP) to remove\\n     * @param _provider Provider address\\n     */\\n    function unstakedLiquidity(\\n        address _lpToken,\\n        uint256 _amount,\\n        address _provider\\n    ) external whenNotPaused onlyPolicyCenter {\\n        if (!isLPToken[_lpToken]) revert PriorityPool__WrongLPToken();\\n\\n        // Check whether this priority pool should be dynamic\\n        // If so, update it\\n        _updateDynamic();\\n\\n        // Burn PRI-LP tokens and transfer PRO-LP tokens back\\n        _burnLP(_lpToken, _provider, _amount);\\n        emit UnstakedLiquidity(_amount, _provider);\\n    }\\n\\n    /**\\n     * @notice Update the record when new policy is bought\\n     *         Only called from policy center\\n     *\\n     * @param _amount          Cover amount (shield)\\n     * @param _premium         Premium for priority pool\\n     * @param _length          Cover length (in month)\\n     * @param _timestampLength Cover length (in second)\\n     */\\n    function updateWhenBuy(\\n        uint256 _amount,\\n        uint256 _premium,\\n        uint256 _length,\\n        uint256 _timestampLength\\n    ) external whenNotPaused onlyPolicyCenter {\\n        _updateDynamic();\\n\\n        // Record cover amount in each month\\n        _updateCoverInfo(_amount, _length);\\n\\n        // Update the weighted farming pool speed for this priority pool\\n        _updateWeightedFarmingSpeed(_length, _premium / _timestampLength);\\n    }\\n\\n    /**\\n     * @notice Pause this pool\\n     *\\n     * @param _paused True to pause, false to unpause\\n     */\\n    function pausePriorityPool(bool _paused) external {\\n        if ((msg.sender != owner) && (msg.sender != priorityPoolFactory))\\n            revert PriorityPool__NotOwnerOrFactory();\\n\\n        _pause(_paused);\\n    }\\n\\n    /**\\n     * @notice Liquidate pool\\n     *         Only callable by executor\\n     *         Only after the report has passed the voting\\n     *\\n     * @param _amount Payout amount to be moved out\\n     */\\n    function liquidatePool(uint256 _amount) external onlyExecutor {\\n        _retrievePayout(_amount);\\n\\n        _updateCurrentLPWeight();\\n\\n        // Generation ++\\n        // Deploy the new generation lp token\\n        // Those who stake liquidity into this priority pool will be given the new lp token\\n        _deployNewGenerationLP(weightedFarmingPool);\\n\\n        emit Liquidation(_amount, generation);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Check & update dynamic status of this pool\\n     *         Record this pool as \\\"already dynamic\\\" in factory\\n     *\\n     *         Every time there is a new interaction, will do this check\\n     */\\n    function _updateDynamic() internal {\\n        // Put the cheaper check in the first place\\n        if (!passedBasePeriod && (block.timestamp - startTime > 7 days)) {\\n            IPriorityPoolFactory(priorityPoolFactory).updateDynamicPool(poolId);\\n            passedBasePeriod = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Deploy a new generation lp token\\n     *         Generation starts from 1\\n     *\\n     * @return newLPAddress The deployed lp token address\\n     */\\n    function _deployNewGenerationLP(address _weightedFarmingPool)\\n        internal\\n        returns (address newLPAddress)\\n    {\\n        uint256 currentGeneration = ++generation;\\n\\n        // PRI-LP-2-JOE-G1: First generation of JOE priority pool with pool id 2\\n        string memory _name = string.concat(\\n            \\\"PRI-LP-\\\",\\n            poolId._toString(),\\n            \\\"-\\\",\\n            poolName,\\n            \\\"-G\\\",\\n            currentGeneration._toString()\\n        );\\n\\n        newLPAddress = address(new PriorityPoolToken(_name));\\n        lpTokenAddress[currentGeneration] = newLPAddress;\\n\\n        IWeightedFarmingPool(_weightedFarmingPool).addToken(\\n            poolId,\\n            newLPAddress,\\n            priceIndex[newLPAddress]\\n        );\\n\\n        isLPToken[newLPAddress] = true;\\n\\n        emit NewGenerationLPTokenDeployed(\\n            poolName,\\n            poolId,\\n            currentGeneration,\\n            _name,\\n            newLPAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Mint current generation lp tokens\\n     *\\n     * @param _user   User address\\n     * @param _amount PRI-LP token amount\\n     */\\n    function _mintLP(address _user, uint256 _amount) internal {\\n        // Get current generation lp token address and mint tokens\\n        address lp = currentLPAddress();\\n        PriorityPoolToken(lp).mint(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn lp tokens\\n     *         Need specific generation lp token address as parameter\\n     *\\n     * @param _lpToken PRI-LP token adderss\\n     * @param _user    User address\\n     * @param _amount  PRI-LP token amount to burn\\n     */\\n    function _burnLP(\\n        address _lpToken,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        // Transfer PRO-LP token to user\\n        uint256 proLPAmount = (priceIndex[_lpToken] * _amount) / SCALE;\\n        SimpleERC20(protectionPool).transfer(_user, proLPAmount);\\n\\n        // Burn PRI-LP token\\n        PriorityPoolToken(_lpToken).burn(_user, _amount);\\n    }\\n\\n    /**\\n     * @notice Update cover record info when new covers come in\\n     *         Record the total cover amount in each month\\n     *\\n     * @param _amount Cover amount\\n     * @param _length Cover length in month\\n     */\\n    function _updateCoverInfo(uint256 _amount, uint256 _length) internal {\\n        (uint256 currentYear, uint256 currentMonth, ) = block\\n            .timestamp\\n            .timestampToDate();\\n\\n        for (uint256 i; i < _length; ) {\\n            coverInMonth[currentYear][currentMonth] += _amount;\\n\\n            unchecked {\\n                if (++currentMonth > 12) {\\n                    ++currentYear;\\n                    currentMonth = 1;\\n                }\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update the farming speed in WeightedFarmingPool\\n     *\\n     * @param _length   Length in month\\n     * @param _newSpeed Speed to be added\\n     */\\n    function _updateWeightedFarmingSpeed(uint256 _length, uint256 _newSpeed)\\n        internal\\n    {\\n        uint256[] memory _years = new uint256[](_length);\\n        uint256[] memory _months = new uint256[](_length);\\n\\n        (uint256 currentYear, uint256 currentMonth, ) = block\\n            .timestamp\\n            .timestampToDate();\\n\\n        for (uint256 i; i < _length; ) {\\n            _years[i] = currentYear;\\n            _months[i] = currentMonth;\\n\\n            unchecked {\\n                if (++currentMonth > 12) {\\n                    ++currentYear;\\n                    currentMonth = 1;\\n                }\\n                ++i;\\n            }\\n        }\\n\\n        IWeightedFarmingPool(weightedFarmingPool).updateRewardSpeed(\\n            poolId,\\n            _newSpeed,\\n            _years,\\n            _months\\n        );\\n    }\\n\\n    /**\\n     * @notice Retrieve assets from Protection Pool for payout\\n     *\\n     * @param _amount Amount of SHIELD to retrieve\\n     */\\n    function _retrievePayout(uint256 _amount) internal {\\n        // Current PRO-LP amount\\n        uint256 currentLPAmount = SimpleERC20(protectionPool).balanceOf(\\n            address(this)\\n        );\\n\\n        IProtectionPool proPool = IProtectionPool(protectionPool);\\n\\n        uint256 proLPPrice = proPool.getLatestPrice();\\n\\n        // Need how many PRO-LP tokens to cover the _amount\\n        uint256 neededLPAmount = (_amount * SCALE) / proLPPrice;\\n\\n        // If current PRO-LP inside priority pool is enough\\n        // Remove part of the liquidity from Protection Pool\\n        if (neededLPAmount < currentLPAmount) {\\n            proPool.removedLiquidity(neededLPAmount, payoutPool);\\n\\n            priceIndex[currentLPAddress()] =\\n                ((currentLPAmount - neededLPAmount) * SCALE) /\\n                currentLPAmount;\\n        } else {\\n            uint256 shieldGot = proPool.removedLiquidity(\\n                currentLPAmount,\\n                address(this)\\n            );\\n\\n            uint256 remainingPayout = _amount - shieldGot;\\n\\n            proPool.removedLiquidityWhenClaimed(remainingPayout, payoutPool);\\n\\n            priceIndex[currentLPAddress()] = 0;\\n        }\\n\\n        // Set a ratio used when claiming with crTokens\\n        // E.g. ratio is 1e11\\n        //      You can only use 10% (1e11 / SCALE) of your crTokens for claiming\\n        uint256 payoutRatio;\\n        activeCovered() > 0\\n            ? payoutRatio = (_amount * SCALE) / activeCovered()\\n            : payoutRatio = 0;\\n\\n        IPayoutPool(payoutPool).newPayout(\\n            poolId,\\n            generation,\\n            _amount,\\n            payoutRatio,\\n            address(this)\\n        );\\n    }\\n\\n    function _updateCurrentLPWeight() internal {\\n        address lp = currentLPAddress();\\n\\n        // Update the farming pool with the new price index\\n        IWeightedFarmingPool(weightedFarmingPool).updateWeight(\\n            poolId,\\n            lp,\\n            priceIndex[lp]\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc94ffefe3a27598f12997e904cd84e8059378fe8bc97cf38c0d853ae48be3a50\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function executor() external view returns (address);\\n}\\n\\ninterface IProtectionPool {\\n    function getTotalCovered() external view returns (uint256);\\n\\n    function getLatestPrice() external returns (uint256);\\n\\n    function removedLiquidity(uint256 _amount, address _provider)\\n        external\\n        returns (uint256);\\n\\n    function removedLiquidityWhenClaimed(uint256 _amount, address _to) external;\\n\\n    function pauseProtectionPool(bool _paused) external;\\n}\\n\\ninterface IPolicyCenter {\\n    function storePoolInformation(\\n        address _pool,\\n        address _token,\\n        uint256 _poolId\\n    ) external;\\n}\\n\\ninterface IPremiumRewardPool {\\n    function register(address _pool, address _token) external;\\n}\\n\\ninterface IPayoutPool {\\n    function newPayout(\\n        uint256 _poolId,\\n        uint256 _generation,\\n        uint256 _amount,\\n        uint256 _ratio,\\n        address _poolAddress\\n    ) external;\\n}\\n\\ninterface IWeightedFarmingPool {\\n    function addPool(address _token) external;\\n\\n    function addToken(\\n        uint256 _id,\\n        address _token,\\n        uint256 _weight\\n    ) external;\\n\\n    function updateRewardSpeed(\\n        uint256 _id,\\n        uint256 _newSpeed,\\n        uint256[] memory _years,\\n        uint256[] memory _months\\n    ) external;\\n\\n    function updateWeight(\\n        uint256 _id,\\n        address _token,\\n        uint256 _newWeight\\n    ) external;\\n}\\n\\nabstract contract PriorityPoolDependencies {\\n    uint256 constant SCALE = 1e12;\\n\\n    uint256 constant SECONDS_PER_YEAR = 86400 * 365;\\n\\n    address internal policyCenter;\\n    address internal priorityPoolFactory;\\n    address internal protectionPool;\\n    address internal weightedFarmingPool;\\n    address internal payoutPool;\\n}\\n\",\"keccak256\":\"0x4a6f5b316526a9f44a16ef13ddf38ac0b4ab3dd2a961b9d7b9fbce0e4b7bea6e\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface PriorityPoolEventError {\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event StakedLiquidity(uint256 amount, address sender);\\n    event UnstakedLiquidity(uint256 amount, address sender);\\n    event Liquidation(uint256 amount, uint256 generation);\\n \\n    event NewGenerationLPTokenDeployed(\\n        string poolName,\\n        uint256 poolId,\\n        uint256 currentGeneration,\\n        string name,\\n        address newLPAddress\\n    );\\n\\n    event CoverIndexChanged(uint256 oldIndex, uint256 newIndex);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PriorityPool__OnlyExecutor();\\n    error PriorityPool__OnlyPolicyCenter();\\n    error PriorityPool__NotOwnerOrFactory();\\n    error PriorityPool__WrongLPToken();\\n}\\n\",\"keccak256\":\"0xe25eb0cc481c16239914947e2dd448ad8a601a663d8a56613f38dd637604aa26\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n //======================================================================\\\\\\\\\\n //======================================================================\\\\\\\\\\n  *******         **********     ***********     *****     ***********\\n  *      *        *              *                 *       *\\n  *        *      *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     *              *                 *       *\\n  *         *     **********     *       *****     *       ***********\\n  *         *     *              *         *       *                 *\\n  *         *     *              *         *       *                 *\\n  *        *      *              *         *       *                 *\\n  *      *        *              *         *       *                 *\\n  *******         **********     ***********     *****     ***********\\n \\\\\\\\======================================================================//\\n \\\\\\\\======================================================================//\\n*/\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./PriorityPoolFactoryDependencies.sol\\\";\\n\\nimport \\\"../../util/OwnableWithoutContext.sol\\\";\\nimport \\\"../../interfaces/ExternalTokenDependencies.sol\\\";\\nimport \\\"./PriorityPoolFactoryEventError.sol\\\";\\n\\nimport \\\"./PriorityPool.sol\\\";\\n\\nimport \\\"../../interfaces/IPriorityPool.sol\\\";\\n\\n/**\\n * @title Insurance Pool Factory\\n *\\n * @author Eric Lee (ylikp.ust@gmail.com)\\n *\\n * @notice This is the factory contract for deploying new insurance pools\\n *         Each pool represents a project that has joined Degis Protocol Protection\\n *\\n *         Liquidity providers of Protection Pool can stake their LP tokens into priority pools\\n *         Benefit:\\n *             - Share the 45% part of the premium income (in native token form)\\n *         Risk:\\n *             - Will be liquidated first to pay for the claim amount\\n *\\n *\\n */\\ncontract PriorityPoolFactory is\\n    ExternalTokenDependencies,\\n    OwnableWithoutContext,\\n    PriorityPoolFactoryEventError,\\n    PriorityPoolFactoryDependencies\\n{\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    struct PoolInfo {\\n        string protocolName;\\n        address poolAddress;\\n        address protocolToken;\\n        uint256 maxCapacity; // max capacity ratio\\n        uint256 basePremiumRatio;\\n    }\\n    // poolId => Pool Information\\n    mapping(uint256 => PoolInfo) public pools;\\n\\n    mapping(address => uint256) public poolAddressToId;\\n\\n    uint256 public poolCounter;\\n\\n    // Total max capacity\\n    uint256 public totalMaxCapacity;\\n\\n    // Whether a pool is already dynamic\\n    mapping(address => bool) public dynamic;\\n\\n    uint256 public dynamicPoolCounter;\\n\\n    // Record whether a protocol token or pool address has been registered\\n    mapping(address => bool) public poolRegistered;\\n    mapping(address => bool) public tokenRegistered;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(\\n        address _deg,\\n        address _veDeg,\\n        address _shield,\\n        address _protectionPool\\n    )\\n        ExternalTokenDependencies(_deg, _veDeg, _shield)\\n        OwnableWithoutContext(msg.sender)\\n    {\\n        protectionPool = _protectionPool;\\n\\n        poolRegistered[_protectionPool] = true;\\n        tokenRegistered[_shield] = true;\\n\\n        // Protection pool as pool 0\\n        pools[0] = PoolInfo(\\\"ProtectionPool\\\", _protectionPool, _shield, 0, 0);\\n    }\\n\\n    modifier onlyPriorityPool() {\\n        if (!poolRegistered[msg.sender])\\n            revert PriorityPoolFactory__OnlyPriorityPool();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get the pool address list\\n     *\\n     * @return List of pool addresses\\n     */\\n    function getPoolAddressList() external view returns (address[] memory) {\\n        uint256 poolAmount = poolCounter + 1;\\n\\n        address[] memory list = new address[](poolAmount);\\n\\n        for (uint256 i; i < poolAmount; ) {\\n            list[i] = pools[i].poolAddress;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return list;\\n    }\\n\\n    /**\\n     * @notice Get the pool information by pool id\\n     *\\n     * @param _poolId Pool id\\n     */\\n    function getPoolInfo(uint256 _poolId)\\n        public\\n        view\\n        returns (PoolInfo memory)\\n    {\\n        return pools[_poolId];\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function setPolicyCenter(address _policyCenter) external onlyOwner {\\n        policyCenter = _policyCenter;\\n    }\\n\\n    function setPremiumRewardPool(address _premiumRewardPool)\\n        external\\n        onlyOwner\\n    {\\n        premiumRewardPool = _premiumRewardPool;\\n    }\\n\\n    function setWeightedFarmingPool(address _weightedFarmingPool)\\n        external\\n        onlyOwner\\n    {\\n        weightedFarmingPool = _weightedFarmingPool;\\n    }\\n\\n    function setProtectionPool(address _protectionPool) external onlyOwner {\\n        protectionPool = _protectionPool;\\n    }\\n\\n    function setExecutor(address _executor) external onlyOwner {\\n        executor = _executor;\\n    }\\n\\n    function setIncidentReport(address _incidentReport) external onlyOwner {\\n        incidentReport = _incidentReport;\\n    }\\n\\n    function setPayoutPool(address _payoutPool) external onlyOwner {\\n        payoutPool = _payoutPool;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Create a new priority pool\\n     *         Called by executor when an onboard proposal has passed\\n     *\\n     * @param _name             Name of the protocol\\n     * @param _protocolToken    Address of the token used for the protocol\\n     * @param _maxCapacity      Maximum capacity of the pool\\n     * @param _basePremiumRatio Initial policy price per shield\\n     *\\n     * @return address Address of the new insurance pool\\n     */\\n    function deployPool(\\n        string calldata _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _basePremiumRatio\\n    ) public returns (address) {\\n        if (msg.sender != owner() && msg.sender != executor)\\n            revert PriorityPoolFactory__OnlyOwnerOrExecutor();\\n        if (tokenRegistered[_protocolToken])\\n            revert PriorityPoolFactory__TokenAlreadyRegistered();\\n\\n        // Add new pool max capacity to sum of max capacities\\n        totalMaxCapacity += _maxCapacity;\\n\\n        uint256 currentPoolId = ++poolCounter;\\n\\n        address newPoolAddress = _deployPool(\\n            currentPoolId,\\n            _name,\\n            _protocolToken,\\n            _maxCapacity,\\n            _basePremiumRatio\\n        );\\n\\n        pools[currentPoolId] = PoolInfo(\\n            _name,\\n            newPoolAddress,\\n            _protocolToken,\\n            _maxCapacity,\\n            _basePremiumRatio\\n        );\\n\\n        tokenRegistered[_protocolToken] = true;\\n        poolRegistered[newPoolAddress] = true;\\n        poolAddressToId[newPoolAddress] = currentPoolId;\\n\\n        // Store pool information in Policy Center\\n        IPolicyCenter(policyCenter).storePoolInformation(\\n            newPoolAddress,\\n            _protocolToken,\\n            currentPoolId\\n        );\\n\\n        // Register reward token in premium reward pool\\n        IPremiumRewardPool(premiumRewardPool).register(\\n            newPoolAddress,\\n            _protocolToken\\n        );\\n\\n        // Add reward token in farming pool\\n        IWeightedFarmingPool(weightedFarmingPool).addPool(_protocolToken);\\n\\n        emit PoolCreated(\\n            currentPoolId,\\n            newPoolAddress,\\n            _name,\\n            _protocolToken,\\n            _maxCapacity,\\n            _basePremiumRatio\\n        );\\n\\n        return newPoolAddress;\\n    }\\n\\n    /**\\n     * @notice Update a priority pool status to dynamic\\n     *         Only sent from priority pool\\n     *         \\\"Dynamic\\\" means:\\n     *                  The priority pool will be counted in the dynamic premium formula\\n     *\\n     * @param _poolId Pool id\\n     */\\n    function updateDynamicPool(uint256 _poolId) external onlyPriorityPool {\\n        if (dynamic[msg.sender])\\n            revert PriorityPoolFactory__AlreadyDynamicPool();\\n\\n        dynamic[msg.sender] = true;\\n\\n        unchecked {\\n            ++dynamicPoolCounter;\\n        }\\n\\n        emit DynamicPoolUpdate(_poolId, msg.sender, dynamicPoolCounter);\\n    }\\n\\n    function updateMaxCapaity(bool _isUp, uint256 _diff)\\n        external\\n        onlyPriorityPool\\n    {\\n        if (_isUp) {\\n            totalMaxCapacity += _diff;\\n        } else totalMaxCapacity -= _diff;\\n\\n        emit MaxCapacityUpdated(totalMaxCapacity);\\n    }\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external {\\n        if (msg.sender != incidentReport && msg.sender != executor)\\n            revert PriorityPoolFactory__OnlyIncidentReportOrExecutor();\\n\\n        IPriorityPool(pools[_poolId].poolAddress).pausePriorityPool(_paused);\\n\\n        IProtectionPool(protectionPool).pauseProtectionPool(_paused);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function _deployPool(\\n        uint256 _poolId,\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _baseRatio\\n    ) internal returns (address addr) {\\n        bytes memory bytecode = type(PriorityPool).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(_poolId, _name));\\n\\n        bytes memory bytecodeWithParameters = abi.encodePacked(\\n            bytecode,\\n            abi.encode(\\n                _poolId,\\n                _name,\\n                _protocolToken,\\n                _maxCapacity,\\n                _baseRatio,\\n                owner(),\\n                weightedFarmingPool,\\n                protectionPool,\\n                policyCenter,\\n                payoutPool\\n            )\\n        );\\n\\n        addr = _deploy(bytecodeWithParameters, salt);\\n    }\\n\\n    /**\\n     * @notice Deploy function with create2\\n     *\\n     * @param _code Byte code of the contract (creation code) (including constructor parameters if any)\\n     * @param _salt Salt for the deployment\\n     *\\n     * @return addr The deployed contract address\\n     */\\n    function _deploy(bytes memory _code, bytes32 _salt)\\n        internal\\n        returns (address addr)\\n    {\\n        assembly {\\n            addr := create2(0, add(_code, 0x20), mload(_code), _salt)\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e78068c364131669467761ce4edd6c84f3822744b035a54d676c4512a978e39\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolFactoryDependencies.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract PriorityPoolFactoryDependencies {\\n    // Priority Pools need access to executor address\\n    address public executor;\\n    address internal policyCenter;\\n    address internal protectionPool;\\n    address internal incidentReport;\\n    address internal premiumRewardPool;\\n    address internal weightedFarmingPool;\\n    address internal payoutPool;\\n    \\n}\\n\",\"keccak256\":\"0x7f8b0d914fb854b5cc4ba5762544aab02a4da6c029130cc0afea98a1211b059d\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolFactoryEventError.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface PriorityPoolFactoryEventError {\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event PoolCreated(\\n        uint256 poolId,\\n        address poolAddress,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 basePremiumRatio\\n    );\\n\\n    event DynamicPoolUpdate(\\n        uint256 poolId,\\n        address pool,\\n        uint256 dynamicPoolCounter\\n    );\\n\\n    event MaxCapacityUpdated(uint256 totalMaxCapacity);\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error PriorityPoolFactory__OnlyExecutor();\\n    error PriorityPoolFactory__OnlyPolicyCenter();\\n    error PriorityPoolFactory__OnlyOwnerOrExecutor();\\n    error PriorityPoolFactory__OnlyPriorityPool();\\n    error PriorityPoolFactory__OnlyIncidentReportOrExecutor();\\n    error PriorityPoolFactory__PoolNotRegistered();\\n    error PriorityPoolFactory__TokenAlreadyRegistered();\\n    error PriorityPoolFactory__AlreadyDynamicPool();\\n    error PriorityPoolFactory__NotOwnerOrFactory();\\n    error PriorityPoolFactory__WrongLPToken();\\n}\\n\",\"keccak256\":\"0x32043478737717a98d0ccea14a4a58e97e5b4749e1f3f8593864f07612c80465\",\"license\":\"GPL-3.0-or-later\"},\"src/pools/priorityPool/PriorityPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"../SimpleERC20.sol\\\";\\n\\n/**\\n * @notice LP token for priority pools\\n *\\n *         This lp token can be deposited into farming pool to get the premium income\\n *         LP token has different generations and they are different in names\\n *\\n *         E.g.  PRI-LP-2-JOE-G1 and PRI-LP-2-JOE-G2\\n *               They are both lp tokens for priority pool 2 (JOE pool)\\n *               But with different generations, they have different weights in farming\\n *\\n *         Every time there is a report for the project and some payout are given out\\n *         There will be a new generation of lp token\\n *\\n *         The weight will be set when the report happened\\n *         and will depend on how much part are paid during that report\\n */\\ncontract PriorityPoolToken is SimpleERC20 {\\n    // Only minter and burner is Priority Pool\\n    address private priorityPool;\\n\\n    modifier onlyPriorityPool() {\\n        require(msg.sender == priorityPool, \\\"Only priority pool\\\");\\n        _;\\n    }\\n\\n    constructor(string memory _name) SimpleERC20(_name, \\\"PRI-LP\\\") {\\n        priorityPool = msg.sender;\\n    }\\n\\n    function mint(address _user, uint256 _amount) external onlyPriorityPool {\\n        _mint(_user, _amount);\\n    }\\n\\n    function burn(address _user, uint256 _amount) external onlyPriorityPool {\\n        _burn(_user, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe24e87769c2f4feb48017defd346b98bb5338a0aafbae5ec12b37d3f4197afc2\",\"license\":\"GPL-3.0-or-later\"},\"src/util/OwnableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract OwnableWithoutContext {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting a customized initial owner.\\n     */\\n    constructor(address _initOwner) {\\n        _owner = _initOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x78b93f32b25ad2184a4fbc44160870a5a81f567186c99923ecbc54329c57f88b\",\"license\":\"GPL-3.0-or-later\"},\"src/util/PausableWithoutContext.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nabstract contract PausableWithoutContext {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Paused\\\");\\n        _;\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    function _pause(bool _p) internal virtual {\\n        _paused = _p;\\n    }\\n}\\n\",\"keccak256\":\"0xe610bf149f8aaf333258716ecafc0bdc3e395ad2f7ee6ba38036839ca195d673\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e03462000345576001600160401b03601f19601f62006309388190039182018316850191848311868410176200034a5780869260809460405283398101031262000345576200004f8362000360565b926200005e6020820162000360565b6200007a6060620000726040850162000360565b930162000360565b6001600160a01b0395861660805290851660a090815291851660c081905260008054336001600160a01b0319918216178255600380549490981693168317909655818652600e60209081526040808820805460ff199081166001908117909255848a52600f90935281892080549093161790915551949092850185811082821117620003315760e08601818110838211176200031d57604052600e81526d141c9bdd1958dd1a5bdb941bdbdb60921b60c087015285526020850191825260408501928352606085019386855286608087015286805260086020526040872096865190815193841162000309578854600181811c91168015620002fe575b6020821014620002ea57601f8111620002a0575b50602092601f8511600114620002305750926080969492819260049997959262000224575b50508160011b916000199060031b1c19161787555b516001870180546001600160a01b03199081166001600160a01b0393841617909155915160028801805490931691161790555160038501550151910155604051615f93908162000376823960805181505060a05181505060c051815050f35b015190503880620001b0565b84939291931689845260208420935b81811062000287575092600192859260049a989660809a9896106200026d575b505050811b018755620001c5565b015160001960f88460031b161c191690553880806200025f565b929360206001819287860151815501950193016200023f565b89825260208220601f860160051c81019160208710620002df575b601f0160051c01905b818110620002d357506200018b565b828155600101620002c4565b9091508190620002bb565b634e487b7160e01b82526022600452602482fd5b90607f169062000177565b634e487b7160e01b81526041600452602490fd5b634e487b7160e01b88526041600452602488fd5b634e487b7160e01b87526041600452602487fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003455756fe6080604052600436101562000014575b600080fd5b60003560e01c80630121cff514620002515780631b35278914620002465780631c3c0ea8146200023b5780632a50489a14620002305780632dd57bb014620002255780632f380b35146200021a5780633f81ff26146200020f57806341249745146200020457806358bf0f2c14620001f95780636bdbd19514620001ee578063715018a614620001e3578063746376ee14620001d85780638da5cb5b14620001cd5780639e3079cb14620001c2578063a2e1ce6214620001b7578063a7e9f1c714620001ac578063ac4afa3814620001a1578063bb9febaf1462000196578063c34c08e5146200018b578063d98a254c1462000180578063e3356ccf1462000175578063e5249a10146200016a578063ef372298146200015f578063f2fde38b14620001545763f6cb90ab146200014a57600080fd5b6200000f62000fb7565b506200000f62000f15565b506200000f62000ed6565b506200000f62000e83565b506200000f62000e30565b506200000f62000d77565b506200000f62000d4b565b506200000f62000cbf565b506200000f62000c3b565b506200000f62000ab3565b506200000f62000a6f565b506200000f62000a4e565b506200000f62000a22565b506200000f620009de565b506200000f62000978565b506200000f620008ab565b506200000f62000806565b506200000f620007c2565b506200000f6200076f565b506200000f620006c1565b506200000f620005c1565b506200000f620004f3565b506200000f620004a0565b506200000f620002fd565b506200000f6200028a565b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b50346200000f5760203660031901126200000f57620002a86200025c565b6000546001600160a01b039190620002c490831633146200107e565b60038054919092166001600160a01b0319909116179055005b6024359081151582036200000f57565b6004359081151582036200000f57565b50346200000f5760403660031901126200000f576200031b620002dd565b60045462000339906001600160a01b03165b6001600160a01b031690565b331415806200047f575b6200046d576200037b6200032d6200032d60016200036d6004356000526008602052604060002090565b01546001600160a01b031690565b803b156200000f576040516305e5fe2360e41b81528215156004820152600092839290919083908290602490829084905af180156200045d575b62000446575b50600354620003d5906200032d906001600160a01b031681565b90813b15620004425760405163a8a2b43160e01b8152901515600482015291908290602490829084905af1801562000432575b62000414575b50604051f35b80620004246200042b9262000b28565b8062000859565b386200040e565b6200043c620012f1565b62000408565b5050fd5b8062000424620004569262000b28565b38620003bb565b62000467620012f1565b620003b5565b60405163570d52bd60e11b8152600490fd5b5060015462000497906001600160a01b03166200032d565b33141562000343565b50346200000f5760203660031901126200000f57620004be6200025c565b6000546001600160a01b039190620004da90831633146200107e565b60018054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f576000338152600e602052604060ff818320541615620005b157338252600c60205260ff8183205416620005a157338252600c602052808220805460ff19166001179055620005606200055b600d5460010190565b600d55565b600d548151600435815233602082015260408101919091527fa16172101044efd65843cd11b767b8aa758d7da7be12573e0c897b52b71444fd90606090a151f35b516334c8f8b960e01b8152600490fd5b51630fc64fb960e21b8152600490fd5b50346200000f5760203660031901126200000f57620005df6200025c565b6000546001600160a01b039190620005fb90831633146200107e565b60028054919092166001600160a01b0319909116179055005b918091926000905b828210620006365750116200062f575050565b6000910152565b915080602091830151818601520182916200061c565b90602091620006678151809281855285808601910162000614565b601f01601f1916010190565b6020815260a0608062000692845183602086015260c08501906200064c565b93600180841b038060208301511660408601526040820151166060850152606081015182850152015191015290565b50346200000f5760203660031901126200000f576200076b60408060808151620006eb8162000b4b565b606081526000918183602081940152828582015282606082015201526004358152600860205220906004815192620007238462000b4b565b6200072e8162000b89565b845260018101546001600160a01b039081166020860152600282015416838501526003810154606085015201546080830152519182918262000673565b0390f35b50346200000f5760203660031901126200000f576200078d6200025c565b6000546001600160a01b039190620007a990831633146200107e565b60078054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f576001600160a01b03620007e86200025c565b16600052600c602052602060ff604060002054166040519015158152f35b50346200000f5760203660031901126200000f57620008246200025c565b6000546001600160a01b0391906200084090831633146200107e565b60068054919092166001600160a01b0319909116179055005b60009103126200000f57565b6020908160408183019282815285518094520193019160005b8281106200088d575050505090565b83516001600160a01b0316855293810193928101926001016200087e565b50346200000f576000806003193601126200097557600a5490600119821162000965575b600180920190620008e08262001029565b91604091620008f28351948562000b67565b818452601f19620009038362001029565b016020903682870137815b83811062000925578451806200076b888262000865565b808352600882528483208701548791906200095e906001600160a01b03166200094f838a62001053565b6001600160a01b039091169052565b016200090e565b6200096f62000fd8565b620008cf565b80fd5b50346200000f57600080600319360112620009755780546001600160a01b03811690620009a73383146200107e565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b0319168255f35b50346200000f5760203660031901126200000f576001600160a01b0362000a046200025c565b16600052600e602052602060ff604060002054166040519015158152f35b50346200000f5760003660031901126200000f576000546040516001600160a01b039091168152602090f35b50346200000f5760003660031901126200000f576020600a54604051908152f35b50346200000f5760203660031901126200000f576001600160a01b0362000a956200025c565b16600052600f602052602060ff604060002054166040519015158152f35b50346200000f5760003660031901126200000f576020600d54604051908152f35b90600182811c9216801562000b06575b602083101462000af057565b634e487b7160e01b600052602260045260246000fd5b91607f169162000ae4565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b03811162000b3c57604052565b62000b4662000b11565b604052565b60a081019081106001600160401b0382111762000b3c57604052565b90601f801991011681019081106001600160401b0382111762000b3c57604052565b906040519182600082549262000b9f8462000ad4565b90818452600194858116908160001462000c16575060011462000bcf575b505062000bcd9250038362000b67565b565b9093915060005260209081600020936000915b81831062000bfd57505062000bcd9350820101388062000bbd565b8554888401850152948501948794509183019162000be2565b91505062000bcd94506020925060ff191682840152151560051b820101388062000bbd565b50346200000f5760203660031901126200000f57600435600052600860205262000ca6604060002062000c6e8162000b89565b9060018060a01b0390816001820154169160028201541690600460038201549101549160405195869560a0875260a08701906200064c565b9360208601526040850152606084015260808301520390f35b50346200000f5760803660031901126200000f576001600160401b036004358181116200000f57366023820112156200000f5780600401359182116200000f5736602483830101116200000f576200076b9162000d319162000d2062000273565b60643592602460443593016200134d565b6040516001600160a01b0390911681529081906020820190565b50346200000f5760003660031901126200000f576001546040516001600160a01b039091168152602090f35b50346200000f5760403660031901126200000f5762000d95620002ed565b6024359033600052600e60205260ff604060002054161562000e1e571562000df85762000dc590600b5462000fef565b600b555b7f8b8564868e5db4ac945b0fd897338876dcc0c95a5f183b340f47285ebbcb6af16020600b54604051908152a1005b600b5481811062000e0e575b03600b5562000dc9565b62000e1862000fd8565b62000e04565b604051630fc64fb960e21b8152600490fd5b50346200000f5760203660031901126200000f5762000e4e6200025c565b6000546001600160a01b03919062000e6a90831633146200107e565b60048054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f5762000ea16200025c565b6000546001600160a01b03919062000ebd90831633146200107e565b60058054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f576001600160a01b0362000efc6200025c565b1660005260096020526020604060002054604051908152f35b50346200000f5760203660031901126200000f5762000f336200025c565b6000546001600160a01b039062000f4e90821633146200107e565b81161562000f635762000f61906200187e565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346200000f5760003660031901126200000f576020600b54604051908152f35b50634e487b7160e01b600052601160045260246000fd5b8119811162000ffc570190565b6200100662000fd8565b0190565b6040519062000bcd8262000b4b565b9062000bcd604051928362000b67565b6020906001600160401b03811162001043575b60051b0190565b6200104d62000b11565b6200103c565b8051821015620010685760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b156200108657565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b600190600019811462000ffc570190565b9291926001600160401b03821162001114575b60405191620010f6601f8201601f19166020018462000b67565b8294818452818301116200000f578281602093846000960137010152565b6200111e62000b11565b620010dc565b90601f81116200113357505050565b600091825260208220906020601f850160051c8301941062001172575b601f0160051c01915b8281106200116657505050565b81815560010162001159565b909250829062001150565b90805180516001600160401b038111620012e1575b620011aa81620011a3865462000ad4565b8662001124565b6020918290601f8311600114620012605760809383600496946200121d94620011fa9460009262001254575b50508160011b916000199060031b1c19161787555b8301516001600160a01b031690565b6001860180546001600160a01b0319166001600160a01b03909216919091179055565b60408101516002850180546001600160a01b0319166001600160a01b03909216919091179055606081015160038501550151910155565b015190503880620011d6565b90601f198316916200127787600052602060002090565b9260005b818110620012c95750846200121d94620011fa946080989460049a9860019510620012af575b505050811b018755620011eb565b015160001960f88460031b161c19169055388080620012a1565b9293866001819287860151815501950193016200127b565b620012eb62000b11565b62001192565b506040513d6000823e3d90fd5b938060a0969998979460e0938752600180891b03809516602088015260c060408801528160c0880152838701376000828287010152601f80199101168401019616606083015260808201520152565b600080549095919491939192906001600160a01b031633141580620016b3575b620016a1576001600160a01b0382166000908152600f602052604090205460ff166200168f57620013aa620013a584600b5462000fef565b600b55565b620013b7600a54620010b8565b94620013c286600a55565b620013dd858585620013d6368787620010c9565b8a62001770565b9662001440620013ec6200100a565b620013f9368686620010c9565b81526001600160a01b038a1660208201526001600160a01b03861660408201528660608201528760808201526200143a896000526008602052604060002090565b6200117d565b6001600160a01b0384166000908152600f602052604090206200146b905b805460ff19166001179055565b6001600160a01b0388166000908152600e602052604090206200148e906200145e565b6001600160a01b0388166000908152600960205260409020879055600254620014c2906200032d906001600160a01b031681565b803b156200166457604051630b6cccdd60e41b81526001600160a01b038a8116600483015286166024820152604481018990529082908290606490829084905af180156200167f575b62001668575b506005546200152b906200032d906001600160a01b031681565b803b156200166457604051632a99dcd560e21b81526001600160a01b038a81166004830152861660248201529082908290604490829084905af1801562001654575b6200163d575b506006546200158d906200032d906001600160a01b031681565b90813b15620009755760405163d914cd4b60e01b81526001600160a01b03861660048201527f6f92dd7fd4aaa286bc76a2ea88bede9a5077443cccc9b4aece620689e3fc63de988a98909762001610979196909591949093919291908290602490829084905af180156200162d575b62001616575b5060405197889788620012fe565b0390a190565b8062000424620016269262000b28565b3862001602565b62001637620012f1565b620015fc565b80620004246200164d9262000b28565b3862001573565b6200165e620012f1565b6200156d565b5080fd5b8062000424620016789262000b28565b3862001511565b62001689620012f1565b6200150b565b6040516308ba7c3f60e31b8152600490fd5b604051636adaa0f960e01b8152600490fd5b50600154620016cb906001600160a01b03166200032d565b3314156200136d565b90620010066020928281519485920162000614565b602092918152620017038251809385808501910162000614565b010190565b98939496606093620017326101209a948c949e9d999e85526101408060208701528501906200064c565b9c60018060a01b03998a9889978896878096166040820152015260808d01521660a08b01521660c08901521660e08701521661010085015216910152565b926200184d926200185462001861936200183c6200186798976200182f614697956200179f6020880162001019565b96808852620018c76020890139604051976020890189620017c2888784620016e9565b0399620017d8601f199b8c810183528262000b67565b519020600054600654919d916001600160a01b0391821691166003549091906001600160a01b03166002549093906001600160a01b03166007549095906001600160a01b0316966040519b8c9a60208c0162001708565b0385810183528262000b67565b6040519586936020850190620016d4565b90620016d4565b0390810183528262000b67565b6200186a565b90565b6020815191016000f590813b156200000f57565b60005460018060a01b03809216809282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a36001600160a01b0319161760005556fe6101208060405234620006e3576000620046978038038091620000238286620006e8565b843982019161014081840312620006df57805160208201516001600160401b038111620006db57820184601f82011215620006db57805190620000668262000722565b95620000766040519788620006e8565b82875260208383010111620006d757906200009891602080880191016200073e565b620000a66040830162000776565b936060830151608084015190620000c060a0860162000776565b96620000cf60c0870162000776565b93620000de60e0880162000776565b95620000fd610120620000f56101008b0162000776565b990162000776565b60c09a909a52610100528051906001600160401b0382116200057e578190620001286005546200078b565b601f811162000686575b50602090601f83116001146200060f578a9262000603575b50508160011b916000199060031b1c1916176005555b600780546001600160a01b0319166001600160a01b03929092169190911790556008554260095560e0526003608052600160a052600654620001a290620007c8565b80600655620001b46101005162000815565b620001bf8262000815565b6040518092665052492d4c502d60c81b6020830152620001ea8151809260206027860191016200073e565b8101602d60f81b602782015288906005549062000207826200078b565b9160018116908115620005dd575060011462000592575b505090620002579282612d4760f01b600294526200024682518093602087850191016200073e565b0103601d19810184520182620006e8565b604051610acf808201906001600160401b038211838310176200057e57602083926200028e9262003ba885398181520184620007ee565b039087f09182156200057357808752600f6020908152604080892080546001600160a01b0319166001600160a01b0387811691821790925561010051908b526011909352908920549086163b156200056f5760405191637fdbe7b160e11b8352600483015260018060a01b0385166024830152604482015287816064818360018060a01b038a165af18015620005645762000533575b5060018060a01b03831687526010602052604087209160ff199260018482541617905561010051916040519260a08452899460055462000364816200078b565b918260a088015260018216918260001462000513575050600114620004c8575b50938392620003c7927f5bc145acec26384dc09c6269c9e569c69db21ad88cbd81319958b05998b83b5b96602086015260408501528382036060850152620007ee565b6001600160a01b03851660808301520390a16001600160a01b0390811685526011602052604080862064e8d4a510009055612710600a55600180546001600160a01b0319908116331790915560038054821694841694909417909355600280548416948316949094179093558454610100600160a81b03191660089490941b610100600160a81b031693909317909355600480549093169390911692909217905551613280908162000928823960805181505060a05181505060c0518181816102c1015261073d015260e0518181816102710152818161230b015261248101526101005181818161087c01528181610e4b0152818161162f015261251c0152f35b60058b52939450928990600080516020620046778339815191525b818310620004fb575050840160c00193928362000384565b805460c08489010152602090920191600101620004e3565b1660c08781019190915291151560051b8601909101955084905062000384565b9096906001600160401b0381116200055057604052953862000324565b634e487b7160e01b82526041600452602482fd5b6040513d8a823e3d90fd5b8880fd5b6040513d88823e3d90fd5b634e487b7160e01b89526041600452602489fd5b60058b5290915089600080516020620046778339815191525b838210620005c2575050016028018260026200021e565b805460288385010152869450602090910190600101620005ab565b60ff1916602883810191909152831515909302909101909101915083905060026200021e565b0151905038806200014a565b60058b52600080516020620046778339815191529250601f1984168b5b8181106200066d575090846001959493921062000653575b505050811b0160055562000160565b015160001960f88460031b161c1916905538808062000644565b929360206001819287860151815501950193016200062c565b90915060058a5260208a20601f840160051c810160208510620006cf575b90601f8594930160051c01905b818110620006c0575062000132565b8b8155849350600101620006b1565b5080620006a4565b8480fd5b8380fd5b5080fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200070c57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116200070c57601f01601f191660200190565b918091926000905b8282106200076057501162000759575050565b6000910152565b9150806020918301518186015201829162000746565b51906001600160a01b0382168203620006e357565b90600182811c92168015620007bd575b6020831014620007a757565b634e487b7160e01b600052602260045260246000fd5b91607f16916200079b565b6000198114620007d85760010190565b634e487b7160e01b600052601160045260246000fd5b9060209162000809815180928185528580860191016200073e565b601f01601f1916010190565b8015620008f857600081805b620008e15750620008328162000722565b91620008426040519384620006e8565b818352601f19620008538362000722565b01918160209336858701375b6200086a5750505090565b60018110620007d8576000190190600a90603082820680198211620007d8578651851015620008cb570160f81b7fff000000000000000000000000000000000000000000000000000000000000001660001a8584018501530490816200085f565b634e487b7160e01b600052603260045260246000fd5b90620008ef600a91620007c8565b91048062000821565b50604080519081016001600160401b038111828210176200070c5760405260018152600360fc1b60208201529056fe604060808152600490813610156200001657600080fd5b600091823560e01c9081630aadb77714620015485781630b92b5e4146200151357816310b72d681462000cc85781631487ddda1462000b92578163172195221462000b715781631733ea5014620009685781632440f3e914620008ca5781632b796968146200089f5781633e0dc34e14620008625781634d05124c146200081b5781634e75827114620007e557816359b6a0c914620007c45781635c975abb14620007a05781635e5fe230146200071357816378e9792514620006f257816379e25f3a14620006b65781638905faeb14620004835781638a9be828146200045c57839082639926878e146200042d578263a6f1c7c914620003f4578263b1fead0b14620003c5578263d06a30be146200039d578263d90543b8146200037c578263e17739b514620002945750508063e2e7c36614620002585763f3466dfa146200015f57600080fd5b3462000254578160031936011262000254578051908260055462000183816200177f565b80855290600190818116908115620002295750600114620001cb575b505050620001b482620001c7940383620017e7565b5191829160208352602083019062001842565b0390f35b60058352602095507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410620002155750505082620001c794620001b492820101946200019f565b8054868501880152928601928101620001f5565b620001c79750620001b49450602092508693915060ff191682840152151560051b820101946200019f565b5080fd5b50346200025457816003193601126200025457602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b909150346200025457826003193601126200025457620002b362001758565b6001600160a01b03916024357f00000000000000000000000000000000000000000000000000000000000000008416330362000365578060085582600014620003695780620003029162001869565b925b60015416803b156200036557849283604492885196879586946349e51b2560e01b865215159085015260248401525af1801562000358576200034557505051f35b6200035090620017bc565b620002545751f35b50505051903d90823e3d90fd5b8480fd5b80620003759162001869565b9262000304565b5082346200025457816003193601126200025457602090600a549051908152f35b5082346200025457816003193601126200025457602090620003be62002127565b9051908152f35b508234620002545780602092620003dc3662001768565b908252600c8552828220908252845220549051908152f35b839034620004295760203660031901126200042957358252600e6020908152918190205490516001600160a01b039091168152f35b8280fd5b508234620002545780602092620004443662001768565b908252600b8552828220908252845220549051908152f35b82843462000480576020366003190112620004805750620003be60209235620021b4565b80fd5b905082346200048057620004973662001768565b62989680829492106200067357620004af84620021b4565b92620151809182420490620004c482620019d8565b939150506001821062000660576000199160198382019410156200064a575b50620004f3620004ff91620019d8565b948594929391620018f4565b600181106200063757600c916200051c91019282840490620018f4565b910660011981116200062457926200055e92620005589260016200056896019162000548838362002053565b8091116200061b575b5062001dd6565b620018a6565b83420690620018f4565b90428210620004805750620005876200059b92620005589204620019d8565b5062000594818362002053565b9162001dd6565b90620143701982116200060657610dd419620143708301116200060657603b196201514483011162000606575064496cebb80091620005f2620005e9620005f8936201517f42910162001869565b948592620018bf565b620018bf565b049082519182526020820152f35b601190634e487b7160e01b6000525260246000fd5b92508c62000551565b634e487b7160e01b855260118752602485fd5b634e487b7160e01b865260118852602486fd5b909260011910620006605791620004f3620004e3565b634e487b7160e01b845260118652602484fd5b845162461bcd60e51b8152602081840152601a60248201527f556e646572206d696e696d756d20636f76657220616d6f756e740000000000006044820152606490fd5b50503462000254576020366003190112620002545760209181906001600160a01b03620006e262001741565b1681526011845220549051908152f35b50503462000254578160031936011262000254576020906009549051908152f35b9050346200042957602036600319011262000429576200073262001758565b9060018060a01b03807f000000000000000000000000000000000000000000000000000000000000000016331415908162000790575b5062000782575060ff801960005416911515161760005551f35b8251633d769c1160e21b8152fd5b9050600154163314153862000768565b505034620002545781600319360112620002545760ff602092541690519015158152f35b50503462000254578160031936011262000254576020906008549051908152f35b50503462000254578160031936011262000254576006548252600f6020908152918190205490516001600160a01b039091168152f35b8284346200048057806003193601126200048057506200083a62002127565b91612710908360001904821184151516620006065750600854602093620003be9202620018d3565b5050346200025457816003193601126200025457602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b505034620002545781600319360112620002545760075490516001600160a01b039091168152602090f35b905034620004295760203660031901126200042957600254813591906001600160a01b031633036200092e57507f98f8638d7fcb95eacabcf74919bde278d0b069a0579c6784d9bba8f93a4f62ee82600a548151908152836020820152a1600a5551f35b606490602084519162461bcd60e51b8352820152601460248201527313db9b1e481c1c9bdd1958dd1a5bdb881c1bdbdb60621b6044820152fd5b9050346200042957606036600319011262000429576200098762001741565b60243591604435916001600160a01b0390818416840362000b6c57818754620009b460ff821615620024a4565b60081c16330362000b5c578116908187526020906010825260ff87892054161562000b4c57818894939262000a478693620009ee620024da565b8585526011835264e8d4a5100062000a0a8b8d882054620018bf565b6002548d5163a9059cbb60e01b81526001600160a01b038d168b820190815293909204602084015290968794919093169284929091839160400190565b03925af1801562000b425762000b08575b5050803b1562000429578551632770a7eb60e21b81526001600160a01b03851692810192835260208301869052918391839182908490829060400103925af1801562000afe5762000ae2575b505082519182526001600160a01b031660208201527fad77d19b2b77e0dfe7bf3e9cd2c87dc639cc1e223d58cf3d69603478f684064590604090a151f35b62000aed90620017bc565b62000afa57833862000aa4565b8380fd5b85513d84823e3d90fd5b81813d831162000b3a575b62000b1f8183620017e7565b8101031262000afa5751801515036200042957388062000a58565b503d62000b13565b88513d87823e3d90fd5b8651631f05e71b60e31b81528490fd5b855163e3dfb17f60e01b81528390fd5b600080fd5b50503462000254578160031936011262000254576020906006549051908152f35b90503462000429578160031936011262000429576001600160a01b039060243590803590838316830362000b6c5783865462000bd260ff821615620024a4565b60081c16330362000cba5762000be7620024da565b6006548652600f6020528584868220541691823b15620002545786516340c10f1960e01b81526001600160a01b0386169181019182526020820185905292839182908490829060400103925af1801562000cb05762000c98575b5083519081526001600160a01b03919091166020808301919091529383917ff02b701fc10bff0958891c152c9eeabe4286e300c7ec9a0b08f64456ad941f7990604090a16006548152600f85522054169051908152f35b62000ca48691620017bc565b62000365573862000c41565b85513d88823e3d90fd5b845163e3dfb17f60e01b8152fd5b90503462000429576020908160031936011262000afa57803560018060a01b0392600183828683541688519283809263c34c08e560e01b82525afa8015620015095786918991620014c8575b50163303620014b85786856002541687516370a0823160e01b815230878201528481602481855afa9081156200143157839162001481575b508851638e15f47360e01b81528986828a8188885af180156200147757879286916200143b575b5062000d8a9062000d848a6200188b565b620018d3565b93838510156200131a5789549151636d40d7d760e11b8152808b01868152928c166001600160a01b0316602084015294959394938492839190829060400103925af190811562001310578591620012e1575b505062000d8462000df262000df8938362001869565b6200188b565b6006548852600f8352858789205416885260118352868820555b62000e1c62002127565b15620012d95762000e4262000e31846200188b565b62000e3b62002127565b90620018d3565b905b87868654167f00000000000000000000000000000000000000000000000000000000000000009360065491803b1562000afa5760a48985889381958f51978896879563c773a2d160e01b875286015260248501528c604485015260648401523060848401525af180156200121157620012c1575b50506006548852600f8352878688822054168760035416818352601186528983205491813b1562000afa578a5163c65323f160e01b8152808a018781526001600160a01b03909216602083015260408201939093528391839182908490829060600103925af180156200121157620012a5575b505085600354169562000f4060065462002597565b8060065562000f4f84620025c4565b9162000f5b82620025c4565b8a518094665052492d4c502d60c81b8983015262000f83815180928b6027860191016200180a565b8101602d60f81b60278201528d80916005549162000fa1836200177f565b928a81169081156200127c575060011462001238575b5050509062000ff09282612d4760f01b6002945262000fdf825180938d87850191016200180a565b0103601d19810186520184620017e7565b8951610acf8082019082821067ffffffffffffffff8311176200122557916200102a898f95949383946200275c8539818152018762001842565b039083f080156200121b57838352600f88528b832080546001600160a01b031916929091169182179055808252601187528a8220549099803b1562000429578b5160016224184f60e11b03198152998a018781526001600160a01b038c16602082015260408101929092528b99918391839182908490829060600103925af180156200121157620011f0575b5088905260108552868a209360ff1994848682541617905587519460a086528b94600554620010e5816200177f565b928360a08a01528282169182600014620011be57505060011462001171575b5050849384937fd2f6618ba448f8b76ee0e823f8bb8c568b748f1687e1bc6bd625306fc4fb50359a936200115893896000805160206200322b8339815191529901528a860152848203606086015262001842565b9060808301520390a1600654908351928352820152a151f35b60058d52878d209295508c925b828410620011a657505050840160c00192806000805160206200322b83398151915262001104565b805488850160c001528c9a509288019281016200117e565b1660c0808a019190915292151560051b880190920195508291506000805160206200322b833981519152905062001104565b620011fe91929850620017bc565b6200120d5787958938620010b6565b8880fd5b89513d84823e3d90fd5b8b513d84823e3d90fd5b634e487b7160e01b8e5260418b5260248efd5b90919250600581528a898183205b858410620012605750505050016028018260028f62000fb7565b8054858501602801528a965092909101918c918b910162001246565b60ff19166028848101919091528415159094029092019092019250849150600290508f62000fb7565b620012b090620017bc565b620012bd57873862000f2b565b8780fd5b620012cc90620017bc565b620012bd57873862000eb8565b869062000e44565b813d831162001308575b620012f78183620017e7565b8101031262000b6c57833862000ddc565b503d620012eb565b89513d8c823e3d90fd5b9051636d40d7d760e11b81528981019384523060208501529093509182908190604001038186865af190811562001431578391620013f6575b5062001360908662001869565b87875416823b1562000afa57895163329b1a9360e21b81528089019283526001600160a01b03909116602083015291839183919082908490829060400103925af18015620013ec57620013d0575b50506006548752600f8252848688205416875260118252868681205562000e12565b620013db90620017bc565b620013e8578638620013ae565b8680fd5b88513d84823e3d90fd5b809350858092503d831162001429575b620014128183620017e7565b8101031262000b6c57620013608992519062001353565b503d62001406565b89513d85823e3d90fd5b9550505083813d83116200146f575b620014568183620017e7565b8101031262000b6c57848962000d8a8c95519062000d73565b503d6200144a565b81513d87823e3d90fd5b809350858092503d8311620014b0575b6200149d8183620017e7565b8101031262000b6c578891513862000d4c565b503d62001491565b8551633f77a45b60e01b81528490fd5b809250848092503d831162001501575b620014e48183620017e7565b81010312620012bd57518581168103620012bd5785903862000d14565b503d620014d8565b87513d8a823e3d90fd5b905034620004295760203660031901126200042957358252600f6020908152918190205490516001600160a01b039091168152f35b83915034620002545760031960803682011262000429578254604435928035926200157760ff841615620024a4565b6001600160a01b039260081c83163303620017325762001596620024da565b62015180420493620015a885620019d8565b509088915b888310620016e95750505050620015c9606435602435620018d3565b92620015d586620026d8565b95620015ec620015e582620026d8565b96620019d8565b509089915b838310620016a757505050506003541693843b15620013e857869492620016796200166997959387938b51998a988997889663341922c160e01b88527f000000000000000000000000000000000000000000000000000000000000000090880152602487015260806044870152608486019062002725565b9184830301606485015262002725565b03925af180156200169d576200168e57509051f35b6200169990620017bc565b9051f35b83513d84823e3d90fd5b81620016b4848c62002710565b5280620016c2848b62002710565b52600180910192600c8411620016db575b0191620015f1565b9250809101908092620016d3565b818a526020600b81528b8b2090828c52528a8a206200170a858254620018f4565b9055600180910192600c841162001724575b0191620015ad565b92508091019080926200171c565b50855163e3dfb17f60e01b8152fd5b600435906001600160a01b038216820362000b6c57565b60043590811515820362000b6c57565b604090600319011262000b6c576004359060243590565b90600182811c92168015620017b1575b60208310146200179b57565b634e487b7160e01b600052602260045260246000fd5b91607f16916200178f565b67ffffffffffffffff8111620017d157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117620017d157604052565b918091926000905b8282106200182c57501162001825575050565b6000910152565b9150806020918301518186015201829162001812565b906020916200185d815180928185528580860191016200180a565b601f01601f1916010190565b81811062001875570390565b634e487b7160e01b600052601160045260246000fd5b64e8d4a5100090806000190482118115151662001875570290565b6201518090806000190482118115151662001875570290565b806000190482118115151662001875570290565b8115620018de570490565b634e487b7160e01b600052601260045260246000fd5b8119811162001875570190565b6000811280156001600160ff1b038390038413166200187557600160ff1b82900383121662001875570190565b6105b560008083136001600160ff1b03849004831116600116620019805760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166200198057500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b0181126001166200187557600d190190565b600082128015600160ff1b840183121662001875576001600160ff1b03830182131662001875570390565b6000916001600160ff1b039162010bd99084811281850381158185131662001dc257600160ff1b93838503928382121662001dae5787908401129162010bd819908162253d8c9301831384151662001d9a5701131662001d8657622649650193600193600491858783048411828913161662001d7357808712600760fd1b881216861662001d735762023ab196878160021b0597878985048211848b13161662001d6057877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b12161662001d6057880282811281850360031381151662000660578187036003121662001d60579084600362001adb93010590620019ad565b92818412848403881381151662001d145784860388121662001d0157868401610fa0888286048211858413161662001d2757887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8312858412161662001d275762001b5c9162164b09910205948262001b54876200192e565b0590620019ad565b828112818503601f1381151662001d2757818703601f121662001d1457601f019680888504605011848a13161662001d1457807ffe666666666666666666666666666666666666666666666666666666666666678912848a12161662001d145761098f9788816050020590828287048b11868413161662001d4d5784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c161662001d3a579060508362001c1993020590620019ad565b98600b82059782870360021382151662001d3a578290036002121662001d275781878604600c11858913161662001d2757817ff5555555555555555555555555555555555555555555555555555555555555568812858912161662001d275762001c8b90600288600c029101620019ad565b986031600160ff1b018112821662001d2757819060301901809504606411848613161662001d14577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98412838512161662001d0157505062001cfc929162001cf69160640262001901565b62001901565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b9291926107b2811062000b6c57600191617d4b600160ff1b018512831662001875576000918281128015926001600160ff1b03929182840391906112c0838113871662001dae57600160ff1b85900390818112831662001d9a5762001e5d98999a9b62001e709162001e6360049b8c92600c62001e538a62001994565b05908b0162001901565b6200192e565b0590617d4a190162001901565b6002600160ff1b0184128b166200204057600c62001e8e8562001994565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c831316166200202d578b7ff55555555555555555555555555555555555555555555555555555555555555682128c831216166200202d5762001efe90600c026001198601620019ad565b61016f8c828a0482118d841316166200201a578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d841216166200201a5762001f519291600c9102059062001901565b9661132494851316620020075783121662001ff4578792606492600c62001f7c62001f859462001994565b05910162001901565b05809204600311858313161662001d2757847fd5555555555555555555555555555555555555555555555555555555555555568212858312161662001d2757908262001fd6926003020590620019ad565b9262253d8c600160ff1b0184121662001d0157505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b906001811480156200211c575b801562002111575b801562002106575b8015620020fb575b8015620020f0575b8015620020e5575b1562002095575050601f90565b600214620020a35750601e90565b60038116159081620020d7575b8115620020c9575b5015620020c457601d90565b601c90565b6101909150061538620020b8565b6064810615159150620020b0565b50600c811462002088565b50600a811462002080565b506008811462002078565b506007811462002070565b506005811462002068565b506003811462002060565b6000806200213a620151804204620019d8565b50919081905b600382106200216357505050506200215f61271091600a5490620018bf565b0490565b909192936200218a908285526020600b8152604090818720908888525285205490620018f4565b93600180910192600c8411620021a6575b019291929062002140565b92508091019080926200219b565b9062093a80620021c76009544262001869565b11156200247f57620021e762000df283620021e162002127565b620018f4565b60025460408051633f14610f60e21b81526004956001600160a01b0394929385169260209290919083818a81885afa9081156200243e5760009162002449575b5062002239929162000e3b91620018f4565b91600654600052600f825284846000205416845183818a816318160ddd60e01b958682525afa9081156200243e5790849160009162002407575b506200227f906200188b565b918987518095819382525afa918215620023fc579088939291600092620023bf575b508291620022af91620018d3565b956001541685519384809263a7e9f1c760e01b82525afa938415620023b557506000936200237b575b505081620022e691620018bf565b9064e8d4a510001990818311620023665762002337906200233064e8d4a510008095017f0000000000000000000000000000000000000000000000000000000000000000620018bf565b94620018bf565b90811162002351576200234e9394500190620018d3565b90565b601185634e487b7160e01b6000525260246000fd5b601186634e487b7160e01b6000525260246000fd5b8181949293943d8311620023ad575b620023968183620017e7565b810103126200048057505190620022e638620022d8565b503d6200238a565b513d6000823e3d90fd5b91909280945082813d8311620023f4575b620023dc8183620017e7565b8101031262000480575051879291620022af620022a1565b503d620023d0565b85513d6000823e3d90fd5b9182813d831162002436575b6200241f8183620017e7565b810103126200048057505183906200227f62002273565b503d62002413565b86513d6000823e3d90fd5b908482813d831162002477575b620024628183620017e7565b81010312620004805750516200223962002227565b503d62002456565b7f00000000000000000000000000000000000000000000000000000000000000009150565b15620024ac57565b60405162461bcd60e51b815260206004820152600660248201526514185d5cd95960d21b6044820152606490fd5b60ff600d541615806200257d575b620024ef57565b6001546001600160a01b0316803b1562000b6c5760008091602460405180948193631528244d60e11b83527f000000000000000000000000000000000000000000000000000000000000000060048401525af1801562002571576200255f575b50600160ff19600d541617600d55565b6200256a90620017bc565b386200254f565b6040513d6000823e3d90fd5b5062093a80620025906009544262001869565b11620024e8565b6000198114620018755760010190565b67ffffffffffffffff8111620017d157601f01601f191660200190565b80156200268f57600081805b620026785750620025e181620025a7565b90620025f16040519283620017e7565b808252601f196200260282620025a7565b013660208401375b80831562002671576001811062001875576000190192600a91828206603081198111620018755785518710156200265b570160f81b6001600160f81b03191660001a908401601f015304916200260a565b634e487b7160e01b600052603260045260246000fd5b5050905090565b9062002686600a9162002597565b910480620025d0565b506040516040810181811067ffffffffffffffff821117620017d15760405260018152600360fc1b602082015290565b67ffffffffffffffff8111620017d15760051b60200190565b90620026e482620026bf565b620026f36040519182620017e7565b828152809262002706601f1991620026bf565b0190602036910137565b80518210156200265b5760209160051b010190565b90815180825260208080930193019160005b82811062002746575050505090565b8351855293810193928101926001016200273756fe6080604052346200038a5762000acf803803806200001d816200038f565b928339810160209182818303126200038a5780516001600160401b03918282116200038a570192601f908382860112156200038a5784518381116200027957601f199562000071828501881684016200038f565b958287528383830101116200038a578183916000905b8282106200037057501162000361575b50506040519460408601868110858211176200027957604052600686526505052492d4c560d41b82870152845184811162000279576000546001968782811c9216801562000356575b858310146200025857818684931162000300575b5084908683116001146200029b576000926200028f575b5050600019600383901b1c191690861b176000555b8551938411620002795784548581811c911680156200026e575b8382101462000258578381116200020d575b5081928411600114620001a95750508192936000926200019d575b5050600019600383901b1c191690821b1790555b600580546001600160a01b031916331790556040516107199081620003b68239f35b01519050388062000167565b6000858152828120918516969193925b878210620001f557505083859610620001db575b505050811b0190556200017b565b015160001960f88460031b161c19169055388080620001cd565b808785968294968601518155019501930190620001b9565b85600052826000208480870160051c8201928588106200024e575b0160051c019086905b828110620002415750506200014c565b6000815501869062000231565b9250819262000228565b634e487b7160e01b600052602260045260246000fd5b90607f16906200013a565b634e487b7160e01b600052604160045260246000fd5b0151905038806200010b565b90848994169160008052866000209260005b88828210620002e95750508411620002cf575b505050811b0160005562000120565b015160001960f88460031b161c19169055388080620002c0565b8385015186558c97909501949384019301620002ad565b90915060008052846000208680850160051c8201928786106200034c575b918a91869594930160051c01915b8281106200033c575050620000f4565b600081558594508a91016200032c565b925081926200031e565b91607f1691620000e0565b60009186010152388162000097565b92809250818401015182828a010152018290849262000087565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002795760405256fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461050357508063095ea7b31461049557806318160ddd1461047657806323b872dd146103b2578063313ce5671461039657806340c10f191461030a57806370a08231146102d257806395d89b41146101ce5780639dc29fac1461015d578063a9059cbb146100e75763dd62ed3e1461009c57600080fd5b346100e357816003193601126100e35760209282916100b9610630565b6100c161064b565b6001600160a01b03918216845291865283832091168252845220549051908152f35b8280fd5b505034610159578060031936011261015957602091610104610630565b82602435913384526003865281842061011e848254610661565b90556001600160a01b0316808452600386529220805482019055825190815233906000805160206106c4833981519152908590a35160018152f35b5080fd5b50503461015957806003193601126101595781610178610630565b6000805160206106c483398151915260206024359260018060a01b03906101a482600554163314610682565b1692838552600382528585206101bb828254610661565b905580600254036002558551908152a351f35b5091903461015957816003193601126101595780519082600180549081811c908083169283156102c8575b60209384841081146102b5578388529081156102995750600114610261575b505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b0390f35b634e487b7160e01b815260418552602490fd5b809293508652828620918387935b8385106102855750505050830101388080610218565b80548886018301529301928490820161026f565b60ff1916878501525050151560051b8401019050388080610218565b634e487b7160e01b895260228a52602489fd5b91607f16916101f9565b5050346101595760203660031901126101595760209181906001600160a01b036102fa610630565b1681526003845220549051908152f35b50346100e357816003193601126100e357610323610630565b600554602435926001600160a01b0392916103419084163314610682565b6002549084198211610383575085926000805160206106c48339815191529285602093016002551693848452600382528584208181540190558551908152a351f35b634e487b7160e01b875260119052602486fd5b5050346101595781600319360112610159576020905160068152f35b509134610473576060366003190112610473576103cd610630565b6000805160206106c48339815191526103e461064b565b6001600160a01b0392831680855260208781528686203387528152868620549097919488936044359389938560018201610450575b50505086885260038552828820610431858254610661565b9055169586815260038452208181540190558551908152a35160018152f35b61045991610661565b90888a528652838920338a52865283892055388085610419565b80fd5b5050346101595781600319360112610159576020906002549051908152f35b50346100e357816003193601126100e3576020926104b1610630565b918360243592839233825287528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b84915083346100e357826003193601126100e357828354600181811c908083169283156105cf575b60209384841081146102b5578388529081156105b3575060011461057b57505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b919250858052828620918387935b83851061059f5750505050830101858080610218565b805488860183015293019284908201610589565b60ff1916878501525050151560051b8401019050858080610218565b91607f169161052b565b919091602080825283519081818401526000945b82861061061a57505080604093941161060d575b601f01601f1916010190565b6000838284010152610601565b85810182015184870160400152948101946105ed565b600435906001600160a01b038216820361064657565b600080fd5b602435906001600160a01b038216820361064657565b81811061066c570390565b634e487b7160e01b600052601160045260246000fd5b1561068957565b60405162461bcd60e51b815260206004820152601260248201527113db9b1e481c1c9a5bdc9a5d1e481c1bdbdb60721b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a62ed31b3d2310f91b2d6c7489894b8fd467f3f1be684c5d1fd6bd17c936458664736f6c634300080f00335bc145acec26384dc09c6269c9e569c69db21ad88cbd81319958b05998b83b5ba26469706673582212203fc4af5d82af1f3697f9af88f71b31ad59b7c8160fc007d7d51d0dc94e159acd64736f6c634300080f00336080604052346200038a5762000acf803803806200001d816200038f565b928339810160209182818303126200038a5780516001600160401b03918282116200038a570192601f908382860112156200038a5784518381116200027957601f199562000071828501881684016200038f565b958287528383830101116200038a578183916000905b8282106200037057501162000361575b50506040519460408601868110858211176200027957604052600686526505052492d4c560d41b82870152845184811162000279576000546001968782811c9216801562000356575b858310146200025857818684931162000300575b5084908683116001146200029b576000926200028f575b5050600019600383901b1c191690861b176000555b8551938411620002795784548581811c911680156200026e575b8382101462000258578381116200020d575b5081928411600114620001a95750508192936000926200019d575b5050600019600383901b1c191690821b1790555b600580546001600160a01b031916331790556040516107199081620003b68239f35b01519050388062000167565b6000858152828120918516969193925b878210620001f557505083859610620001db575b505050811b0190556200017b565b015160001960f88460031b161c19169055388080620001cd565b808785968294968601518155019501930190620001b9565b85600052826000208480870160051c8201928588106200024e575b0160051c019086905b828110620002415750506200014c565b6000815501869062000231565b9250819262000228565b634e487b7160e01b600052602260045260246000fd5b90607f16906200013a565b634e487b7160e01b600052604160045260246000fd5b0151905038806200010b565b90848994169160008052866000209260005b88828210620002e95750508411620002cf575b505050811b0160005562000120565b015160001960f88460031b161c19169055388080620002c0565b8385015186558c97909501949384019301620002ad565b90915060008052846000208680850160051c8201928786106200034c575b918a91869594930160051c01915b8281106200033c575050620000f4565b600081558594508a91016200032c565b925081926200031e565b91607f1691620000e0565b60009186010152388162000097565b92809250818401015182828a010152018290849262000087565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002795760405256fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461050357508063095ea7b31461049557806318160ddd1461047657806323b872dd146103b2578063313ce5671461039657806340c10f191461030a57806370a08231146102d257806395d89b41146101ce5780639dc29fac1461015d578063a9059cbb146100e75763dd62ed3e1461009c57600080fd5b346100e357816003193601126100e35760209282916100b9610630565b6100c161064b565b6001600160a01b03918216845291865283832091168252845220549051908152f35b8280fd5b505034610159578060031936011261015957602091610104610630565b82602435913384526003865281842061011e848254610661565b90556001600160a01b0316808452600386529220805482019055825190815233906000805160206106c4833981519152908590a35160018152f35b5080fd5b50503461015957806003193601126101595781610178610630565b6000805160206106c483398151915260206024359260018060a01b03906101a482600554163314610682565b1692838552600382528585206101bb828254610661565b905580600254036002558551908152a351f35b5091903461015957816003193601126101595780519082600180549081811c908083169283156102c8575b60209384841081146102b5578388529081156102995750600114610261575b505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b0390f35b634e487b7160e01b815260418552602490fd5b809293508652828620918387935b8385106102855750505050830101388080610218565b80548886018301529301928490820161026f565b60ff1916878501525050151560051b8401019050388080610218565b634e487b7160e01b895260228a52602489fd5b91607f16916101f9565b5050346101595760203660031901126101595760209181906001600160a01b036102fa610630565b1681526003845220549051908152f35b50346100e357816003193601126100e357610323610630565b600554602435926001600160a01b0392916103419084163314610682565b6002549084198211610383575085926000805160206106c48339815191529285602093016002551693848452600382528584208181540190558551908152a351f35b634e487b7160e01b875260119052602486fd5b5050346101595781600319360112610159576020905160068152f35b509134610473576060366003190112610473576103cd610630565b6000805160206106c48339815191526103e461064b565b6001600160a01b0392831680855260208781528686203387528152868620549097919488936044359389938560018201610450575b50505086885260038552828820610431858254610661565b9055169586815260038452208181540190558551908152a35160018152f35b61045991610661565b90888a528652838920338a52865283892055388085610419565b80fd5b5050346101595781600319360112610159576020906002549051908152f35b50346100e357816003193601126100e3576020926104b1610630565b918360243592839233825287528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b84915083346100e357826003193601126100e357828354600181811c908083169283156105cf575b60209384841081146102b5578388529081156105b3575060011461057b57505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b919250858052828620918387935b83851061059f5750505050830101858080610218565b805488860183015293019284908201610589565b60ff1916878501525050151560051b8401019050858080610218565b91607f169161052b565b919091602080825283519081818401526000945b82861061061a57505080604093941161060d575b601f01601f1916010190565b6000838284010152610601565b85810182015184870160400152948101946105ed565b600435906001600160a01b038216820361064657565b600080fd5b602435906001600160a01b038216820361064657565b81811061066c570390565b634e487b7160e01b600052601160045260246000fd5b1561068957565b60405162461bcd60e51b815260206004820152601260248201527113db9b1e481c1c9a5bdc9a5d1e481c1bdbdb60721b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a62ed31b3d2310f91b2d6c7489894b8fd467f3f1be684c5d1fd6bd17c936458664736f6c634300080f0033036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0a264697066735822122054db2ddeb762481c8e241a48b124e424bd77da510d17f624f0a7111429b62d2864736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b60003560e01c80630121cff514620002515780631b35278914620002465780631c3c0ea8146200023b5780632a50489a14620002305780632dd57bb014620002255780632f380b35146200021a5780633f81ff26146200020f57806341249745146200020457806358bf0f2c14620001f95780636bdbd19514620001ee578063715018a614620001e3578063746376ee14620001d85780638da5cb5b14620001cd5780639e3079cb14620001c2578063a2e1ce6214620001b7578063a7e9f1c714620001ac578063ac4afa3814620001a1578063bb9febaf1462000196578063c34c08e5146200018b578063d98a254c1462000180578063e3356ccf1462000175578063e5249a10146200016a578063ef372298146200015f578063f2fde38b14620001545763f6cb90ab146200014a57600080fd5b6200000f62000fb7565b506200000f62000f15565b506200000f62000ed6565b506200000f62000e83565b506200000f62000e30565b506200000f62000d77565b506200000f62000d4b565b506200000f62000cbf565b506200000f62000c3b565b506200000f62000ab3565b506200000f62000a6f565b506200000f62000a4e565b506200000f62000a22565b506200000f620009de565b506200000f62000978565b506200000f620008ab565b506200000f62000806565b506200000f620007c2565b506200000f6200076f565b506200000f620006c1565b506200000f620005c1565b506200000f620004f3565b506200000f620004a0565b506200000f620002fd565b506200000f6200028a565b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b50346200000f5760203660031901126200000f57620002a86200025c565b6000546001600160a01b039190620002c490831633146200107e565b60038054919092166001600160a01b0319909116179055005b6024359081151582036200000f57565b6004359081151582036200000f57565b50346200000f5760403660031901126200000f576200031b620002dd565b60045462000339906001600160a01b03165b6001600160a01b031690565b331415806200047f575b6200046d576200037b6200032d6200032d60016200036d6004356000526008602052604060002090565b01546001600160a01b031690565b803b156200000f576040516305e5fe2360e41b81528215156004820152600092839290919083908290602490829084905af180156200045d575b62000446575b50600354620003d5906200032d906001600160a01b031681565b90813b15620004425760405163a8a2b43160e01b8152901515600482015291908290602490829084905af1801562000432575b62000414575b50604051f35b80620004246200042b9262000b28565b8062000859565b386200040e565b6200043c620012f1565b62000408565b5050fd5b8062000424620004569262000b28565b38620003bb565b62000467620012f1565b620003b5565b60405163570d52bd60e11b8152600490fd5b5060015462000497906001600160a01b03166200032d565b33141562000343565b50346200000f5760203660031901126200000f57620004be6200025c565b6000546001600160a01b039190620004da90831633146200107e565b60018054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f576000338152600e602052604060ff818320541615620005b157338252600c60205260ff8183205416620005a157338252600c602052808220805460ff19166001179055620005606200055b600d5460010190565b600d55565b600d548151600435815233602082015260408101919091527fa16172101044efd65843cd11b767b8aa758d7da7be12573e0c897b52b71444fd90606090a151f35b516334c8f8b960e01b8152600490fd5b51630fc64fb960e21b8152600490fd5b50346200000f5760203660031901126200000f57620005df6200025c565b6000546001600160a01b039190620005fb90831633146200107e565b60028054919092166001600160a01b0319909116179055005b918091926000905b828210620006365750116200062f575050565b6000910152565b915080602091830151818601520182916200061c565b90602091620006678151809281855285808601910162000614565b601f01601f1916010190565b6020815260a0608062000692845183602086015260c08501906200064c565b93600180841b038060208301511660408601526040820151166060850152606081015182850152015191015290565b50346200000f5760203660031901126200000f576200076b60408060808151620006eb8162000b4b565b606081526000918183602081940152828582015282606082015201526004358152600860205220906004815192620007238462000b4b565b6200072e8162000b89565b845260018101546001600160a01b039081166020860152600282015416838501526003810154606085015201546080830152519182918262000673565b0390f35b50346200000f5760203660031901126200000f576200078d6200025c565b6000546001600160a01b039190620007a990831633146200107e565b60078054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f576001600160a01b03620007e86200025c565b16600052600c602052602060ff604060002054166040519015158152f35b50346200000f5760203660031901126200000f57620008246200025c565b6000546001600160a01b0391906200084090831633146200107e565b60068054919092166001600160a01b0319909116179055005b60009103126200000f57565b6020908160408183019282815285518094520193019160005b8281106200088d575050505090565b83516001600160a01b0316855293810193928101926001016200087e565b50346200000f576000806003193601126200097557600a5490600119821162000965575b600180920190620008e08262001029565b91604091620008f28351948562000b67565b818452601f19620009038362001029565b016020903682870137815b83811062000925578451806200076b888262000865565b808352600882528483208701548791906200095e906001600160a01b03166200094f838a62001053565b6001600160a01b039091169052565b016200090e565b6200096f62000fd8565b620008cf565b80fd5b50346200000f57600080600319360112620009755780546001600160a01b03811690620009a73383146200107e565b82604051927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08285a36001600160a01b0319168255f35b50346200000f5760203660031901126200000f576001600160a01b0362000a046200025c565b16600052600e602052602060ff604060002054166040519015158152f35b50346200000f5760003660031901126200000f576000546040516001600160a01b039091168152602090f35b50346200000f5760003660031901126200000f576020600a54604051908152f35b50346200000f5760203660031901126200000f576001600160a01b0362000a956200025c565b16600052600f602052602060ff604060002054166040519015158152f35b50346200000f5760003660031901126200000f576020600d54604051908152f35b90600182811c9216801562000b06575b602083101462000af057565b634e487b7160e01b600052602260045260246000fd5b91607f169162000ae4565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b03811162000b3c57604052565b62000b4662000b11565b604052565b60a081019081106001600160401b0382111762000b3c57604052565b90601f801991011681019081106001600160401b0382111762000b3c57604052565b906040519182600082549262000b9f8462000ad4565b90818452600194858116908160001462000c16575060011462000bcf575b505062000bcd9250038362000b67565b565b9093915060005260209081600020936000915b81831062000bfd57505062000bcd9350820101388062000bbd565b8554888401850152948501948794509183019162000be2565b91505062000bcd94506020925060ff191682840152151560051b820101388062000bbd565b50346200000f5760203660031901126200000f57600435600052600860205262000ca6604060002062000c6e8162000b89565b9060018060a01b0390816001820154169160028201541690600460038201549101549160405195869560a0875260a08701906200064c565b9360208601526040850152606084015260808301520390f35b50346200000f5760803660031901126200000f576001600160401b036004358181116200000f57366023820112156200000f5780600401359182116200000f5736602483830101116200000f576200076b9162000d319162000d2062000273565b60643592602460443593016200134d565b6040516001600160a01b0390911681529081906020820190565b50346200000f5760003660031901126200000f576001546040516001600160a01b039091168152602090f35b50346200000f5760403660031901126200000f5762000d95620002ed565b6024359033600052600e60205260ff604060002054161562000e1e571562000df85762000dc590600b5462000fef565b600b555b7f8b8564868e5db4ac945b0fd897338876dcc0c95a5f183b340f47285ebbcb6af16020600b54604051908152a1005b600b5481811062000e0e575b03600b5562000dc9565b62000e1862000fd8565b62000e04565b604051630fc64fb960e21b8152600490fd5b50346200000f5760203660031901126200000f5762000e4e6200025c565b6000546001600160a01b03919062000e6a90831633146200107e565b60048054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f5762000ea16200025c565b6000546001600160a01b03919062000ebd90831633146200107e565b60058054919092166001600160a01b0319909116179055005b50346200000f5760203660031901126200000f576001600160a01b0362000efc6200025c565b1660005260096020526020604060002054604051908152f35b50346200000f5760203660031901126200000f5762000f336200025c565b6000546001600160a01b039062000f4e90821633146200107e565b81161562000f635762000f61906200187e565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b50346200000f5760003660031901126200000f576020600b54604051908152f35b50634e487b7160e01b600052601160045260246000fd5b8119811162000ffc570190565b6200100662000fd8565b0190565b6040519062000bcd8262000b4b565b9062000bcd604051928362000b67565b6020906001600160401b03811162001043575b60051b0190565b6200104d62000b11565b6200103c565b8051821015620010685760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b156200108657565b60405162461bcd60e51b815260206004820152600a60248201526927b7363c9037bbb732b960b11b6044820152606490fd5b600190600019811462000ffc570190565b9291926001600160401b03821162001114575b60405191620010f6601f8201601f19166020018462000b67565b8294818452818301116200000f578281602093846000960137010152565b6200111e62000b11565b620010dc565b90601f81116200113357505050565b600091825260208220906020601f850160051c8301941062001172575b601f0160051c01915b8281106200116657505050565b81815560010162001159565b909250829062001150565b90805180516001600160401b038111620012e1575b620011aa81620011a3865462000ad4565b8662001124565b6020918290601f8311600114620012605760809383600496946200121d94620011fa9460009262001254575b50508160011b916000199060031b1c19161787555b8301516001600160a01b031690565b6001860180546001600160a01b0319166001600160a01b03909216919091179055565b60408101516002850180546001600160a01b0319166001600160a01b03909216919091179055606081015160038501550151910155565b015190503880620011d6565b90601f198316916200127787600052602060002090565b9260005b818110620012c95750846200121d94620011fa946080989460049a9860019510620012af575b505050811b018755620011eb565b015160001960f88460031b161c19169055388080620012a1565b9293866001819287860151815501950193016200127b565b620012eb62000b11565b62001192565b506040513d6000823e3d90fd5b938060a0969998979460e0938752600180891b03809516602088015260c060408801528160c0880152838701376000828287010152601f80199101168401019616606083015260808201520152565b600080549095919491939192906001600160a01b031633141580620016b3575b620016a1576001600160a01b0382166000908152600f602052604090205460ff166200168f57620013aa620013a584600b5462000fef565b600b55565b620013b7600a54620010b8565b94620013c286600a55565b620013dd858585620013d6368787620010c9565b8a62001770565b9662001440620013ec6200100a565b620013f9368686620010c9565b81526001600160a01b038a1660208201526001600160a01b03861660408201528660608201528760808201526200143a896000526008602052604060002090565b6200117d565b6001600160a01b0384166000908152600f602052604090206200146b905b805460ff19166001179055565b6001600160a01b0388166000908152600e602052604090206200148e906200145e565b6001600160a01b0388166000908152600960205260409020879055600254620014c2906200032d906001600160a01b031681565b803b156200166457604051630b6cccdd60e41b81526001600160a01b038a8116600483015286166024820152604481018990529082908290606490829084905af180156200167f575b62001668575b506005546200152b906200032d906001600160a01b031681565b803b156200166457604051632a99dcd560e21b81526001600160a01b038a81166004830152861660248201529082908290604490829084905af1801562001654575b6200163d575b506006546200158d906200032d906001600160a01b031681565b90813b15620009755760405163d914cd4b60e01b81526001600160a01b03861660048201527f6f92dd7fd4aaa286bc76a2ea88bede9a5077443cccc9b4aece620689e3fc63de988a98909762001610979196909591949093919291908290602490829084905af180156200162d575b62001616575b5060405197889788620012fe565b0390a190565b8062000424620016269262000b28565b3862001602565b62001637620012f1565b620015fc565b80620004246200164d9262000b28565b3862001573565b6200165e620012f1565b6200156d565b5080fd5b8062000424620016789262000b28565b3862001511565b62001689620012f1565b6200150b565b6040516308ba7c3f60e31b8152600490fd5b604051636adaa0f960e01b8152600490fd5b50600154620016cb906001600160a01b03166200032d565b3314156200136d565b90620010066020928281519485920162000614565b602092918152620017038251809385808501910162000614565b010190565b98939496606093620017326101209a948c949e9d999e85526101408060208701528501906200064c565b9c60018060a01b03998a9889978896878096166040820152015260808d01521660a08b01521660c08901521660e08701521661010085015216910152565b926200184d926200185462001861936200183c6200186798976200182f614697956200179f6020880162001019565b96808852620018c76020890139604051976020890189620017c2888784620016e9565b0399620017d8601f199b8c810183528262000b67565b519020600054600654919d916001600160a01b0391821691166003549091906001600160a01b03166002549093906001600160a01b03166007549095906001600160a01b0316966040519b8c9a60208c0162001708565b0385810183528262000b67565b6040519586936020850190620016d4565b90620016d4565b0390810183528262000b67565b6200186a565b90565b6020815191016000f590813b156200000f57565b60005460018060a01b03809216809282167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a36001600160a01b0319161760005556fe6101208060405234620006e3576000620046978038038091620000238286620006e8565b843982019161014081840312620006df57805160208201516001600160401b038111620006db57820184601f82011215620006db57805190620000668262000722565b95620000766040519788620006e8565b82875260208383010111620006d757906200009891602080880191016200073e565b620000a66040830162000776565b936060830151608084015190620000c060a0860162000776565b96620000cf60c0870162000776565b93620000de60e0880162000776565b95620000fd610120620000f56101008b0162000776565b990162000776565b60c09a909a52610100528051906001600160401b0382116200057e578190620001286005546200078b565b601f811162000686575b50602090601f83116001146200060f578a9262000603575b50508160011b916000199060031b1c1916176005555b600780546001600160a01b0319166001600160a01b03929092169190911790556008554260095560e0526003608052600160a052600654620001a290620007c8565b80600655620001b46101005162000815565b620001bf8262000815565b6040518092665052492d4c502d60c81b6020830152620001ea8151809260206027860191016200073e565b8101602d60f81b602782015288906005549062000207826200078b565b9160018116908115620005dd575060011462000592575b505090620002579282612d4760f01b600294526200024682518093602087850191016200073e565b0103601d19810184520182620006e8565b604051610acf808201906001600160401b038211838310176200057e57602083926200028e9262003ba885398181520184620007ee565b039087f09182156200057357808752600f6020908152604080892080546001600160a01b0319166001600160a01b0387811691821790925561010051908b526011909352908920549086163b156200056f5760405191637fdbe7b160e11b8352600483015260018060a01b0385166024830152604482015287816064818360018060a01b038a165af18015620005645762000533575b5060018060a01b03831687526010602052604087209160ff199260018482541617905561010051916040519260a08452899460055462000364816200078b565b918260a088015260018216918260001462000513575050600114620004c8575b50938392620003c7927f5bc145acec26384dc09c6269c9e569c69db21ad88cbd81319958b05998b83b5b96602086015260408501528382036060850152620007ee565b6001600160a01b03851660808301520390a16001600160a01b0390811685526011602052604080862064e8d4a510009055612710600a55600180546001600160a01b0319908116331790915560038054821694841694909417909355600280548416948316949094179093558454610100600160a81b03191660089490941b610100600160a81b031693909317909355600480549093169390911692909217905551613280908162000928823960805181505060a05181505060c0518181816102c1015261073d015260e0518181816102710152818161230b015261248101526101005181818161087c01528181610e4b0152818161162f015261251c0152f35b60058b52939450928990600080516020620046778339815191525b818310620004fb575050840160c00193928362000384565b805460c08489010152602090920191600101620004e3565b1660c08781019190915291151560051b8601909101955084905062000384565b9096906001600160401b0381116200055057604052953862000324565b634e487b7160e01b82526041600452602482fd5b6040513d8a823e3d90fd5b8880fd5b6040513d88823e3d90fd5b634e487b7160e01b89526041600452602489fd5b60058b5290915089600080516020620046778339815191525b838210620005c2575050016028018260026200021e565b805460288385010152869450602090910190600101620005ab565b60ff1916602883810191909152831515909302909101909101915083905060026200021e565b0151905038806200014a565b60058b52600080516020620046778339815191529250601f1984168b5b8181106200066d575090846001959493921062000653575b505050811b0160055562000160565b015160001960f88460031b161c1916905538808062000644565b929360206001819287860151815501950193016200062c565b90915060058a5260208a20601f840160051c810160208510620006cf575b90601f8594930160051c01905b818110620006c0575062000132565b8b8155849350600101620006b1565b5080620006a4565b8480fd5b8380fd5b5080fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200070c57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116200070c57601f01601f191660200190565b918091926000905b8282106200076057501162000759575050565b6000910152565b9150806020918301518186015201829162000746565b51906001600160a01b0382168203620006e357565b90600182811c92168015620007bd575b6020831014620007a757565b634e487b7160e01b600052602260045260246000fd5b91607f16916200079b565b6000198114620007d85760010190565b634e487b7160e01b600052601160045260246000fd5b9060209162000809815180928185528580860191016200073e565b601f01601f1916010190565b8015620008f857600081805b620008e15750620008328162000722565b91620008426040519384620006e8565b818352601f19620008538362000722565b01918160209336858701375b6200086a5750505090565b60018110620007d8576000190190600a90603082820680198211620007d8578651851015620008cb570160f81b7fff000000000000000000000000000000000000000000000000000000000000001660001a8584018501530490816200085f565b634e487b7160e01b600052603260045260246000fd5b90620008ef600a91620007c8565b91048062000821565b50604080519081016001600160401b038111828210176200070c5760405260018152600360fc1b60208201529056fe604060808152600490813610156200001657600080fd5b600091823560e01c9081630aadb77714620015485781630b92b5e4146200151357816310b72d681462000cc85781631487ddda1462000b92578163172195221462000b715781631733ea5014620009685781632440f3e914620008ca5781632b796968146200089f5781633e0dc34e14620008625781634d05124c146200081b5781634e75827114620007e557816359b6a0c914620007c45781635c975abb14620007a05781635e5fe230146200071357816378e9792514620006f257816379e25f3a14620006b65781638905faeb14620004835781638a9be828146200045c57839082639926878e146200042d578263a6f1c7c914620003f4578263b1fead0b14620003c5578263d06a30be146200039d578263d90543b8146200037c578263e17739b514620002945750508063e2e7c36614620002585763f3466dfa146200015f57600080fd5b3462000254578160031936011262000254578051908260055462000183816200177f565b80855290600190818116908115620002295750600114620001cb575b505050620001b482620001c7940383620017e7565b5191829160208352602083019062001842565b0390f35b60058352602095507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b828410620002155750505082620001c794620001b492820101946200019f565b8054868501880152928601928101620001f5565b620001c79750620001b49450602092508693915060ff191682840152151560051b820101946200019f565b5080fd5b50346200025457816003193601126200025457602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b909150346200025457826003193601126200025457620002b362001758565b6001600160a01b03916024357f00000000000000000000000000000000000000000000000000000000000000008416330362000365578060085582600014620003695780620003029162001869565b925b60015416803b156200036557849283604492885196879586946349e51b2560e01b865215159085015260248401525af1801562000358576200034557505051f35b6200035090620017bc565b620002545751f35b50505051903d90823e3d90fd5b8480fd5b80620003759162001869565b9262000304565b5082346200025457816003193601126200025457602090600a549051908152f35b5082346200025457816003193601126200025457602090620003be62002127565b9051908152f35b508234620002545780602092620003dc3662001768565b908252600c8552828220908252845220549051908152f35b839034620004295760203660031901126200042957358252600e6020908152918190205490516001600160a01b039091168152f35b8280fd5b508234620002545780602092620004443662001768565b908252600b8552828220908252845220549051908152f35b82843462000480576020366003190112620004805750620003be60209235620021b4565b80fd5b905082346200048057620004973662001768565b62989680829492106200067357620004af84620021b4565b92620151809182420490620004c482620019d8565b939150506001821062000660576000199160198382019410156200064a575b50620004f3620004ff91620019d8565b948594929391620018f4565b600181106200063757600c916200051c91019282840490620018f4565b910660011981116200062457926200055e92620005589260016200056896019162000548838362002053565b8091116200061b575b5062001dd6565b620018a6565b83420690620018f4565b90428210620004805750620005876200059b92620005589204620019d8565b5062000594818362002053565b9162001dd6565b90620143701982116200060657610dd419620143708301116200060657603b196201514483011162000606575064496cebb80091620005f2620005e9620005f8936201517f42910162001869565b948592620018bf565b620018bf565b049082519182526020820152f35b601190634e487b7160e01b6000525260246000fd5b92508c62000551565b634e487b7160e01b855260118752602485fd5b634e487b7160e01b865260118852602486fd5b909260011910620006605791620004f3620004e3565b634e487b7160e01b845260118652602484fd5b845162461bcd60e51b8152602081840152601a60248201527f556e646572206d696e696d756d20636f76657220616d6f756e740000000000006044820152606490fd5b50503462000254576020366003190112620002545760209181906001600160a01b03620006e262001741565b1681526011845220549051908152f35b50503462000254578160031936011262000254576020906009549051908152f35b9050346200042957602036600319011262000429576200073262001758565b9060018060a01b03807f000000000000000000000000000000000000000000000000000000000000000016331415908162000790575b5062000782575060ff801960005416911515161760005551f35b8251633d769c1160e21b8152fd5b9050600154163314153862000768565b505034620002545781600319360112620002545760ff602092541690519015158152f35b50503462000254578160031936011262000254576020906008549051908152f35b50503462000254578160031936011262000254576006548252600f6020908152918190205490516001600160a01b039091168152f35b8284346200048057806003193601126200048057506200083a62002127565b91612710908360001904821184151516620006065750600854602093620003be9202620018d3565b5050346200025457816003193601126200025457602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b505034620002545781600319360112620002545760075490516001600160a01b039091168152602090f35b905034620004295760203660031901126200042957600254813591906001600160a01b031633036200092e57507f98f8638d7fcb95eacabcf74919bde278d0b069a0579c6784d9bba8f93a4f62ee82600a548151908152836020820152a1600a5551f35b606490602084519162461bcd60e51b8352820152601460248201527313db9b1e481c1c9bdd1958dd1a5bdb881c1bdbdb60621b6044820152fd5b9050346200042957606036600319011262000429576200098762001741565b60243591604435916001600160a01b0390818416840362000b6c57818754620009b460ff821615620024a4565b60081c16330362000b5c578116908187526020906010825260ff87892054161562000b4c57818894939262000a478693620009ee620024da565b8585526011835264e8d4a5100062000a0a8b8d882054620018bf565b6002548d5163a9059cbb60e01b81526001600160a01b038d168b820190815293909204602084015290968794919093169284929091839160400190565b03925af1801562000b425762000b08575b5050803b1562000429578551632770a7eb60e21b81526001600160a01b03851692810192835260208301869052918391839182908490829060400103925af1801562000afe5762000ae2575b505082519182526001600160a01b031660208201527fad77d19b2b77e0dfe7bf3e9cd2c87dc639cc1e223d58cf3d69603478f684064590604090a151f35b62000aed90620017bc565b62000afa57833862000aa4565b8380fd5b85513d84823e3d90fd5b81813d831162000b3a575b62000b1f8183620017e7565b8101031262000afa5751801515036200042957388062000a58565b503d62000b13565b88513d87823e3d90fd5b8651631f05e71b60e31b81528490fd5b855163e3dfb17f60e01b81528390fd5b600080fd5b50503462000254578160031936011262000254576020906006549051908152f35b90503462000429578160031936011262000429576001600160a01b039060243590803590838316830362000b6c5783865462000bd260ff821615620024a4565b60081c16330362000cba5762000be7620024da565b6006548652600f6020528584868220541691823b15620002545786516340c10f1960e01b81526001600160a01b0386169181019182526020820185905292839182908490829060400103925af1801562000cb05762000c98575b5083519081526001600160a01b03919091166020808301919091529383917ff02b701fc10bff0958891c152c9eeabe4286e300c7ec9a0b08f64456ad941f7990604090a16006548152600f85522054169051908152f35b62000ca48691620017bc565b62000365573862000c41565b85513d88823e3d90fd5b845163e3dfb17f60e01b8152fd5b90503462000429576020908160031936011262000afa57803560018060a01b0392600183828683541688519283809263c34c08e560e01b82525afa8015620015095786918991620014c8575b50163303620014b85786856002541687516370a0823160e01b815230878201528481602481855afa9081156200143157839162001481575b508851638e15f47360e01b81528986828a8188885af180156200147757879286916200143b575b5062000d8a9062000d848a6200188b565b620018d3565b93838510156200131a5789549151636d40d7d760e11b8152808b01868152928c166001600160a01b0316602084015294959394938492839190829060400103925af190811562001310578591620012e1575b505062000d8462000df262000df8938362001869565b6200188b565b6006548852600f8352858789205416885260118352868820555b62000e1c62002127565b15620012d95762000e4262000e31846200188b565b62000e3b62002127565b90620018d3565b905b87868654167f00000000000000000000000000000000000000000000000000000000000000009360065491803b1562000afa5760a48985889381958f51978896879563c773a2d160e01b875286015260248501528c604485015260648401523060848401525af180156200121157620012c1575b50506006548852600f8352878688822054168760035416818352601186528983205491813b1562000afa578a5163c65323f160e01b8152808a018781526001600160a01b03909216602083015260408201939093528391839182908490829060600103925af180156200121157620012a5575b505085600354169562000f4060065462002597565b8060065562000f4f84620025c4565b9162000f5b82620025c4565b8a518094665052492d4c502d60c81b8983015262000f83815180928b6027860191016200180a565b8101602d60f81b60278201528d80916005549162000fa1836200177f565b928a81169081156200127c575060011462001238575b5050509062000ff09282612d4760f01b6002945262000fdf825180938d87850191016200180a565b0103601d19810186520184620017e7565b8951610acf8082019082821067ffffffffffffffff8311176200122557916200102a898f95949383946200275c8539818152018762001842565b039083f080156200121b57838352600f88528b832080546001600160a01b031916929091169182179055808252601187528a8220549099803b1562000429578b5160016224184f60e11b03198152998a018781526001600160a01b038c16602082015260408101929092528b99918391839182908490829060600103925af180156200121157620011f0575b5088905260108552868a209360ff1994848682541617905587519460a086528b94600554620010e5816200177f565b928360a08a01528282169182600014620011be57505060011462001171575b5050849384937fd2f6618ba448f8b76ee0e823f8bb8c568b748f1687e1bc6bd625306fc4fb50359a936200115893896000805160206200322b8339815191529901528a860152848203606086015262001842565b9060808301520390a1600654908351928352820152a151f35b60058d52878d209295508c925b828410620011a657505050840160c00192806000805160206200322b83398151915262001104565b805488850160c001528c9a509288019281016200117e565b1660c0808a019190915292151560051b880190920195508291506000805160206200322b833981519152905062001104565b620011fe91929850620017bc565b6200120d5787958938620010b6565b8880fd5b89513d84823e3d90fd5b8b513d84823e3d90fd5b634e487b7160e01b8e5260418b5260248efd5b90919250600581528a898183205b858410620012605750505050016028018260028f62000fb7565b8054858501602801528a965092909101918c918b910162001246565b60ff19166028848101919091528415159094029092019092019250849150600290508f62000fb7565b620012b090620017bc565b620012bd57873862000f2b565b8780fd5b620012cc90620017bc565b620012bd57873862000eb8565b869062000e44565b813d831162001308575b620012f78183620017e7565b8101031262000b6c57833862000ddc565b503d620012eb565b89513d8c823e3d90fd5b9051636d40d7d760e11b81528981019384523060208501529093509182908190604001038186865af190811562001431578391620013f6575b5062001360908662001869565b87875416823b1562000afa57895163329b1a9360e21b81528089019283526001600160a01b03909116602083015291839183919082908490829060400103925af18015620013ec57620013d0575b50506006548752600f8252848688205416875260118252868681205562000e12565b620013db90620017bc565b620013e8578638620013ae565b8680fd5b88513d84823e3d90fd5b809350858092503d831162001429575b620014128183620017e7565b8101031262000b6c57620013608992519062001353565b503d62001406565b89513d85823e3d90fd5b9550505083813d83116200146f575b620014568183620017e7565b8101031262000b6c57848962000d8a8c95519062000d73565b503d6200144a565b81513d87823e3d90fd5b809350858092503d8311620014b0575b6200149d8183620017e7565b8101031262000b6c578891513862000d4c565b503d62001491565b8551633f77a45b60e01b81528490fd5b809250848092503d831162001501575b620014e48183620017e7565b81010312620012bd57518581168103620012bd5785903862000d14565b503d620014d8565b87513d8a823e3d90fd5b905034620004295760203660031901126200042957358252600f6020908152918190205490516001600160a01b039091168152f35b83915034620002545760031960803682011262000429578254604435928035926200157760ff841615620024a4565b6001600160a01b039260081c83163303620017325762001596620024da565b62015180420493620015a885620019d8565b509088915b888310620016e95750505050620015c9606435602435620018d3565b92620015d586620026d8565b95620015ec620015e582620026d8565b96620019d8565b509089915b838310620016a757505050506003541693843b15620013e857869492620016796200166997959387938b51998a988997889663341922c160e01b88527f000000000000000000000000000000000000000000000000000000000000000090880152602487015260806044870152608486019062002725565b9184830301606485015262002725565b03925af180156200169d576200168e57509051f35b6200169990620017bc565b9051f35b83513d84823e3d90fd5b81620016b4848c62002710565b5280620016c2848b62002710565b52600180910192600c8411620016db575b0191620015f1565b9250809101908092620016d3565b818a526020600b81528b8b2090828c52528a8a206200170a858254620018f4565b9055600180910192600c841162001724575b0191620015ad565b92508091019080926200171c565b50855163e3dfb17f60e01b8152fd5b600435906001600160a01b038216820362000b6c57565b60043590811515820362000b6c57565b604090600319011262000b6c576004359060243590565b90600182811c92168015620017b1575b60208310146200179b57565b634e487b7160e01b600052602260045260246000fd5b91607f16916200178f565b67ffffffffffffffff8111620017d157604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117620017d157604052565b918091926000905b8282106200182c57501162001825575050565b6000910152565b9150806020918301518186015201829162001812565b906020916200185d815180928185528580860191016200180a565b601f01601f1916010190565b81811062001875570390565b634e487b7160e01b600052601160045260246000fd5b64e8d4a5100090806000190482118115151662001875570290565b6201518090806000190482118115151662001875570290565b806000190482118115151662001875570290565b8115620018de570490565b634e487b7160e01b600052601260045260246000fd5b8119811162001875570190565b6000811280156001600160ff1b038390038413166200187557600160ff1b82900383121662001875570190565b6105b560008083136001600160ff1b03849004831116600116620019805760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166200198057500290565b634e487b7160e01b81526011600452602490fd5b600e600160ff1b0181126001166200187557600d190190565b600082128015600160ff1b840183121662001875576001600160ff1b03830182131662001875570390565b6000916001600160ff1b039162010bd99084811281850381158185131662001dc257600160ff1b93838503928382121662001dae5787908401129162010bd819908162253d8c9301831384151662001d9a5701131662001d8657622649650193600193600491858783048411828913161662001d7357808712600760fd1b881216861662001d735762023ab196878160021b0597878985048211848b13161662001d6057877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce28a12848b12161662001d6057880282811281850360031381151662000660578187036003121662001d60579084600362001adb93010590620019ad565b92818412848403881381151662001d145784860388121662001d0157868401610fa0888286048211858413161662001d2757887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c8312858412161662001d275762001b5c9162164b09910205948262001b54876200192e565b0590620019ad565b828112818503601f1381151662001d2757818703601f121662001d1457601f019680888504605011848a13161662001d1457807ffe666666666666666666666666666666666666666666666666666666666666678912848a12161662001d145761098f9788816050020590828287048b11868413161662001d4d5784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c161662001d3a579060508362001c1993020590620019ad565b98600b82059782870360021382151662001d3a578290036002121662001d275781878604600c11858913161662001d2757817ff5555555555555555555555555555555555555555555555555555555555555568812858912161662001d275762001c8b90600288600c029101620019ad565b986031600160ff1b018112821662001d2757819060301901809504606411848613161662001d14577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb98412838512161662001d0157505062001cfc929162001cf69160640262001901565b62001901565b929190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b89526011600452602489fd5b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b87526011600452602487fd5b9291926107b2811062000b6c57600191617d4b600160ff1b018512831662001875576000918281128015926001600160ff1b03929182840391906112c0838113871662001dae57600160ff1b85900390818112831662001d9a5762001e5d98999a9b62001e709162001e6360049b8c92600c62001e538a62001994565b05908b0162001901565b6200192e565b0590617d4a190162001901565b6002600160ff1b0184128b166200204057600c62001e8e8562001994565b058b7f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa82118c831316166200202d578b7ff55555555555555555555555555555555555555555555555555555555555555682128c831216166200202d5762001efe90600c026001198601620019ad565b61016f8c828a0482118d841316166200201a578c7fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae63183128d841216166200201a5762001f519291600c9102059062001901565b9661132494851316620020075783121662001ff4578792606492600c62001f7c62001f859462001994565b05910162001901565b05809204600311858313161662001d2757847fd5555555555555555555555555555555555555555555555555555555555555568212858312161662001d2757908262001fd6926003020590620019ad565b9262253d8c600160ff1b0184121662001d0157505062253d8b190190565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b895260118852602489fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8b5260118a5260248bfd5b634e487b7160e01b8a526011895260248afd5b906001811480156200211c575b801562002111575b801562002106575b8015620020fb575b8015620020f0575b8015620020e5575b1562002095575050601f90565b600214620020a35750601e90565b60038116159081620020d7575b8115620020c9575b5015620020c457601d90565b601c90565b6101909150061538620020b8565b6064810615159150620020b0565b50600c811462002088565b50600a811462002080565b506008811462002078565b506007811462002070565b506005811462002068565b506003811462002060565b6000806200213a620151804204620019d8565b50919081905b600382106200216357505050506200215f61271091600a5490620018bf565b0490565b909192936200218a908285526020600b8152604090818720908888525285205490620018f4565b93600180910192600c8411620021a6575b019291929062002140565b92508091019080926200219b565b9062093a80620021c76009544262001869565b11156200247f57620021e762000df283620021e162002127565b620018f4565b60025460408051633f14610f60e21b81526004956001600160a01b0394929385169260209290919083818a81885afa9081156200243e5760009162002449575b5062002239929162000e3b91620018f4565b91600654600052600f825284846000205416845183818a816318160ddd60e01b958682525afa9081156200243e5790849160009162002407575b506200227f906200188b565b918987518095819382525afa918215620023fc579088939291600092620023bf575b508291620022af91620018d3565b956001541685519384809263a7e9f1c760e01b82525afa938415620023b557506000936200237b575b505081620022e691620018bf565b9064e8d4a510001990818311620023665762002337906200233064e8d4a510008095017f0000000000000000000000000000000000000000000000000000000000000000620018bf565b94620018bf565b90811162002351576200234e9394500190620018d3565b90565b601185634e487b7160e01b6000525260246000fd5b601186634e487b7160e01b6000525260246000fd5b8181949293943d8311620023ad575b620023968183620017e7565b810103126200048057505190620022e638620022d8565b503d6200238a565b513d6000823e3d90fd5b91909280945082813d8311620023f4575b620023dc8183620017e7565b8101031262000480575051879291620022af620022a1565b503d620023d0565b85513d6000823e3d90fd5b9182813d831162002436575b6200241f8183620017e7565b810103126200048057505183906200227f62002273565b503d62002413565b86513d6000823e3d90fd5b908482813d831162002477575b620024628183620017e7565b81010312620004805750516200223962002227565b503d62002456565b7f00000000000000000000000000000000000000000000000000000000000000009150565b15620024ac57565b60405162461bcd60e51b815260206004820152600660248201526514185d5cd95960d21b6044820152606490fd5b60ff600d541615806200257d575b620024ef57565b6001546001600160a01b0316803b1562000b6c5760008091602460405180948193631528244d60e11b83527f000000000000000000000000000000000000000000000000000000000000000060048401525af1801562002571576200255f575b50600160ff19600d541617600d55565b6200256a90620017bc565b386200254f565b6040513d6000823e3d90fd5b5062093a80620025906009544262001869565b11620024e8565b6000198114620018755760010190565b67ffffffffffffffff8111620017d157601f01601f191660200190565b80156200268f57600081805b620026785750620025e181620025a7565b90620025f16040519283620017e7565b808252601f196200260282620025a7565b013660208401375b80831562002671576001811062001875576000190192600a91828206603081198111620018755785518710156200265b570160f81b6001600160f81b03191660001a908401601f015304916200260a565b634e487b7160e01b600052603260045260246000fd5b5050905090565b9062002686600a9162002597565b910480620025d0565b506040516040810181811067ffffffffffffffff821117620017d15760405260018152600360fc1b602082015290565b67ffffffffffffffff8111620017d15760051b60200190565b90620026e482620026bf565b620026f36040519182620017e7565b828152809262002706601f1991620026bf565b0190602036910137565b80518210156200265b5760209160051b010190565b90815180825260208080930193019160005b82811062002746575050505090565b8351855293810193928101926001016200273756fe6080604052346200038a5762000acf803803806200001d816200038f565b928339810160209182818303126200038a5780516001600160401b03918282116200038a570192601f908382860112156200038a5784518381116200027957601f199562000071828501881684016200038f565b958287528383830101116200038a578183916000905b8282106200037057501162000361575b50506040519460408601868110858211176200027957604052600686526505052492d4c560d41b82870152845184811162000279576000546001968782811c9216801562000356575b858310146200025857818684931162000300575b5084908683116001146200029b576000926200028f575b5050600019600383901b1c191690861b176000555b8551938411620002795784548581811c911680156200026e575b8382101462000258578381116200020d575b5081928411600114620001a95750508192936000926200019d575b5050600019600383901b1c191690821b1790555b600580546001600160a01b031916331790556040516107199081620003b68239f35b01519050388062000167565b6000858152828120918516969193925b878210620001f557505083859610620001db575b505050811b0190556200017b565b015160001960f88460031b161c19169055388080620001cd565b808785968294968601518155019501930190620001b9565b85600052826000208480870160051c8201928588106200024e575b0160051c019086905b828110620002415750506200014c565b6000815501869062000231565b9250819262000228565b634e487b7160e01b600052602260045260246000fd5b90607f16906200013a565b634e487b7160e01b600052604160045260246000fd5b0151905038806200010b565b90848994169160008052866000209260005b88828210620002e95750508411620002cf575b505050811b0160005562000120565b015160001960f88460031b161c19169055388080620002c0565b8385015186558c97909501949384019301620002ad565b90915060008052846000208680850160051c8201928786106200034c575b918a91869594930160051c01915b8281106200033c575050620000f4565b600081558594508a91016200032c565b925081926200031e565b91607f1691620000e0565b60009186010152388162000097565b92809250818401015182828a010152018290849262000087565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002795760405256fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461050357508063095ea7b31461049557806318160ddd1461047657806323b872dd146103b2578063313ce5671461039657806340c10f191461030a57806370a08231146102d257806395d89b41146101ce5780639dc29fac1461015d578063a9059cbb146100e75763dd62ed3e1461009c57600080fd5b346100e357816003193601126100e35760209282916100b9610630565b6100c161064b565b6001600160a01b03918216845291865283832091168252845220549051908152f35b8280fd5b505034610159578060031936011261015957602091610104610630565b82602435913384526003865281842061011e848254610661565b90556001600160a01b0316808452600386529220805482019055825190815233906000805160206106c4833981519152908590a35160018152f35b5080fd5b50503461015957806003193601126101595781610178610630565b6000805160206106c483398151915260206024359260018060a01b03906101a482600554163314610682565b1692838552600382528585206101bb828254610661565b905580600254036002558551908152a351f35b5091903461015957816003193601126101595780519082600180549081811c908083169283156102c8575b60209384841081146102b5578388529081156102995750600114610261575b505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b0390f35b634e487b7160e01b815260418552602490fd5b809293508652828620918387935b8385106102855750505050830101388080610218565b80548886018301529301928490820161026f565b60ff1916878501525050151560051b8401019050388080610218565b634e487b7160e01b895260228a52602489fd5b91607f16916101f9565b5050346101595760203660031901126101595760209181906001600160a01b036102fa610630565b1681526003845220549051908152f35b50346100e357816003193601126100e357610323610630565b600554602435926001600160a01b0392916103419084163314610682565b6002549084198211610383575085926000805160206106c48339815191529285602093016002551693848452600382528584208181540190558551908152a351f35b634e487b7160e01b875260119052602486fd5b5050346101595781600319360112610159576020905160068152f35b509134610473576060366003190112610473576103cd610630565b6000805160206106c48339815191526103e461064b565b6001600160a01b0392831680855260208781528686203387528152868620549097919488936044359389938560018201610450575b50505086885260038552828820610431858254610661565b9055169586815260038452208181540190558551908152a35160018152f35b61045991610661565b90888a528652838920338a52865283892055388085610419565b80fd5b5050346101595781600319360112610159576020906002549051908152f35b50346100e357816003193601126100e3576020926104b1610630565b918360243592839233825287528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b84915083346100e357826003193601126100e357828354600181811c908083169283156105cf575b60209384841081146102b5578388529081156105b3575060011461057b57505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b919250858052828620918387935b83851061059f5750505050830101858080610218565b805488860183015293019284908201610589565b60ff1916878501525050151560051b8401019050858080610218565b91607f169161052b565b919091602080825283519081818401526000945b82861061061a57505080604093941161060d575b601f01601f1916010190565b6000838284010152610601565b85810182015184870160400152948101946105ed565b600435906001600160a01b038216820361064657565b600080fd5b602435906001600160a01b038216820361064657565b81811061066c570390565b634e487b7160e01b600052601160045260246000fd5b1561068957565b60405162461bcd60e51b815260206004820152601260248201527113db9b1e481c1c9a5bdc9a5d1e481c1bdbdb60721b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a62ed31b3d2310f91b2d6c7489894b8fd467f3f1be684c5d1fd6bd17c936458664736f6c634300080f00335bc145acec26384dc09c6269c9e569c69db21ad88cbd81319958b05998b83b5ba26469706673582212203fc4af5d82af1f3697f9af88f71b31ad59b7c8160fc007d7d51d0dc94e159acd64736f6c634300080f00336080604052346200038a5762000acf803803806200001d816200038f565b928339810160209182818303126200038a5780516001600160401b03918282116200038a570192601f908382860112156200038a5784518381116200027957601f199562000071828501881684016200038f565b958287528383830101116200038a578183916000905b8282106200037057501162000361575b50506040519460408601868110858211176200027957604052600686526505052492d4c560d41b82870152845184811162000279576000546001968782811c9216801562000356575b858310146200025857818684931162000300575b5084908683116001146200029b576000926200028f575b5050600019600383901b1c191690861b176000555b8551938411620002795784548581811c911680156200026e575b8382101462000258578381116200020d575b5081928411600114620001a95750508192936000926200019d575b5050600019600383901b1c191690821b1790555b600580546001600160a01b031916331790556040516107199081620003b68239f35b01519050388062000167565b6000858152828120918516969193925b878210620001f557505083859610620001db575b505050811b0190556200017b565b015160001960f88460031b161c19169055388080620001cd565b808785968294968601518155019501930190620001b9565b85600052826000208480870160051c8201928588106200024e575b0160051c019086905b828110620002415750506200014c565b6000815501869062000231565b9250819262000228565b634e487b7160e01b600052602260045260246000fd5b90607f16906200013a565b634e487b7160e01b600052604160045260246000fd5b0151905038806200010b565b90848994169160008052866000209260005b88828210620002e95750508411620002cf575b505050811b0160005562000120565b015160001960f88460031b161c19169055388080620002c0565b8385015186558c97909501949384019301620002ad565b90915060008052846000208680850160051c8201928786106200034c575b918a91869594930160051c01915b8281106200033c575050620000f4565b600081558594508a91016200032c565b925081926200031e565b91607f1691620000e0565b60009186010152388162000097565b92809250818401015182828a010152018290849262000087565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002795760405256fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461050357508063095ea7b31461049557806318160ddd1461047657806323b872dd146103b2578063313ce5671461039657806340c10f191461030a57806370a08231146102d257806395d89b41146101ce5780639dc29fac1461015d578063a9059cbb146100e75763dd62ed3e1461009c57600080fd5b346100e357816003193601126100e35760209282916100b9610630565b6100c161064b565b6001600160a01b03918216845291865283832091168252845220549051908152f35b8280fd5b505034610159578060031936011261015957602091610104610630565b82602435913384526003865281842061011e848254610661565b90556001600160a01b0316808452600386529220805482019055825190815233906000805160206106c4833981519152908590a35160018152f35b5080fd5b50503461015957806003193601126101595781610178610630565b6000805160206106c483398151915260206024359260018060a01b03906101a482600554163314610682565b1692838552600382528585206101bb828254610661565b905580600254036002558551908152a351f35b5091903461015957816003193601126101595780519082600180549081811c908083169283156102c8575b60209384841081146102b5578388529081156102995750600114610261575b505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b0390f35b634e487b7160e01b815260418552602490fd5b809293508652828620918387935b8385106102855750505050830101388080610218565b80548886018301529301928490820161026f565b60ff1916878501525050151560051b8401019050388080610218565b634e487b7160e01b895260228a52602489fd5b91607f16916101f9565b5050346101595760203660031901126101595760209181906001600160a01b036102fa610630565b1681526003845220549051908152f35b50346100e357816003193601126100e357610323610630565b600554602435926001600160a01b0392916103419084163314610682565b6002549084198211610383575085926000805160206106c48339815191529285602093016002551693848452600382528584208181540190558551908152a351f35b634e487b7160e01b875260119052602486fd5b5050346101595781600319360112610159576020905160068152f35b509134610473576060366003190112610473576103cd610630565b6000805160206106c48339815191526103e461064b565b6001600160a01b0392831680855260208781528686203387528152868620549097919488936044359389938560018201610450575b50505086885260038552828820610431858254610661565b9055169586815260038452208181540190558551908152a35160018152f35b61045991610661565b90888a528652838920338a52865283892055388085610419565b80fd5b5050346101595781600319360112610159576020906002549051908152f35b50346100e357816003193601126100e3576020926104b1610630565b918360243592839233825287528181209460018060a01b0316948582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b84915083346100e357826003193601126100e357828354600181811c908083169283156105cf575b60209384841081146102b5578388529081156105b3575060011461057b57505050829003601f01601f191682019267ffffffffffffffff84118385101761024e575082918261024a9252826105d9565b919250858052828620918387935b83851061059f5750505050830101858080610218565b805488860183015293019284908201610589565b60ff1916878501525050151560051b8401019050858080610218565b91607f169161052b565b919091602080825283519081818401526000945b82861061061a57505080604093941161060d575b601f01601f1916010190565b6000838284010152610601565b85810182015184870160400152948101946105ed565b600435906001600160a01b038216820361064657565b600080fd5b602435906001600160a01b038216820361064657565b81811061066c570390565b634e487b7160e01b600052601160045260246000fd5b1561068957565b60405162461bcd60e51b815260206004820152601260248201527113db9b1e481c1c9a5bdc9a5d1e481c1bdbdb60721b6044820152606490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a62ed31b3d2310f91b2d6c7489894b8fd467f3f1be684c5d1fd6bd17c936458664736f6c634300080f0033036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0a264697066735822122054db2ddeb762481c8e241a48b124e424bd77da510d17f624f0a7111429b62d2864736f6c634300080f0033",
  "devdoc": {
    "author": "Eric Lee (ylikp.ust@gmail.com)",
    "kind": "dev",
    "methods": {
      "deployPool(string,address,uint256,uint256)": {
        "params": {
          "_basePremiumRatio": "Initial policy price per shield",
          "_maxCapacity": "Maximum capacity of the pool",
          "_name": "Name of the protocol",
          "_protocolToken": "Address of the token used for the protocol"
        },
        "returns": {
          "_0": "address Address of the new insurance pool"
        }
      },
      "getPoolAddressList()": {
        "returns": {
          "_0": "List of pool addresses"
        }
      },
      "getPoolInfo(uint256)": {
        "params": {
          "_poolId": "Pool id"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDynamicPool(uint256)": {
        "params": {
          "_poolId": "Pool id"
        }
      }
    },
    "title": "Insurance Pool Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployPool(string,address,uint256,uint256)": {
        "notice": "Create a new priority pool         Called by executor when an onboard proposal has passed"
      },
      "getPoolAddressList()": {
        "notice": "Get the pool address list"
      },
      "getPoolInfo(uint256)": {
        "notice": "Get the pool information by pool id"
      },
      "updateDynamicPool(uint256)": {
        "notice": "Update a priority pool status to dynamic         Only sent from priority pool         \"Dynamic\" means:                  The priority pool will be counted in the dynamic premium formula"
      }
    },
    "notice": "This is the factory contract for deploying new insurance pools         Each pool represents a project that has joined Degis Protocol Protection         Liquidity providers of Protection Pool can stake their LP tokens into priority pools         Benefit:             - Share the 45% part of the premium income (in native token form)         Risk:             - Will be liquidated first to pay for the claim amount",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21498,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18698,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "executor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18700,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "policyCenter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 18702,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "protectionPool",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18704,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "incidentReport",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 18706,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "premiumRewardPool",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 18708,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "weightedFarmingPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18710,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "payoutPool",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 18172,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "pools",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)18167_storage)"
      },
      {
        "astId": 18176,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "poolAddressToId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18178,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "poolCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 18180,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "totalMaxCapacity",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 18184,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "dynamic",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18186,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "dynamicPoolCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 18190,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "poolRegistered",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18194,
        "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
        "label": "tokenRegistered",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)18167_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PriorityPoolFactory.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)18167_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PoolInfo)18167_storage": {
        "encoding": "inplace",
        "label": "struct PriorityPoolFactory.PoolInfo",
        "members": [
          {
            "astId": 18158,
            "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
            "label": "protocolName",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 18160,
            "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
            "label": "poolAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18162,
            "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
            "label": "protocolToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18164,
            "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
            "label": "maxCapacity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18166,
            "contract": "src/pools/priorityPool/PriorityPoolFactory.sol:PriorityPoolFactory",
            "label": "basePremiumRatio",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}