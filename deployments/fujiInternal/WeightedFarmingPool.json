{
  "address": "0x82da431B7279524E3632d7E997e96059A05935af",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__AlreadySupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__InexistentPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__NoPendingRewards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__NotInPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__OnlyPolicyCenter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__WrongDateLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__WrongWeightLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WeightedFarmingPool__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "NewTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "PoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "WeightChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "depositFromPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolArrays",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserLPAmount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "policyCenter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priorityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyCenter",
          "type": "address"
        }
      ],
      "name": "setPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priorityPoolFactory",
          "type": "address"
        }
      ],
      "name": "setPriorityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "setWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "supported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newSpeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_years",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_months",
          "type": "uint256[]"
        }
      ],
      "name": "updateRewardSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newWeight",
          "type": "uint256"
        }
      ],
      "name": "updateWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "withdrawFromPolicyCenter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ab89650e149d02bd3403b8d4e1f4fb8eff240c7d924628894fd7b5ac9074ed0",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x82da431B7279524E3632d7E997e96059A05935af",
    "transactionIndex": 4,
    "gasUsed": "1917323",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa576b7f981be35974d1ebd8cbbcec00400fc7a4aebabb2253768ddc588fdd772",
    "transactionHash": "0x6ab89650e149d02bd3403b8d4e1f4fb8eff240c7d924628894fd7b5ac9074ed0",
    "logs": [],
    "blockNumber": 13214635,
    "cumulativeGasUsed": "4534441",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x77921b0ace205b30C97B63542a2CE50C03BA771b",
    "0xfe6590039dA26b82C016c745cFcd80Ebf8360Efd"
  ],
  "numDeployments": 4,
  "solcInputHash": "014ec466cdfeca04e202ae583a8afb99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__AlreadySupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__InexistentPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__NoPendingRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__NotInPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__OnlyPolicyCenter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__WrongDateLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__WrongWeightLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WeightedFarmingPool__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"NewTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"WeightChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"depositFromPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolArrays\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserLPAmount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyCenter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priorityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyCenter\",\"type\":\"address\"}],\"name\":\"setPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priorityPoolFactory\",\"type\":\"address\"}],\"name\":\"setPriorityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"supported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_years\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_months\",\"type\":\"uint256[]\"}],\"name\":\"updateRewardSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newWeight\",\"type\":\"uint256\"}],\"name\":\"updateWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdrawFromPolicyCenter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPool(address)\":{\"params\":{\"_rewardToken\":\"Reward token address (protocol native token)\"}},\"addToken(uint256,address,uint256)\":{\"params\":{\"_id\":\"Pool Id\",\"_token\":\"Priority pool lp token address\",\"_weight\":\"Weight of the token in the pool\"}},\"pendingReward(uint256,address)\":{\"params\":{\"_id\":\"Pool id\",\"_user\":\"User's address to claim the reward\"}},\"setWeight(uint256,uint256[])\":{\"params\":{\"_id\":\"Pool Id\",\"_weights\":\"Array of weights of the tokens in the pool\"}},\"updateWeight(uint256,address,uint256)\":{\"params\":{\"_id\":\"Pool Id\",\"_newWeight\":\"New weight of the token in the pool\",\"_token\":\"Token address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPool(address)\":{\"notice\":\"Register a new famring pool for priority pool\"},\"addToken(uint256,address,uint256)\":{\"notice\":\"Register Pri-LP token\"},\"deposit(uint256,address,uint256,address)\":{\"notice\":\"Directly deposit (need approval)\"},\"depositFromPolicyCenter(uint256,address,uint256,address)\":{\"notice\":\"Deposit from Policy Center         No need for approval\"},\"pendingReward(uint256,address)\":{\"notice\":\"Return the user's pending reward\"},\"setWeight(uint256,uint256[])\":{\"notice\":\"Sets the weight for a given array of tokens in a given pool\"},\"updateWeight(uint256,address,uint256)\":{\"notice\":\"Updates the weight of a token in a given pool\"}},\"notice\":\"Weighted Farming Pool         Weighted farming pool support multiple tokens to earn the same reward         Different tokens will have different weights when calculating rewards         Native token premiums will be transferred to this pool         The distribution is in the way of \\\"farming\\\" but with multiple tokens         Different generations of PRI-LP-1-JOE-G1\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/reward/WeightedFarmingPool.sol\":\"WeightedFarmingPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363632343437383531343736\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9720545d8ea1f76222f98683f861f919e9c28bd5d5503caa7e3620a21b6aaa24\",\"license\":\"MIT\"},\"src/interfaces/IPriorityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\ninterface IPriorityPoolFactory {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event PoolCreated(\\n        address poolAddress,\\n        uint256 poolId,\\n        string protocolName,\\n        address protocolToken,\\n        uint256 maxCapacity,\\n        uint256 policyPricePerShield\\n    );\\n\\n    struct PoolInfo {\\n        string a;\\n        address b;\\n        address c;\\n        uint256 d;\\n        uint256 e;\\n    }\\n\\n    function deg() external view returns (address);\\n\\n    function deployPool(\\n        string memory _name,\\n        address _protocolToken,\\n        uint256 _maxCapacity,\\n        uint256 _policyPricePerToken\\n    ) external returns (address);\\n\\n    function executor() external view returns (address);\\n\\n    function getPoolAddressList() external view returns (address[] memory);\\n\\n    function getPoolInfo(uint256 _id) external view returns (PoolInfo memory);\\n\\n    function incidentReport() external view returns (address);\\n\\n    function priorityPoolFactory() external view returns (address);\\n\\n    function maxCapacity() external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function policyCenter() external view returns (address);\\n\\n    function poolCounter() external view returns (uint256);\\n\\n    function poolInfoById(uint256)\\n        external\\n        view\\n        returns (\\n            string memory protocolName,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 policyPricePerShield\\n        );\\n\\n    function poolRegistered(address) external view returns (bool);\\n\\n    function protectionPool() external view returns (address);\\n\\n    function setProtectionPool(address _protectionPool) external;\\n\\n    function updateMaxCapacity(bool _isUp, uint256 _maxCapacity) external;\\n\\n    function shield() external view returns (address);\\n\\n    function tokenRegistered(address) external view returns (bool);\\n\\n    function totalMaxCapacity() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function veDeg() external view returns (address);\\n\\n    function updateDynamicPool(uint256 _poolId) external;\\n\\n    function dynamicPoolCounter() external view returns (uint256);\\n\\n    function dynamic(address _pool) external view returns (bool);\\n\\n    function pools(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            address poolAddress,\\n            address protocolToken,\\n            uint256 maxCapacity,\\n            uint256 basePremiumRatio\\n        );\\n\\n    function payoutPool() external view returns (address);\\n\\n    function pausePriorityPool(uint256 _poolId, bool _paused) external;\\n}\\n\",\"keccak256\":\"0x8c988f1fbeea64eede1c093a62bb6523f0f3e35a5d1807fc1909060cad38928f\",\"license\":\"GPL-3.0-or-later\"},\"src/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    /**\\n     * @notice Get the expiry timestamp based on cover duration\\n     *\\n     * @param _now           Current timestamp\\n     * @param _coverDuration Months to cover: 1-3\\n     */\\n    function _getExpiry(uint256 _now, uint256 _coverDuration)\\n        internal\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the day of the month\\n        (, , uint256 day) = timestampToDate(_now);\\n\\n        // Cover duration of 1 month means current month\\n        // unless today is the 25th calendar day or later\\n        uint256 monthsToAdd = _coverDuration - 1;\\n\\n        // TODO: whether need this auto-extending feature\\n        if (day >= 25) {\\n            // Add one month\\n            monthsToAdd += 1;\\n        }\\n\\n        return _getFutureMonthEndTime(_now, monthsToAdd);\\n    }\\n\\n    /**\\n     * @notice Get the end timestamp of a future month\\n     *\\n     * @param _timestamp   Current timestamp\\n     * @param _monthsToAdd Months to be added\\n     *\\n     * @return endTimestamp End timestamp of a future month\\n     */\\n    function _getFutureMonthEndTime(uint256 _timestamp, uint256 _monthsToAdd)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        uint256 futureTimestamp = addMonths(_timestamp, _monthsToAdd);\\n\\n        return _getMonthEndTimestamp(futureTimestamp);\\n    }\\n\\n    /**\\n     * @notice Get the last second of a month\\n     *\\n     * @param _timestamp Timestamp to be calculated\\n     *\\n     * @return endTimestamp End timestamp of the month\\n     */\\n    function _getMonthEndTimestamp(uint256 _timestamp)\\n        private\\n        pure\\n        returns (\\n            uint256 endTimestamp,\\n            uint256 year,\\n            uint256 month\\n        )\\n    {\\n        // Get the year and month from the date\\n        (year, month, ) = timestampToDate(_timestamp);\\n\\n        // Count the total number of days of that month and year\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n\\n        // Get the month end timestamp\\n        endTimestamp = timestampFromDateTime(\\n            year,\\n            month,\\n            daysInMonth,\\n            23,\\n            59,\\n            59\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe5c932e445075f63725ef3285f167b23799701b9302d980a6d8ce17d8338d66b\",\"license\":\"MIT\"},\"src/reward/WeightedFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/DateTime.sol\\\";\\nimport \\\"../interfaces/IPriorityPoolFactory.sol\\\";\\n\\nimport \\\"lib/forge-std/src/console.sol\\\";\\n\\n/**\\n * @notice Weighted Farming Pool\\n *\\n *         Weighted farming pool support multiple tokens to earn the same reward\\n *         Different tokens will have different weights when calculating rewards\\n *\\n *\\n *         Native token premiums will be transferred to this pool\\n *         The distribution is in the way of \\\"farming\\\" but with multiple tokens\\n *\\n *         Different generations of PRI-LP-1-JOE-G1\\n */\\ncontract WeightedFarmingPool {\\n    using DateTimeLibrary for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant SCALE = 1e12;\\n\\n    address public policyCenter;\\n\\n    address public priorityPoolFactory;\\n\\n    uint256 public counter;\\n\\n    struct PoolInfo {\\n        address[] tokens;\\n        uint256[] amount;\\n        uint256[] weight;\\n        uint256 shares;\\n        address rewardToken;\\n        uint256 lastRewardTimestamp;\\n        uint256 accRewardPerShare;\\n    }\\n    mapping(uint256 => PoolInfo) public pools;\\n\\n    // pool id => year => month => daily amount\\n    mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) speed;\\n\\n    struct UserInfo {\\n        uint256[] amount;\\n        uint256 share;\\n        uint256 rewardDebt;\\n    }\\n    // Pool Id => User address => User Info\\n    mapping(uint256 => mapping(address => UserInfo)) public users;\\n\\n    // Keccak256(poolId, token) => Whether supported\\n    // Ensure one token not be added for multiple times\\n    mapping(bytes32 => bool) public supported;\\n\\n    event PoolAdded(uint256 poolId, address token);\\n    event NewTokenAdded(uint256 poolId, address token, uint256 weight);\\n    event PoolUpdated(uint256 poolId, uint256 accRewardPerShare);\\n    event WeightChanged(uint256 poolId);\\n    event Harvest(\\n        uint256 poolId,\\n        address user,\\n        address receiver,\\n        uint256 reward\\n    );\\n\\n    error WeightedFarmingPool__AlreadySupported();\\n    error WeightedFarmingPool__WrongWeightLength();\\n    error WeightedFarmingPool__WrongDateLength();\\n    error WeightedFarmingPool__ZeroAmount();\\n    error WeightedFarmingPool__InexistentPool();\\n    error WeightedFarmingPool__OnlyPolicyCenter();\\n    error WeightedFarmingPool__NoPendingRewards();\\n    error WeightedFarmingPool__NotInPool();\\n\\n    constructor(address _policyCenter, address _priorityPoolFactory) {\\n        policyCenter = _policyCenter;\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    modifier isPriorityPool() {\\n        require(\\n            IPriorityPoolFactory(priorityPoolFactory).poolRegistered(\\n                msg.sender\\n            ),\\n            \\\"Only Priority Pool\\\"\\n        );\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // @audit Add view functions for user lp amount\\n    function getUserLPAmount(uint256 _poolId, address _user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return users[_poolId][_user].amount;\\n    }\\n\\n    function getPoolArrays(uint256 _poolId)\\n        external\\n        view\\n        returns (\\n            address[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        PoolInfo storage pool = pools[_poolId];\\n        return (pool.tokens, pool.amount, pool.weight);\\n    }\\n\\n    // TODO: add owner or remove this\\n    function setPolicyCenter(address _policyCenter) public {\\n        policyCenter = _policyCenter;\\n    }\\n\\n    // TODO: add owner or remove this\\n    function setPriorityPoolFactory(address _priorityPoolFactory) external {\\n        priorityPoolFactory = _priorityPoolFactory;\\n    }\\n\\n    /**\\n     * @notice Return the user's pending reward\\n     * @param _id           Pool id\\n     * @param _user         User's address to claim the reward\\n     */\\n    function pendingReward(uint256 _id, address _user)\\n        external\\n        view\\n        returns (uint256 pending)\\n    {\\n        PoolInfo memory pool = pools[_id];\\n        UserInfo memory user = users[_id][_user];\\n\\n        pending =\\n            (user.share * pool.accRewardPerShare) /\\n            SCALE -\\n            user.rewardDebt;\\n    }\\n\\n    /**\\n     * @notice Register a new famring pool for priority pool\\n     *\\n     * @param _rewardToken Reward token address (protocol native token)\\n     */\\n    function addPool(address _rewardToken) external {\\n        uint256 currentId = ++counter;\\n\\n        PoolInfo storage pool = pools[currentId];\\n        pool.rewardToken = _rewardToken;\\n\\n        emit PoolAdded(currentId, _rewardToken);\\n    }\\n\\n    /**\\n     * @notice Register Pri-LP token\\n     *\\n     * @param _id     Pool Id\\n     * @param _token  Priority pool lp token address\\n     * @param _weight Weight of the token in the pool\\n     */\\n    function addToken(\\n        uint256 _id,\\n        address _token,\\n        uint256 _weight\\n    ) public isPriorityPool {\\n        bytes32 key = keccak256(abi.encodePacked(_id, _token));\\n        if (supported[key]) revert WeightedFarmingPool__AlreadySupported();\\n\\n        // Record as supported\\n        supported[key] = true;\\n\\n        pools[_id].tokens.push(_token);\\n        pools[_id].weight.push(_weight);\\n\\n        emit NewTokenAdded(_id, _token, _weight);\\n    }\\n\\n    /**\\n     * @notice Updates the weight of a token in a given pool\\n     * @param _id            Pool Id\\n     * @param _token         Token address\\n     * @param _newWeight     New weight of the token in the pool\\n     */\\n    function updateWeight(\\n        uint256 _id,\\n        address _token,\\n        uint256 _newWeight\\n    ) external {\\n        updatePool(_id);\\n\\n        uint256 index = _getIndex(_id, _token);\\n\\n        pools[_id].weight[index] = _newWeight;\\n    }\\n\\n    /**\\n     * @notice Sets the weight for a given array of tokens in a given pool\\n     * @param _id            Pool Id\\n     * @param _weights       Array of weights of the tokens in the pool\\n     */\\n    function setWeight(uint256 _id, uint256[] calldata _weights) external {\\n        PoolInfo storage pool = pools[_id];\\n\\n        uint256 weightLength = _weights.length;\\n\\n        if (weightLength != pool.weight.length)\\n            revert WeightedFarmingPool__WrongWeightLength();\\n\\n        for (uint256 i; i < weightLength; ) {\\n            pool.weight[i] = _weights[i];\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit WeightChanged(_id);\\n    }\\n\\n    function updateRewardSpeed(\\n        uint256 _id,\\n        uint256 _newSpeed,\\n        uint256[] memory _years,\\n        uint256[] memory _months\\n    ) external {\\n        if (_years.length != _months.length)\\n            revert WeightedFarmingPool__WrongDateLength();\\n\\n        uint256 length = _years.length;\\n        for (uint256 i; i < length; ) {\\n            speed[_id][_years[i]][_months[i]] += _newSpeed;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit from Policy Center\\n     *         No need for approval\\n     */\\n    function depositFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external {\\n        if (msg.sender != policyCenter)\\n            revert WeightedFarmingPool__OnlyPolicyCenter();\\n\\n        _deposit(_id, _token, _amount, _user);\\n    }\\n\\n    /**\\n     * @notice Directly deposit (need approval)\\n     */\\n    function deposit(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external {\\n        _deposit(_id, _token, _amount, _user);\\n\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function withdrawFromPolicyCenter(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) external {\\n        if (msg.sender != policyCenter)\\n            revert WeightedFarmingPool__OnlyPolicyCenter();\\n\\n        _withdraw(_id, _token, _amount, _user);\\n    }\\n\\n    function withdraw(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount\\n    ) external {\\n        _withdraw(_id, _token, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Deposit PRI-LP tokens\\n     *\\n     * @param _id     Farming pool id\\n     * @param _token  PRI-LP token address\\n     * @param _amount PRI-LP token amount\\n     * @param _user   Real user address\\n     */\\n    function _deposit(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        if (_amount == 0) revert WeightedFarmingPool__ZeroAmount();\\n        if (_id > counter) revert WeightedFarmingPool__InexistentPool();\\n\\n        updatePool(_id);\\n\\n        PoolInfo storage pool = pools[_id];\\n        UserInfo storage user = users[_id][_user];\\n\\n        if (user.share > 0) {\\n            uint256 pending = (user.share * pool.accRewardPerShare) /\\n                SCALE -\\n                user.rewardDebt;\\n\\n            uint256 actualReward = _safeRewardTransfer(\\n                pool.rewardToken,\\n                _user,\\n                pending\\n            );\\n\\n            emit Harvest(_id, _user, _user, actualReward);\\n        }\\n\\n        uint256 index = _getIndex(_id, _token);\\n\\n        // check if current index exists for user\\n        if (user.amount.length == 0) {\\n            user.amount.push(index);\\n        }\\n\\n        // Update user amount for this gen lp token\\n        user.amount[index] += _amount;\\n        user.share += _amount * pool.weight[index];\\n\\n        // Update pool amount for this gen lp token\\n        pool.amount[index] += _amount;\\n\\n        user.rewardDebt = (user.share * pool.accRewardPerShare) / SCALE;\\n    }\\n\\n    function _withdraw(\\n        uint256 _id,\\n        address _token,\\n        uint256 _amount,\\n        address _user\\n    ) internal {\\n        if (_amount == 0) revert WeightedFarmingPool__ZeroAmount();\\n        if (_id > counter) revert WeightedFarmingPool__InexistentPool();\\n        updatePool(_id);\\n\\n        PoolInfo storage pool = pools[_id];\\n        UserInfo storage user = users[_id][_user];\\n\\n        if (user.share > 0) {\\n            uint256 pending = (user.share * pool.accRewardPerShare) /\\n                SCALE -\\n                user.rewardDebt;\\n\\n            uint256 actualReward = _safeRewardTransfer(\\n                pool.rewardToken,\\n                _user,\\n                pending\\n            );\\n\\n            emit Harvest(_id, _user, _user, actualReward);\\n        }\\n\\n        IERC20(_token).transfer(_user, _amount);\\n\\n        uint256 index = _getIndex(_id, _token);\\n\\n        user.amount[index] -= _amount;\\n        user.share -= _amount * pool.weight[index];\\n\\n        user.rewardDebt = (user.share * pool.accRewardPerShare) / SCALE;\\n    }\\n\\n    function updatePool(uint256 _id) public {\\n        PoolInfo storage pool = pools[_id];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n\\n        if (pool.shares > 0) {\\n            uint256 newReward = _updateReward(_id);\\n\\n            pool.accRewardPerShare += newReward / pool.shares;\\n\\n            pool.lastRewardTimestamp = block.timestamp;\\n\\n            emit PoolUpdated(_id, pool.accRewardPerShare);\\n        } else {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n    }\\n\\n    function harvest(uint256 _id, address _to) external {\\n        updatePool(_id);\\n\\n        PoolInfo storage pool = pools[_id];\\n        UserInfo storage user = users[_id][msg.sender];\\n\\n        uint256 pending = (user.share * pool.accRewardPerShare) /\\n            SCALE -\\n            user.rewardDebt;\\n\\n        if (pending <= 0) revert WeightedFarmingPool__NoPendingRewards();\\n\\n        uint256 actualReward = _safeRewardTransfer(\\n            pool.rewardToken,\\n            _to,\\n            pending\\n        );\\n\\n        emit Harvest(_id, msg.sender, _to, actualReward);\\n\\n        user.rewardDebt = (user.share * pool.accRewardPerShare) / SCALE;\\n    }\\n\\n    /**\\n     * @notice Update reward for a pool\\n     *\\n     * @param _id Pool id\\n     */\\n    function _updateReward(uint256 _id) internal returns (uint256 totalReward) {\\n        PoolInfo storage pool = pools[_id];\\n\\n        uint256 currentTime = block.timestamp;\\n        uint256 lastRewardTime = pool.lastRewardTimestamp;\\n\\n        (uint256 lastY, uint256 lastM, uint256 lastD) = lastRewardTime\\n            .timestampToDate();\\n\\n        (uint256 currentY, uint256 currentM, ) = currentTime.timestampToDate();\\n\\n        uint256 monthPassed = currentM - lastM;\\n\\n        // In the same month, use current month speed\\n        if (monthPassed == 0) {\\n            totalReward +=\\n                (currentTime - lastRewardTime) *\\n                speed[_id][currentY][currentM];\\n        }\\n        // Across months, use different months' speed\\n        else {\\n            for (uint256 i; i < monthPassed + 1; ) {\\n                // First month reward\\n                if (i == 0) {\\n                    // End timestamp of the first month\\n                    uint256 endTimestamp = DateTimeLibrary\\n                        .timestampFromDateTime(lastY, lastM, lastD, 23, 59, 59);\\n                    totalReward +=\\n                        (endTimestamp - lastRewardTime) *\\n                        speed[_id][lastY][lastM];\\n                }\\n                // Last month reward\\n                else if (i == monthPassed) {\\n                    uint256 startTimestamp = DateTimeLibrary\\n                        .timestampFromDateTime(lastY, lastM, 1, 0, 0, 0);\\n\\n                    totalReward +=\\n                        (currentTime - startTimestamp) *\\n                        speed[_id][lastY][lastM];\\n                }\\n                // Middle month reward\\n                else {\\n                    uint256 daysInMonth = DateTimeLibrary._getDaysInMonth(\\n                        lastY,\\n                        lastM\\n                    );\\n\\n                    totalReward +=\\n                        (DateTimeLibrary.SECONDS_PER_DAY * daysInMonth) *\\n                        speed[_id][lastY][lastM];\\n                }\\n\\n                unchecked {\\n                    if (++lastM > 12) {\\n                        ++lastY;\\n                        lastM = 1;\\n                    }\\n\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Update reward speed\\n     *\\n     * @param _id       Pool id\\n     * @param _months   Cover length in months\\n     * @param _newSpeed New speed to be added\\n     */\\n    function _updateRewardSpeed(\\n        uint256 _id,\\n        uint256 _months,\\n        uint256 _newSpeed\\n    ) internal {\\n        (uint256 currentY, uint256 currentM, ) = block\\n            .timestamp\\n            .timestampToDate();\\n\\n        for (uint256 i; i < _months; ) {\\n            speed[_id][currentY][currentM] += _newSpeed;\\n\\n            unchecked {\\n                if (++currentM > 12) {\\n                    ++currentY;\\n                    currentM = 1;\\n                }\\n\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely transfers reward to a user address\\n     * @param _token         Reward token address\\n     * @param _to         \\tAddress to send reward to\\n     * @param _amount      \\tAmount to send\\n     */\\n    function _safeRewardTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal returns (uint256 actualAmount) {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n\\n        // @audit remove this check\\n        // require(balance > 0, \\\"Zero balance\\\");\\n\\n        if (_amount > balance) {\\n            actualAmount = balance;\\n        } else {\\n            actualAmount = _amount;\\n        }\\n\\n        IERC20(_token).safeTransfer(_to, actualAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the index of Cover Right token given a pool id and crtoken address\\n     * @param _id            Pool id\\n     * @param _token         Address of Cover Right token\\n     */\\n    function _getIndex(uint256 _id, address _token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        address[] memory allTokens = pools[_id].tokens;\\n        uint256 length = allTokens.length;\\n        console.log(length);\\n        console.log(allTokens[0]);\\n\\n        for (uint256 i = 0; i <= length; ) {\\n            if (allTokens[i] == _token) return i;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        revert WeightedFarmingPool__NotInPool();\\n    }\\n}\\n\",\"keccak256\":\"0x3bbec74a3ff00b41f16bf6d97651975afbb2b579d49ec744370958ffe7f4d0d0\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x6080346200009657601f6200219c38819003918201601f19168301916001600160401b038311848410176200009b57808492604094855283398101031262000096576200005a60206200005283620000b1565b9201620000b1565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556040516120d59081620000c78239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000965756fe6040608081526004908136101561001557600080fd5b600091823560e01c806318fccc7614610acf5780632dd57bb014610a98578063341922c1146109d85780633593aa921461093057806351eb05a6146109145780635a1635e4146108e057806361bc221a146108c15780636f8a6e43146108985780637193f2f01461086c57806398969e8214610730578063a4b5909414610645578063ac4afa38146105f2578063ad35e1dc146105bb578063b425f92614610577578063b9d02df41461052a578063c65323f1146104d2578063cd88af6e1461044d578063d914cd4b146103af578063e63697c814610391578063e8adbf2f14610369578063eced552614610345578063fee0833e146102ea5763ffb7cf621461011e57600080fd5b346102e65761012c36610d02565b919260018060a01b0380600154169186518093633a31bb7760e11b8252338383015281602460209687935afa9081156102dc5789916102af575b501561027757865183810190878252838616956bffffffffffffffffffffffff199060601b16898201526034815261019d81610bde565b5190208089526006845260ff888a20541661026857885260068352868820805460ff1916600117905585885260038352868820805491600160401b83101561025557509184610219837fd7856221235dd5b0aca9663e69d6d13572bcc04b1bb87358b1ef62a23cc09e6a999795600160609a9896018155610e39565b909283549160031b90811b9283911b1691191617905583885260038152610245836002898b2001610e67565b865193845283015284820152a151f35b634e487b7160e01b8a5260419052602489fd5b50865163bf1f752f60e01b8152fd5b865162461bcd60e51b8152908101839052601260248201527113db9b1e48141c9a5bdc9a5d1e48141bdbdb60721b6044820152606490fd5b6102cf9150843d86116102d5575b6102c78183610c0f565b810190610e21565b38610166565b503d6102bd565b88513d8b823e3d90fd5b8280fd5b50346102e657816003193601126102e657816103419361032e9261030c610bad565b90358252600560209081528383206001600160a01b0390921683525220610d2c565b9051918291602083526020830190610c96565b0390f35b5050346103655781600319360112610365576020905164e8d4a510008152f35b5080fd5b505034610365578160031936011261036557905490516001600160a01b039091168152602090f35b505034610365576103ac6103a436610d02565b903392611082565b51f35b50346102e65760203660031901126102e6576103c9610bc8565b600254600019811461043a5760010160028190558085526003602090815284862090930180546001600160a01b0319166001600160a01b0390931692831790558351908152918201527f1f1f6396247a5ba59b7b1e094ec3a8e439d4dace0c5ac4fe3ecfde3e68e03a8a908290a151f35b634e487b7160e01b855260118352602485fd5b50346102e657602061047191606461046436610cca565b9082819694989398610ed2565b86865195869485936323b872dd60e01b85523390850152306024850152604484015260018060a01b03165af180156104c6576104ab575051f35b6104c29060203d81116102d5576102c78183610c0f565b5051f35b505051903d90823e3d90fd5b505034610365576103ac6104fc61050f6104eb36610d02565b93906104f683611224565b82611f95565b9086526003602052600285872001610e39565b90919082549060031b600019811b9283911b16911916179055565b50346102e657816003193601126102e657918192610546610bad565b9035825260056020528282209060018060a01b03168252602052206002600182015491015482519182526020820152f35b509190346103655761058836610cca565b85549093919291906001600160a01b031633036105ab576103ac94959650610ed2565b8451636f2b51a560e11b81528790fd5b505034610365576020366003190112610365576001600160a01b036105de610bc8565b1660018060a01b0319600154161760015551f35b5090346102e65760203660031901126102e657806080938335815260036020522060038101549260018060a01b039082015416916006600583015492015492815194855260208501528301526060820152f35b50346102e657816003193601126102e6578035906001600160401b03906024803583811161072c573660238201121561072c578083013593841161072c57600592368386861b84010111610728578588526003602052600287892001908154860361071a5750875b8581106106e35788887f61378e0f43f3c62e317cdbe9d6bf50295ceba5fb596196f5c109302ee750b4a760208a8351908152a151f35b806107146106f360019385610e39565b87848a1b880101359082549060031b600019811b9283911b16911916179055565b016106ad565b87516312fee3c960e31b8152fd5b8780fd5b8680fd5b50346102e657816003193601126102e65780359261074c610bad565b848252602094600386528483209185519260e08401926001600160401b03938581108582111761085957885261078182610d7d565b855261078f60018301610d2c565b8986015261079f60028301610d2c565b888601526003820154606086015260c0600660018060a01b0393848a820154166080890152600581015460a0890152015495019485528552600588528685209116845286528483209285519460608601928684109084111761084657505061083f939264e8d4a510009261083692875261081882610d2c565b8552866002600184015493848b890152015495019485525190610e03565b04905190610e16565b9051908152f35b634e487b7160e01b825260419052602490fd5b634e487b7160e01b875260418852602487fd5b50346102e65760203660031901126102e6578160209360ff923581526006855220541690519015158152f35b50503461036557816003193601126103655760015490516001600160a01b039091168152602090f35b5050346103655781600319360112610365576020906002549051908152f35b50919034610365576108f136610cca565b85549093919291906001600160a01b031633036105ab576103ac94959650611082565b50346102e65760203660031901126102e6576103ac9035611224565b5091903461036557602092836003193601126102e65735825260038352808220929161095b84610d7d565b600193610975600261096e878901610d2c565b9701610d2c565b928451956060870160608852845180915283608089019501925b8181106109bc575087850384890152878061034189896109af8a8f610c96565b9184830390850152610c96565b83516001600160a01b031686529484019492840192820161098f565b50346102e65760803660031901126102e657803590602435906001600160401b039060443582811161072c57610a119036908301610c30565b9160643590811161072c57610a299036908301610c30565b918051835103610a8957805194875b868110610a4457888851f35b600190828a526020858152898b20610a5c8387610e8a565b518c528152898b2090610a6f8389610e8a565b518c5252888a20610a81888254610e9e565b905501610a38565b508451634bbeeee160e01b8152fd5b505034610365576020366003190112610365576001600160a01b03610abb610bc8565b83546001600160a01b031916911617825551f35b50346102e657816003193601126102e657610b39813591610aee610bad565b90610af884611224565b8386526003602052848620916005602052858720338852602052858720946001860192835494610b456002600683019764e8d4a51000998a918a5490610e03565b04990198895490610e16565b918215610b9f570154610b999594936000805160206120808339815191529390929091610b8d91610b809185906001600160a01b0316611cd9565b8a51938493339085610eaa565b0390a154905490610e03565b04905551f35b8951638ec63eab60e01b8152fd5b602435906001600160a01b0382168203610bc357565b600080fd5b600435906001600160a01b0382168203610bc357565b606081019081106001600160401b03821117610bf957604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b03821117610bf957604052565b9080601f83011215610bc3578135906001600160401b038211610bf9578160051b60405193602093610c6485840187610c0f565b85528380860192820101928311610bc3578301905b828210610c87575050505090565b81358152908301908301610c79565b90815180825260208080930193019160005b828110610cb6575050505090565b835185529381019392810192600101610ca8565b6080906003190112610bc357600435906001600160a01b036024358181168103610bc35791604435916064359081168103610bc35790565b6060906003190112610bc357600435906024356001600160a01b0381168103610bc3579060443590565b9060405191828154918282526020928383019160005283600020936000905b828210610d6357505050610d6192500383610c0f565b565b855484526001958601958895509381019390910190610d4b565b9060405191828154918282526020928383019160005283600020936000905b828210610db257505050610d6192500383610c0f565b85546001600160a01b031684526001958601958895509381019390910190610d9c565b62015180908060001904821181151516610ded570290565b634e487b7160e01b600052601160045260246000fd5b8060001904821181151516610ded570290565b818110610ded570390565b90816020910312610bc357518015158103610bc35790565b8054821015610e515760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80549190600160401b831015610bf9578261050f916001610d6195018155610e39565b8051821015610e515760209160051b010190565b81198111610ded570190565b9081526001600160a01b03918216602082015291166040820152606081019190915260800190565b909192831561107057600254821161105e57610eed82611224565b81600052600360205260406000206005602052604060002091600160a01b600190039283821660005260205260406000209586600181019184835483811515610f70610f6260029d64e8d4a510009d610fe39d60069c610fd99b610f809a610fca9a610f9999610ff8575b5050505050611f95565b8381945415610fe957610e39565b610f808783548360031b1c610e9e565b9082549060031b600019811b9283911b16911916179055565b610fbf610fb8610fab838e8c01610e39565b90549060031b1c86610e03565b8754610e9e565b865560018801610e39565b91909283548360031b1c610e9e565b5491015490610e03565b04910155565b610ff38282610e67565b610e39565b60029464e8d4a51000600661103f956000805160206120808339815191529860049361102c8a97611036958a015490610e03565b0491015490610e16565b93015416611cd9565b90611051604051928284938785610eaa565b0390a13880878f82610f58565b604051631eccb30960e31b8152600490fd5b604051633a8410f160e01b8152600490fd5b9190811561107057600254831161105e5761109c83611224565b826000526003602052604092611110846000209460056020528060002060018060a01b038816600052602052602085826000209860018a01548a8a826111c6575b5050845163a9059cbb60e01b81526001600160a01b03909216600483015250602481019190915292839081906044820190565b038160006001600160a01b0389165af19081156111bc575061118464e8d4a5100095611177611152610fe39760029a9760069761118e9761119d575b50611f95565b61116f61115f828d610e39565b610f808683548360031b1c610e16565b898701610e39565b90549060031b1c90610e03565b6001880154610e16565b91826001880155015490610e03565b6111b59060203d6020116102d5576102c78183610c0f565b503861114c565b513d6000823e3d90fd5b6111f661121992600264e8d4a5100061102c60008051602061208083398151915297600661120b97015490610e03565b60048d015485906001600160a01b0316611cd9565b865191829185808c85610eaa565b0390a1388a8a6110dd565b80600052600360205260406000209060058201544211156116865760038201541561167d576000600560406000200154611279611260826118f1565b90939190849061126f426118f1565b5095909686610e16565b806113385750505050916112c3916112956112c9959442610e16565b9186600052600460205260406000209060005260205260406000209060005260205260406000205490610e03565b90610e9e565b905b6003830154918215611322578361130c60409460067f7fa9647ec1cc14e3822b46d05a2b9d4e019bde8875c0088c46b6503d71bf1722970193048354610e9e565b80925560054291015582519182526020820152a1565b634e487b7160e01b600052601260045260246000fd5b9297955092959350976000935b6001198311610ded576001830185101561166f57846114b5576107b28810610bc357617d4b600160ff1b018412600116610ded5761142361141e6114198a60046114128f61140c6064918c6113ba6114066114006113d26113a58b6116ff565b948a6113c66113c1600c98896113ba8c61168a565b059061175d565b611788565b0590617d4a190161175d565b846113ba6113fb6113e2896116a2565b6113f5846113ef8c61168a565b056117ec565b906116d6565b611851565b9861172e565b9261168a565b056118a1565b05906116d6565b6116ba565b610dd5565b62014370198111610ded57610dd41962014370820111610ded57603b1962015144820111610ded576001916112c36114638a6201517f6114919501610e16565b89600052600460205260406000208c6000526020528d60406000209060005260205260406000205490610e03565b995b0193600c85116114a8575b6001019398611345565b600197880197945061149e565b848303611546576107b28810610bc35760046114dc6113c18c600c6113ba6114068e6116ff565b05617d4a600160ff1b018112600116610ded576001916112c361146361153a61141e8f8e6004611412606461140c85600c6113ba6114066115409f611400908461152e6113fb6113e26114199f6116a2565b0590617d49190161175d565b42610e16565b99611493565b60018a148015611665575b801561165b575b8015611651575b8015611647575b801561163d575b8015611633575b156115e157601f5b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab8111600116610ded576001916112c36115409289600052600460205260406000208c6000526020528d604060002090600052602052604060002054906201518002610e03565b60028a146115f057601e61157c565b600388161580611627575b801561161b575b156116125760ff601d5b1661157c565b60ff601c61160c565b50610190880615611602565b506064880615156115fb565b50600c8a14611574565b50600a8a1461156d565b5060088a14611566565b5060078a1461155f565b5060058a14611558565b5060038a14611551565b9650975050505090506112cb565b50600542910155565b5050565b600e600160ff1b018112600116610ded57600d190190565b6002600160ff1b018112600116610ded576001190190565b62253d8c600160ff1b018112600116610ded5762253d8b190190565b600082128015600160ff1b8401831216610ded576001600160ff1b038301821316610ded570390565b6112c0906000811280156001600160ff1b03839003841316610ded57600160ff1b829003831216610ded570190565b611324906000811280156001600160ff1b03839003841316610ded57600160ff1b829003831216610ded570190565b6000811280156001600160ff1b03839003841316610ded57600160ff1b829003831216610ded570190565b6105b560008083136001600160ff1b038490048311166001166117d85760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166117d857500290565b634e487b7160e01b81526011600452602490fd5b600060017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa831182841316166117d85760017ff555555555555555555555555555555555555555555555555555555555555556831282841216166117d85750600c0290565b61016f60008083136001600160ff1b038490048311166001166117d85760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631841282851216166117d857500290565b60008082136001600160ff1b03839004600311166001166117d85760017fd555555555555555555555555555555555555555555555555555555555555556831282841216166117d8575060030290565b6001600160ff1b039060009062010bd990620151809004828112818503811581851316611cc557600160ff1b938385039283821216611cb15785908401129162010bd819908162253d8c93018313841516611c9d57011316611c89576226496501916001936004918585830484118287131616611c7657808512600760fd1b8612168616611c765762023ab194858160021b05958787850482118489131616611c5057877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce288128489121616611c50578602828112818503600313811516611c635781870360031216611c5057908460036119ee930105906116d6565b928184128484038813811516611c0457848603881216611bf157868401610fa08882860482118584131616611c1757887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616611c1757611a609162164b09910205948261141287611788565b828112818503601f13811516611c1757818703601f1216611c0457601f019680888504605011848a131616611c0457807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616611c045761098f9788816050020590828287048b118684131616611c3d5784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616611c2a5790605083611b15930205906116d6565b98600b820597828703600213821516611c2a5782900360021216611c175781878604600c118589131616611c1757817ff55555555555555555555555555555555555555555555555555555555555555688128589121616611c1757611b8190600288600c0291016116d6565b966031600160ff1b0181128216611c17578190603019018095046064118486131616611c04577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616611bf1575050611beb9291611be69160640261175d565b61175d565b91909192565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b604080516370a0823160e01b81523060048201526001600160a01b03909216949360209391929084826024818a5afa918215611eaa57600092611e78575b5081811115611e705750945b825163a9059cbb60e01b8582019081526001600160a01b039390931660248201526044808201889052815290601f1990611d5e606484610c0f565b8451928584016001600160401b039585821087831117610bf957600092839289528987527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648a880152519082855af1903d15611e62573d948511610bf957611de194611dd388885195601f8401160185610c0f565b83523d60008885013e611eb5565b80519081611df0575b50505050565b8380611e00938301019101610e21565b15611e0c578080611dea565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b611de1945060609250611eb5565b905094611d23565b90918582813d8311611ea3575b611e8f8183610c0f565b81010312611ea05750519038611d17565b80fd5b503d611e85565b84513d6000823e3d90fd5b91929015611f175750815115611ec9575090565b3b15611ed25790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611f2a5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251928360248401526000915b848310611f7c575050918060449311611f6f575b601f01601f19168101030190fd5b6000838284010152611f61565b8183018101518684016044015285935091820191611f4d565b9060009182526003602052611fac60408320610d7d565b91825192604051918080602085019463f5b1bba960e01b865287602482015260248152611fd881610bde565b516a636f6e736f6c652e6c6f6795865afa5081511561206b57808060018060a01b039485602086015116604051602081019163161765e160e11b835260248201526024815261202681610bde565b51915afa505b8481111561204657604051633411aee560e01b8152600490fd5b826120518284610e8a565b5116838516146120635760010161202c565b935050505090565b634e487b7160e01b81526032600452602490fdfe1ec92956b13869de207e232e60c65e35826c5e12b7fdc6d70b083b5a4fd26703a26469706673582212200ce23c6460b8eb89c617e82c5e36ff84ceab75f77f395a495a0808cc82b13d7264736f6c634300080f0033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c806318fccc7614610acf5780632dd57bb014610a98578063341922c1146109d85780633593aa921461093057806351eb05a6146109145780635a1635e4146108e057806361bc221a146108c15780636f8a6e43146108985780637193f2f01461086c57806398969e8214610730578063a4b5909414610645578063ac4afa38146105f2578063ad35e1dc146105bb578063b425f92614610577578063b9d02df41461052a578063c65323f1146104d2578063cd88af6e1461044d578063d914cd4b146103af578063e63697c814610391578063e8adbf2f14610369578063eced552614610345578063fee0833e146102ea5763ffb7cf621461011e57600080fd5b346102e65761012c36610d02565b919260018060a01b0380600154169186518093633a31bb7760e11b8252338383015281602460209687935afa9081156102dc5789916102af575b501561027757865183810190878252838616956bffffffffffffffffffffffff199060601b16898201526034815261019d81610bde565b5190208089526006845260ff888a20541661026857885260068352868820805460ff1916600117905585885260038352868820805491600160401b83101561025557509184610219837fd7856221235dd5b0aca9663e69d6d13572bcc04b1bb87358b1ef62a23cc09e6a999795600160609a9896018155610e39565b909283549160031b90811b9283911b1691191617905583885260038152610245836002898b2001610e67565b865193845283015284820152a151f35b634e487b7160e01b8a5260419052602489fd5b50865163bf1f752f60e01b8152fd5b865162461bcd60e51b8152908101839052601260248201527113db9b1e48141c9a5bdc9a5d1e48141bdbdb60721b6044820152606490fd5b6102cf9150843d86116102d5575b6102c78183610c0f565b810190610e21565b38610166565b503d6102bd565b88513d8b823e3d90fd5b8280fd5b50346102e657816003193601126102e657816103419361032e9261030c610bad565b90358252600560209081528383206001600160a01b0390921683525220610d2c565b9051918291602083526020830190610c96565b0390f35b5050346103655781600319360112610365576020905164e8d4a510008152f35b5080fd5b505034610365578160031936011261036557905490516001600160a01b039091168152602090f35b505034610365576103ac6103a436610d02565b903392611082565b51f35b50346102e65760203660031901126102e6576103c9610bc8565b600254600019811461043a5760010160028190558085526003602090815284862090930180546001600160a01b0319166001600160a01b0390931692831790558351908152918201527f1f1f6396247a5ba59b7b1e094ec3a8e439d4dace0c5ac4fe3ecfde3e68e03a8a908290a151f35b634e487b7160e01b855260118352602485fd5b50346102e657602061047191606461046436610cca565b9082819694989398610ed2565b86865195869485936323b872dd60e01b85523390850152306024850152604484015260018060a01b03165af180156104c6576104ab575051f35b6104c29060203d81116102d5576102c78183610c0f565b5051f35b505051903d90823e3d90fd5b505034610365576103ac6104fc61050f6104eb36610d02565b93906104f683611224565b82611f95565b9086526003602052600285872001610e39565b90919082549060031b600019811b9283911b16911916179055565b50346102e657816003193601126102e657918192610546610bad565b9035825260056020528282209060018060a01b03168252602052206002600182015491015482519182526020820152f35b509190346103655761058836610cca565b85549093919291906001600160a01b031633036105ab576103ac94959650610ed2565b8451636f2b51a560e11b81528790fd5b505034610365576020366003190112610365576001600160a01b036105de610bc8565b1660018060a01b0319600154161760015551f35b5090346102e65760203660031901126102e657806080938335815260036020522060038101549260018060a01b039082015416916006600583015492015492815194855260208501528301526060820152f35b50346102e657816003193601126102e6578035906001600160401b03906024803583811161072c573660238201121561072c578083013593841161072c57600592368386861b84010111610728578588526003602052600287892001908154860361071a5750875b8581106106e35788887f61378e0f43f3c62e317cdbe9d6bf50295ceba5fb596196f5c109302ee750b4a760208a8351908152a151f35b806107146106f360019385610e39565b87848a1b880101359082549060031b600019811b9283911b16911916179055565b016106ad565b87516312fee3c960e31b8152fd5b8780fd5b8680fd5b50346102e657816003193601126102e65780359261074c610bad565b848252602094600386528483209185519260e08401926001600160401b03938581108582111761085957885261078182610d7d565b855261078f60018301610d2c565b8986015261079f60028301610d2c565b888601526003820154606086015260c0600660018060a01b0393848a820154166080890152600581015460a0890152015495019485528552600588528685209116845286528483209285519460608601928684109084111761084657505061083f939264e8d4a510009261083692875261081882610d2c565b8552866002600184015493848b890152015495019485525190610e03565b04905190610e16565b9051908152f35b634e487b7160e01b825260419052602490fd5b634e487b7160e01b875260418852602487fd5b50346102e65760203660031901126102e6578160209360ff923581526006855220541690519015158152f35b50503461036557816003193601126103655760015490516001600160a01b039091168152602090f35b5050346103655781600319360112610365576020906002549051908152f35b50919034610365576108f136610cca565b85549093919291906001600160a01b031633036105ab576103ac94959650611082565b50346102e65760203660031901126102e6576103ac9035611224565b5091903461036557602092836003193601126102e65735825260038352808220929161095b84610d7d565b600193610975600261096e878901610d2c565b9701610d2c565b928451956060870160608852845180915283608089019501925b8181106109bc575087850384890152878061034189896109af8a8f610c96565b9184830390850152610c96565b83516001600160a01b031686529484019492840192820161098f565b50346102e65760803660031901126102e657803590602435906001600160401b039060443582811161072c57610a119036908301610c30565b9160643590811161072c57610a299036908301610c30565b918051835103610a8957805194875b868110610a4457888851f35b600190828a526020858152898b20610a5c8387610e8a565b518c528152898b2090610a6f8389610e8a565b518c5252888a20610a81888254610e9e565b905501610a38565b508451634bbeeee160e01b8152fd5b505034610365576020366003190112610365576001600160a01b03610abb610bc8565b83546001600160a01b031916911617825551f35b50346102e657816003193601126102e657610b39813591610aee610bad565b90610af884611224565b8386526003602052848620916005602052858720338852602052858720946001860192835494610b456002600683019764e8d4a51000998a918a5490610e03565b04990198895490610e16565b918215610b9f570154610b999594936000805160206120808339815191529390929091610b8d91610b809185906001600160a01b0316611cd9565b8a51938493339085610eaa565b0390a154905490610e03565b04905551f35b8951638ec63eab60e01b8152fd5b602435906001600160a01b0382168203610bc357565b600080fd5b600435906001600160a01b0382168203610bc357565b606081019081106001600160401b03821117610bf957604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b03821117610bf957604052565b9080601f83011215610bc3578135906001600160401b038211610bf9578160051b60405193602093610c6485840187610c0f565b85528380860192820101928311610bc3578301905b828210610c87575050505090565b81358152908301908301610c79565b90815180825260208080930193019160005b828110610cb6575050505090565b835185529381019392810192600101610ca8565b6080906003190112610bc357600435906001600160a01b036024358181168103610bc35791604435916064359081168103610bc35790565b6060906003190112610bc357600435906024356001600160a01b0381168103610bc3579060443590565b9060405191828154918282526020928383019160005283600020936000905b828210610d6357505050610d6192500383610c0f565b565b855484526001958601958895509381019390910190610d4b565b9060405191828154918282526020928383019160005283600020936000905b828210610db257505050610d6192500383610c0f565b85546001600160a01b031684526001958601958895509381019390910190610d9c565b62015180908060001904821181151516610ded570290565b634e487b7160e01b600052601160045260246000fd5b8060001904821181151516610ded570290565b818110610ded570390565b90816020910312610bc357518015158103610bc35790565b8054821015610e515760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b80549190600160401b831015610bf9578261050f916001610d6195018155610e39565b8051821015610e515760209160051b010190565b81198111610ded570190565b9081526001600160a01b03918216602082015291166040820152606081019190915260800190565b909192831561107057600254821161105e57610eed82611224565b81600052600360205260406000206005602052604060002091600160a01b600190039283821660005260205260406000209586600181019184835483811515610f70610f6260029d64e8d4a510009d610fe39d60069c610fd99b610f809a610fca9a610f9999610ff8575b5050505050611f95565b8381945415610fe957610e39565b610f808783548360031b1c610e9e565b9082549060031b600019811b9283911b16911916179055565b610fbf610fb8610fab838e8c01610e39565b90549060031b1c86610e03565b8754610e9e565b865560018801610e39565b91909283548360031b1c610e9e565b5491015490610e03565b04910155565b610ff38282610e67565b610e39565b60029464e8d4a51000600661103f956000805160206120808339815191529860049361102c8a97611036958a015490610e03565b0491015490610e16565b93015416611cd9565b90611051604051928284938785610eaa565b0390a13880878f82610f58565b604051631eccb30960e31b8152600490fd5b604051633a8410f160e01b8152600490fd5b9190811561107057600254831161105e5761109c83611224565b826000526003602052604092611110846000209460056020528060002060018060a01b038816600052602052602085826000209860018a01548a8a826111c6575b5050845163a9059cbb60e01b81526001600160a01b03909216600483015250602481019190915292839081906044820190565b038160006001600160a01b0389165af19081156111bc575061118464e8d4a5100095611177611152610fe39760029a9760069761118e9761119d575b50611f95565b61116f61115f828d610e39565b610f808683548360031b1c610e16565b898701610e39565b90549060031b1c90610e03565b6001880154610e16565b91826001880155015490610e03565b6111b59060203d6020116102d5576102c78183610c0f565b503861114c565b513d6000823e3d90fd5b6111f661121992600264e8d4a5100061102c60008051602061208083398151915297600661120b97015490610e03565b60048d015485906001600160a01b0316611cd9565b865191829185808c85610eaa565b0390a1388a8a6110dd565b80600052600360205260406000209060058201544211156116865760038201541561167d576000600560406000200154611279611260826118f1565b90939190849061126f426118f1565b5095909686610e16565b806113385750505050916112c3916112956112c9959442610e16565b9186600052600460205260406000209060005260205260406000209060005260205260406000205490610e03565b90610e9e565b905b6003830154918215611322578361130c60409460067f7fa9647ec1cc14e3822b46d05a2b9d4e019bde8875c0088c46b6503d71bf1722970193048354610e9e565b80925560054291015582519182526020820152a1565b634e487b7160e01b600052601260045260246000fd5b9297955092959350976000935b6001198311610ded576001830185101561166f57846114b5576107b28810610bc357617d4b600160ff1b018412600116610ded5761142361141e6114198a60046114128f61140c6064918c6113ba6114066114006113d26113a58b6116ff565b948a6113c66113c1600c98896113ba8c61168a565b059061175d565b611788565b0590617d4a190161175d565b846113ba6113fb6113e2896116a2565b6113f5846113ef8c61168a565b056117ec565b906116d6565b611851565b9861172e565b9261168a565b056118a1565b05906116d6565b6116ba565b610dd5565b62014370198111610ded57610dd41962014370820111610ded57603b1962015144820111610ded576001916112c36114638a6201517f6114919501610e16565b89600052600460205260406000208c6000526020528d60406000209060005260205260406000205490610e03565b995b0193600c85116114a8575b6001019398611345565b600197880197945061149e565b848303611546576107b28810610bc35760046114dc6113c18c600c6113ba6114068e6116ff565b05617d4a600160ff1b018112600116610ded576001916112c361146361153a61141e8f8e6004611412606461140c85600c6113ba6114066115409f611400908461152e6113fb6113e26114199f6116a2565b0590617d49190161175d565b42610e16565b99611493565b60018a148015611665575b801561165b575b8015611651575b8015611647575b801561163d575b8015611633575b156115e157601f5b7dc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab8111600116610ded576001916112c36115409289600052600460205260406000208c6000526020528d604060002090600052602052604060002054906201518002610e03565b60028a146115f057601e61157c565b600388161580611627575b801561161b575b156116125760ff601d5b1661157c565b60ff601c61160c565b50610190880615611602565b506064880615156115fb565b50600c8a14611574565b50600a8a1461156d565b5060088a14611566565b5060078a1461155f565b5060058a14611558565b5060038a14611551565b9650975050505090506112cb565b50600542910155565b5050565b600e600160ff1b018112600116610ded57600d190190565b6002600160ff1b018112600116610ded576001190190565b62253d8c600160ff1b018112600116610ded5762253d8b190190565b600082128015600160ff1b8401831216610ded576001600160ff1b038301821316610ded570390565b6112c0906000811280156001600160ff1b03839003841316610ded57600160ff1b829003831216610ded570190565b611324906000811280156001600160ff1b03839003841316610ded57600160ff1b829003831216610ded570190565b6000811280156001600160ff1b03839003841316610ded57600160ff1b829003831216610ded570190565b6105b560008083136001600160ff1b038490048311166001166117d85760017fffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8841282851216166117d857500290565b634e487b7160e01b81526011600452602490fd5b600060017f0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa831182841316166117d85760017ff555555555555555555555555555555555555555555555555555555555555556831282841216166117d85750600c0290565b61016f60008083136001600160ff1b038490048311166001166117d85760017fffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631841282851216166117d857500290565b60008082136001600160ff1b03839004600311166001166117d85760017fd555555555555555555555555555555555555555555555555555555555555556831282841216166117d8575060030290565b6001600160ff1b039060009062010bd990620151809004828112818503811581851316611cc557600160ff1b938385039283821216611cb15785908401129162010bd819908162253d8c93018313841516611c9d57011316611c89576226496501916001936004918585830484118287131616611c7657808512600760fd1b8612168616611c765762023ab194858160021b05958787850482118489131616611c5057877fffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce288128489121616611c50578602828112818503600313811516611c635781870360031216611c5057908460036119ee930105906116d6565b928184128484038813811516611c0457848603881216611bf157868401610fa08882860482118584131616611c1757887ffff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c83128584121616611c1757611a609162164b09910205948261141287611788565b828112818503601f13811516611c1757818703601f1216611c0457601f019680888504605011848a131616611c0457807ffe666666666666666666666666666666666666666666666666666666666666678912848a121616611c045761098f9788816050020590828287048b118684131616611c3d5784821299837ffff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f307026884128c1616611c2a5790605083611b15930205906116d6565b98600b820597828703600213821516611c2a5782900360021216611c175781878604600c118589131616611c1757817ff55555555555555555555555555555555555555555555555555555555555555688128589121616611c1757611b8190600288600c0291016116d6565b966031600160ff1b0181128216611c17578190603019018095046064118486131616611c04577ffeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb984128385121616611bf1575050611beb9291611be69160640261175d565b61175d565b91909192565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b634e487b7160e01b845260118352602484fd5b634e487b7160e01b865260118552602486fd5b634e487b7160e01b855260118452602485fd5b634e487b7160e01b835260118552602483fd5b634e487b7160e01b845260118652602484fd5b634e487b7160e01b815260118352602490fd5b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b604080516370a0823160e01b81523060048201526001600160a01b03909216949360209391929084826024818a5afa918215611eaa57600092611e78575b5081811115611e705750945b825163a9059cbb60e01b8582019081526001600160a01b039390931660248201526044808201889052815290601f1990611d5e606484610c0f565b8451928584016001600160401b039585821087831117610bf957600092839289528987527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648a880152519082855af1903d15611e62573d948511610bf957611de194611dd388885195601f8401160185610c0f565b83523d60008885013e611eb5565b80519081611df0575b50505050565b8380611e00938301019101610e21565b15611e0c578080611dea565b60849250519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b611de1945060609250611eb5565b905094611d23565b90918582813d8311611ea3575b611e8f8183610c0f565b81010312611ea05750519038611d17565b80fd5b503d611e85565b84513d6000823e3d90fd5b91929015611f175750815115611ec9575090565b3b15611ed25790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611f2a5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251928360248401526000915b848310611f7c575050918060449311611f6f575b601f01601f19168101030190fd5b6000838284010152611f61565b8183018101518684016044015285935091820191611f4d565b9060009182526003602052611fac60408320610d7d565b91825192604051918080602085019463f5b1bba960e01b865287602482015260248152611fd881610bde565b516a636f6e736f6c652e6c6f6795865afa5081511561206b57808060018060a01b039485602086015116604051602081019163161765e160e11b835260248201526024815261202681610bde565b51915afa505b8481111561204657604051633411aee560e01b8152600490fd5b826120518284610e8a565b5116838516146120635760010161202c565b935050505090565b634e487b7160e01b81526032600452602490fdfe1ec92956b13869de207e232e60c65e35826c5e12b7fdc6d70b083b5a4fd26703a26469706673582212200ce23c6460b8eb89c617e82c5e36ff84ceab75f77f395a495a0808cc82b13d7264736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPool(address)": {
        "params": {
          "_rewardToken": "Reward token address (protocol native token)"
        }
      },
      "addToken(uint256,address,uint256)": {
        "params": {
          "_id": "Pool Id",
          "_token": "Priority pool lp token address",
          "_weight": "Weight of the token in the pool"
        }
      },
      "pendingReward(uint256,address)": {
        "params": {
          "_id": "Pool id",
          "_user": "User's address to claim the reward"
        }
      },
      "setWeight(uint256,uint256[])": {
        "params": {
          "_id": "Pool Id",
          "_weights": "Array of weights of the tokens in the pool"
        }
      },
      "updateWeight(uint256,address,uint256)": {
        "params": {
          "_id": "Pool Id",
          "_newWeight": "New weight of the token in the pool",
          "_token": "Token address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPool(address)": {
        "notice": "Register a new famring pool for priority pool"
      },
      "addToken(uint256,address,uint256)": {
        "notice": "Register Pri-LP token"
      },
      "deposit(uint256,address,uint256,address)": {
        "notice": "Directly deposit (need approval)"
      },
      "depositFromPolicyCenter(uint256,address,uint256,address)": {
        "notice": "Deposit from Policy Center         No need for approval"
      },
      "pendingReward(uint256,address)": {
        "notice": "Return the user's pending reward"
      },
      "setWeight(uint256,uint256[])": {
        "notice": "Sets the weight for a given array of tokens in a given pool"
      },
      "updateWeight(uint256,address,uint256)": {
        "notice": "Updates the weight of a token in a given pool"
      }
    },
    "notice": "Weighted Farming Pool         Weighted farming pool support multiple tokens to earn the same reward         Different tokens will have different weights when calculating rewards         Native token premiums will be transferred to this pool         The distribution is in the way of \"farming\" but with multiple tokens         Different generations of PRI-LP-1-JOE-G1",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20181,
        "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
        "label": "policyCenter",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20183,
        "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
        "label": "priorityPoolFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 20185,
        "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
        "label": "counter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 20208,
        "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(PoolInfo)20203_storage)"
      },
      {
        "astId": 20216,
        "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
        "label": "speed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 20231,
        "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
        "label": "users",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)20224_storage))"
      },
      {
        "astId": 20235,
        "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
        "label": "supported",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)20224_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct WeightedFarmingPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)20224_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)20224_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct WeightedFarmingPool.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)20224_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(PoolInfo)20203_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WeightedFarmingPool.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)20203_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)20203_storage": {
        "encoding": "inplace",
        "label": "struct WeightedFarmingPool.PoolInfo",
        "members": [
          {
            "astId": 20188,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 20191,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 20194,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "weight",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 20196,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "shares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 20198,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "rewardToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 20200,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 20202,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)20224_storage": {
        "encoding": "inplace",
        "label": "struct WeightedFarmingPool.UserInfo",
        "members": [
          {
            "astId": 20219,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 20221,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "share",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 20223,
            "contract": "src/reward/WeightedFarmingPool.sol:WeightedFarmingPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}